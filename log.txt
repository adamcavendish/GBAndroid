diff jni/SDL/include/begin_code.h ../android-sdl/jni/SDL2/include/begin_code.h
1,140c1,150
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file begin_code.h
<  *
<  *  This file sets things up for C dynamic library function definitions,
<  *  static inlined functions, and structures aligned at 4-byte alignment.
<  *  If you don't like ugly C preprocessor code, don't look at this file. :)
<  */
< 
< /* This shouldn't be nested -- included it around code only. */
< #ifdef _begin_code_h
< #error Nested inclusion of begin_code.h
< #endif
< #define _begin_code_h
< 
< #ifndef SDL_DEPRECATED
< #  if (__GNUC__ >= 4)  /* technically, this arrived in gcc 3.1, but oh well. */
< #    define SDL_DEPRECATED __attribute__((deprecated))
< #  else
< #    define SDL_DEPRECATED
< #  endif
< #endif
< 
< /* Some compilers use a special export keyword */
< #ifndef DECLSPEC
< # if defined(__WIN32__)
< #  ifdef __BORLANDC__
< #   ifdef BUILD_SDL
< #    define DECLSPEC
< #   else
< #    define DECLSPEC    __declspec(dllimport)
< #   endif
< #  else
< #   define DECLSPEC __declspec(dllexport)
< #  endif
< # else
< #  if defined(__GNUC__) && __GNUC__ >= 4
< #   define DECLSPEC __attribute__ ((visibility("default")))
< #  elif defined(__GNUC__) && __GNUC__ >= 2
< #   define DECLSPEC __declspec(dllexport)
< #  else
< #   define DECLSPEC
< #  endif
< # endif
< #endif
< 
< /* By default SDL uses the C calling convention */
< #ifndef SDLCALL
< #if defined(__WIN32__) && !defined(__GNUC__)
< #define SDLCALL __cdecl
< #else
< #define SDLCALL
< #endif
< #endif /* SDLCALL */
< 
< /* Removed DECLSPEC on Symbian OS because SDL cannot be a DLL in EPOC */
< #ifdef __SYMBIAN32__
< #undef DECLSPEC
< #define DECLSPEC
< #endif /* __SYMBIAN32__ */
< 
< /* Force structure packing at 4 byte alignment.
<    This is necessary if the header is included in code which has structure
<    packing set to an alternate value, say for loading structures from disk.
<    The packing is reset to the previous value in close_code.h
<  */
< #if defined(_MSC_VER) || defined(__MWERKS__) || defined(__BORLANDC__)
< #ifdef _MSC_VER
< #pragma warning(disable: 4103)
< #endif
< #ifdef __BORLANDC__
< #pragma nopackwarning
< #endif
< #ifdef _M_X64
< /* Use 8-byte alignment on 64-bit architectures, so pointers are aligned */
< #pragma pack(push,8)
< #else
< #pragma pack(push,4)
< #endif
< #endif /* Compiler needs structure packing set */
< 
< #ifndef SDL_INLINE
< #if defined(__GNUC__)
< #define SDL_INLINE __inline__
< #elif defined(_MSC_VER) || defined(__BORLANDC__) || \
<       defined(__DMC__) || defined(__SC__) || \
<       defined(__WATCOMC__) || defined(__LCC__) || \
<       defined(__DECC)
< #define SDL_INLINE __inline
< #ifndef __inline__
< #define __inline__ __inline
< #endif
< #else
< #define SDL_INLINE inline
< #ifndef __inline__
< #define __inline__ inline
< #endif
< #endif
< #endif /* SDL_INLINE not defined */
< 
< #ifndef SDL_FORCE_INLINE
< #if defined(_MSC_VER)
< #define SDL_FORCE_INLINE __forceinline
< #elif ( (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__) )
< #define SDL_FORCE_INLINE __attribute__((always_inline)) static __inline__
< #else
< #define SDL_FORCE_INLINE static SDL_INLINE
< #endif
< #endif /* SDL_FORCE_INLINE not defined */
< 
< /* Apparently this is needed by several Windows compilers */
< #if !defined(__MACH__)
< #ifndef NULL
< #ifdef __cplusplus
< #define NULL 0
< #else
< #define NULL ((void *)0)
< #endif
< #endif /* NULL */
< #endif /* ! Mac OS X - breaks precompiled headers */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file begin_code.h
>  *
>  *  This file sets things up for C dynamic library function definitions,
>  *  static inlined functions, and structures aligned at 4-byte alignment.
>  *  If you don't like ugly C preprocessor code, don't look at this file. :)
>  */
> 
> /* This shouldn't be nested -- included it around code only. */
> #ifdef _begin_code_h
> #error Nested inclusion of begin_code.h
> #endif
> #define _begin_code_h
> 
> /* Some compilers use a special export keyword */
> #ifndef DECLSPEC
> # if defined(__BEOS__) || defined(__HAIKU__)
> #  if defined(__GNUC__)
> #   define DECLSPEC __declspec(dllexport)
> #  else
> #   define DECLSPEC __declspec(export)
> #  endif
> # elif defined(__WIN32__)
> #  ifdef __BORLANDC__
> #   ifdef BUILD_SDL
> #    define DECLSPEC
> #   else
> #    define DECLSPEC    __declspec(dllimport)
> #   endif
> #  else
> #   define DECLSPEC __declspec(dllexport)
> #  endif
> # else
> #  if defined(__GNUC__) && __GNUC__ >= 4
> #   define DECLSPEC __attribute__ ((visibility("default")))
> #  else
> #   define DECLSPEC
> #  endif
> # endif
> #endif
> 
> /* By default SDL uses the C calling convention */
> #ifndef SDLCALL
> #if defined(__WIN32__) && !defined(__GNUC__)
> #define SDLCALL __cdecl
> #else
> #define SDLCALL
> #endif
> #endif /* SDLCALL */
> 
> /* Removed DECLSPEC on Symbian OS because SDL cannot be a DLL in EPOC */
> #ifdef __SYMBIAN32__
> #undef DECLSPEC
> #define DECLSPEC
> #endif /* __SYMBIAN32__ */
> 
> /* Force structure packing at 4 byte alignment.
>    This is necessary if the header is included in code which has structure
>    packing set to an alternate value, say for loading structures from disk.
>    The packing is reset to the previous value in close_code.h
>  */
> #if defined(_MSC_VER) || defined(__MWERKS__) || defined(__BORLANDC__)
> #ifdef _MSC_VER
> #pragma warning(disable: 4103)
> #endif
> #ifdef __BORLANDC__
> #pragma nopackwarning
> #endif
> #ifdef _M_X64
> /* Use 8-byte alignment on 64-bit architectures, so pointers are aligned */
> #pragma pack(push,8)
> #else
> #pragma pack(push,4)
> #endif
> #endif /* Compiler needs structure packing set */
> 
> /* Set up compiler-specific options for inlining functions */
> #ifndef SDL_INLINE_OKAY
> #ifdef __GNUC__
> #define SDL_INLINE_OKAY
> #else
> /* Add any special compiler-specific cases here */
> #if defined(_MSC_VER) || defined(__BORLANDC__) || \
>     defined(__DMC__) || defined(__SC__) || \
>     defined(__WATCOMC__) || defined(__LCC__) || \
>     defined(__DECC)
> #ifndef __inline__
> #define __inline__  __inline
> #endif
> #define SDL_INLINE_OKAY
> #else
> #if !defined(__MRC__) && !defined(_SGI_SOURCE)
> #ifndef __inline__
> #define __inline__ inline
> #endif
> #define SDL_INLINE_OKAY
> #endif /* Not a funky compiler */
> #endif /* Visual C++ */
> #endif /* GNU C */
> #endif /* SDL_INLINE_OKAY */
> 
> /* If inlining isn't supported, remove "__inline__", turning static
>    inlined functions into static functions (resulting in code bloat
>    in all files which include the offending header files)
> */
> #ifndef SDL_INLINE_OKAY
> #define __inline__
> #endif
> 
> #ifndef SDL_FORCE_INLINE
> #if defined(_MSC_VER)
> #define SDL_FORCE_INLINE __forceinline
> #elif ( (defined(__GNUC__) && (__GNUC__ >= 4)) || defined(__clang__) )
> #define SDL_FORCE_INLINE __attribute__((always_inline)) static inline
> #else
> #define SDL_FORCE_INLINE static __inline__
> #endif
> #endif
> 
> /* Apparently this is needed by several Windows compilers */
> #if !defined(__MACH__)
> #ifndef NULL
> #ifdef __cplusplus
> #define NULL 0
> #else
> #define NULL ((void *)0)
> #endif
> #endif /* NULL */
> #endif /* ! Mac OS X - breaks precompiled headers */
diff jni/SDL/include/close_code.h ../android-sdl/jni/SDL2/include/close_code.h
1,37c1,37
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file close_code.h
<  *
<  *  This file reverses the effects of begin_code.h and should be included
<  *  after you finish any function and structure declarations in your headers
<  */
< 
< #undef _begin_code_h
< 
< /* Reset structure packing at previous byte alignment */
< #if defined(_MSC_VER) || defined(__MWERKS__) || defined(__WATCOMC__)  || defined(__BORLANDC__)
< #ifdef __BORLANDC__
< #pragma nopackwarning
< #endif
< #pragma pack(pop)
< #endif /* Compiler needs structure packing set */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file close_code.h
>  *
>  *  This file reverses the effects of begin_code.h and should be included
>  *  after you finish any function and structure declarations in your headers
>  */
> 
> #undef _begin_code_h
> 
> /* Reset structure packing at previous byte alignment */
> #if defined(_MSC_VER) || defined(__MWERKS__) || defined(__WATCOMC__)  || defined(__BORLANDC__)
> #ifdef __BORLANDC__
> #pragma nopackwarning
> #endif
> #pragma pack(pop)
> #endif /* Compiler needs structure packing set */
diff jni/SDL/include/doxyfile ../android-sdl/jni/SDL2/include/doxyfile
1,1555c1,1555
< # Doxyfile 1.5.9
< 
< # This file describes the settings to be used by the documentation system
< # doxygen (www.doxygen.org) for a project
< #
< # All text after a hash (#) is considered a comment and will be ignored
< # The format is:
< #       TAG = value [value, ...]
< # For lists items can also be appended using:
< #       TAG += value [value, ...]
< # Values that contain spaces should be placed between quotes (" ")
< 
< #---------------------------------------------------------------------------
< # Project related configuration options
< #---------------------------------------------------------------------------
< 
< # This tag specifies the encoding used for all characters in the config file 
< # that follow. The default is UTF-8 which is also the encoding used for all 
< # text before the first occurrence of this tag. Doxygen uses libiconv (or the 
< # iconv built into libc) for the transcoding. See 
< # http://www.gnu.org/software/libiconv for the list of possible encodings.
< 
< DOXYFILE_ENCODING      = UTF-8
< 
< # The PROJECT_NAME tag is a single word (or a sequence of words surrounded 
< # by quotes) that should identify the project.
< 
< PROJECT_NAME           = SDL
< 
< # The PROJECT_NUMBER tag can be used to enter a project or revision number. 
< # This could be handy for archiving the generated documentation or 
< # if some version control system is used.
< 
< PROJECT_NUMBER         = 2.0.0
< 
< # The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
< # base path where the generated documentation will be put. 
< # If a relative path is entered, it will be relative to the location 
< # where doxygen was started. If left blank the current directory will be used.
< 
< OUTPUT_DIRECTORY       = .
< 
< # If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
< # 4096 sub-directories (in 2 levels) under the output directory of each output 
< # format and will distribute the generated files over these directories. 
< # Enabling this option can be useful when feeding doxygen a huge amount of 
< # source files, where putting all generated files in the same directory would 
< # otherwise cause performance problems for the file system.
< 
< CREATE_SUBDIRS         = YES
< 
< # The OUTPUT_LANGUAGE tag is used to specify the language in which all 
< # documentation generated by doxygen is written. Doxygen will use this 
< # information to generate all constant output in the proper language. 
< # The default language is English, other supported languages are: 
< # Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
< # Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
< # Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
< # messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
< # Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrilic, Slovak, 
< # Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.
< 
< OUTPUT_LANGUAGE        = English
< 
< # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
< # include brief member descriptions after the members that are listed in 
< # the file and class documentation (similar to JavaDoc). 
< # Set to NO to disable this.
< 
< BRIEF_MEMBER_DESC      = YES
< 
< # If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
< # the brief description of a member or function before the detailed description. 
< # Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
< # brief descriptions will be completely suppressed.
< 
< REPEAT_BRIEF           = YES
< 
< # This tag implements a quasi-intelligent brief description abbreviator 
< # that is used to form the text in various listings. Each string 
< # in this list, if found as the leading text of the brief description, will be 
< # stripped from the text and the result after processing the whole list, is 
< # used as the annotated text. Otherwise, the brief description is used as-is. 
< # If left blank, the following values are used ("$name" is automatically 
< # replaced with the name of the entity): "The $name class" "The $name widget" 
< # "The $name file" "is" "provides" "specifies" "contains" 
< # "represents" "a" "an" "the"
< 
< ABBREVIATE_BRIEF       = "The $name class" \
<                          "The $name widget" \
<                          "The $name file" \
<                          is \
<                          provides \
<                          specifies \
<                          contains \
<                          represents \
<                          a \
<                          an \
<                          the
< 
< # If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
< # Doxygen will generate a detailed section even if there is only a brief 
< # description.
< 
< ALWAYS_DETAILED_SEC    = YES
< 
< # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
< # inherited members of a class in the documentation of that class as if those 
< # members were ordinary class members. Constructors, destructors and assignment 
< # operators of the base classes will not be shown.
< 
< INLINE_INHERITED_MEMB  = NO
< 
< # If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
< # path before files name in the file list and in the header files. If set 
< # to NO the shortest path that makes the file name unique will be used.
< 
< FULL_PATH_NAMES        = YES
< 
< # If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
< # can be used to strip a user-defined part of the path. Stripping is 
< # only done if one of the specified strings matches the left-hand part of 
< # the path. The tag can be used to show relative paths in the file list. 
< # If left blank the directory from which doxygen is run is used as the 
< # path to strip.
< 
< STRIP_FROM_PATH        =
< 
< # The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
< # the path mentioned in the documentation of a class, which tells 
< # the reader which header file to include in order to use a class. 
< # If left blank only the name of the header file containing the class 
< # definition is used. Otherwise one should specify the include paths that 
< # are normally passed to the compiler using the -I flag.
< 
< STRIP_FROM_INC_PATH    = 
< 
< # If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
< # (but less readable) file names. This can be useful is your file systems 
< # doesn't support long names like on DOS, Mac, or CD-ROM.
< 
< SHORT_NAMES            = NO
< 
< # If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
< # will interpret the first line (until the first dot) of a JavaDoc-style 
< # comment as the brief description. If set to NO, the JavaDoc 
< # comments will behave just like regular Qt-style comments 
< # (thus requiring an explicit @brief command for a brief description.)
< 
< JAVADOC_AUTOBRIEF      = NO
< 
< # If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
< # interpret the first line (until the first dot) of a Qt-style 
< # comment as the brief description. If set to NO, the comments 
< # will behave just like regular Qt-style comments (thus requiring 
< # an explicit \brief command for a brief description.)
< 
< QT_AUTOBRIEF           = NO
< 
< # The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
< # treat a multi-line C++ special comment block (i.e. a block of //! or /// 
< # comments) as a brief description. This used to be the default behaviour. 
< # The new default is to treat a multi-line C++ comment block as a detailed 
< # description. Set this tag to YES if you prefer the old behaviour instead.
< 
< MULTILINE_CPP_IS_BRIEF = NO
< 
< # If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
< # member inherits the documentation from any documented member that it 
< # re-implements.
< 
< INHERIT_DOCS           = YES
< 
< # If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
< # a new page for each member. If set to NO, the documentation of a member will 
< # be part of the file/class/namespace that contains it.
< 
< SEPARATE_MEMBER_PAGES  = NO
< 
< # The TAB_SIZE tag can be used to set the number of spaces in a tab. 
< # Doxygen uses this value to replace tabs by spaces in code fragments.
< 
< TAB_SIZE               = 8
< 
< # This tag can be used to specify a number of aliases that acts 
< # as commands in the documentation. An alias has the form "name=value". 
< # For example adding "sideeffect=\par Side Effects:\n" will allow you to 
< # put the command \sideeffect (or @sideeffect) in the documentation, which 
< # will result in a user-defined paragraph with heading "Side Effects:". 
< # You can put \n's in the value part of an alias to insert newlines.
< 
< ALIASES                = "defined=\"\def\"" \
<                          "discussion=\"\par Discussion:\n\""
< 
< # Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
< # sources only. Doxygen will then generate output that is more tailored for C. 
< # For instance, some of the names that are used will be different. The list 
< # of all members will be omitted, etc.
< 
< OPTIMIZE_OUTPUT_FOR_C  = YES
< 
< # Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
< # sources only. Doxygen will then generate output that is more tailored for 
< # Java. For instance, namespaces will be presented as packages, qualified 
< # scopes will look different, etc.
< 
< OPTIMIZE_OUTPUT_JAVA   = NO
< 
< # Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
< # sources only. Doxygen will then generate output that is more tailored for 
< # Fortran.
< 
< OPTIMIZE_FOR_FORTRAN   = NO
< 
< # Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
< # sources. Doxygen will then generate output that is tailored for 
< # VHDL.
< 
< OPTIMIZE_OUTPUT_VHDL   = NO
< 
< # Doxygen selects the parser to use depending on the extension of the files it parses. 
< # With this tag you can assign which parser to use for a given extension. 
< # Doxygen has a built-in mapping, but you can override or extend it using this tag. 
< # The format is ext=language, where ext is a file extension, and language is one of 
< # the parsers supported by doxygen: IDL, Java, Javascript, C#, C, C++, D, PHP, 
< # Objective-C, Python, Fortran, VHDL, C, C++. For instance to make doxygen treat 
< # .inc files as Fortran files (default is PHP), and .f files as C (default is Fortran), 
< # use: inc=Fortran f=C. Note that for custom extensions you also need to set
< # FILE_PATTERNS otherwise the files are not read by doxygen.
< 
< EXTENSION_MAPPING      = 
< 
< # If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
< # to include (a tag file for) the STL sources as input, then you should 
< # set this tag to YES in order to let doxygen match functions declarations and 
< # definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
< # func(std::string) {}). This also make the inheritance and collaboration 
< # diagrams that involve STL classes more complete and accurate.
< 
< BUILTIN_STL_SUPPORT    = YES
< 
< # If you use Microsoft's C++/CLI language, you should set this option to YES to 
< # enable parsing support.
< 
< CPP_CLI_SUPPORT        = NO
< 
< # Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
< # Doxygen will parse them like normal C++ but will assume all classes use public 
< # instead of private inheritance when no explicit protection keyword is present.
< 
< SIP_SUPPORT            = NO
< 
< # For Microsoft's IDL there are propget and propput attributes to indicate getter 
< # and setter methods for a property. Setting this option to YES (the default) 
< # will make doxygen to replace the get and set methods by a property in the 
< # documentation. This will only work if the methods are indeed getting or 
< # setting a simple type. If this is not the case, or you want to show the 
< # methods anyway, you should set this option to NO.
< 
< IDL_PROPERTY_SUPPORT   = YES
< 
< # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
< # tag is set to YES, then doxygen will reuse the documentation of the first 
< # member in the group (if any) for the other members of the group. By default 
< # all members of a group must be documented explicitly.
< 
< DISTRIBUTE_GROUP_DOC   = NO
< 
< # Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
< # the same type (for instance a group of public functions) to be put as a 
< # subgroup of that type (e.g. under the Public Functions section). Set it to 
< # NO to prevent subgrouping. Alternatively, this can be done per class using 
< # the \nosubgrouping command.
< 
< SUBGROUPING            = YES
< 
< # When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
< # is documented as struct, union, or enum with the name of the typedef. So 
< # typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
< # with name TypeT. When disabled the typedef will appear as a member of a file, 
< # namespace, or class. And the struct will be named TypeS. This can typically 
< # be useful for C code in case the coding convention dictates that all compound 
< # types are typedef'ed and only the typedef is referenced, never the tag name.
< 
< TYPEDEF_HIDES_STRUCT   = YES
< 
< # The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
< # determine which symbols to keep in memory and which to flush to disk. 
< # When the cache is full, less often used symbols will be written to disk. 
< # For small to medium size projects (<1000 input files) the default value is 
< # probably good enough. For larger projects a too small cache size can cause 
< # doxygen to be busy swapping symbols to and from disk most of the time 
< # causing a significant performance penality. 
< # If the system has enough physical memory increasing the cache will improve the 
< # performance by keeping more symbols in memory. Note that the value works on 
< # a logarithmic scale so increasing the size by one will rougly double the 
< # memory usage. The cache size is given by this formula: 
< # 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
< # corresponding to a cache size of 2^16 = 65536 symbols
< 
< SYMBOL_CACHE_SIZE      = 0
< 
< #---------------------------------------------------------------------------
< # Build related configuration options
< #---------------------------------------------------------------------------
< 
< # If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
< # documentation are documented, even if no documentation was available. 
< # Private class members and static file members will be hidden unless 
< # the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES
< 
< EXTRACT_ALL            = YES
< 
< # If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
< # will be included in the documentation.
< 
< EXTRACT_PRIVATE        = YES
< 
< # If the EXTRACT_STATIC tag is set to YES all static members of a file 
< # will be included in the documentation.
< 
< EXTRACT_STATIC         = YES
< 
< # If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
< # defined locally in source files will be included in the documentation. 
< # If set to NO only classes defined in header files are included.
< 
< EXTRACT_LOCAL_CLASSES  = YES
< 
< # This flag is only useful for Objective-C code. When set to YES local 
< # methods, which are defined in the implementation section but not in 
< # the interface are included in the documentation. 
< # If set to NO (the default) only methods in the interface are included.
< 
< EXTRACT_LOCAL_METHODS  = YES
< 
< # If this flag is set to YES, the members of anonymous namespaces will be 
< # extracted and appear in the documentation as a namespace called 
< # 'anonymous_namespace{file}', where file will be replaced with the base 
< # name of the file that contains the anonymous namespace. By default 
< # anonymous namespace are hidden.
< 
< EXTRACT_ANON_NSPACES   = YES
< 
< # If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
< # undocumented members of documented classes, files or namespaces. 
< # If set to NO (the default) these members will be included in the 
< # various overviews, but no documentation section is generated. 
< # This option has no effect if EXTRACT_ALL is enabled.
< 
< HIDE_UNDOC_MEMBERS     = NO
< 
< # If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
< # undocumented classes that are normally visible in the class hierarchy. 
< # If set to NO (the default) these classes will be included in the various 
< # overviews. This option has no effect if EXTRACT_ALL is enabled.
< 
< HIDE_UNDOC_CLASSES     = NO
< 
< # If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
< # friend (class|struct|union) declarations. 
< # If set to NO (the default) these declarations will be included in the 
< # documentation.
< 
< HIDE_FRIEND_COMPOUNDS  = NO
< 
< # If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
< # documentation blocks found inside the body of a function. 
< # If set to NO (the default) these blocks will be appended to the 
< # function's detailed documentation block.
< 
< HIDE_IN_BODY_DOCS      = NO
< 
< # The INTERNAL_DOCS tag determines if documentation 
< # that is typed after a \internal command is included. If the tag is set 
< # to NO (the default) then the documentation will be excluded. 
< # Set it to YES to include the internal documentation.
< 
< INTERNAL_DOCS          = YES
< 
< # If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
< # file names in lower-case letters. If set to YES upper-case letters are also 
< # allowed. This is useful if you have classes or files whose names only differ 
< # in case and if your file system supports case sensitive file names. Windows 
< # and Mac users are advised to set this option to NO.
< 
< CASE_SENSE_NAMES       = NO
< 
< # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
< # will show members with their full class and namespace scopes in the 
< # documentation. If set to YES the scope will be hidden.
< 
< HIDE_SCOPE_NAMES       = NO
< 
< # If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
< # will put a list of the files that are included by a file in the documentation 
< # of that file.
< 
< SHOW_INCLUDE_FILES     = YES
< 
< # If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
< # is inserted in the documentation for inline members.
< 
< INLINE_INFO            = YES
< 
< # If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
< # will sort the (detailed) documentation of file and class members 
< # alphabetically by member name. If set to NO the members will appear in 
< # declaration order.
< 
< SORT_MEMBER_DOCS       = YES
< 
< # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
< # brief documentation of file, namespace and class members alphabetically 
< # by member name. If set to NO (the default) the members will appear in 
< # declaration order.
< 
< SORT_BRIEF_DOCS        = NO
< 
< # If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
< # hierarchy of group names into alphabetical order. If set to NO (the default) 
< # the group names will appear in their defined order.
< 
< SORT_GROUP_NAMES       = NO
< 
< # If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
< # sorted by fully-qualified names, including namespaces. If set to 
< # NO (the default), the class list will be sorted only by class name, 
< # not including the namespace part. 
< # Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
< # Note: This option applies only to the class list, not to the 
< # alphabetical list.
< 
< SORT_BY_SCOPE_NAME     = NO
< 
< # The GENERATE_TODOLIST tag can be used to enable (YES) or 
< # disable (NO) the todo list. This list is created by putting \todo 
< # commands in the documentation.
< 
< GENERATE_TODOLIST      = YES
< 
< # The GENERATE_TESTLIST tag can be used to enable (YES) or 
< # disable (NO) the test list. This list is created by putting \test 
< # commands in the documentation.
< 
< GENERATE_TESTLIST      = YES
< 
< # The GENERATE_BUGLIST tag can be used to enable (YES) or 
< # disable (NO) the bug list. This list is created by putting \bug 
< # commands in the documentation.
< 
< GENERATE_BUGLIST       = YES
< 
< # The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
< # disable (NO) the deprecated list. This list is created by putting 
< # \deprecated commands in the documentation.
< 
< GENERATE_DEPRECATEDLIST= YES
< 
< # The ENABLED_SECTIONS tag can be used to enable conditional 
< # documentation sections, marked by \if sectionname ... \endif.
< 
< ENABLED_SECTIONS       = 
< 
< # The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
< # the initial value of a variable or define consists of for it to appear in 
< # the documentation. If the initializer consists of more lines than specified 
< # here it will be hidden. Use a value of 0 to hide initializers completely. 
< # The appearance of the initializer of individual variables and defines in the 
< # documentation can be controlled using \showinitializer or \hideinitializer 
< # command in the documentation regardless of this setting.
< 
< MAX_INITIALIZER_LINES  = 30
< 
< # If the sources in your project are distributed over multiple directories 
< # then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
< # in the documentation. The default is NO.
< 
< SHOW_DIRECTORIES       = YES
< 
< # Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
< # This will remove the Files entry from the Quick Index and from the 
< # Folder Tree View (if specified). The default is YES.
< 
< SHOW_FILES             = YES
< 
< # Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
< # Namespaces page.  This will remove the Namespaces entry from the Quick Index 
< # and from the Folder Tree View (if specified). The default is YES.
< 
< SHOW_NAMESPACES        = YES
< 
< # The FILE_VERSION_FILTER tag can be used to specify a program or script that 
< # doxygen should invoke to get the current version for each file (typically from 
< # the version control system). Doxygen will invoke the program by executing (via 
< # popen()) the command <command> <input-file>, where <command> is the value of 
< # the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
< # provided by doxygen. Whatever the program writes to standard output 
< # is used as the file version. See the manual for examples.
< 
< FILE_VERSION_FILTER    = 
< 
< # The LAYOUT_FILE tag can be used to specify a layout file which will be parsed by 
< # doxygen. The layout file controls the global structure of the generated output files 
< # in an output format independent way. The create the layout file that represents 
< # doxygen's defaults, run doxygen with the -l option. You can optionally specify a 
< # file name after the option, if omitted DoxygenLayout.xml will be used as the name 
< # of the layout file.
< 
< LAYOUT_FILE            = 
< 
< #---------------------------------------------------------------------------
< # configuration options related to warning and progress messages
< #---------------------------------------------------------------------------
< 
< # The QUIET tag can be used to turn on/off the messages that are generated 
< # by doxygen. Possible values are YES and NO. If left blank NO is used.
< 
< QUIET                  = NO
< 
< # The WARNINGS tag can be used to turn on/off the warning messages that are 
< # generated by doxygen. Possible values are YES and NO. If left blank 
< # NO is used.
< 
< WARNINGS               = YES
< 
< # If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
< # for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
< # automatically be disabled.
< 
< WARN_IF_UNDOCUMENTED   = YES
< 
< # If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
< # potential errors in the documentation, such as not documenting some 
< # parameters in a documented function, or documenting parameters that 
< # don't exist or using markup commands wrongly.
< 
< WARN_IF_DOC_ERROR      = YES
< 
< # This WARN_NO_PARAMDOC option can be abled to get warnings for 
< # functions that are documented, but have no documentation for their parameters 
< # or return value. If set to NO (the default) doxygen will only warn about 
< # wrong or incomplete parameter documentation, but not about the absence of 
< # documentation.
< 
< WARN_NO_PARAMDOC       = YES
< 
< # The WARN_FORMAT tag determines the format of the warning messages that 
< # doxygen can produce. The string should contain the $file, $line, and $text 
< # tags, which will be replaced by the file and line number from which the 
< # warning originated and the warning text. Optionally the format may contain 
< # $version, which will be replaced by the version of the file (if it could 
< # be obtained via FILE_VERSION_FILTER)
< 
< WARN_FORMAT            = "$file:$line: $text"
< 
< # The WARN_LOGFILE tag can be used to specify a file to which warning 
< # and error messages should be written. If left blank the output is written 
< # to stderr.
< 
< WARN_LOGFILE           = ./doxygen_warn.txt
< 
< #---------------------------------------------------------------------------
< # configuration options related to the input files
< #---------------------------------------------------------------------------
< 
< # The INPUT tag can be used to specify the files and/or directories that contain 
< # documented source files. You may enter file names like "myfile.cpp" or 
< # directories like "/usr/src/myproject". Separate the files or directories 
< # with spaces.
< 
< INPUT                  = .
< 
< # This tag can be used to specify the character encoding of the source files 
< # that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
< # also the default input encoding. Doxygen uses libiconv (or the iconv built 
< # into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
< # the list of possible encodings.
< 
< INPUT_ENCODING         = UTF-8
< 
< # If the value of the INPUT tag contains directories, you can use the 
< # FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
< # and *.h) to filter out the source-files in the directories. If left 
< # blank the following patterns are tested: 
< # *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx 
< # *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90
< 
< FILE_PATTERNS          = *.c \
<                          *.cc \
<                          *.cxx \
<                          *.cpp \
<                          *.c++ \
<                          *.d \
<                          *.java \
<                          *.ii \
<                          *.ixx \
<                          *.ipp \
<                          *.i++ \
<                          *.inl \
<                          *.h \
<                          *.hh \
<                          *.hxx \
<                          *.hpp \
<                          *.h++ \
<                          *.idl \
<                          *.odl \
<                          *.cs \
<                          *.php \
<                          *.php3 \
<                          *.inc \
<                          *.m \
<                          *.mm \
<                          *.dox \
<                          *.py \
<                          *.f90 \
<                          *.f \
<                          *.vhd \
<                          *.vhdl \
<                          *.h.in \
<                          *.h.default
< 
< # The RECURSIVE tag can be used to turn specify whether or not subdirectories 
< # should be searched for input files as well. Possible values are YES and NO. 
< # If left blank NO is used.
< 
< RECURSIVE              = YES
< 
< # The EXCLUDE tag can be used to specify files and/or directories that should 
< # excluded from the INPUT source files. This way you can easily exclude a 
< # subdirectory from a directory tree whose root is specified with the INPUT tag.
< 
< EXCLUDE                = ../doxy \
<                          ../test \
<                          ../Xcode \
<                          ../VisualC \
<                          ../VisualCE \
<                          ../Xcode-iOS
< 
< # The EXCLUDE_SYMLINKS tag can be used select whether or not files or 
< # directories that are symbolic links (a Unix filesystem feature) are excluded 
< # from the input.
< 
< EXCLUDE_SYMLINKS       = NO
< 
< # If the value of the INPUT tag contains directories, you can use the 
< # EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
< # certain files from those directories. Note that the wildcards are matched 
< # against the file with absolute path, so to exclude all test directories 
< # for example use the pattern */test/*
< 
< EXCLUDE_PATTERNS       =
< 
< # The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
< # (namespaces, classes, functions, etc.) that should be excluded from the 
< # output. The symbol name can be a fully qualified name, a word, or if the 
< # wildcard * is used, a substring. Examples: ANamespace, AClass, 
< # AClass::ANamespace, ANamespace::*Test
< 
< EXCLUDE_SYMBOLS        = 
< 
< # The EXAMPLE_PATH tag can be used to specify one or more files or 
< # directories that contain example code fragments that are included (see 
< # the \include command).
< 
< EXAMPLE_PATH           =
< 
< # If the value of the EXAMPLE_PATH tag contains directories, you can use the 
< # EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
< # and *.h) to filter out the source-files in the directories. If left 
< # blank all files are included.
< 
< EXAMPLE_PATTERNS       = *
< 
< # If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
< # searched for input files to be used with the \include or \dontinclude 
< # commands irrespective of the value of the RECURSIVE tag. 
< # Possible values are YES and NO. If left blank NO is used.
< 
< EXAMPLE_RECURSIVE      = YES
< 
< # The IMAGE_PATH tag can be used to specify one or more files or 
< # directories that contain image that are included in the documentation (see 
< # the \image command).
< 
< IMAGE_PATH             = 
< 
< # The INPUT_FILTER tag can be used to specify a program that doxygen should 
< # invoke to filter for each input file. Doxygen will invoke the filter program 
< # by executing (via popen()) the command <filter> <input-file>, where <filter> 
< # is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
< # input file. Doxygen will then use the output that the filter program writes 
< # to standard output.  If FILTER_PATTERNS is specified, this tag will be 
< # ignored.
< 
< INPUT_FILTER           = 
< 
< # The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
< # basis.  Doxygen will compare the file name with each pattern and apply the 
< # filter if there is a match.  The filters are a list of the form: 
< # pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
< # info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER 
< # is applied to all files.
< 
< FILTER_PATTERNS        = 
< 
< # If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
< # INPUT_FILTER) will be used to filter the input files when producing source 
< # files to browse (i.e. when SOURCE_BROWSER is set to YES).
< 
< FILTER_SOURCE_FILES    = NO
< 
< #---------------------------------------------------------------------------
< # configuration options related to source browsing
< #---------------------------------------------------------------------------
< 
< # If the SOURCE_BROWSER tag is set to YES then a list of source files will 
< # be generated. Documented entities will be cross-referenced with these sources. 
< # Note: To get rid of all source code in the generated output, make sure also 
< # VERBATIM_HEADERS is set to NO.
< 
< SOURCE_BROWSER         = YES
< 
< # Setting the INLINE_SOURCES tag to YES will include the body 
< # of functions and classes directly in the documentation.
< 
< INLINE_SOURCES         = YES
< 
< # Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
< # doxygen to hide any special comment blocks from generated source code 
< # fragments. Normal C and C++ comments will always remain visible.
< 
< STRIP_CODE_COMMENTS    = NO
< 
< # If the REFERENCED_BY_RELATION tag is set to YES 
< # then for each documented function all documented 
< # functions referencing it will be listed.
< 
< REFERENCED_BY_RELATION = YES
< 
< # If the REFERENCES_RELATION tag is set to YES 
< # then for each documented function all documented entities 
< # called/used by that function will be listed.
< 
< REFERENCES_RELATION    = YES
< 
< # If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
< # and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
< # functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
< # link to the source code.  Otherwise they will link to the documentation.
< 
< REFERENCES_LINK_SOURCE = YES
< 
< # If the USE_HTAGS tag is set to YES then the references to source code 
< # will point to the HTML generated by the htags(1) tool instead of doxygen 
< # built-in source browser. The htags tool is part of GNU's global source 
< # tagging system (see http://www.gnu.org/software/global/global.html). You 
< # will need version 4.8.6 or higher.
< 
< USE_HTAGS              = NO
< 
< # If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
< # will generate a verbatim copy of the header file for each class for 
< # which an include is specified. Set to NO to disable this.
< 
< VERBATIM_HEADERS       = YES
< 
< #---------------------------------------------------------------------------
< # configuration options related to the alphabetical class index
< #---------------------------------------------------------------------------
< 
< # If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
< # of all compounds will be generated. Enable this if the project 
< # contains a lot of classes, structs, unions or interfaces.
< 
< ALPHABETICAL_INDEX     = YES
< 
< # If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
< # the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
< # in which this list will be split (can be a number in the range [1..20])
< 
< COLS_IN_ALPHA_INDEX    = 5
< 
< # In case all classes in a project start with a common prefix, all 
< # classes will be put under the same header in the alphabetical index. 
< # The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
< # should be ignored while generating the index headers.
< 
< IGNORE_PREFIX          = SDL_ \
<                          SDL
< 
< #---------------------------------------------------------------------------
< # configuration options related to the HTML output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
< # generate HTML output.
< 
< GENERATE_HTML          = YES
< 
< # The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
< # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
< # put in front of it. If left blank `html' will be used as the default path.
< 
< HTML_OUTPUT            = html
< 
< # The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
< # each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
< # doxygen will generate files with .html extension.
< 
< HTML_FILE_EXTENSION    = .html
< 
< # The HTML_HEADER tag can be used to specify a personal HTML header for 
< # each generated HTML page. If it is left blank doxygen will generate a 
< # standard header.
< 
< HTML_HEADER            = 
< 
< # The HTML_FOOTER tag can be used to specify a personal HTML footer for 
< # each generated HTML page. If it is left blank doxygen will generate a 
< # standard footer.
< 
< HTML_FOOTER            = 
< 
< # The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
< # style sheet that is used by each HTML page. It can be used to 
< # fine-tune the look of the HTML output. If the tag is left blank doxygen 
< # will generate a default style sheet. Note that doxygen will try to copy 
< # the style sheet file to the HTML output directory, so don't put your own 
< # stylesheet in the HTML output directory as well, or it will be erased!
< 
< HTML_STYLESHEET        = 
< 
< # If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
< # files or namespaces will be aligned in HTML using tables. If set to 
< # NO a bullet list will be used.
< 
< HTML_ALIGN_MEMBERS     = YES
< 
< # If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
< # documentation will contain sections that can be hidden and shown after the 
< # page has loaded. For this to work a browser that supports 
< # JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
< # Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).
< 
< HTML_DYNAMIC_SECTIONS  = YES
< 
< # If the GENERATE_DOCSET tag is set to YES, additional index files 
< # will be generated that can be used as input for Apple's Xcode 3 
< # integrated development environment, introduced with OSX 10.5 (Leopard). 
< # To create a documentation set, doxygen will generate a Makefile in the 
< # HTML output directory. Running make will produce the docset in that 
< # directory and running "make install" will install the docset in 
< # ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
< # it at startup. 
< # See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html for more information.
< 
< GENERATE_DOCSET        = NO
< 
< # When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
< # feed. A documentation feed provides an umbrella under which multiple 
< # documentation sets from a single provider (such as a company or product suite) 
< # can be grouped.
< 
< DOCSET_FEEDNAME        = "SDL 2.0 Doxygen"
< 
< # When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
< # should uniquely identify the documentation set bundle. This should be a 
< # reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
< # will append .docset to the name.
< 
< DOCSET_BUNDLE_ID       = org.libsdl.sdl20
< 
< # If the GENERATE_HTMLHELP tag is set to YES, additional index files 
< # will be generated that can be used as input for tools like the 
< # Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
< # of the generated HTML documentation.
< 
< GENERATE_HTMLHELP      = NO
< 
< # If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
< # be used to specify the file name of the resulting .chm file. You 
< # can add a path in front of the file if the result should not be 
< # written to the html output directory.
< 
< CHM_FILE               = ./sdl20.chm
< 
< # If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
< # be used to specify the location (absolute path including file name) of 
< # the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
< # the HTML help compiler on the generated index.hhp.
< 
< HHC_LOCATION           = 
< 
< # If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
< # controls if a separate .chi index file is generated (YES) or that 
< # it should be included in the master .chm file (NO).
< 
< GENERATE_CHI           = NO
< 
< # If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
< # is used to encode HtmlHelp index (hhk), content (hhc) and project file 
< # content.
< 
< CHM_INDEX_ENCODING     = 
< 
< # If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
< # controls whether a binary table of contents is generated (YES) or a 
< # normal table of contents (NO) in the .chm file.
< 
< BINARY_TOC             = NO
< 
< # The TOC_EXPAND flag can be set to YES to add extra items for group members 
< # to the contents of the HTML help documentation and to the tree view.
< 
< TOC_EXPAND             = YES
< 
< # If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and QHP_VIRTUAL_FOLDER 
< # are set, an additional index file will be generated that can be used as input for 
< # Qt's qhelpgenerator to generate a Qt Compressed Help (.qch) of the generated 
< # HTML documentation.
< 
< GENERATE_QHP           = NO
< 
< # If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
< # be used to specify the file name of the resulting .qch file. 
< # The path specified is relative to the HTML output folder.
< 
< QCH_FILE               = 
< 
< # The QHP_NAMESPACE tag specifies the namespace to use when generating 
< # Qt Help Project output. For more information please see 
< # http://doc.trolltech.com/qthelpproject.html#namespace
< 
< QHP_NAMESPACE          = 
< 
< # The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
< # Qt Help Project output. For more information please see 
< # http://doc.trolltech.com/qthelpproject.html#virtual-folders
< 
< QHP_VIRTUAL_FOLDER     = doc
< 
< # If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to add. 
< # For more information please see 
< # http://doc.trolltech.com/qthelpproject.html#custom-filters
< 
< QHP_CUST_FILTER_NAME   = 
< 
< # The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the custom filter to add.For more information please see 
< # <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters">Qt Help Project / Custom Filters</a>.
< 
< QHP_CUST_FILTER_ATTRS  = 
< 
< # The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this project's 
< # filter section matches. 
< # <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes">Qt Help Project / Filter Attributes</a>.
< 
< QHP_SECT_FILTER_ATTRS  = 
< 
< # If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
< # be used to specify the location of Qt's qhelpgenerator. 
< # If non-empty doxygen will try to run qhelpgenerator on the generated 
< # .qhp file.
< 
< QHG_LOCATION           = 
< 
< # The DISABLE_INDEX tag can be used to turn on/off the condensed index at 
< # top of each HTML page. The value NO (the default) enables the index and 
< # the value YES disables it.
< 
< DISABLE_INDEX          = NO
< 
< # This tag can be used to set the number of enum values (range [1..20]) 
< # that doxygen will group on one line in the generated HTML documentation.
< 
< ENUM_VALUES_PER_LINE   = 1
< 
< # The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
< # structure should be generated to display hierarchical information. 
< # If the tag value is set to FRAME, a side panel will be generated 
< # containing a tree-like index structure (just like the one that 
< # is generated for HTML Help). For this to work a browser that supports 
< # JavaScript, DHTML, CSS and frames is required (for instance Mozilla 1.0+, 
< # Netscape 6.0+, Internet explorer 5.0+, or Konqueror). Windows users are 
< # probably better off using the HTML help feature. Other possible values 
< # for this tag are: HIERARCHIES, which will generate the Groups, Directories, 
< # and Class Hierarchy pages using a tree view instead of an ordered list; 
< # ALL, which combines the behavior of FRAME and HIERARCHIES; and NONE, which 
< # disables this behavior completely. For backwards compatibility with previous 
< # releases of Doxygen, the values YES and NO are equivalent to FRAME and NONE 
< # respectively.
< 
< GENERATE_TREEVIEW      = ALL
< 
< # If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
< # used to set the initial width (in pixels) of the frame in which the tree 
< # is shown.
< 
< TREEVIEW_WIDTH         = 250
< 
< # Use this tag to change the font size of Latex formulas included 
< # as images in the HTML documentation. The default is 10. Note that 
< # when you change the font size after a successful doxygen run you need 
< # to manually remove any form_*.png images from the HTML output directory 
< # to force them to be regenerated.
< 
< FORMULA_FONTSIZE       = 10
< 
< #---------------------------------------------------------------------------
< # configuration options related to the LaTeX output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
< # generate Latex output.
< 
< GENERATE_LATEX         = NO
< 
< # The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
< # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
< # put in front of it. If left blank `latex' will be used as the default path.
< 
< LATEX_OUTPUT           = latex
< 
< # The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
< # invoked. If left blank `latex' will be used as the default command name.
< 
< LATEX_CMD_NAME         = latex
< 
< # The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
< # generate index for LaTeX. If left blank `makeindex' will be used as the 
< # default command name.
< 
< MAKEINDEX_CMD_NAME     = makeindex
< 
< # If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
< # LaTeX documents. This may be useful for small projects and may help to 
< # save some trees in general.
< 
< COMPACT_LATEX          = NO
< 
< # The PAPER_TYPE tag can be used to set the paper type that is used 
< # by the printer. Possible values are: a4, a4wide, letter, legal and 
< # executive. If left blank a4wide will be used.
< 
< PAPER_TYPE             = a4wide
< 
< # The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
< # packages that should be included in the LaTeX output.
< 
< EXTRA_PACKAGES         = 
< 
< # The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
< # the generated latex document. The header should contain everything until 
< # the first chapter. If it is left blank doxygen will generate a 
< # standard header. Notice: only use this tag if you know what you are doing!
< 
< LATEX_HEADER           = 
< 
< # If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
< # is prepared for conversion to pdf (using ps2pdf). The pdf file will 
< # contain links (just like the HTML output) instead of page references 
< # This makes the output suitable for online browsing using a pdf viewer.
< 
< PDF_HYPERLINKS         = YES
< 
< # If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
< # plain latex in the generated Makefile. Set this option to YES to get a 
< # higher quality PDF documentation.
< 
< USE_PDFLATEX           = YES
< 
< # If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
< # command to the generated LaTeX files. This will instruct LaTeX to keep 
< # running if errors occur, instead of asking the user for help. 
< # This option is also used when generating formulas in HTML.
< 
< LATEX_BATCHMODE        = NO
< 
< # If LATEX_HIDE_INDICES is set to YES then doxygen will not 
< # include the index chapters (such as File Index, Compound Index, etc.) 
< # in the output.
< 
< LATEX_HIDE_INDICES     = NO
< 
< # If LATEX_SOURCE_CODE is set to YES then doxygen will include
< # source code with syntax highlighting in the LaTeX output.
< # Note that which sources are shown also depends on other settings
< # such as SOURCE_BROWSER.
< 
< LATEX_SOURCE_CODE      = NO
< 
< #---------------------------------------------------------------------------
< # configuration options related to the RTF output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
< # The RTF output is optimized for Word 97 and may not look very pretty with 
< # other RTF readers or editors.
< 
< GENERATE_RTF           = NO
< 
< # The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
< # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
< # put in front of it. If left blank `rtf' will be used as the default path.
< 
< RTF_OUTPUT             = rtf
< 
< # If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
< # RTF documents. This may be useful for small projects and may help to 
< # save some trees in general.
< 
< COMPACT_RTF            = NO
< 
< # If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
< # will contain hyperlink fields. The RTF file will 
< # contain links (just like the HTML output) instead of page references. 
< # This makes the output suitable for online browsing using WORD or other 
< # programs which support those fields. 
< # Note: wordpad (write) and others do not support links.
< 
< RTF_HYPERLINKS         = NO
< 
< # Load stylesheet definitions from file. Syntax is similar to doxygen's 
< # config file, i.e. a series of assignments. You only have to provide 
< # replacements, missing definitions are set to their default value.
< 
< RTF_STYLESHEET_FILE    = 
< 
< # Set optional variables used in the generation of an rtf document. 
< # Syntax is similar to doxygen's config file.
< 
< RTF_EXTENSIONS_FILE    = 
< 
< #---------------------------------------------------------------------------
< # configuration options related to the man page output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
< # generate man pages
< 
< GENERATE_MAN           = NO
< 
< # The MAN_OUTPUT tag is used to specify where the man pages will be put. 
< # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
< # put in front of it. If left blank `man' will be used as the default path.
< 
< MAN_OUTPUT             = man
< 
< # The MAN_EXTENSION tag determines the extension that is added to 
< # the generated man pages (default is the subroutine's section .3)
< 
< MAN_EXTENSION          = .3
< 
< # If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
< # then it will generate one additional man file for each entity 
< # documented in the real man page(s). These additional files 
< # only source the real man page, but without them the man command 
< # would be unable to find the correct page. The default is NO.
< 
< MAN_LINKS              = NO
< 
< #---------------------------------------------------------------------------
< # configuration options related to the XML output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_XML tag is set to YES Doxygen will 
< # generate an XML file that captures the structure of 
< # the code including all documentation.
< 
< GENERATE_XML           = NO
< 
< # The XML_OUTPUT tag is used to specify where the XML pages will be put. 
< # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
< # put in front of it. If left blank `xml' will be used as the default path.
< 
< XML_OUTPUT             = xml
< 
< # The XML_SCHEMA tag can be used to specify an XML schema, 
< # which can be used by a validating XML parser to check the 
< # syntax of the XML files.
< 
< XML_SCHEMA             = 
< 
< # The XML_DTD tag can be used to specify an XML DTD, 
< # which can be used by a validating XML parser to check the 
< # syntax of the XML files.
< 
< XML_DTD                = 
< 
< # If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
< # dump the program listings (including syntax highlighting 
< # and cross-referencing information) to the XML output. Note that 
< # enabling this will significantly increase the size of the XML output.
< 
< XML_PROGRAMLISTING     = YES
< 
< #---------------------------------------------------------------------------
< # configuration options for the AutoGen Definitions output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
< # generate an AutoGen Definitions (see autogen.sf.net) file 
< # that captures the structure of the code including all 
< # documentation. Note that this feature is still experimental 
< # and incomplete at the moment.
< 
< GENERATE_AUTOGEN_DEF   = NO
< 
< #---------------------------------------------------------------------------
< # configuration options related to the Perl module output
< #---------------------------------------------------------------------------
< 
< # If the GENERATE_PERLMOD tag is set to YES Doxygen will 
< # generate a Perl module file that captures the structure of 
< # the code including all documentation. Note that this 
< # feature is still experimental and incomplete at the 
< # moment.
< 
< GENERATE_PERLMOD       = NO
< 
< # If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
< # the necessary Makefile rules, Perl scripts and LaTeX code to be able 
< # to generate PDF and DVI output from the Perl module output.
< 
< PERLMOD_LATEX          = NO
< 
< # If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
< # nicely formatted so it can be parsed by a human reader.  This is useful 
< # if you want to understand what is going on.  On the other hand, if this 
< # tag is set to NO the size of the Perl module output will be much smaller 
< # and Perl will parse it just the same.
< 
< PERLMOD_PRETTY         = YES
< 
< # The names of the make variables in the generated doxyrules.make file 
< # are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
< # This is useful so different doxyrules.make files included by the same 
< # Makefile don't overwrite each other's variables.
< 
< PERLMOD_MAKEVAR_PREFIX = 
< 
< #---------------------------------------------------------------------------
< # Configuration options related to the preprocessor   
< #---------------------------------------------------------------------------
< 
< # If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
< # evaluate all C-preprocessor directives found in the sources and include 
< # files.
< 
< ENABLE_PREPROCESSING   = YES
< 
< # If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
< # names in the source code. If set to NO (the default) only conditional 
< # compilation will be performed. Macro expansion can be done in a controlled 
< # way by setting EXPAND_ONLY_PREDEF to YES.
< 
< MACRO_EXPANSION        = YES
< 
< # If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
< # then the macro expansion is limited to the macros specified with the 
< # PREDEFINED and EXPAND_AS_DEFINED tags.
< 
< EXPAND_ONLY_PREDEF     = YES
< 
< # If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
< # in the INCLUDE_PATH (see below) will be search if a #include is found.
< 
< SEARCH_INCLUDES        = YES
< 
< # The INCLUDE_PATH tag can be used to specify one or more directories that 
< # contain include files that are not input files but should be processed by 
< # the preprocessor.
< 
< INCLUDE_PATH           = 
< 
< # You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
< # patterns (like *.h and *.hpp) to filter out the header-files in the 
< # directories. If left blank, the patterns specified with FILE_PATTERNS will 
< # be used.
< 
< INCLUDE_FILE_PATTERNS  = 
< 
< # The PREDEFINED tag can be used to specify one or more macro names that 
< # are defined before the preprocessor is started (similar to the -D option of 
< # gcc). The argument of the tag is a list of macros of the form: name 
< # or name=definition (no spaces). If the definition and the = are 
< # omitted =1 is assumed. To prevent a macro definition from being 
< # undefined via #undef or recursively expanded use the := operator 
< # instead of the = operator.
< 
< PREDEFINED             = DOXYGEN_SHOULD_IGNORE_THIS=1 \
<                          DECLSPEC= \
<                          SDLCALL= \
<                          _WIN32=1
< 
< # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
< # this tag can be used to specify a list of macro names that should be expanded. 
< # The macro definition that is found in the sources will be used. 
< # Use the PREDEFINED tag if you want to use a different macro definition.
< 
< EXPAND_AS_DEFINED      = 
< 
< # If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
< # doxygen's preprocessor will remove all function-like macros that are alone 
< # on a line, have an all uppercase name, and do not end with a semicolon. Such 
< # function macros are typically used for boiler-plate code, and will confuse 
< # the parser if not removed.
< 
< SKIP_FUNCTION_MACROS   = YES
< 
< #---------------------------------------------------------------------------
< # Configuration::additions related to external references   
< #---------------------------------------------------------------------------
< 
< # The TAGFILES option can be used to specify one or more tagfiles. 
< # Optionally an initial location of the external documentation 
< # can be added for each tagfile. The format of a tag file without 
< # this location is as follows: 
< #   TAGFILES = file1 file2 ... 
< # Adding location for the tag files is done as follows: 
< #   TAGFILES = file1=loc1 "file2 = loc2" ... 
< # where "loc1" and "loc2" can be relative or absolute paths or 
< # URLs. If a location is present for each tag, the installdox tool 
< # does not have to be run to correct the links. 
< # Note that each tag file must have a unique name 
< # (where the name does NOT include the path) 
< # If a tag file is not located in the directory in which doxygen 
< # is run, you must also specify the path to the tagfile here.
< 
< TAGFILES               = 
< 
< # When a file name is specified after GENERATE_TAGFILE, doxygen will create 
< # a tag file that is based on the input files it reads.
< 
< GENERATE_TAGFILE       = ./SDL.tag
< 
< # If the ALLEXTERNALS tag is set to YES all external classes will be listed 
< # in the class index. If set to NO only the inherited external classes 
< # will be listed.
< 
< ALLEXTERNALS           = NO
< 
< # If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
< # in the modules index. If set to NO, only the current project's groups will 
< # be listed.
< 
< EXTERNAL_GROUPS        = YES
< 
< # The PERL_PATH should be the absolute path and name of the perl script 
< # interpreter (i.e. the result of `which perl').
< 
< PERL_PATH              = c:\Perl\bin\perl.exe
< 
< #---------------------------------------------------------------------------
< # Configuration options related to the dot tool   
< #---------------------------------------------------------------------------
< 
< # If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
< # generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
< # or super classes. Setting the tag to NO turns the diagrams off. Note that 
< # this option is superseded by the HAVE_DOT option below. This is only a 
< # fallback. It is recommended to install and use dot, since it yields more 
< # powerful graphs.
< 
< CLASS_DIAGRAMS         = YES
< 
< # You can define message sequence charts within doxygen comments using the \msc 
< # command. Doxygen will then run the mscgen tool (see 
< # http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
< # documentation. The MSCGEN_PATH tag allows you to specify the directory where 
< # the mscgen tool resides. If left empty the tool is assumed to be found in the 
< # default search path.
< 
< MSCGEN_PATH            = 
< 
< # If set to YES, the inheritance and collaboration graphs will hide 
< # inheritance and usage relations if the target is undocumented 
< # or is not a class.
< 
< HIDE_UNDOC_RELATIONS   = YES
< 
< # If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
< # available from the path. This tool is part of Graphviz, a graph visualization 
< # toolkit from AT&T and Lucent Bell Labs. The other options in this section 
< # have no effect if this option is set to NO (the default)
< 
< HAVE_DOT               = YES
< 
< # By default doxygen will write a font called FreeSans.ttf to the output 
< # directory and reference it in all dot files that doxygen generates. This 
< # font does not include all possible unicode characters however, so when you need 
< # these (or just want a differently looking font) you can specify the font name 
< # using DOT_FONTNAME. You need need to make sure dot is able to find the font, 
< # which can be done by putting it in a standard location or by setting the 
< # DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory 
< # containing the font.
< 
< DOT_FONTNAME           = FreeSans
< 
< # The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
< # The default size is 10pt.
< 
< DOT_FONTSIZE           = 10
< 
< # By default doxygen will tell dot to use the output directory to look for the 
< # FreeSans.ttf font (which doxygen will put there itself). If you specify a 
< # different font using DOT_FONTNAME you can set the path where dot 
< # can find it using this tag.
< 
< DOT_FONTPATH           = 
< 
< # If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
< # will generate a graph for each documented class showing the direct and 
< # indirect inheritance relations. Setting this tag to YES will force the 
< # the CLASS_DIAGRAMS tag to NO.
< 
< CLASS_GRAPH            = YES
< 
< # If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
< # will generate a graph for each documented class showing the direct and 
< # indirect implementation dependencies (inheritance, containment, and 
< # class references variables) of the class with other documented classes.
< 
< COLLABORATION_GRAPH    = YES
< 
< # If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
< # will generate a graph for groups, showing the direct groups dependencies
< 
< GROUP_GRAPHS           = YES
< 
< # If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
< # collaboration diagrams in a style similar to the OMG's Unified Modeling 
< # Language.
< 
< UML_LOOK               = NO
< 
< # If set to YES, the inheritance and collaboration graphs will show the 
< # relations between templates and their instances.
< 
< TEMPLATE_RELATIONS     = YES
< 
< # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
< # tags are set to YES then doxygen will generate a graph for each documented 
< # file showing the direct and indirect include dependencies of the file with 
< # other documented files.
< 
< INCLUDE_GRAPH          = YES
< 
< # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
< # HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
< # documented header file showing the documented files that directly or 
< # indirectly include this file.
< 
< INCLUDED_BY_GRAPH      = YES
< 
< # If the CALL_GRAPH and HAVE_DOT options are set to YES then 
< # doxygen will generate a call dependency graph for every global function 
< # or class method. Note that enabling this option will significantly increase 
< # the time of a run. So in most cases it will be better to enable call graphs 
< # for selected functions only using the \callgraph command.
< 
< CALL_GRAPH             = NO
< 
< # If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
< # doxygen will generate a caller dependency graph for every global function 
< # or class method. Note that enabling this option will significantly increase 
< # the time of a run. So in most cases it will be better to enable caller 
< # graphs for selected functions only using the \callergraph command.
< 
< CALLER_GRAPH           = NO
< 
< # If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
< # will graphical hierarchy of all classes instead of a textual one.
< 
< GRAPHICAL_HIERARCHY    = YES
< 
< # If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
< # then doxygen will show the dependencies a directory has on other directories 
< # in a graphical way. The dependency relations are determined by the #include 
< # relations between the files in the directories.
< 
< DIRECTORY_GRAPH        = YES
< 
< # The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
< # generated by dot. Possible values are png, jpg, or gif 
< # If left blank png will be used.
< 
< DOT_IMAGE_FORMAT       = png
< 
< # The tag DOT_PATH can be used to specify the path where the dot tool can be 
< # found. If left blank, it is assumed the dot tool can be found in the path.
< 
< DOT_PATH               = 
< 
< # The DOTFILE_DIRS tag can be used to specify one or more directories that 
< # contain dot files that are included in the documentation (see the 
< # \dotfile command).
< 
< DOTFILE_DIRS           = 
< 
< # The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
< # nodes that will be shown in the graph. If the number of nodes in a graph 
< # becomes larger than this value, doxygen will truncate the graph, which is 
< # visualized by representing a node as a red box. Note that doxygen if the 
< # number of direct children of the root node in a graph is already larger than 
< # DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
< # that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.
< 
< DOT_GRAPH_MAX_NODES    = 50
< 
< # The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
< # graphs generated by dot. A depth value of 3 means that only nodes reachable 
< # from the root by following a path via at most 3 edges will be shown. Nodes 
< # that lay further from the root node will be omitted. Note that setting this 
< # option to 1 or 2 may greatly reduce the computation time needed for large 
< # code bases. Also note that the size of a graph can be further restricted by 
< # DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.
< 
< MAX_DOT_GRAPH_DEPTH    = 2
< 
< # Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
< # background. This is disabled by default, because dot on Windows does not 
< # seem to support this out of the box. Warning: Depending on the platform used, 
< # enabling this option may lead to badly anti-aliased labels on the edges of 
< # a graph (i.e. they become hard to read).
< 
< DOT_TRANSPARENT        = NO
< 
< # Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
< # files in one run (i.e. multiple -o and -T options on the command line). This 
< # makes dot run faster, but since only newer versions of dot (>1.8.10) 
< # support this, this feature is disabled by default.
< 
< DOT_MULTI_TARGETS      = YES
< 
< # If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
< # generate a legend page explaining the meaning of the various boxes and 
< # arrows in the dot generated graphs.
< 
< GENERATE_LEGEND        = YES
< 
< # If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
< # remove the intermediate dot files that are used to generate 
< # the various graphs.
< 
< DOT_CLEANUP            = YES
< 
< #---------------------------------------------------------------------------
< # Options related to the search engine
< #---------------------------------------------------------------------------
< 
< # The SEARCHENGINE tag specifies whether or not a search engine should be 
< # used. If set to NO the values of all tags below this one will be ignored.
< 
< SEARCHENGINE           = NO
---
> # Doxyfile 1.5.9
> 
> # This file describes the settings to be used by the documentation system
> # doxygen (www.doxygen.org) for a project
> #
> # All text after a hash (#) is considered a comment and will be ignored
> # The format is:
> #       TAG = value [value, ...]
> # For lists items can also be appended using:
> #       TAG += value [value, ...]
> # Values that contain spaces should be placed between quotes (" ")
> 
> #---------------------------------------------------------------------------
> # Project related configuration options
> #---------------------------------------------------------------------------
> 
> # This tag specifies the encoding used for all characters in the config file 
> # that follow. The default is UTF-8 which is also the encoding used for all 
> # text before the first occurrence of this tag. Doxygen uses libiconv (or the 
> # iconv built into libc) for the transcoding. See 
> # http://www.gnu.org/software/libiconv for the list of possible encodings.
> 
> DOXYFILE_ENCODING      = UTF-8
> 
> # The PROJECT_NAME tag is a single word (or a sequence of words surrounded 
> # by quotes) that should identify the project.
> 
> PROJECT_NAME           = SDL
> 
> # The PROJECT_NUMBER tag can be used to enter a project or revision number. 
> # This could be handy for archiving the generated documentation or 
> # if some version control system is used.
> 
> PROJECT_NUMBER         = 2.0.0
> 
> # The OUTPUT_DIRECTORY tag is used to specify the (relative or absolute) 
> # base path where the generated documentation will be put. 
> # If a relative path is entered, it will be relative to the location 
> # where doxygen was started. If left blank the current directory will be used.
> 
> OUTPUT_DIRECTORY       = .
> 
> # If the CREATE_SUBDIRS tag is set to YES, then doxygen will create 
> # 4096 sub-directories (in 2 levels) under the output directory of each output 
> # format and will distribute the generated files over these directories. 
> # Enabling this option can be useful when feeding doxygen a huge amount of 
> # source files, where putting all generated files in the same directory would 
> # otherwise cause performance problems for the file system.
> 
> CREATE_SUBDIRS         = YES
> 
> # The OUTPUT_LANGUAGE tag is used to specify the language in which all 
> # documentation generated by doxygen is written. Doxygen will use this 
> # information to generate all constant output in the proper language. 
> # The default language is English, other supported languages are: 
> # Afrikaans, Arabic, Brazilian, Catalan, Chinese, Chinese-Traditional, 
> # Croatian, Czech, Danish, Dutch, Esperanto, Farsi, Finnish, French, German, 
> # Greek, Hungarian, Italian, Japanese, Japanese-en (Japanese with English 
> # messages), Korean, Korean-en, Lithuanian, Norwegian, Macedonian, Persian, 
> # Polish, Portuguese, Romanian, Russian, Serbian, Serbian-Cyrilic, Slovak, 
> # Slovene, Spanish, Swedish, Ukrainian, and Vietnamese.
> 
> OUTPUT_LANGUAGE        = English
> 
> # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
> # include brief member descriptions after the members that are listed in 
> # the file and class documentation (similar to JavaDoc). 
> # Set to NO to disable this.
> 
> BRIEF_MEMBER_DESC      = YES
> 
> # If the REPEAT_BRIEF tag is set to YES (the default) Doxygen will prepend 
> # the brief description of a member or function before the detailed description. 
> # Note: if both HIDE_UNDOC_MEMBERS and BRIEF_MEMBER_DESC are set to NO, the 
> # brief descriptions will be completely suppressed.
> 
> REPEAT_BRIEF           = YES
> 
> # This tag implements a quasi-intelligent brief description abbreviator 
> # that is used to form the text in various listings. Each string 
> # in this list, if found as the leading text of the brief description, will be 
> # stripped from the text and the result after processing the whole list, is 
> # used as the annotated text. Otherwise, the brief description is used as-is. 
> # If left blank, the following values are used ("$name" is automatically 
> # replaced with the name of the entity): "The $name class" "The $name widget" 
> # "The $name file" "is" "provides" "specifies" "contains" 
> # "represents" "a" "an" "the"
> 
> ABBREVIATE_BRIEF       = "The $name class" \
>                          "The $name widget" \
>                          "The $name file" \
>                          is \
>                          provides \
>                          specifies \
>                          contains \
>                          represents \
>                          a \
>                          an \
>                          the
> 
> # If the ALWAYS_DETAILED_SEC and REPEAT_BRIEF tags are both set to YES then 
> # Doxygen will generate a detailed section even if there is only a brief 
> # description.
> 
> ALWAYS_DETAILED_SEC    = YES
> 
> # If the INLINE_INHERITED_MEMB tag is set to YES, doxygen will show all 
> # inherited members of a class in the documentation of that class as if those 
> # members were ordinary class members. Constructors, destructors and assignment 
> # operators of the base classes will not be shown.
> 
> INLINE_INHERITED_MEMB  = NO
> 
> # If the FULL_PATH_NAMES tag is set to YES then Doxygen will prepend the full 
> # path before files name in the file list and in the header files. If set 
> # to NO the shortest path that makes the file name unique will be used.
> 
> FULL_PATH_NAMES        = YES
> 
> # If the FULL_PATH_NAMES tag is set to YES then the STRIP_FROM_PATH tag 
> # can be used to strip a user-defined part of the path. Stripping is 
> # only done if one of the specified strings matches the left-hand part of 
> # the path. The tag can be used to show relative paths in the file list. 
> # If left blank the directory from which doxygen is run is used as the 
> # path to strip.
> 
> STRIP_FROM_PATH        =
> 
> # The STRIP_FROM_INC_PATH tag can be used to strip a user-defined part of 
> # the path mentioned in the documentation of a class, which tells 
> # the reader which header file to include in order to use a class. 
> # If left blank only the name of the header file containing the class 
> # definition is used. Otherwise one should specify the include paths that 
> # are normally passed to the compiler using the -I flag.
> 
> STRIP_FROM_INC_PATH    = 
> 
> # If the SHORT_NAMES tag is set to YES, doxygen will generate much shorter 
> # (but less readable) file names. This can be useful is your file systems 
> # doesn't support long names like on DOS, Mac, or CD-ROM.
> 
> SHORT_NAMES            = NO
> 
> # If the JAVADOC_AUTOBRIEF tag is set to YES then Doxygen 
> # will interpret the first line (until the first dot) of a JavaDoc-style 
> # comment as the brief description. If set to NO, the JavaDoc 
> # comments will behave just like regular Qt-style comments 
> # (thus requiring an explicit @brief command for a brief description.)
> 
> JAVADOC_AUTOBRIEF      = NO
> 
> # If the QT_AUTOBRIEF tag is set to YES then Doxygen will 
> # interpret the first line (until the first dot) of a Qt-style 
> # comment as the brief description. If set to NO, the comments 
> # will behave just like regular Qt-style comments (thus requiring 
> # an explicit \brief command for a brief description.)
> 
> QT_AUTOBRIEF           = NO
> 
> # The MULTILINE_CPP_IS_BRIEF tag can be set to YES to make Doxygen 
> # treat a multi-line C++ special comment block (i.e. a block of //! or /// 
> # comments) as a brief description. This used to be the default behaviour. 
> # The new default is to treat a multi-line C++ comment block as a detailed 
> # description. Set this tag to YES if you prefer the old behaviour instead.
> 
> MULTILINE_CPP_IS_BRIEF = NO
> 
> # If the INHERIT_DOCS tag is set to YES (the default) then an undocumented 
> # member inherits the documentation from any documented member that it 
> # re-implements.
> 
> INHERIT_DOCS           = YES
> 
> # If the SEPARATE_MEMBER_PAGES tag is set to YES, then doxygen will produce 
> # a new page for each member. If set to NO, the documentation of a member will 
> # be part of the file/class/namespace that contains it.
> 
> SEPARATE_MEMBER_PAGES  = NO
> 
> # The TAB_SIZE tag can be used to set the number of spaces in a tab. 
> # Doxygen uses this value to replace tabs by spaces in code fragments.
> 
> TAB_SIZE               = 8
> 
> # This tag can be used to specify a number of aliases that acts 
> # as commands in the documentation. An alias has the form "name=value". 
> # For example adding "sideeffect=\par Side Effects:\n" will allow you to 
> # put the command \sideeffect (or @sideeffect) in the documentation, which 
> # will result in a user-defined paragraph with heading "Side Effects:". 
> # You can put \n's in the value part of an alias to insert newlines.
> 
> ALIASES                = "defined=\"\def\"" \
>                          "discussion=\"\par Discussion:\n\""
> 
> # Set the OPTIMIZE_OUTPUT_FOR_C tag to YES if your project consists of C 
> # sources only. Doxygen will then generate output that is more tailored for C. 
> # For instance, some of the names that are used will be different. The list 
> # of all members will be omitted, etc.
> 
> OPTIMIZE_OUTPUT_FOR_C  = YES
> 
> # Set the OPTIMIZE_OUTPUT_JAVA tag to YES if your project consists of Java 
> # sources only. Doxygen will then generate output that is more tailored for 
> # Java. For instance, namespaces will be presented as packages, qualified 
> # scopes will look different, etc.
> 
> OPTIMIZE_OUTPUT_JAVA   = NO
> 
> # Set the OPTIMIZE_FOR_FORTRAN tag to YES if your project consists of Fortran 
> # sources only. Doxygen will then generate output that is more tailored for 
> # Fortran.
> 
> OPTIMIZE_FOR_FORTRAN   = NO
> 
> # Set the OPTIMIZE_OUTPUT_VHDL tag to YES if your project consists of VHDL 
> # sources. Doxygen will then generate output that is tailored for 
> # VHDL.
> 
> OPTIMIZE_OUTPUT_VHDL   = NO
> 
> # Doxygen selects the parser to use depending on the extension of the files it parses. 
> # With this tag you can assign which parser to use for a given extension. 
> # Doxygen has a built-in mapping, but you can override or extend it using this tag. 
> # The format is ext=language, where ext is a file extension, and language is one of 
> # the parsers supported by doxygen: IDL, Java, Javascript, C#, C, C++, D, PHP, 
> # Objective-C, Python, Fortran, VHDL, C, C++. For instance to make doxygen treat 
> # .inc files as Fortran files (default is PHP), and .f files as C (default is Fortran), 
> # use: inc=Fortran f=C. Note that for custom extensions you also need to set
> # FILE_PATTERNS otherwise the files are not read by doxygen.
> 
> EXTENSION_MAPPING      = 
> 
> # If you use STL classes (i.e. std::string, std::vector, etc.) but do not want 
> # to include (a tag file for) the STL sources as input, then you should 
> # set this tag to YES in order to let doxygen match functions declarations and 
> # definitions whose arguments contain STL classes (e.g. func(std::string); v.s. 
> # func(std::string) {}). This also make the inheritance and collaboration 
> # diagrams that involve STL classes more complete and accurate.
> 
> BUILTIN_STL_SUPPORT    = YES
> 
> # If you use Microsoft's C++/CLI language, you should set this option to YES to 
> # enable parsing support.
> 
> CPP_CLI_SUPPORT        = NO
> 
> # Set the SIP_SUPPORT tag to YES if your project consists of sip sources only. 
> # Doxygen will parse them like normal C++ but will assume all classes use public 
> # instead of private inheritance when no explicit protection keyword is present.
> 
> SIP_SUPPORT            = NO
> 
> # For Microsoft's IDL there are propget and propput attributes to indicate getter 
> # and setter methods for a property. Setting this option to YES (the default) 
> # will make doxygen to replace the get and set methods by a property in the 
> # documentation. This will only work if the methods are indeed getting or 
> # setting a simple type. If this is not the case, or you want to show the 
> # methods anyway, you should set this option to NO.
> 
> IDL_PROPERTY_SUPPORT   = YES
> 
> # If member grouping is used in the documentation and the DISTRIBUTE_GROUP_DOC 
> # tag is set to YES, then doxygen will reuse the documentation of the first 
> # member in the group (if any) for the other members of the group. By default 
> # all members of a group must be documented explicitly.
> 
> DISTRIBUTE_GROUP_DOC   = NO
> 
> # Set the SUBGROUPING tag to YES (the default) to allow class member groups of 
> # the same type (for instance a group of public functions) to be put as a 
> # subgroup of that type (e.g. under the Public Functions section). Set it to 
> # NO to prevent subgrouping. Alternatively, this can be done per class using 
> # the \nosubgrouping command.
> 
> SUBGROUPING            = YES
> 
> # When TYPEDEF_HIDES_STRUCT is enabled, a typedef of a struct, union, or enum 
> # is documented as struct, union, or enum with the name of the typedef. So 
> # typedef struct TypeS {} TypeT, will appear in the documentation as a struct 
> # with name TypeT. When disabled the typedef will appear as a member of a file, 
> # namespace, or class. And the struct will be named TypeS. This can typically 
> # be useful for C code in case the coding convention dictates that all compound 
> # types are typedef'ed and only the typedef is referenced, never the tag name.
> 
> TYPEDEF_HIDES_STRUCT   = YES
> 
> # The SYMBOL_CACHE_SIZE determines the size of the internal cache use to 
> # determine which symbols to keep in memory and which to flush to disk. 
> # When the cache is full, less often used symbols will be written to disk. 
> # For small to medium size projects (<1000 input files) the default value is 
> # probably good enough. For larger projects a too small cache size can cause 
> # doxygen to be busy swapping symbols to and from disk most of the time 
> # causing a significant performance penality. 
> # If the system has enough physical memory increasing the cache will improve the 
> # performance by keeping more symbols in memory. Note that the value works on 
> # a logarithmic scale so increasing the size by one will rougly double the 
> # memory usage. The cache size is given by this formula: 
> # 2^(16+SYMBOL_CACHE_SIZE). The valid range is 0..9, the default is 0, 
> # corresponding to a cache size of 2^16 = 65536 symbols
> 
> SYMBOL_CACHE_SIZE      = 0
> 
> #---------------------------------------------------------------------------
> # Build related configuration options
> #---------------------------------------------------------------------------
> 
> # If the EXTRACT_ALL tag is set to YES doxygen will assume all entities in 
> # documentation are documented, even if no documentation was available. 
> # Private class members and static file members will be hidden unless 
> # the EXTRACT_PRIVATE and EXTRACT_STATIC tags are set to YES
> 
> EXTRACT_ALL            = YES
> 
> # If the EXTRACT_PRIVATE tag is set to YES all private members of a class 
> # will be included in the documentation.
> 
> EXTRACT_PRIVATE        = YES
> 
> # If the EXTRACT_STATIC tag is set to YES all static members of a file 
> # will be included in the documentation.
> 
> EXTRACT_STATIC         = YES
> 
> # If the EXTRACT_LOCAL_CLASSES tag is set to YES classes (and structs) 
> # defined locally in source files will be included in the documentation. 
> # If set to NO only classes defined in header files are included.
> 
> EXTRACT_LOCAL_CLASSES  = YES
> 
> # This flag is only useful for Objective-C code. When set to YES local 
> # methods, which are defined in the implementation section but not in 
> # the interface are included in the documentation. 
> # If set to NO (the default) only methods in the interface are included.
> 
> EXTRACT_LOCAL_METHODS  = YES
> 
> # If this flag is set to YES, the members of anonymous namespaces will be 
> # extracted and appear in the documentation as a namespace called 
> # 'anonymous_namespace{file}', where file will be replaced with the base 
> # name of the file that contains the anonymous namespace. By default 
> # anonymous namespace are hidden.
> 
> EXTRACT_ANON_NSPACES   = YES
> 
> # If the HIDE_UNDOC_MEMBERS tag is set to YES, Doxygen will hide all 
> # undocumented members of documented classes, files or namespaces. 
> # If set to NO (the default) these members will be included in the 
> # various overviews, but no documentation section is generated. 
> # This option has no effect if EXTRACT_ALL is enabled.
> 
> HIDE_UNDOC_MEMBERS     = NO
> 
> # If the HIDE_UNDOC_CLASSES tag is set to YES, Doxygen will hide all 
> # undocumented classes that are normally visible in the class hierarchy. 
> # If set to NO (the default) these classes will be included in the various 
> # overviews. This option has no effect if EXTRACT_ALL is enabled.
> 
> HIDE_UNDOC_CLASSES     = NO
> 
> # If the HIDE_FRIEND_COMPOUNDS tag is set to YES, Doxygen will hide all 
> # friend (class|struct|union) declarations. 
> # If set to NO (the default) these declarations will be included in the 
> # documentation.
> 
> HIDE_FRIEND_COMPOUNDS  = NO
> 
> # If the HIDE_IN_BODY_DOCS tag is set to YES, Doxygen will hide any 
> # documentation blocks found inside the body of a function. 
> # If set to NO (the default) these blocks will be appended to the 
> # function's detailed documentation block.
> 
> HIDE_IN_BODY_DOCS      = NO
> 
> # The INTERNAL_DOCS tag determines if documentation 
> # that is typed after a \internal command is included. If the tag is set 
> # to NO (the default) then the documentation will be excluded. 
> # Set it to YES to include the internal documentation.
> 
> INTERNAL_DOCS          = YES
> 
> # If the CASE_SENSE_NAMES tag is set to NO then Doxygen will only generate 
> # file names in lower-case letters. If set to YES upper-case letters are also 
> # allowed. This is useful if you have classes or files whose names only differ 
> # in case and if your file system supports case sensitive file names. Windows 
> # and Mac users are advised to set this option to NO.
> 
> CASE_SENSE_NAMES       = NO
> 
> # If the HIDE_SCOPE_NAMES tag is set to NO (the default) then Doxygen 
> # will show members with their full class and namespace scopes in the 
> # documentation. If set to YES the scope will be hidden.
> 
> HIDE_SCOPE_NAMES       = NO
> 
> # If the SHOW_INCLUDE_FILES tag is set to YES (the default) then Doxygen 
> # will put a list of the files that are included by a file in the documentation 
> # of that file.
> 
> SHOW_INCLUDE_FILES     = YES
> 
> # If the INLINE_INFO tag is set to YES (the default) then a tag [inline] 
> # is inserted in the documentation for inline members.
> 
> INLINE_INFO            = YES
> 
> # If the SORT_MEMBER_DOCS tag is set to YES (the default) then doxygen 
> # will sort the (detailed) documentation of file and class members 
> # alphabetically by member name. If set to NO the members will appear in 
> # declaration order.
> 
> SORT_MEMBER_DOCS       = YES
> 
> # If the SORT_BRIEF_DOCS tag is set to YES then doxygen will sort the 
> # brief documentation of file, namespace and class members alphabetically 
> # by member name. If set to NO (the default) the members will appear in 
> # declaration order.
> 
> SORT_BRIEF_DOCS        = NO
> 
> # If the SORT_GROUP_NAMES tag is set to YES then doxygen will sort the 
> # hierarchy of group names into alphabetical order. If set to NO (the default) 
> # the group names will appear in their defined order.
> 
> SORT_GROUP_NAMES       = NO
> 
> # If the SORT_BY_SCOPE_NAME tag is set to YES, the class list will be 
> # sorted by fully-qualified names, including namespaces. If set to 
> # NO (the default), the class list will be sorted only by class name, 
> # not including the namespace part. 
> # Note: This option is not very useful if HIDE_SCOPE_NAMES is set to YES. 
> # Note: This option applies only to the class list, not to the 
> # alphabetical list.
> 
> SORT_BY_SCOPE_NAME     = NO
> 
> # The GENERATE_TODOLIST tag can be used to enable (YES) or 
> # disable (NO) the todo list. This list is created by putting \todo 
> # commands in the documentation.
> 
> GENERATE_TODOLIST      = YES
> 
> # The GENERATE_TESTLIST tag can be used to enable (YES) or 
> # disable (NO) the test list. This list is created by putting \test 
> # commands in the documentation.
> 
> GENERATE_TESTLIST      = YES
> 
> # The GENERATE_BUGLIST tag can be used to enable (YES) or 
> # disable (NO) the bug list. This list is created by putting \bug 
> # commands in the documentation.
> 
> GENERATE_BUGLIST       = YES
> 
> # The GENERATE_DEPRECATEDLIST tag can be used to enable (YES) or 
> # disable (NO) the deprecated list. This list is created by putting 
> # \deprecated commands in the documentation.
> 
> GENERATE_DEPRECATEDLIST= YES
> 
> # The ENABLED_SECTIONS tag can be used to enable conditional 
> # documentation sections, marked by \if sectionname ... \endif.
> 
> ENABLED_SECTIONS       = 
> 
> # The MAX_INITIALIZER_LINES tag determines the maximum number of lines 
> # the initial value of a variable or define consists of for it to appear in 
> # the documentation. If the initializer consists of more lines than specified 
> # here it will be hidden. Use a value of 0 to hide initializers completely. 
> # The appearance of the initializer of individual variables and defines in the 
> # documentation can be controlled using \showinitializer or \hideinitializer 
> # command in the documentation regardless of this setting.
> 
> MAX_INITIALIZER_LINES  = 30
> 
> # If the sources in your project are distributed over multiple directories 
> # then setting the SHOW_DIRECTORIES tag to YES will show the directory hierarchy 
> # in the documentation. The default is NO.
> 
> SHOW_DIRECTORIES       = YES
> 
> # Set the SHOW_FILES tag to NO to disable the generation of the Files page. 
> # This will remove the Files entry from the Quick Index and from the 
> # Folder Tree View (if specified). The default is YES.
> 
> SHOW_FILES             = YES
> 
> # Set the SHOW_NAMESPACES tag to NO to disable the generation of the 
> # Namespaces page.  This will remove the Namespaces entry from the Quick Index 
> # and from the Folder Tree View (if specified). The default is YES.
> 
> SHOW_NAMESPACES        = YES
> 
> # The FILE_VERSION_FILTER tag can be used to specify a program or script that 
> # doxygen should invoke to get the current version for each file (typically from 
> # the version control system). Doxygen will invoke the program by executing (via 
> # popen()) the command <command> <input-file>, where <command> is the value of 
> # the FILE_VERSION_FILTER tag, and <input-file> is the name of an input file 
> # provided by doxygen. Whatever the program writes to standard output 
> # is used as the file version. See the manual for examples.
> 
> FILE_VERSION_FILTER    = 
> 
> # The LAYOUT_FILE tag can be used to specify a layout file which will be parsed by 
> # doxygen. The layout file controls the global structure of the generated output files 
> # in an output format independent way. The create the layout file that represents 
> # doxygen's defaults, run doxygen with the -l option. You can optionally specify a 
> # file name after the option, if omitted DoxygenLayout.xml will be used as the name 
> # of the layout file.
> 
> LAYOUT_FILE            = 
> 
> #---------------------------------------------------------------------------
> # configuration options related to warning and progress messages
> #---------------------------------------------------------------------------
> 
> # The QUIET tag can be used to turn on/off the messages that are generated 
> # by doxygen. Possible values are YES and NO. If left blank NO is used.
> 
> QUIET                  = NO
> 
> # The WARNINGS tag can be used to turn on/off the warning messages that are 
> # generated by doxygen. Possible values are YES and NO. If left blank 
> # NO is used.
> 
> WARNINGS               = YES
> 
> # If WARN_IF_UNDOCUMENTED is set to YES, then doxygen will generate warnings 
> # for undocumented members. If EXTRACT_ALL is set to YES then this flag will 
> # automatically be disabled.
> 
> WARN_IF_UNDOCUMENTED   = YES
> 
> # If WARN_IF_DOC_ERROR is set to YES, doxygen will generate warnings for 
> # potential errors in the documentation, such as not documenting some 
> # parameters in a documented function, or documenting parameters that 
> # don't exist or using markup commands wrongly.
> 
> WARN_IF_DOC_ERROR      = YES
> 
> # This WARN_NO_PARAMDOC option can be abled to get warnings for 
> # functions that are documented, but have no documentation for their parameters 
> # or return value. If set to NO (the default) doxygen will only warn about 
> # wrong or incomplete parameter documentation, but not about the absence of 
> # documentation.
> 
> WARN_NO_PARAMDOC       = YES
> 
> # The WARN_FORMAT tag determines the format of the warning messages that 
> # doxygen can produce. The string should contain the $file, $line, and $text 
> # tags, which will be replaced by the file and line number from which the 
> # warning originated and the warning text. Optionally the format may contain 
> # $version, which will be replaced by the version of the file (if it could 
> # be obtained via FILE_VERSION_FILTER)
> 
> WARN_FORMAT            = "$file:$line: $text"
> 
> # The WARN_LOGFILE tag can be used to specify a file to which warning 
> # and error messages should be written. If left blank the output is written 
> # to stderr.
> 
> WARN_LOGFILE           = ./doxygen_warn.txt
> 
> #---------------------------------------------------------------------------
> # configuration options related to the input files
> #---------------------------------------------------------------------------
> 
> # The INPUT tag can be used to specify the files and/or directories that contain 
> # documented source files. You may enter file names like "myfile.cpp" or 
> # directories like "/usr/src/myproject". Separate the files or directories 
> # with spaces.
> 
> INPUT                  = .
> 
> # This tag can be used to specify the character encoding of the source files 
> # that doxygen parses. Internally doxygen uses the UTF-8 encoding, which is 
> # also the default input encoding. Doxygen uses libiconv (or the iconv built 
> # into libc) for the transcoding. See http://www.gnu.org/software/libiconv for 
> # the list of possible encodings.
> 
> INPUT_ENCODING         = UTF-8
> 
> # If the value of the INPUT tag contains directories, you can use the 
> # FILE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
> # and *.h) to filter out the source-files in the directories. If left 
> # blank the following patterns are tested: 
> # *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx 
> # *.hpp *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm *.py *.f90
> 
> FILE_PATTERNS          = *.c \
>                          *.cc \
>                          *.cxx \
>                          *.cpp \
>                          *.c++ \
>                          *.d \
>                          *.java \
>                          *.ii \
>                          *.ixx \
>                          *.ipp \
>                          *.i++ \
>                          *.inl \
>                          *.h \
>                          *.hh \
>                          *.hxx \
>                          *.hpp \
>                          *.h++ \
>                          *.idl \
>                          *.odl \
>                          *.cs \
>                          *.php \
>                          *.php3 \
>                          *.inc \
>                          *.m \
>                          *.mm \
>                          *.dox \
>                          *.py \
>                          *.f90 \
>                          *.f \
>                          *.vhd \
>                          *.vhdl \
>                          *.h.in \
>                          *.h.default
> 
> # The RECURSIVE tag can be used to turn specify whether or not subdirectories 
> # should be searched for input files as well. Possible values are YES and NO. 
> # If left blank NO is used.
> 
> RECURSIVE              = YES
> 
> # The EXCLUDE tag can be used to specify files and/or directories that should 
> # excluded from the INPUT source files. This way you can easily exclude a 
> # subdirectory from a directory tree whose root is specified with the INPUT tag.
> 
> EXCLUDE                = ../doxy \
>                          ../test \
>                          ../Xcode \
>                          ../VisualC \
>                          ../VisualCE \
>                          ../Xcode-iOS
> 
> # The EXCLUDE_SYMLINKS tag can be used select whether or not files or 
> # directories that are symbolic links (a Unix filesystem feature) are excluded 
> # from the input.
> 
> EXCLUDE_SYMLINKS       = NO
> 
> # If the value of the INPUT tag contains directories, you can use the 
> # EXCLUDE_PATTERNS tag to specify one or more wildcard patterns to exclude 
> # certain files from those directories. Note that the wildcards are matched 
> # against the file with absolute path, so to exclude all test directories 
> # for example use the pattern */test/*
> 
> EXCLUDE_PATTERNS       =
> 
> # The EXCLUDE_SYMBOLS tag can be used to specify one or more symbol names 
> # (namespaces, classes, functions, etc.) that should be excluded from the 
> # output. The symbol name can be a fully qualified name, a word, or if the 
> # wildcard * is used, a substring. Examples: ANamespace, AClass, 
> # AClass::ANamespace, ANamespace::*Test
> 
> EXCLUDE_SYMBOLS        = 
> 
> # The EXAMPLE_PATH tag can be used to specify one or more files or 
> # directories that contain example code fragments that are included (see 
> # the \include command).
> 
> EXAMPLE_PATH           =
> 
> # If the value of the EXAMPLE_PATH tag contains directories, you can use the 
> # EXAMPLE_PATTERNS tag to specify one or more wildcard pattern (like *.cpp 
> # and *.h) to filter out the source-files in the directories. If left 
> # blank all files are included.
> 
> EXAMPLE_PATTERNS       = *
> 
> # If the EXAMPLE_RECURSIVE tag is set to YES then subdirectories will be 
> # searched for input files to be used with the \include or \dontinclude 
> # commands irrespective of the value of the RECURSIVE tag. 
> # Possible values are YES and NO. If left blank NO is used.
> 
> EXAMPLE_RECURSIVE      = YES
> 
> # The IMAGE_PATH tag can be used to specify one or more files or 
> # directories that contain image that are included in the documentation (see 
> # the \image command).
> 
> IMAGE_PATH             = 
> 
> # The INPUT_FILTER tag can be used to specify a program that doxygen should 
> # invoke to filter for each input file. Doxygen will invoke the filter program 
> # by executing (via popen()) the command <filter> <input-file>, where <filter> 
> # is the value of the INPUT_FILTER tag, and <input-file> is the name of an 
> # input file. Doxygen will then use the output that the filter program writes 
> # to standard output.  If FILTER_PATTERNS is specified, this tag will be 
> # ignored.
> 
> INPUT_FILTER           = 
> 
> # The FILTER_PATTERNS tag can be used to specify filters on a per file pattern 
> # basis.  Doxygen will compare the file name with each pattern and apply the 
> # filter if there is a match.  The filters are a list of the form: 
> # pattern=filter (like *.cpp=my_cpp_filter). See INPUT_FILTER for further 
> # info on how filters are used. If FILTER_PATTERNS is empty, INPUT_FILTER 
> # is applied to all files.
> 
> FILTER_PATTERNS        = 
> 
> # If the FILTER_SOURCE_FILES tag is set to YES, the input filter (if set using 
> # INPUT_FILTER) will be used to filter the input files when producing source 
> # files to browse (i.e. when SOURCE_BROWSER is set to YES).
> 
> FILTER_SOURCE_FILES    = NO
> 
> #---------------------------------------------------------------------------
> # configuration options related to source browsing
> #---------------------------------------------------------------------------
> 
> # If the SOURCE_BROWSER tag is set to YES then a list of source files will 
> # be generated. Documented entities will be cross-referenced with these sources. 
> # Note: To get rid of all source code in the generated output, make sure also 
> # VERBATIM_HEADERS is set to NO.
> 
> SOURCE_BROWSER         = YES
> 
> # Setting the INLINE_SOURCES tag to YES will include the body 
> # of functions and classes directly in the documentation.
> 
> INLINE_SOURCES         = YES
> 
> # Setting the STRIP_CODE_COMMENTS tag to YES (the default) will instruct 
> # doxygen to hide any special comment blocks from generated source code 
> # fragments. Normal C and C++ comments will always remain visible.
> 
> STRIP_CODE_COMMENTS    = NO
> 
> # If the REFERENCED_BY_RELATION tag is set to YES 
> # then for each documented function all documented 
> # functions referencing it will be listed.
> 
> REFERENCED_BY_RELATION = YES
> 
> # If the REFERENCES_RELATION tag is set to YES 
> # then for each documented function all documented entities 
> # called/used by that function will be listed.
> 
> REFERENCES_RELATION    = YES
> 
> # If the REFERENCES_LINK_SOURCE tag is set to YES (the default) 
> # and SOURCE_BROWSER tag is set to YES, then the hyperlinks from 
> # functions in REFERENCES_RELATION and REFERENCED_BY_RELATION lists will 
> # link to the source code.  Otherwise they will link to the documentation.
> 
> REFERENCES_LINK_SOURCE = YES
> 
> # If the USE_HTAGS tag is set to YES then the references to source code 
> # will point to the HTML generated by the htags(1) tool instead of doxygen 
> # built-in source browser. The htags tool is part of GNU's global source 
> # tagging system (see http://www.gnu.org/software/global/global.html). You 
> # will need version 4.8.6 or higher.
> 
> USE_HTAGS              = NO
> 
> # If the VERBATIM_HEADERS tag is set to YES (the default) then Doxygen 
> # will generate a verbatim copy of the header file for each class for 
> # which an include is specified. Set to NO to disable this.
> 
> VERBATIM_HEADERS       = YES
> 
> #---------------------------------------------------------------------------
> # configuration options related to the alphabetical class index
> #---------------------------------------------------------------------------
> 
> # If the ALPHABETICAL_INDEX tag is set to YES, an alphabetical index 
> # of all compounds will be generated. Enable this if the project 
> # contains a lot of classes, structs, unions or interfaces.
> 
> ALPHABETICAL_INDEX     = YES
> 
> # If the alphabetical index is enabled (see ALPHABETICAL_INDEX) then 
> # the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
> # in which this list will be split (can be a number in the range [1..20])
> 
> COLS_IN_ALPHA_INDEX    = 5
> 
> # In case all classes in a project start with a common prefix, all 
> # classes will be put under the same header in the alphabetical index. 
> # The IGNORE_PREFIX tag can be used to specify one or more prefixes that 
> # should be ignored while generating the index headers.
> 
> IGNORE_PREFIX          = SDL_ \
>                          SDL
> 
> #---------------------------------------------------------------------------
> # configuration options related to the HTML output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_HTML tag is set to YES (the default) Doxygen will 
> # generate HTML output.
> 
> GENERATE_HTML          = YES
> 
> # The HTML_OUTPUT tag is used to specify where the HTML docs will be put. 
> # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
> # put in front of it. If left blank `html' will be used as the default path.
> 
> HTML_OUTPUT            = html
> 
> # The HTML_FILE_EXTENSION tag can be used to specify the file extension for 
> # each generated HTML page (for example: .htm,.php,.asp). If it is left blank 
> # doxygen will generate files with .html extension.
> 
> HTML_FILE_EXTENSION    = .html
> 
> # The HTML_HEADER tag can be used to specify a personal HTML header for 
> # each generated HTML page. If it is left blank doxygen will generate a 
> # standard header.
> 
> HTML_HEADER            = 
> 
> # The HTML_FOOTER tag can be used to specify a personal HTML footer for 
> # each generated HTML page. If it is left blank doxygen will generate a 
> # standard footer.
> 
> HTML_FOOTER            = 
> 
> # The HTML_STYLESHEET tag can be used to specify a user-defined cascading 
> # style sheet that is used by each HTML page. It can be used to 
> # fine-tune the look of the HTML output. If the tag is left blank doxygen 
> # will generate a default style sheet. Note that doxygen will try to copy 
> # the style sheet file to the HTML output directory, so don't put your own 
> # stylesheet in the HTML output directory as well, or it will be erased!
> 
> HTML_STYLESHEET        = 
> 
> # If the HTML_ALIGN_MEMBERS tag is set to YES, the members of classes, 
> # files or namespaces will be aligned in HTML using tables. If set to 
> # NO a bullet list will be used.
> 
> HTML_ALIGN_MEMBERS     = YES
> 
> # If the HTML_DYNAMIC_SECTIONS tag is set to YES then the generated HTML 
> # documentation will contain sections that can be hidden and shown after the 
> # page has loaded. For this to work a browser that supports 
> # JavaScript and DHTML is required (for instance Mozilla 1.0+, Firefox 
> # Netscape 6.0+, Internet explorer 5.0+, Konqueror, or Safari).
> 
> HTML_DYNAMIC_SECTIONS  = YES
> 
> # If the GENERATE_DOCSET tag is set to YES, additional index files 
> # will be generated that can be used as input for Apple's Xcode 3 
> # integrated development environment, introduced with OSX 10.5 (Leopard). 
> # To create a documentation set, doxygen will generate a Makefile in the 
> # HTML output directory. Running make will produce the docset in that 
> # directory and running "make install" will install the docset in 
> # ~/Library/Developer/Shared/Documentation/DocSets so that Xcode will find 
> # it at startup. 
> # See http://developer.apple.com/tools/creatingdocsetswithdoxygen.html for more information.
> 
> GENERATE_DOCSET        = NO
> 
> # When GENERATE_DOCSET tag is set to YES, this tag determines the name of the 
> # feed. A documentation feed provides an umbrella under which multiple 
> # documentation sets from a single provider (such as a company or product suite) 
> # can be grouped.
> 
> DOCSET_FEEDNAME        = "SDL 2.0 Doxygen"
> 
> # When GENERATE_DOCSET tag is set to YES, this tag specifies a string that 
> # should uniquely identify the documentation set bundle. This should be a 
> # reverse domain-name style string, e.g. com.mycompany.MyDocSet. Doxygen 
> # will append .docset to the name.
> 
> DOCSET_BUNDLE_ID       = org.libsdl.sdl20
> 
> # If the GENERATE_HTMLHELP tag is set to YES, additional index files 
> # will be generated that can be used as input for tools like the 
> # Microsoft HTML help workshop to generate a compiled HTML help file (.chm) 
> # of the generated HTML documentation.
> 
> GENERATE_HTMLHELP      = NO
> 
> # If the GENERATE_HTMLHELP tag is set to YES, the CHM_FILE tag can 
> # be used to specify the file name of the resulting .chm file. You 
> # can add a path in front of the file if the result should not be 
> # written to the html output directory.
> 
> CHM_FILE               = ./sdl20.chm
> 
> # If the GENERATE_HTMLHELP tag is set to YES, the HHC_LOCATION tag can 
> # be used to specify the location (absolute path including file name) of 
> # the HTML help compiler (hhc.exe). If non-empty doxygen will try to run 
> # the HTML help compiler on the generated index.hhp.
> 
> HHC_LOCATION           = 
> 
> # If the GENERATE_HTMLHELP tag is set to YES, the GENERATE_CHI flag 
> # controls if a separate .chi index file is generated (YES) or that 
> # it should be included in the master .chm file (NO).
> 
> GENERATE_CHI           = NO
> 
> # If the GENERATE_HTMLHELP tag is set to YES, the CHM_INDEX_ENCODING 
> # is used to encode HtmlHelp index (hhk), content (hhc) and project file 
> # content.
> 
> CHM_INDEX_ENCODING     = 
> 
> # If the GENERATE_HTMLHELP tag is set to YES, the BINARY_TOC flag 
> # controls whether a binary table of contents is generated (YES) or a 
> # normal table of contents (NO) in the .chm file.
> 
> BINARY_TOC             = NO
> 
> # The TOC_EXPAND flag can be set to YES to add extra items for group members 
> # to the contents of the HTML help documentation and to the tree view.
> 
> TOC_EXPAND             = YES
> 
> # If the GENERATE_QHP tag is set to YES and both QHP_NAMESPACE and QHP_VIRTUAL_FOLDER 
> # are set, an additional index file will be generated that can be used as input for 
> # Qt's qhelpgenerator to generate a Qt Compressed Help (.qch) of the generated 
> # HTML documentation.
> 
> GENERATE_QHP           = NO
> 
> # If the QHG_LOCATION tag is specified, the QCH_FILE tag can 
> # be used to specify the file name of the resulting .qch file. 
> # The path specified is relative to the HTML output folder.
> 
> QCH_FILE               = 
> 
> # The QHP_NAMESPACE tag specifies the namespace to use when generating 
> # Qt Help Project output. For more information please see 
> # http://doc.trolltech.com/qthelpproject.html#namespace
> 
> QHP_NAMESPACE          = 
> 
> # The QHP_VIRTUAL_FOLDER tag specifies the namespace to use when generating 
> # Qt Help Project output. For more information please see 
> # http://doc.trolltech.com/qthelpproject.html#virtual-folders
> 
> QHP_VIRTUAL_FOLDER     = doc
> 
> # If QHP_CUST_FILTER_NAME is set, it specifies the name of a custom filter to add. 
> # For more information please see 
> # http://doc.trolltech.com/qthelpproject.html#custom-filters
> 
> QHP_CUST_FILTER_NAME   = 
> 
> # The QHP_CUST_FILT_ATTRS tag specifies the list of the attributes of the custom filter to add.For more information please see 
> # <a href="http://doc.trolltech.com/qthelpproject.html#custom-filters">Qt Help Project / Custom Filters</a>.
> 
> QHP_CUST_FILTER_ATTRS  = 
> 
> # The QHP_SECT_FILTER_ATTRS tag specifies the list of the attributes this project's 
> # filter section matches. 
> # <a href="http://doc.trolltech.com/qthelpproject.html#filter-attributes">Qt Help Project / Filter Attributes</a>.
> 
> QHP_SECT_FILTER_ATTRS  = 
> 
> # If the GENERATE_QHP tag is set to YES, the QHG_LOCATION tag can 
> # be used to specify the location of Qt's qhelpgenerator. 
> # If non-empty doxygen will try to run qhelpgenerator on the generated 
> # .qhp file.
> 
> QHG_LOCATION           = 
> 
> # The DISABLE_INDEX tag can be used to turn on/off the condensed index at 
> # top of each HTML page. The value NO (the default) enables the index and 
> # the value YES disables it.
> 
> DISABLE_INDEX          = NO
> 
> # This tag can be used to set the number of enum values (range [1..20]) 
> # that doxygen will group on one line in the generated HTML documentation.
> 
> ENUM_VALUES_PER_LINE   = 1
> 
> # The GENERATE_TREEVIEW tag is used to specify whether a tree-like index 
> # structure should be generated to display hierarchical information. 
> # If the tag value is set to FRAME, a side panel will be generated 
> # containing a tree-like index structure (just like the one that 
> # is generated for HTML Help). For this to work a browser that supports 
> # JavaScript, DHTML, CSS and frames is required (for instance Mozilla 1.0+, 
> # Netscape 6.0+, Internet explorer 5.0+, or Konqueror). Windows users are 
> # probably better off using the HTML help feature. Other possible values 
> # for this tag are: HIERARCHIES, which will generate the Groups, Directories, 
> # and Class Hierarchy pages using a tree view instead of an ordered list; 
> # ALL, which combines the behavior of FRAME and HIERARCHIES; and NONE, which 
> # disables this behavior completely. For backwards compatibility with previous 
> # releases of Doxygen, the values YES and NO are equivalent to FRAME and NONE 
> # respectively.
> 
> GENERATE_TREEVIEW      = ALL
> 
> # If the treeview is enabled (see GENERATE_TREEVIEW) then this tag can be 
> # used to set the initial width (in pixels) of the frame in which the tree 
> # is shown.
> 
> TREEVIEW_WIDTH         = 250
> 
> # Use this tag to change the font size of Latex formulas included 
> # as images in the HTML documentation. The default is 10. Note that 
> # when you change the font size after a successful doxygen run you need 
> # to manually remove any form_*.png images from the HTML output directory 
> # to force them to be regenerated.
> 
> FORMULA_FONTSIZE       = 10
> 
> #---------------------------------------------------------------------------
> # configuration options related to the LaTeX output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_LATEX tag is set to YES (the default) Doxygen will 
> # generate Latex output.
> 
> GENERATE_LATEX         = NO
> 
> # The LATEX_OUTPUT tag is used to specify where the LaTeX docs will be put. 
> # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
> # put in front of it. If left blank `latex' will be used as the default path.
> 
> LATEX_OUTPUT           = latex
> 
> # The LATEX_CMD_NAME tag can be used to specify the LaTeX command name to be 
> # invoked. If left blank `latex' will be used as the default command name.
> 
> LATEX_CMD_NAME         = latex
> 
> # The MAKEINDEX_CMD_NAME tag can be used to specify the command name to 
> # generate index for LaTeX. If left blank `makeindex' will be used as the 
> # default command name.
> 
> MAKEINDEX_CMD_NAME     = makeindex
> 
> # If the COMPACT_LATEX tag is set to YES Doxygen generates more compact 
> # LaTeX documents. This may be useful for small projects and may help to 
> # save some trees in general.
> 
> COMPACT_LATEX          = NO
> 
> # The PAPER_TYPE tag can be used to set the paper type that is used 
> # by the printer. Possible values are: a4, a4wide, letter, legal and 
> # executive. If left blank a4wide will be used.
> 
> PAPER_TYPE             = a4wide
> 
> # The EXTRA_PACKAGES tag can be to specify one or more names of LaTeX 
> # packages that should be included in the LaTeX output.
> 
> EXTRA_PACKAGES         = 
> 
> # The LATEX_HEADER tag can be used to specify a personal LaTeX header for 
> # the generated latex document. The header should contain everything until 
> # the first chapter. If it is left blank doxygen will generate a 
> # standard header. Notice: only use this tag if you know what you are doing!
> 
> LATEX_HEADER           = 
> 
> # If the PDF_HYPERLINKS tag is set to YES, the LaTeX that is generated 
> # is prepared for conversion to pdf (using ps2pdf). The pdf file will 
> # contain links (just like the HTML output) instead of page references 
> # This makes the output suitable for online browsing using a pdf viewer.
> 
> PDF_HYPERLINKS         = YES
> 
> # If the USE_PDFLATEX tag is set to YES, pdflatex will be used instead of 
> # plain latex in the generated Makefile. Set this option to YES to get a 
> # higher quality PDF documentation.
> 
> USE_PDFLATEX           = YES
> 
> # If the LATEX_BATCHMODE tag is set to YES, doxygen will add the \\batchmode. 
> # command to the generated LaTeX files. This will instruct LaTeX to keep 
> # running if errors occur, instead of asking the user for help. 
> # This option is also used when generating formulas in HTML.
> 
> LATEX_BATCHMODE        = NO
> 
> # If LATEX_HIDE_INDICES is set to YES then doxygen will not 
> # include the index chapters (such as File Index, Compound Index, etc.) 
> # in the output.
> 
> LATEX_HIDE_INDICES     = NO
> 
> # If LATEX_SOURCE_CODE is set to YES then doxygen will include
> # source code with syntax highlighting in the LaTeX output.
> # Note that which sources are shown also depends on other settings
> # such as SOURCE_BROWSER.
> 
> LATEX_SOURCE_CODE      = NO
> 
> #---------------------------------------------------------------------------
> # configuration options related to the RTF output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_RTF tag is set to YES Doxygen will generate RTF output 
> # The RTF output is optimized for Word 97 and may not look very pretty with 
> # other RTF readers or editors.
> 
> GENERATE_RTF           = NO
> 
> # The RTF_OUTPUT tag is used to specify where the RTF docs will be put. 
> # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
> # put in front of it. If left blank `rtf' will be used as the default path.
> 
> RTF_OUTPUT             = rtf
> 
> # If the COMPACT_RTF tag is set to YES Doxygen generates more compact 
> # RTF documents. This may be useful for small projects and may help to 
> # save some trees in general.
> 
> COMPACT_RTF            = NO
> 
> # If the RTF_HYPERLINKS tag is set to YES, the RTF that is generated 
> # will contain hyperlink fields. The RTF file will 
> # contain links (just like the HTML output) instead of page references. 
> # This makes the output suitable for online browsing using WORD or other 
> # programs which support those fields. 
> # Note: wordpad (write) and others do not support links.
> 
> RTF_HYPERLINKS         = NO
> 
> # Load stylesheet definitions from file. Syntax is similar to doxygen's 
> # config file, i.e. a series of assignments. You only have to provide 
> # replacements, missing definitions are set to their default value.
> 
> RTF_STYLESHEET_FILE    = 
> 
> # Set optional variables used in the generation of an rtf document. 
> # Syntax is similar to doxygen's config file.
> 
> RTF_EXTENSIONS_FILE    = 
> 
> #---------------------------------------------------------------------------
> # configuration options related to the man page output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_MAN tag is set to YES (the default) Doxygen will 
> # generate man pages
> 
> GENERATE_MAN           = NO
> 
> # The MAN_OUTPUT tag is used to specify where the man pages will be put. 
> # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
> # put in front of it. If left blank `man' will be used as the default path.
> 
> MAN_OUTPUT             = man
> 
> # The MAN_EXTENSION tag determines the extension that is added to 
> # the generated man pages (default is the subroutine's section .3)
> 
> MAN_EXTENSION          = .3
> 
> # If the MAN_LINKS tag is set to YES and Doxygen generates man output, 
> # then it will generate one additional man file for each entity 
> # documented in the real man page(s). These additional files 
> # only source the real man page, but without them the man command 
> # would be unable to find the correct page. The default is NO.
> 
> MAN_LINKS              = NO
> 
> #---------------------------------------------------------------------------
> # configuration options related to the XML output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_XML tag is set to YES Doxygen will 
> # generate an XML file that captures the structure of 
> # the code including all documentation.
> 
> GENERATE_XML           = NO
> 
> # The XML_OUTPUT tag is used to specify where the XML pages will be put. 
> # If a relative path is entered the value of OUTPUT_DIRECTORY will be 
> # put in front of it. If left blank `xml' will be used as the default path.
> 
> XML_OUTPUT             = xml
> 
> # The XML_SCHEMA tag can be used to specify an XML schema, 
> # which can be used by a validating XML parser to check the 
> # syntax of the XML files.
> 
> XML_SCHEMA             = 
> 
> # The XML_DTD tag can be used to specify an XML DTD, 
> # which can be used by a validating XML parser to check the 
> # syntax of the XML files.
> 
> XML_DTD                = 
> 
> # If the XML_PROGRAMLISTING tag is set to YES Doxygen will 
> # dump the program listings (including syntax highlighting 
> # and cross-referencing information) to the XML output. Note that 
> # enabling this will significantly increase the size of the XML output.
> 
> XML_PROGRAMLISTING     = YES
> 
> #---------------------------------------------------------------------------
> # configuration options for the AutoGen Definitions output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_AUTOGEN_DEF tag is set to YES Doxygen will 
> # generate an AutoGen Definitions (see autogen.sf.net) file 
> # that captures the structure of the code including all 
> # documentation. Note that this feature is still experimental 
> # and incomplete at the moment.
> 
> GENERATE_AUTOGEN_DEF   = NO
> 
> #---------------------------------------------------------------------------
> # configuration options related to the Perl module output
> #---------------------------------------------------------------------------
> 
> # If the GENERATE_PERLMOD tag is set to YES Doxygen will 
> # generate a Perl module file that captures the structure of 
> # the code including all documentation. Note that this 
> # feature is still experimental and incomplete at the 
> # moment.
> 
> GENERATE_PERLMOD       = NO
> 
> # If the PERLMOD_LATEX tag is set to YES Doxygen will generate 
> # the necessary Makefile rules, Perl scripts and LaTeX code to be able 
> # to generate PDF and DVI output from the Perl module output.
> 
> PERLMOD_LATEX          = NO
> 
> # If the PERLMOD_PRETTY tag is set to YES the Perl module output will be 
> # nicely formatted so it can be parsed by a human reader.  This is useful 
> # if you want to understand what is going on.  On the other hand, if this 
> # tag is set to NO the size of the Perl module output will be much smaller 
> # and Perl will parse it just the same.
> 
> PERLMOD_PRETTY         = YES
> 
> # The names of the make variables in the generated doxyrules.make file 
> # are prefixed with the string contained in PERLMOD_MAKEVAR_PREFIX. 
> # This is useful so different doxyrules.make files included by the same 
> # Makefile don't overwrite each other's variables.
> 
> PERLMOD_MAKEVAR_PREFIX = 
> 
> #---------------------------------------------------------------------------
> # Configuration options related to the preprocessor   
> #---------------------------------------------------------------------------
> 
> # If the ENABLE_PREPROCESSING tag is set to YES (the default) Doxygen will 
> # evaluate all C-preprocessor directives found in the sources and include 
> # files.
> 
> ENABLE_PREPROCESSING   = YES
> 
> # If the MACRO_EXPANSION tag is set to YES Doxygen will expand all macro 
> # names in the source code. If set to NO (the default) only conditional 
> # compilation will be performed. Macro expansion can be done in a controlled 
> # way by setting EXPAND_ONLY_PREDEF to YES.
> 
> MACRO_EXPANSION        = YES
> 
> # If the EXPAND_ONLY_PREDEF and MACRO_EXPANSION tags are both set to YES 
> # then the macro expansion is limited to the macros specified with the 
> # PREDEFINED and EXPAND_AS_DEFINED tags.
> 
> EXPAND_ONLY_PREDEF     = YES
> 
> # If the SEARCH_INCLUDES tag is set to YES (the default) the includes files 
> # in the INCLUDE_PATH (see below) will be search if a #include is found.
> 
> SEARCH_INCLUDES        = YES
> 
> # The INCLUDE_PATH tag can be used to specify one or more directories that 
> # contain include files that are not input files but should be processed by 
> # the preprocessor.
> 
> INCLUDE_PATH           = 
> 
> # You can use the INCLUDE_FILE_PATTERNS tag to specify one or more wildcard 
> # patterns (like *.h and *.hpp) to filter out the header-files in the 
> # directories. If left blank, the patterns specified with FILE_PATTERNS will 
> # be used.
> 
> INCLUDE_FILE_PATTERNS  = 
> 
> # The PREDEFINED tag can be used to specify one or more macro names that 
> # are defined before the preprocessor is started (similar to the -D option of 
> # gcc). The argument of the tag is a list of macros of the form: name 
> # or name=definition (no spaces). If the definition and the = are 
> # omitted =1 is assumed. To prevent a macro definition from being 
> # undefined via #undef or recursively expanded use the := operator 
> # instead of the = operator.
> 
> PREDEFINED             = DOXYGEN_SHOULD_IGNORE_THIS=1 \
>                          DECLSPEC= \
>                          SDLCALL= \
>                          _WIN32=1
> 
> # If the MACRO_EXPANSION and EXPAND_ONLY_PREDEF tags are set to YES then 
> # this tag can be used to specify a list of macro names that should be expanded. 
> # The macro definition that is found in the sources will be used. 
> # Use the PREDEFINED tag if you want to use a different macro definition.
> 
> EXPAND_AS_DEFINED      = 
> 
> # If the SKIP_FUNCTION_MACROS tag is set to YES (the default) then 
> # doxygen's preprocessor will remove all function-like macros that are alone 
> # on a line, have an all uppercase name, and do not end with a semicolon. Such 
> # function macros are typically used for boiler-plate code, and will confuse 
> # the parser if not removed.
> 
> SKIP_FUNCTION_MACROS   = YES
> 
> #---------------------------------------------------------------------------
> # Configuration::additions related to external references   
> #---------------------------------------------------------------------------
> 
> # The TAGFILES option can be used to specify one or more tagfiles. 
> # Optionally an initial location of the external documentation 
> # can be added for each tagfile. The format of a tag file without 
> # this location is as follows: 
> #   TAGFILES = file1 file2 ... 
> # Adding location for the tag files is done as follows: 
> #   TAGFILES = file1=loc1 "file2 = loc2" ... 
> # where "loc1" and "loc2" can be relative or absolute paths or 
> # URLs. If a location is present for each tag, the installdox tool 
> # does not have to be run to correct the links. 
> # Note that each tag file must have a unique name 
> # (where the name does NOT include the path) 
> # If a tag file is not located in the directory in which doxygen 
> # is run, you must also specify the path to the tagfile here.
> 
> TAGFILES               = 
> 
> # When a file name is specified after GENERATE_TAGFILE, doxygen will create 
> # a tag file that is based on the input files it reads.
> 
> GENERATE_TAGFILE       = ./SDL.tag
> 
> # If the ALLEXTERNALS tag is set to YES all external classes will be listed 
> # in the class index. If set to NO only the inherited external classes 
> # will be listed.
> 
> ALLEXTERNALS           = NO
> 
> # If the EXTERNAL_GROUPS tag is set to YES all external groups will be listed 
> # in the modules index. If set to NO, only the current project's groups will 
> # be listed.
> 
> EXTERNAL_GROUPS        = YES
> 
> # The PERL_PATH should be the absolute path and name of the perl script 
> # interpreter (i.e. the result of `which perl').
> 
> PERL_PATH              = c:\Perl\bin\perl.exe
> 
> #---------------------------------------------------------------------------
> # Configuration options related to the dot tool   
> #---------------------------------------------------------------------------
> 
> # If the CLASS_DIAGRAMS tag is set to YES (the default) Doxygen will 
> # generate a inheritance diagram (in HTML, RTF and LaTeX) for classes with base 
> # or super classes. Setting the tag to NO turns the diagrams off. Note that 
> # this option is superseded by the HAVE_DOT option below. This is only a 
> # fallback. It is recommended to install and use dot, since it yields more 
> # powerful graphs.
> 
> CLASS_DIAGRAMS         = YES
> 
> # You can define message sequence charts within doxygen comments using the \msc 
> # command. Doxygen will then run the mscgen tool (see 
> # http://www.mcternan.me.uk/mscgen/) to produce the chart and insert it in the 
> # documentation. The MSCGEN_PATH tag allows you to specify the directory where 
> # the mscgen tool resides. If left empty the tool is assumed to be found in the 
> # default search path.
> 
> MSCGEN_PATH            = 
> 
> # If set to YES, the inheritance and collaboration graphs will hide 
> # inheritance and usage relations if the target is undocumented 
> # or is not a class.
> 
> HIDE_UNDOC_RELATIONS   = YES
> 
> # If you set the HAVE_DOT tag to YES then doxygen will assume the dot tool is 
> # available from the path. This tool is part of Graphviz, a graph visualization 
> # toolkit from AT&T and Lucent Bell Labs. The other options in this section 
> # have no effect if this option is set to NO (the default)
> 
> HAVE_DOT               = YES
> 
> # By default doxygen will write a font called FreeSans.ttf to the output 
> # directory and reference it in all dot files that doxygen generates. This 
> # font does not include all possible unicode characters however, so when you need 
> # these (or just want a differently looking font) you can specify the font name 
> # using DOT_FONTNAME. You need need to make sure dot is able to find the font, 
> # which can be done by putting it in a standard location or by setting the 
> # DOTFONTPATH environment variable or by setting DOT_FONTPATH to the directory 
> # containing the font.
> 
> DOT_FONTNAME           = FreeSans
> 
> # The DOT_FONTSIZE tag can be used to set the size of the font of dot graphs. 
> # The default size is 10pt.
> 
> DOT_FONTSIZE           = 10
> 
> # By default doxygen will tell dot to use the output directory to look for the 
> # FreeSans.ttf font (which doxygen will put there itself). If you specify a 
> # different font using DOT_FONTNAME you can set the path where dot 
> # can find it using this tag.
> 
> DOT_FONTPATH           = 
> 
> # If the CLASS_GRAPH and HAVE_DOT tags are set to YES then doxygen 
> # will generate a graph for each documented class showing the direct and 
> # indirect inheritance relations. Setting this tag to YES will force the 
> # the CLASS_DIAGRAMS tag to NO.
> 
> CLASS_GRAPH            = YES
> 
> # If the COLLABORATION_GRAPH and HAVE_DOT tags are set to YES then doxygen 
> # will generate a graph for each documented class showing the direct and 
> # indirect implementation dependencies (inheritance, containment, and 
> # class references variables) of the class with other documented classes.
> 
> COLLABORATION_GRAPH    = YES
> 
> # If the GROUP_GRAPHS and HAVE_DOT tags are set to YES then doxygen 
> # will generate a graph for groups, showing the direct groups dependencies
> 
> GROUP_GRAPHS           = YES
> 
> # If the UML_LOOK tag is set to YES doxygen will generate inheritance and 
> # collaboration diagrams in a style similar to the OMG's Unified Modeling 
> # Language.
> 
> UML_LOOK               = NO
> 
> # If set to YES, the inheritance and collaboration graphs will show the 
> # relations between templates and their instances.
> 
> TEMPLATE_RELATIONS     = YES
> 
> # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDE_GRAPH, and HAVE_DOT 
> # tags are set to YES then doxygen will generate a graph for each documented 
> # file showing the direct and indirect include dependencies of the file with 
> # other documented files.
> 
> INCLUDE_GRAPH          = YES
> 
> # If the ENABLE_PREPROCESSING, SEARCH_INCLUDES, INCLUDED_BY_GRAPH, and 
> # HAVE_DOT tags are set to YES then doxygen will generate a graph for each 
> # documented header file showing the documented files that directly or 
> # indirectly include this file.
> 
> INCLUDED_BY_GRAPH      = YES
> 
> # If the CALL_GRAPH and HAVE_DOT options are set to YES then 
> # doxygen will generate a call dependency graph for every global function 
> # or class method. Note that enabling this option will significantly increase 
> # the time of a run. So in most cases it will be better to enable call graphs 
> # for selected functions only using the \callgraph command.
> 
> CALL_GRAPH             = NO
> 
> # If the CALLER_GRAPH and HAVE_DOT tags are set to YES then 
> # doxygen will generate a caller dependency graph for every global function 
> # or class method. Note that enabling this option will significantly increase 
> # the time of a run. So in most cases it will be better to enable caller 
> # graphs for selected functions only using the \callergraph command.
> 
> CALLER_GRAPH           = NO
> 
> # If the GRAPHICAL_HIERARCHY and HAVE_DOT tags are set to YES then doxygen 
> # will graphical hierarchy of all classes instead of a textual one.
> 
> GRAPHICAL_HIERARCHY    = YES
> 
> # If the DIRECTORY_GRAPH, SHOW_DIRECTORIES and HAVE_DOT tags are set to YES 
> # then doxygen will show the dependencies a directory has on other directories 
> # in a graphical way. The dependency relations are determined by the #include 
> # relations between the files in the directories.
> 
> DIRECTORY_GRAPH        = YES
> 
> # The DOT_IMAGE_FORMAT tag can be used to set the image format of the images 
> # generated by dot. Possible values are png, jpg, or gif 
> # If left blank png will be used.
> 
> DOT_IMAGE_FORMAT       = png
> 
> # The tag DOT_PATH can be used to specify the path where the dot tool can be 
> # found. If left blank, it is assumed the dot tool can be found in the path.
> 
> DOT_PATH               = 
> 
> # The DOTFILE_DIRS tag can be used to specify one or more directories that 
> # contain dot files that are included in the documentation (see the 
> # \dotfile command).
> 
> DOTFILE_DIRS           = 
> 
> # The DOT_GRAPH_MAX_NODES tag can be used to set the maximum number of 
> # nodes that will be shown in the graph. If the number of nodes in a graph 
> # becomes larger than this value, doxygen will truncate the graph, which is 
> # visualized by representing a node as a red box. Note that doxygen if the 
> # number of direct children of the root node in a graph is already larger than 
> # DOT_GRAPH_MAX_NODES then the graph will not be shown at all. Also note 
> # that the size of a graph can be further restricted by MAX_DOT_GRAPH_DEPTH.
> 
> DOT_GRAPH_MAX_NODES    = 50
> 
> # The MAX_DOT_GRAPH_DEPTH tag can be used to set the maximum depth of the 
> # graphs generated by dot. A depth value of 3 means that only nodes reachable 
> # from the root by following a path via at most 3 edges will be shown. Nodes 
> # that lay further from the root node will be omitted. Note that setting this 
> # option to 1 or 2 may greatly reduce the computation time needed for large 
> # code bases. Also note that the size of a graph can be further restricted by 
> # DOT_GRAPH_MAX_NODES. Using a depth of 0 means no depth restriction.
> 
> MAX_DOT_GRAPH_DEPTH    = 2
> 
> # Set the DOT_TRANSPARENT tag to YES to generate images with a transparent 
> # background. This is disabled by default, because dot on Windows does not 
> # seem to support this out of the box. Warning: Depending on the platform used, 
> # enabling this option may lead to badly anti-aliased labels on the edges of 
> # a graph (i.e. they become hard to read).
> 
> DOT_TRANSPARENT        = NO
> 
> # Set the DOT_MULTI_TARGETS tag to YES allow dot to generate multiple output 
> # files in one run (i.e. multiple -o and -T options on the command line). This 
> # makes dot run faster, but since only newer versions of dot (>1.8.10) 
> # support this, this feature is disabled by default.
> 
> DOT_MULTI_TARGETS      = YES
> 
> # If the GENERATE_LEGEND tag is set to YES (the default) Doxygen will 
> # generate a legend page explaining the meaning of the various boxes and 
> # arrows in the dot generated graphs.
> 
> GENERATE_LEGEND        = YES
> 
> # If the DOT_CLEANUP tag is set to YES (the default) Doxygen will 
> # remove the intermediate dot files that are used to generate 
> # the various graphs.
> 
> DOT_CLEANUP            = YES
> 
> #---------------------------------------------------------------------------
> # Options related to the search engine
> #---------------------------------------------------------------------------
> 
> # The SEARCHENGINE tag specifies whether or not a search engine should be 
> # used. If set to NO the values of all tags below this one will be ignored.
> 
> SEARCHENGINE           = NO
diff jni/SDL/include/SDL.h ../android-sdl/jni/SDL2/include/SDL.h
1,169c1,160
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL.h
<  *
<  *  Main include header for the SDL library
<  */
< 
< /**
<  *  \mainpage Simple DirectMedia Layer (SDL)
<  *
<  *  http://www.libsdl.org/
<  *
<  *  \section intro_sec Introduction
<  *
<  *  Simple DirectMedia Layer is a cross-platform development library designed
<  *  to provide low level access to audio, keyboard, mouse, joystick, and
<  *  graphics hardware via OpenGL and Direct3D. It is used by video playback
<  *  software, emulators, and popular games including Valve's award winning
<  *  catalog and many Humble Bundle games.
<  *
<  *  SDL officially supports Windows, Mac OS X, Linux, iOS, and Android.
<  *  Support for other platforms may be found in the source code.
<  *
<  *  SDL is written in C, works natively with C++, and there are bindings 
<  *  available for several other languages, including C# and Python.
<  *
<  *  This library is distributed under the zlib license, which can be found
<  *  in the file "COPYING.txt".
<  *
<  *  The best way to learn how to use SDL is to check out the header files in
<  *  the "include" subdirectory and the programs in the "test" subdirectory.
<  *  The header files and test programs are well commented and always up to date.
<  *  More documentation and FAQs are available online at:
<  *      http://wiki.libsdl.org/
<  *
<  *  If you need help with the library, or just want to discuss SDL related
<  *  issues, you can join the developers mailing list:
<  *      http://www.libsdl.org/mailing-list.php
<  *
<  *  Enjoy!
<  *      Sam Lantinga                (slouken@libsdl.org)
<  */
< 
< #ifndef _SDL_H
< #define _SDL_H
< 
< #include "SDL_main.h"
< #include "SDL_stdinc.h"
< #include "SDL_assert.h"
< #include "SDL_atomic.h"
< #include "SDL_audio.h"
< #include "SDL_clipboard.h"
< #include "SDL_cpuinfo.h"
< #include "SDL_endian.h"
< #include "SDL_error.h"
< #include "SDL_events.h"
< #include "SDL_filesystem.h"
< #include "SDL_joystick.h"
< #include "SDL_gamecontroller.h"
< #include "SDL_haptic.h"
< #include "SDL_hints.h"
< #include "SDL_loadso.h"
< #include "SDL_log.h"
< #include "SDL_messagebox.h"
< #include "SDL_mutex.h"
< #include "SDL_power.h"
< #include "SDL_render.h"
< #include "SDL_rwops.h"
< #include "SDL_system.h"
< #include "SDL_thread.h"
< #include "SDL_timer.h"
< #include "SDL_version.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* As of version 0.5, SDL is loaded dynamically into the application */
< 
< /**
<  *  \name SDL_INIT_*
<  *
<  *  These are the flags which may be passed to SDL_Init().  You should
<  *  specify the subsystems which you will be using in your application.
<  */
< /* @{ */
< #define SDL_INIT_TIMER          0x00000001
< #define SDL_INIT_AUDIO          0x00000010
< #define SDL_INIT_VIDEO          0x00000020  /**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
< #define SDL_INIT_JOYSTICK       0x00000200  /**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
< #define SDL_INIT_HAPTIC         0x00001000
< #define SDL_INIT_GAMECONTROLLER 0x00002000  /**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
< #define SDL_INIT_EVENTS         0x00004000
< #define SDL_INIT_NOPARACHUTE    0x00100000  /**< Don't catch fatal signals */
< #define SDL_INIT_EVERYTHING ( \
<                 SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | \
<                 SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER \
<             )
< /* @} */
< 
< /**
<  *  This function initializes  the subsystems specified by \c flags
<  *  Unless the ::SDL_INIT_NOPARACHUTE flag is set, it will install cleanup
<  *  signal handlers for some commonly ignored fatal signals (like SIGSEGV).
<  */
< extern DECLSPEC int SDLCALL SDL_Init(Uint32 flags);
< 
< /**
<  *  This function initializes specific SDL subsystems
<  */
< extern DECLSPEC int SDLCALL SDL_InitSubSystem(Uint32 flags);
< 
< /**
<  *  This function cleans up specific SDL subsystems
<  */
< extern DECLSPEC void SDLCALL SDL_QuitSubSystem(Uint32 flags);
< 
< /**
<  *  This function returns a mask of the specified subsystems which have
<  *  previously been initialized.
<  *
<  *  If \c flags is 0, it returns a mask of all initialized subsystems.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_WasInit(Uint32 flags);
< 
< /**
<  *  This function cleans up all initialized subsystems. You should
<  *  call it upon all exit conditions.
<  */
< extern DECLSPEC void SDLCALL SDL_Quit(void);
< 
< extern DECLSPEC float SDLCALL SDL_GetDensity();
< 
< extern DECLSPEC char* SDLCALL SDL_GetRomFile();
< 
< extern DECLSPEC void SDLCALL SDL_FinishActivity();
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_H */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL.h
>  *
>  *  Main include header for the SDL library
>  */
> 
> /**
>  *  \mainpage Simple DirectMedia Layer (SDL)
>  *
>  *  http://www.libsdl.org/
>  *
>  *  \section intro_sec Introduction
>  *
>  *  This is the Simple DirectMedia Layer, a general API that provides low
>  *  level access to audio, keyboard, mouse, joystick, 3D hardware via OpenGL,
>  *  and 2D framebuffer across multiple platforms.
>  *
>  *  SDL is written in C, but works with C++ natively, and has bindings to
>  *  several other languages, including Ada, C#, Eiffel, Erlang, Euphoria,
>  *  Guile, Haskell, Java, Lisp, Lua, ML, Objective C, Pascal, Perl, PHP,
>  *  Pike, Pliant, Python, Ruby, and Smalltalk.
>  *
>  *  This library is distributed under the zlib license, which can be
>  *  found in the file  "COPYING".  This license allows you to use SDL
>  *  freely for any purpose as long as you retain the copyright notice.
>  *
>  *  The best way to learn how to use SDL is to check out the header files in
>  *  the "include" subdirectory and the programs in the "test" subdirectory.
>  *  The header files and test programs are well commented and always up to date.
>  *  More documentation and FAQs are available online at:
>  *      http://wiki.libsdl.org/
>  *
>  *  If you need help with the library, or just want to discuss SDL related
>  *  issues, you can join the developers mailing list:
>  *      http://www.libsdl.org/mailing-list.php
>  *
>  *  Enjoy!
>  *      Sam Lantinga                (slouken@libsdl.org)
>  */
> 
> #ifndef _SDL_H
> #define _SDL_H
> 
> #include "SDL_main.h"
> #include "SDL_stdinc.h"
> #include "SDL_assert.h"
> #include "SDL_atomic.h"
> #include "SDL_audio.h"
> #include "SDL_clipboard.h"
> #include "SDL_cpuinfo.h"
> #include "SDL_endian.h"
> #include "SDL_error.h"
> #include "SDL_events.h"
> #include "SDL_joystick.h"
> #include "SDL_gamecontroller.h"
> #include "SDL_haptic.h"
> #include "SDL_hints.h"
> #include "SDL_loadso.h"
> #include "SDL_log.h"
> #include "SDL_messagebox.h"
> #include "SDL_mutex.h"
> #include "SDL_power.h"
> #include "SDL_render.h"
> #include "SDL_rwops.h"
> #include "SDL_system.h"
> #include "SDL_thread.h"
> #include "SDL_timer.h"
> #include "SDL_version.h"
> #include "SDL_video.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* As of version 0.5, SDL is loaded dynamically into the application */
> 
> /**
>  *  \name SDL_INIT_*
>  *
>  *  These are the flags which may be passed to SDL_Init().  You should
>  *  specify the subsystems which you will be using in your application.
>  */
> /*@{*/
> #define SDL_INIT_TIMER          0x00000001
> #define SDL_INIT_AUDIO          0x00000010
> #define SDL_INIT_VIDEO          0x00000020  /**< SDL_INIT_VIDEO implies SDL_INIT_EVENTS */
> #define SDL_INIT_JOYSTICK       0x00000200  /**< SDL_INIT_JOYSTICK implies SDL_INIT_EVENTS */
> #define SDL_INIT_HAPTIC         0x00001000
> #define SDL_INIT_GAMECONTROLLER 0x00002000  /**< SDL_INIT_GAMECONTROLLER implies SDL_INIT_JOYSTICK */
> #define SDL_INIT_EVENTS         0x00004000
> #define SDL_INIT_NOPARACHUTE    0x00100000  /**< Don't catch fatal signals */
> #define SDL_INIT_EVERYTHING ( \
>                 SDL_INIT_TIMER | SDL_INIT_AUDIO | SDL_INIT_VIDEO | SDL_INIT_EVENTS | \
>                 SDL_INIT_JOYSTICK | SDL_INIT_HAPTIC | SDL_INIT_GAMECONTROLLER \
>             )
> /*@}*/
> 
> /**
>  *  This function initializes  the subsystems specified by \c flags
>  *  Unless the ::SDL_INIT_NOPARACHUTE flag is set, it will install cleanup
>  *  signal handlers for some commonly ignored fatal signals (like SIGSEGV).
>  */
> extern DECLSPEC int SDLCALL SDL_Init(Uint32 flags);
> 
> /**
>  *  This function initializes specific SDL subsystems
>  */
> extern DECLSPEC int SDLCALL SDL_InitSubSystem(Uint32 flags);
> 
> /**
>  *  This function cleans up specific SDL subsystems
>  */
> extern DECLSPEC void SDLCALL SDL_QuitSubSystem(Uint32 flags);
> 
> /**
>  *  This function returns a mask of the specified subsystems which have
>  *  previously been initialized.
>  *
>  *  If \c flags is 0, it returns a mask of all initialized subsystems.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_WasInit(Uint32 flags);
> 
> /**
>  *  This function cleans up all initialized subsystems. You should
>  *  call it upon all exit conditions.
>  */
> extern DECLSPEC void SDLCALL SDL_Quit(void);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_H */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_assert.h ../android-sdl/jni/SDL2/include/SDL_assert.h
1,246c1,237
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_assert_h
< #define _SDL_assert_h
< 
< #include "SDL_config.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #ifndef SDL_ASSERT_LEVEL
< #ifdef SDL_DEFAULT_ASSERT_LEVEL
< #define SDL_ASSERT_LEVEL SDL_DEFAULT_ASSERT_LEVEL
< #elif defined(_DEBUG) || defined(DEBUG) || \
<       (defined(__GNUC__) && !defined(__OPTIMIZE__))
< #define SDL_ASSERT_LEVEL 2
< #else
< #define SDL_ASSERT_LEVEL 1
< #endif
< #endif /* SDL_ASSERT_LEVEL */
< 
< /*
< These are macros and not first class functions so that the debugger breaks
< on the assertion line and not in some random guts of SDL, and so each
< assert can have unique static variables associated with it.
< */
< 
< #if defined(_MSC_VER)
< /* Don't include intrin.h here because it contains C++ code */
<     extern void __cdecl __debugbreak(void);
<     #define SDL_TriggerBreakpoint() __debugbreak()
< #elif (defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__)))
<     #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( "int $3\n\t" )
< #elif defined(HAVE_SIGNAL_H)
<     #include <signal.h>
<     #define SDL_TriggerBreakpoint() raise(SIGTRAP)
< #else
<     /* How do we trigger breakpoints on this platform? */
<     #define SDL_TriggerBreakpoint()
< #endif
< 
< #if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 supports __func__ as a standard. */
< #   define SDL_FUNCTION __func__
< #elif ((__GNUC__ >= 2) || defined(_MSC_VER))
< #   define SDL_FUNCTION __FUNCTION__
< #else
< #   define SDL_FUNCTION "???"
< #endif
< #define SDL_FILE    __FILE__
< #define SDL_LINE    __LINE__
< 
< /*
< sizeof (x) makes the compiler still parse the expression even without
< assertions enabled, so the code is always checked at compile time, but
< doesn't actually generate code for it, so there are no side effects or
< expensive checks at run time, just the constant size of what x WOULD be,
< which presumably gets optimized out as unused.
< This also solves the problem of...
< 
<     int somevalue = blah();
<     SDL_assert(somevalue == 1);
< 
< ...which would cause compiles to complain that somevalue is unused if we
< disable assertions.
< */
< 
< #ifdef _MSC_VER  /* stupid /W4 warnings. */
< #define SDL_NULL_WHILE_LOOP_CONDITION (-1 == __LINE__)
< #else
< #define SDL_NULL_WHILE_LOOP_CONDITION (0)
< #endif
< 
< #define SDL_disabled_assert(condition) \
<     do { (void) sizeof ((condition)); } while (SDL_NULL_WHILE_LOOP_CONDITION)
< 
< typedef enum
< {
<     SDL_ASSERTION_RETRY,  /**< Retry the assert immediately. */
<     SDL_ASSERTION_BREAK,  /**< Make the debugger trigger a breakpoint. */
<     SDL_ASSERTION_ABORT,  /**< Terminate the program. */
<     SDL_ASSERTION_IGNORE,  /**< Ignore the assert. */
<     SDL_ASSERTION_ALWAYS_IGNORE  /**< Ignore the assert from now on. */
< } SDL_assert_state;
< 
< typedef struct SDL_assert_data
< {
<     int always_ignore;
<     unsigned int trigger_count;
<     const char *condition;
<     const char *filename;
<     int linenum;
<     const char *function;
<     const struct SDL_assert_data *next;
< } SDL_assert_data;
< 
< #if (SDL_ASSERT_LEVEL > 0)
< 
< /* Never call this directly. Use the SDL_assert* macros. */
< extern DECLSPEC SDL_assert_state SDLCALL SDL_ReportAssertion(SDL_assert_data *,
<                                                              const char *,
<                                                              const char *, int);
< 
< /* the do {} while(0) avoids dangling else problems:
<     if (x) SDL_assert(y); else blah();
<        ... without the do/while, the "else" could attach to this macro's "if".
<    We try to handle just the minimum we need here in a macro...the loop,
<    the static vars, and break points. The heavy lifting is handled in
<    SDL_ReportAssertion(), in SDL_assert.c.
< */
< #define SDL_enabled_assert(condition) \
<     do { \
<         while ( !(condition) ) { \
<             static struct SDL_assert_data assert_data = { \
<                 0, 0, #condition, 0, 0, 0, 0 \
<             }; \
<             const SDL_assert_state state = SDL_ReportAssertion(&assert_data, \
<                                                                SDL_FUNCTION, \
<                                                                SDL_FILE, \
<                                                                SDL_LINE); \
<             if (state == SDL_ASSERTION_RETRY) { \
<                 continue; /* go again. */ \
<             } else if (state == SDL_ASSERTION_BREAK) { \
<                 SDL_TriggerBreakpoint(); \
<             } \
<             break; /* not retrying. */ \
<         } \
<     } while (SDL_NULL_WHILE_LOOP_CONDITION)
< 
< #endif  /* enabled assertions support code */
< 
< /* Enable various levels of assertions. */
< #if SDL_ASSERT_LEVEL == 0   /* assertions disabled */
< #   define SDL_assert(condition) SDL_disabled_assert(condition)
< #   define SDL_assert_release(condition) SDL_disabled_assert(condition)
< #   define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)
< #elif SDL_ASSERT_LEVEL == 1  /* release settings. */
< #   define SDL_assert(condition) SDL_disabled_assert(condition)
< #   define SDL_assert_release(condition) SDL_enabled_assert(condition)
< #   define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)
< #elif SDL_ASSERT_LEVEL == 2  /* normal settings. */
< #   define SDL_assert(condition) SDL_enabled_assert(condition)
< #   define SDL_assert_release(condition) SDL_enabled_assert(condition)
< #   define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)
< #elif SDL_ASSERT_LEVEL == 3  /* paranoid settings. */
< #   define SDL_assert(condition) SDL_enabled_assert(condition)
< #   define SDL_assert_release(condition) SDL_enabled_assert(condition)
< #   define SDL_assert_paranoid(condition) SDL_enabled_assert(condition)
< #else
< #   error Unknown assertion level.
< #endif
< 
< /* this assertion is never disabled at any level. */
< #define SDL_assert_always(condition) SDL_enabled_assert(condition)
< 
< 
< typedef SDL_assert_state (SDLCALL *SDL_AssertionHandler)(
<                                  const SDL_assert_data* data, void* userdata);
< 
< /**
<  *  \brief Set an application-defined assertion handler.
<  *
<  *  This allows an app to show its own assertion UI and/or force the
<  *  response to an assertion failure. If the app doesn't provide this, SDL
<  *  will try to do the right thing, popping up a system-specific GUI dialog,
<  *  and probably minimizing any fullscreen windows.
<  *
<  *  This callback may fire from any thread, but it runs wrapped in a mutex, so
<  *  it will only fire from one thread at a time.
<  *
<  *  Setting the callback to NULL restores SDL's original internal handler.
<  *
<  *  This callback is NOT reset to SDL's internal handler upon SDL_Quit()!
<  *
<  *  \return SDL_assert_state value of how to handle the assertion failure.
<  *
<  *  \param handler Callback function, called when an assertion fails.
<  *  \param userdata A pointer passed to the callback as-is.
<  */
< extern DECLSPEC void SDLCALL SDL_SetAssertionHandler(
<                                             SDL_AssertionHandler handler,
<                                             void *userdata);
< 
< /**
<  *  \brief Get a list of all assertion failures.
<  *
<  *  Get all assertions triggered since last call to SDL_ResetAssertionReport(),
<  *  or the start of the program.
<  *
<  *  The proper way to examine this data looks something like this:
<  *
<  *  <code>
<  *  const SDL_assert_data *item = SDL_GetAssertionReport();
<  *  while (item) {
<  *      printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\n",
<  *             item->condition, item->function, item->filename,
<  *             item->linenum, item->trigger_count,
<  *             item->always_ignore ? "yes" : "no");
<  *      item = item->next;
<  *  }
<  *  </code>
<  *
<  *  \return List of all assertions.
<  *  \sa SDL_ResetAssertionReport
<  */
< extern DECLSPEC const SDL_assert_data * SDLCALL SDL_GetAssertionReport(void);
< 
< /**
<  *  \brief Reset the list of all assertion failures.
<  *
<  *  Reset list of all assertions triggered.
<  *
<  *  \sa SDL_GetAssertionReport
<  */
< extern DECLSPEC void SDLCALL SDL_ResetAssertionReport(void);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_assert_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_assert_h
> #define _SDL_assert_h
> 
> #include "SDL_config.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> #ifndef SDL_ASSERT_LEVEL
> #ifdef SDL_DEFAULT_ASSERT_LEVEL
> #define SDL_ASSERT_LEVEL SDL_DEFAULT_ASSERT_LEVEL
> #elif defined(_DEBUG) || defined(DEBUG) || \
>       (defined(__GNUC__) && !defined(__OPTIMIZE__))
> #define SDL_ASSERT_LEVEL 2
> #else
> #define SDL_ASSERT_LEVEL 1
> #endif
> #endif /* SDL_ASSERT_LEVEL */
> 
> /*
> These are macros and not first class functions so that the debugger breaks
> on the assertion line and not in some random guts of SDL, and so each
> assert can have unique static variables associated with it.
> */
> 
> #if defined(_MSC_VER)
> /* Don't include intrin.h here because it contains C++ code */
>     extern void __cdecl __debugbreak(void);
>     #define SDL_TriggerBreakpoint() __debugbreak()
> #elif (defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__)))
>     #define SDL_TriggerBreakpoint() __asm__ __volatile__ ( "int $3\n\t" )
> #elif defined(HAVE_SIGNAL_H)
>     #include <signal.h>
>     #define SDL_TriggerBreakpoint() raise(SIGTRAP)
> #else
>     /* How do we trigger breakpoints on this platform? */
>     #define SDL_TriggerBreakpoint()
> #endif
> 
> #if defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L) /* C99 supports __func__ as a standard. */
> #   define SDL_FUNCTION __func__
> #elif ((__GNUC__ >= 2) || defined(_MSC_VER))
> #   define SDL_FUNCTION __FUNCTION__
> #else
> #   define SDL_FUNCTION "???"
> #endif
> #define SDL_FILE    __FILE__
> #define SDL_LINE    __LINE__
> 
> /*
> sizeof (x) makes the compiler still parse the expression even without
> assertions enabled, so the code is always checked at compile time, but
> doesn't actually generate code for it, so there are no side effects or
> expensive checks at run time, just the constant size of what x WOULD be,
> which presumably gets optimized out as unused.
> This also solves the problem of...
> 
>     int somevalue = blah();
>     SDL_assert(somevalue == 1);
> 
> ...which would cause compiles to complain that somevalue is unused if we
> disable assertions.
> */
> 
> #define SDL_disabled_assert(condition) \
>     do { (void) sizeof ((condition)); } while (0)
> 
> typedef enum
> {
>     SDL_ASSERTION_RETRY,  /**< Retry the assert immediately. */
>     SDL_ASSERTION_BREAK,  /**< Make the debugger trigger a breakpoint. */
>     SDL_ASSERTION_ABORT,  /**< Terminate the program. */
>     SDL_ASSERTION_IGNORE,  /**< Ignore the assert. */
>     SDL_ASSERTION_ALWAYS_IGNORE  /**< Ignore the assert from now on. */
> } SDL_assert_state;
> 
> typedef struct SDL_assert_data
> {
>     int always_ignore;
>     unsigned int trigger_count;
>     const char *condition;
>     const char *filename;
>     int linenum;
>     const char *function;
>     const struct SDL_assert_data *next;
> } SDL_assert_data;
> 
> #if (SDL_ASSERT_LEVEL > 0)
> 
> /* Never call this directly. Use the SDL_assert* macros. */
> extern DECLSPEC SDL_assert_state SDLCALL SDL_ReportAssertion(SDL_assert_data *,
>                                                              const char *,
>                                                              const char *, int);
> 
> /* the do {} while(0) avoids dangling else problems:
>     if (x) SDL_assert(y); else blah();
>        ... without the do/while, the "else" could attach to this macro's "if".
>    We try to handle just the minimum we need here in a macro...the loop,
>    the static vars, and break points. The heavy lifting is handled in
>    SDL_ReportAssertion(), in SDL_assert.c.
> */
> #define SDL_enabled_assert(condition) \
>     do { \
>         while ( !(condition) ) { \
>             static struct SDL_assert_data assert_data = { \
>                 0, 0, #condition, 0, 0, 0, 0 \
>             }; \
>             const SDL_assert_state state = SDL_ReportAssertion(&assert_data, \
>                                                                SDL_FUNCTION, \
>                                                                SDL_FILE, \
>                                                                SDL_LINE); \
>             if (state == SDL_ASSERTION_RETRY) { \
>                 continue; /* go again. */ \
>             } else if (state == SDL_ASSERTION_BREAK) { \
>                 SDL_TriggerBreakpoint(); \
>             } \
>             break; /* not retrying. */ \
>         } \
>     } while (0)
> 
> #endif  /* enabled assertions support code */
> 
> /* Enable various levels of assertions. */
> #if SDL_ASSERT_LEVEL == 0   /* assertions disabled */
> #   define SDL_assert(condition) SDL_disabled_assert(condition)
> #   define SDL_assert_release(condition) SDL_disabled_assert(condition)
> #   define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)
> #elif SDL_ASSERT_LEVEL == 1  /* release settings. */
> #   define SDL_assert(condition) SDL_disabled_assert(condition)
> #   define SDL_assert_release(condition) SDL_enabled_assert(condition)
> #   define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)
> #elif SDL_ASSERT_LEVEL == 2  /* normal settings. */
> #   define SDL_assert(condition) SDL_enabled_assert(condition)
> #   define SDL_assert_release(condition) SDL_enabled_assert(condition)
> #   define SDL_assert_paranoid(condition) SDL_disabled_assert(condition)
> #elif SDL_ASSERT_LEVEL == 3  /* paranoid settings. */
> #   define SDL_assert(condition) SDL_enabled_assert(condition)
> #   define SDL_assert_release(condition) SDL_enabled_assert(condition)
> #   define SDL_assert_paranoid(condition) SDL_enabled_assert(condition)
> #else
> #   error Unknown assertion level.
> #endif
> 
> 
> typedef SDL_assert_state (SDLCALL *SDL_AssertionHandler)(
>                                  const SDL_assert_data* data, void* userdata);
> 
> /**
>  *  \brief Set an application-defined assertion handler.
>  *
>  *  This allows an app to show its own assertion UI and/or force the
>  *  response to an assertion failure. If the app doesn't provide this, SDL
>  *  will try to do the right thing, popping up a system-specific GUI dialog,
>  *  and probably minimizing any fullscreen windows.
>  *
>  *  This callback may fire from any thread, but it runs wrapped in a mutex, so
>  *  it will only fire from one thread at a time.
>  *
>  *  Setting the callback to NULL restores SDL's original internal handler.
>  *
>  *  This callback is NOT reset to SDL's internal handler upon SDL_Quit()!
>  *
>  *  \return SDL_assert_state value of how to handle the assertion failure.
>  *
>  *  \param handler Callback function, called when an assertion fails.
>  *  \param userdata A pointer passed to the callback as-is.
>  */
> extern DECLSPEC void SDLCALL SDL_SetAssertionHandler(
>                                             SDL_AssertionHandler handler,
>                                             void *userdata);
> 
> /**
>  *  \brief Get a list of all assertion failures.
>  *
>  *  Get all assertions triggered since last call to SDL_ResetAssertionReport(),
>  *  or the start of the program.
>  *
>  *  The proper way to examine this data looks something like this:
>  *
>  *  <code>
>  *  const SDL_assert_data *item = SDL_GetAssertionReport();
>  *  while (item) {
>  *      printf("'%s', %s (%s:%d), triggered %u times, always ignore: %s.\n",
>  *             item->condition, item->function, item->filename,
>  *             item->linenum, item->trigger_count,
>  *             item->always_ignore ? "yes" : "no");
>  *      item = item->next;
>  *  }
>  *  </code>
>  *
>  *  \return List of all assertions.
>  *  \sa SDL_ResetAssertionReport
>  */
> extern DECLSPEC const SDL_assert_data * SDLCALL SDL_GetAssertionReport(void);
> 
> /**
>  *  \brief Reset the list of all assertion failures.
>  *
>  *  Reset list of all assertions triggered.
>  *
>  *  \sa SDL_GetAssertionReport
>  */
> extern DECLSPEC void SDLCALL SDL_ResetAssertionReport(void);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_assert_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_atomic.h ../android-sdl/jni/SDL2/include/SDL_atomic.h
1,359c1,359
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  * \file SDL_atomic.h
<  *
<  * Atomic operations.
<  *
<  * IMPORTANT:
<  * If you are not an expert in concurrent lockless programming, you should
<  * only be using the atomic lock and reference counting functions in this
<  * file.  In all other cases you should be protecting your data structures
<  * with full mutexes.
<  *
<  * The list of "safe" functions to use are:
<  *  SDL_AtomicLock()
<  *  SDL_AtomicUnlock()
<  *  SDL_AtomicIncRef()
<  *  SDL_AtomicDecRef()
<  *
<  * Seriously, here be dragons!
<  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^
<  *
<  * You can find out a little more about lockless programming and the
<  * subtle issues that can arise here:
<  * http://msdn.microsoft.com/en-us/library/ee418650%28v=vs.85%29.aspx
<  *
<  * There's also lots of good information here:
<  * http://www.1024cores.net/home/lock-free-algorithms
<  * http://preshing.com/
<  *
<  * These operations may or may not actually be implemented using
<  * processor specific atomic operations. When possible they are
<  * implemented as true processor specific atomic operations. When that
<  * is not possible the are implemented using locks that *do* use the
<  * available atomic operations.
<  *
<  * All of the atomic operations that modify memory are full memory barriers.
<  */
< 
< #ifndef _SDL_atomic_h_
< #define _SDL_atomic_h_
< 
< #include "SDL_stdinc.h"
< #include "SDL_platform.h"
< 
< #include "begin_code.h"
< 
< /* Need to do this here because intrin.h has C++ code in it */
< /* Visual Studio 2005 has a bug where intrin.h conflicts with winnt.h */
< #if defined(_MSC_VER) && (_MSC_VER >= 1500)
< #include <intrin.h>
< #define HAVE_MSC_ATOMICS 1
< #endif
< 
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  * \name SDL AtomicLock
<  *
<  * The atomic locks are efficient spinlocks using CPU instructions,
<  * but are vulnerable to starvation and can spin forever if a thread
<  * holding a lock has been terminated.  For this reason you should
<  * minimize the code executed inside an atomic lock and never do
<  * expensive things like API or system calls while holding them.
<  *
<  * The atomic locks are not safe to lock recursively.
<  *
<  * Porting Note:
<  * The spin lock functions and type are required and can not be
<  * emulated because they are used in the atomic emulation code.
<  */
< /* @{ */
< 
< typedef int SDL_SpinLock;
< 
< /**
<  * \brief Try to lock a spin lock by setting it to a non-zero value.
<  *
<  * \param lock Points to the lock.
<  *
<  * \return SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already held.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_AtomicTryLock(SDL_SpinLock *lock);
< 
< /**
<  * \brief Lock a spin lock by setting it to a non-zero value.
<  *
<  * \param lock Points to the lock.
<  */
< extern DECLSPEC void SDLCALL SDL_AtomicLock(SDL_SpinLock *lock);
< 
< /**
<  * \brief Unlock a spin lock by setting it to 0. Always returns immediately
<  *
<  * \param lock Points to the lock.
<  */
< extern DECLSPEC void SDLCALL SDL_AtomicUnlock(SDL_SpinLock *lock);
< 
< /* @} *//* SDL AtomicLock */
< 
< 
< /**
<  * The compiler barrier prevents the compiler from reordering
<  * reads and writes to globally visible variables across the call.
<  */
< #if defined(_MSC_VER) && (_MSC_VER > 1200)
< void _ReadWriteBarrier(void);
< #pragma intrinsic(_ReadWriteBarrier)
< #define SDL_CompilerBarrier()   _ReadWriteBarrier()
< #elif defined(__GNUC__)
< #define SDL_CompilerBarrier()   __asm__ __volatile__ ("" : : : "memory")
< #else
< #define SDL_CompilerBarrier()   \
< { SDL_SpinLock _tmp = 0; SDL_AtomicLock(&_tmp); SDL_AtomicUnlock(&_tmp); }
< #endif
< 
< /**
<  * Memory barriers are designed to prevent reads and writes from being
<  * reordered by the compiler and being seen out of order on multi-core CPUs.
<  *
<  * A typical pattern would be for thread A to write some data and a flag,
<  * and for thread B to read the flag and get the data. In this case you
<  * would insert a release barrier between writing the data and the flag,
<  * guaranteeing that the data write completes no later than the flag is
<  * written, and you would insert an acquire barrier between reading the
<  * flag and reading the data, to ensure that all the reads associated
<  * with the flag have completed.
<  *
<  * In this pattern you should always see a release barrier paired with
<  * an acquire barrier and you should gate the data reads/writes with a
<  * single flag variable.
<  *
<  * For more information on these semantics, take a look at the blog post:
<  * http://preshing.com/20120913/acquire-and-release-semantics
<  */
< #if defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__))
< #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("lwsync" : : : "memory")
< #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("lwsync" : : : "memory")
< #elif defined(__GNUC__) && defined(__arm__)
< #if defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7EM__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
< #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("dmb ish" : : : "memory")
< #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("dmb ish" : : : "memory")
< #elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6T2__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__)
< #ifdef __thumb__
< /* The mcr instruction isn't available in thumb mode, use real functions */
< extern DECLSPEC void SDLCALL SDL_MemoryBarrierRelease();
< extern DECLSPEC void SDLCALL SDL_MemoryBarrierAcquire();
< #else
< #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r"(0) : "memory")
< #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r"(0) : "memory")
< #endif /* __thumb__ */
< #else
< #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("" : : : "memory")
< #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("" : : : "memory")
< #endif /* __GNUC__ && __arm__ */
< #else
< /* This is correct for the x86 and x64 CPUs, and we'll expand this over time. */
< #define SDL_MemoryBarrierRelease()  SDL_CompilerBarrier()
< #define SDL_MemoryBarrierAcquire()  SDL_CompilerBarrier()
< #endif
< 
< 
< /* Platform specific optimized versions of the atomic functions,
<  * you can disable these by defining SDL_DISABLE_ATOMIC_INLINE
<  */
< #if defined(SDL_ATOMIC_DISABLED) && SDL_ATOMIC_DISABLED
< #define SDL_DISABLE_ATOMIC_INLINE
< #endif
< #ifndef SDL_DISABLE_ATOMIC_INLINE
< 
< #ifdef HAVE_MSC_ATOMICS
< 
< #define SDL_AtomicSet(a, v)     _InterlockedExchange((long*)&(a)->value, (v))
< #define SDL_AtomicAdd(a, v)     _InterlockedExchangeAdd((long*)&(a)->value, (v))
< #define SDL_AtomicCAS(a, oldval, newval) (_InterlockedCompareExchange((long*)&(a)->value, (newval), (oldval)) == (oldval))
< #define SDL_AtomicSetPtr(a, v)  _InterlockedExchangePointer((a), (v))
< #if _M_IX86
< #define SDL_AtomicCASPtr(a, oldval, newval) (_InterlockedCompareExchange((long*)(a), (long)(newval), (long)(oldval)) == (long)(oldval))
< #else
< #define SDL_AtomicCASPtr(a, oldval, newval) (_InterlockedCompareExchangePointer((a), (newval), (oldval)) == (oldval))
< #endif
< 
< #elif defined(__MACOSX__)
< #include <libkern/OSAtomic.h>
< 
< #define SDL_AtomicCAS(a, oldval, newval) OSAtomicCompareAndSwap32Barrier((oldval), (newval), &(a)->value)
< #ifdef __LP64__
< #define SDL_AtomicCASPtr(a, oldval, newval) OSAtomicCompareAndSwap64Barrier((int64_t)(oldval), (int64_t)(newval), (int64_t*)(a))
< #else
< #define SDL_AtomicCASPtr(a, oldval, newval) OSAtomicCompareAndSwap32Barrier((int32_t)(oldval), (int32_t)(newval), (int32_t*)(a))
< #endif
< 
< #elif defined(HAVE_GCC_ATOMICS)
< 
< #define SDL_AtomicSet(a, v)     __sync_lock_test_and_set(&(a)->value, v)
< #define SDL_AtomicAdd(a, v)     __sync_fetch_and_add(&(a)->value, v)
< #define SDL_AtomicSetPtr(a, v)  __sync_lock_test_and_set(a, v)
< #define SDL_AtomicCAS(a, oldval, newval) __sync_bool_compare_and_swap(&(a)->value, oldval, newval)
< #define SDL_AtomicCASPtr(a, oldval, newval) __sync_bool_compare_and_swap(a, oldval, newval)
< 
< #endif
< 
< #endif /* !SDL_DISABLE_ATOMIC_INLINE */
< 
< 
< /**
<  * \brief A type representing an atomic integer value.  It is a struct
<  *        so people don't accidentally use numeric operations on it.
<  */
< #ifndef SDL_atomic_t_defined
< typedef struct { int value; } SDL_atomic_t;
< #endif
< 
< /**
<  * \brief Set an atomic variable to a new value if it is currently an old value.
<  *
<  * \return SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.
<  *
<  * \note If you don't know what this function is for, you shouldn't use it!
< */
< #ifndef SDL_AtomicCAS
< extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);
< #endif
< 
< /**
<  * \brief Set an atomic variable to a value.
<  *
<  * \return The previous value of the atomic variable.
<  */
< #ifndef SDL_AtomicSet
< SDL_FORCE_INLINE int SDL_AtomicSet(SDL_atomic_t *a, int v)
< {
<     int value;
<     do {
<         value = a->value;
<     } while (!SDL_AtomicCAS(a, value, v));
<     return value;
< }
< #endif
< 
< /**
<  * \brief Get the value of an atomic variable
<  */
< #ifndef SDL_AtomicGet
< SDL_FORCE_INLINE int SDL_AtomicGet(SDL_atomic_t *a)
< {
<     int value = a->value;
<     SDL_CompilerBarrier();
<     return value;
< }
< #endif
< 
< /**
<  * \brief Add to an atomic variable.
<  *
<  * \return The previous value of the atomic variable.
<  *
<  * \note This same style can be used for any number operation
<  */
< #ifndef SDL_AtomicAdd
< SDL_FORCE_INLINE int SDL_AtomicAdd(SDL_atomic_t *a, int v)
< {
<     int value;
<     do {
<         value = a->value;
<     } while (!SDL_AtomicCAS(a, value, (value + v)));
<     return value;
< }
< #endif
< 
< /**
<  * \brief Increment an atomic variable used as a reference count.
<  */
< #ifndef SDL_AtomicIncRef
< #define SDL_AtomicIncRef(a)    SDL_AtomicAdd(a, 1)
< #endif
< 
< /**
<  * \brief Decrement an atomic variable used as a reference count.
<  *
<  * \return SDL_TRUE if the variable reached zero after decrementing,
<  *         SDL_FALSE otherwise
<  */
< #ifndef SDL_AtomicDecRef
< #define SDL_AtomicDecRef(a)    (SDL_AtomicAdd(a, -1) == 1)
< #endif
< 
< /**
<  * \brief Set a pointer to a new value if it is currently an old value.
<  *
<  * \return SDL_TRUE if the pointer was set, SDL_FALSE otherwise.
<  *
<  * \note If you don't know what this function is for, you shouldn't use it!
< */
< #ifndef SDL_AtomicCASPtr
< extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCASPtr(void* *a, void *oldval, void *newval);
< #endif
< 
< /**
<  * \brief Set a pointer to a value atomically.
<  *
<  * \return The previous value of the pointer.
<  */
< #ifndef SDL_AtomicSetPtr
< SDL_FORCE_INLINE void* SDL_AtomicSetPtr(void* *a, void* v)
< {
<     void* value;
<     do {
<         value = *a;
<     } while (!SDL_AtomicCASPtr(a, value, v));
<     return value;
< }
< #endif
< 
< /**
<  * \brief Get the value of a pointer atomically.
<  */
< #ifndef SDL_AtomicGetPtr
< SDL_FORCE_INLINE void* SDL_AtomicGetPtr(void* *a)
< {
<     void* value = *a;
<     SDL_CompilerBarrier();
<     return value;
< }
< #endif
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< 
< #include "close_code.h"
< 
< #endif /* _SDL_atomic_h_ */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  * \file SDL_atomic.h
>  *
>  * Atomic operations.
>  *
>  * IMPORTANT:
>  * If you are not an expert in concurrent lockless programming, you should
>  * only be using the atomic lock and reference counting functions in this
>  * file.  In all other cases you should be protecting your data structures
>  * with full mutexes.
>  *
>  * The list of "safe" functions to use are:
>  *  SDL_AtomicLock()
>  *  SDL_AtomicUnlock()
>  *  SDL_AtomicIncRef()
>  *  SDL_AtomicDecRef()
>  *
>  * Seriously, here be dragons!
>  * ^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  *
>  * You can find out a little more about lockless programming and the
>  * subtle issues that can arise here:
>  * http://msdn.microsoft.com/en-us/library/ee418650%28v=vs.85%29.aspx
>  *
>  * There's also lots of good information here:
>  * http://www.1024cores.net/home/lock-free-algorithms
>  * http://preshing.com/
>  *
>  * These operations may or may not actually be implemented using
>  * processor specific atomic operations. When possible they are
>  * implemented as true processor specific atomic operations. When that
>  * is not possible the are implemented using locks that *do* use the
>  * available atomic operations.
>  *
>  * All of the atomic operations that modify memory are full memory barriers.
>  */
> 
> #ifndef _SDL_atomic_h_
> #define _SDL_atomic_h_
> 
> #include "SDL_stdinc.h"
> #include "SDL_platform.h"
> 
> #include "begin_code.h"
> 
> /* Need to do this here because intrin.h has C++ code in it */
> /* Visual Studio 2005 has a bug where intrin.h conflicts with winnt.h */
> #if defined(_MSC_VER) && (_MSC_VER >= 1500)
> #include <intrin.h>
> #define HAVE_MSC_ATOMICS 1
> #endif
> 
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  * \name SDL AtomicLock
>  *
>  * The atomic locks are efficient spinlocks using CPU instructions,
>  * but are vulnerable to starvation and can spin forever if a thread
>  * holding a lock has been terminated.  For this reason you should
>  * minimize the code executed inside an atomic lock and never do
>  * expensive things like API or system calls while holding them.
>  *
>  * The atomic locks are not safe to lock recursively.
>  *
>  * Porting Note:
>  * The spin lock functions and type are required and can not be
>  * emulated because they are used in the atomic emulation code.
>  */
> /*@{*/
> 
> typedef int SDL_SpinLock;
> 
> /**
>  * \brief Try to lock a spin lock by setting it to a non-zero value.
>  *
>  * \param lock Points to the lock.
>  *
>  * \return SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is already held.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_AtomicTryLock(SDL_SpinLock *lock);
> 
> /**
>  * \brief Lock a spin lock by setting it to a non-zero value.
>  *
>  * \param lock Points to the lock.
>  */
> extern DECLSPEC void SDLCALL SDL_AtomicLock(SDL_SpinLock *lock);
> 
> /**
>  * \brief Unlock a spin lock by setting it to 0. Always returns immediately
>  *
>  * \param lock Points to the lock.
>  */
> extern DECLSPEC void SDLCALL SDL_AtomicUnlock(SDL_SpinLock *lock);
> 
> /*@}*//*SDL AtomicLock*/
> 
> 
> /**
>  * The compiler barrier prevents the compiler from reordering
>  * reads and writes to globally visible variables across the call.
>  */
> #if defined(_MSC_VER) && (_MSC_VER > 1200)
> void _ReadWriteBarrier(void);
> #pragma intrinsic(_ReadWriteBarrier)
> #define SDL_CompilerBarrier()   _ReadWriteBarrier()
> #elif defined(__GNUC__)
> #define SDL_CompilerBarrier()   __asm__ __volatile__ ("" : : : "memory")
> #else
> #define SDL_CompilerBarrier()   \
> { SDL_SpinLock _tmp = 0; SDL_AtomicLock(&_tmp); SDL_AtomicUnlock(&_tmp); }
> #endif
> 
> /**
>  * Memory barriers are designed to prevent reads and writes from being
>  * reordered by the compiler and being seen out of order on multi-core CPUs.
>  *
>  * A typical pattern would be for thread A to write some data and a flag,
>  * and for thread B to read the flag and get the data. In this case you
>  * would insert a release barrier between writing the data and the flag,
>  * guaranteeing that the data write completes no later than the flag is
>  * written, and you would insert an acquire barrier between reading the
>  * flag and reading the data, to ensure that all the reads associated
>  * with the flag have completed.
>  *
>  * In this pattern you should always see a release barrier paired with
>  * an acquire barrier and you should gate the data reads/writes with a
>  * single flag variable.
>  *
>  * For more information on these semantics, take a look at the blog post:
>  * http://preshing.com/20120913/acquire-and-release-semantics
>  */
> #if defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__))
> #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("lwsync" : : : "memory")
> #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("lwsync" : : : "memory")
> #elif defined(__GNUC__) && defined(__arm__)
> #if defined(__ARM_ARCH_7__) || defined(__ARM_ARCH_7A__) || defined(__ARM_ARCH_7EM__) || defined(__ARM_ARCH_7R__) || defined(__ARM_ARCH_7M__) || defined(__ARM_ARCH_7S__)
> #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("dmb ish" : : : "memory")
> #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("dmb ish" : : : "memory")
> #elif defined(__ARM_ARCH_6__) || defined(__ARM_ARCH_6J__) || defined(__ARM_ARCH_6K__) || defined(__ARM_ARCH_6T2__) || defined(__ARM_ARCH_6Z__) || defined(__ARM_ARCH_6ZK__)
> #ifdef __thumb__
> /* The mcr instruction isn't available in thumb mode, use real functions */
> extern DECLSPEC void SDLCALL SDL_MemoryBarrierRelease();
> extern DECLSPEC void SDLCALL SDL_MemoryBarrierAcquire();
> #else
> #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r"(0) : "memory")
> #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("mcr p15, 0, %0, c7, c10, 5" : : "r"(0) : "memory")
> #endif /* __thumb__ */
> #else
> #define SDL_MemoryBarrierRelease()   __asm__ __volatile__ ("" : : : "memory")
> #define SDL_MemoryBarrierAcquire()   __asm__ __volatile__ ("" : : : "memory")
> #endif /* __GNUC__ && __arm__ */
> #else
> /* This is correct for the x86 and x64 CPUs, and we'll expand this over time. */
> #define SDL_MemoryBarrierRelease()  SDL_CompilerBarrier()
> #define SDL_MemoryBarrierAcquire()  SDL_CompilerBarrier()
> #endif
> 
> 
> /* Platform specific optimized versions of the atomic functions,
>  * you can disable these by defining SDL_DISABLE_ATOMIC_INLINE
>  */
> #if defined(SDL_ATOMIC_DISABLED) && SDL_ATOMIC_DISABLED
> #define SDL_DISABLE_ATOMIC_INLINE
> #endif
> #ifndef SDL_DISABLE_ATOMIC_INLINE
> 
> #ifdef HAVE_MSC_ATOMICS
> 
> #define SDL_AtomicSet(a, v)     _InterlockedExchange((long*)&(a)->value, (v))
> #define SDL_AtomicAdd(a, v)     _InterlockedExchangeAdd((long*)&(a)->value, (v))
> #define SDL_AtomicCAS(a, oldval, newval) (_InterlockedCompareExchange((long*)&(a)->value, (newval), (oldval)) == (oldval))
> #define SDL_AtomicSetPtr(a, v)  _InterlockedExchangePointer((a), (v))
> #if _M_IX86
> #define SDL_AtomicCASPtr(a, oldval, newval) (_InterlockedCompareExchange((long*)(a), (long)(newval), (long)(oldval)) == (long)(oldval))
> #else
> #define SDL_AtomicCASPtr(a, oldval, newval) (_InterlockedCompareExchangePointer((a), (newval), (oldval)) == (oldval))
> #endif
> 
> #elif defined(__MACOSX__)
> #include <libkern/OSAtomic.h>
> 
> #define SDL_AtomicCAS(a, oldval, newval) OSAtomicCompareAndSwap32Barrier((oldval), (newval), &(a)->value)
> #ifdef __LP64__
> #define SDL_AtomicCASPtr(a, oldval, newval) OSAtomicCompareAndSwap64Barrier((int64_t)(oldval), (int64_t)(newval), (int64_t*)(a))
> #else
> #define SDL_AtomicCASPtr(a, oldval, newval) OSAtomicCompareAndSwap32Barrier((int32_t)(oldval), (int32_t)(newval), (int32_t*)(a))
> #endif
> 
> #elif defined(HAVE_GCC_ATOMICS)
> 
> #define SDL_AtomicSet(a, v)     __sync_lock_test_and_set(&(a)->value, v)
> #define SDL_AtomicAdd(a, v)     __sync_fetch_and_add(&(a)->value, v)
> #define SDL_AtomicSetPtr(a, v)  __sync_lock_test_and_set(a, v)
> #define SDL_AtomicCAS(a, oldval, newval) __sync_bool_compare_and_swap(&(a)->value, oldval, newval)
> #define SDL_AtomicCASPtr(a, oldval, newval) __sync_bool_compare_and_swap(a, oldval, newval)
> 
> #endif
> 
> #endif /* !SDL_DISABLE_ATOMIC_INLINE */
> 
> 
> /**
>  * \brief A type representing an atomic integer value.  It is a struct
>  *        so people don't accidentally use numeric operations on it.
>  */
> #ifndef SDL_atomic_t_defined
> typedef struct { int value; } SDL_atomic_t;
> #endif
> 
> /**
>  * \brief Set an atomic variable to a new value if it is currently an old value.
>  *
>  * \return SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.
>  *
>  * \note If you don't know what this function is for, you shouldn't use it!
> */
> #ifndef SDL_AtomicCAS
> extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval);
> #endif
> 
> /**
>  * \brief Set an atomic variable to a value.
>  *
>  * \return The previous value of the atomic variable.
>  */
> #ifndef SDL_AtomicSet
> SDL_FORCE_INLINE int SDL_AtomicSet(SDL_atomic_t *a, int v)
> {
>     int value;
>     do {
>         value = a->value;
>     } while (!SDL_AtomicCAS(a, value, v));
>     return value;
> }
> #endif
> 
> /**
>  * \brief Get the value of an atomic variable
>  */
> #ifndef SDL_AtomicGet
> SDL_FORCE_INLINE int SDL_AtomicGet(SDL_atomic_t *a)
> {
>     int value = a->value;
>     SDL_CompilerBarrier();
>     return value;
> }
> #endif
> 
> /**
>  * \brief Add to an atomic variable.
>  *
>  * \return The previous value of the atomic variable.
>  *
>  * \note This same style can be used for any number operation
>  */
> #ifndef SDL_AtomicAdd
> SDL_FORCE_INLINE int SDL_AtomicAdd(SDL_atomic_t *a, int v)
> {
>     int value;
>     do {
>         value = a->value;
>     } while (!SDL_AtomicCAS(a, value, (value + v)));
>     return value;
> }
> #endif
> 
> /**
>  * \brief Increment an atomic variable used as a reference count.
>  */
> #ifndef SDL_AtomicIncRef
> #define SDL_AtomicIncRef(a)    SDL_AtomicAdd(a, 1)
> #endif
> 
> /**
>  * \brief Decrement an atomic variable used as a reference count.
>  *
>  * \return SDL_TRUE if the variable reached zero after decrementing,
>  *         SDL_FALSE otherwise
>  */
> #ifndef SDL_AtomicDecRef
> #define SDL_AtomicDecRef(a)    (SDL_AtomicAdd(a, -1) == 1)
> #endif
> 
> /**
>  * \brief Set a pointer to a new value if it is currently an old value.
>  *
>  * \return SDL_TRUE if the pointer was set, SDL_FALSE otherwise.
>  *
>  * \note If you don't know what this function is for, you shouldn't use it!
> */
> #ifndef SDL_AtomicCASPtr
> extern DECLSPEC SDL_bool SDLCALL SDL_AtomicCASPtr(void* *a, void *oldval, void *newval);
> #endif
> 
> /**
>  * \brief Set a pointer to a value atomically.
>  *
>  * \return The previous value of the pointer.
>  */
> #ifndef SDL_AtomicSetPtr
> SDL_FORCE_INLINE void* SDL_AtomicSetPtr(void* *a, void* v)
> {
>     void* value;
>     do {
>         value = *a;
>     } while (!SDL_AtomicCASPtr(a, value, v));
>     return value;
> }
> #endif
> 
> /**
>  * \brief Get the value of a pointer atomically.
>  */
> #ifndef SDL_AtomicGetPtr
> SDL_FORCE_INLINE void* SDL_AtomicGetPtr(void* *a)
> {
>     void* value = *a;
>     SDL_CompilerBarrier();
>     return value;
> }
> #endif
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> 
> #include "close_code.h"
> 
> #endif /* _SDL_atomic_h_ */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_audio.h ../android-sdl/jni/SDL2/include/SDL_audio.h
1,506c1,506
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_audio.h
<  *
<  *  Access to the raw audio mixing buffer for the SDL library.
<  */
< 
< #ifndef _SDL_audio_h
< #define _SDL_audio_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_endian.h"
< #include "SDL_mutex.h"
< #include "SDL_thread.h"
< #include "SDL_rwops.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief Audio format flags.
<  *
<  *  These are what the 16 bits in SDL_AudioFormat currently mean...
<  *  (Unspecified bits are always zero).
<  *
<  *  \verbatim
<     ++-----------------------sample is signed if set
<     ||
<     ||       ++-----------sample is bigendian if set
<     ||       ||
<     ||       ||          ++---sample is float if set
<     ||       ||          ||
<     ||       ||          || +---sample bit size---+
<     ||       ||          || |                     |
<     15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
<     \endverbatim
<  *
<  *  There are macros in SDL 2.0 and later to query these bits.
<  */
< typedef Uint16 SDL_AudioFormat;
< 
< /**
<  *  \name Audio flags
<  */
< /* @{ */
< 
< #define SDL_AUDIO_MASK_BITSIZE       (0xFF)
< #define SDL_AUDIO_MASK_DATATYPE      (1<<8)
< #define SDL_AUDIO_MASK_ENDIAN        (1<<12)
< #define SDL_AUDIO_MASK_SIGNED        (1<<15)
< #define SDL_AUDIO_BITSIZE(x)         (x & SDL_AUDIO_MASK_BITSIZE)
< #define SDL_AUDIO_ISFLOAT(x)         (x & SDL_AUDIO_MASK_DATATYPE)
< #define SDL_AUDIO_ISBIGENDIAN(x)     (x & SDL_AUDIO_MASK_ENDIAN)
< #define SDL_AUDIO_ISSIGNED(x)        (x & SDL_AUDIO_MASK_SIGNED)
< #define SDL_AUDIO_ISINT(x)           (!SDL_AUDIO_ISFLOAT(x))
< #define SDL_AUDIO_ISLITTLEENDIAN(x)  (!SDL_AUDIO_ISBIGENDIAN(x))
< #define SDL_AUDIO_ISUNSIGNED(x)      (!SDL_AUDIO_ISSIGNED(x))
< 
< /**
<  *  \name Audio format flags
<  *
<  *  Defaults to LSB byte order.
<  */
< /* @{ */
< #define AUDIO_U8        0x0008  /**< Unsigned 8-bit samples */
< #define AUDIO_S8        0x8008  /**< Signed 8-bit samples */
< #define AUDIO_U16LSB    0x0010  /**< Unsigned 16-bit samples */
< #define AUDIO_S16LSB    0x8010  /**< Signed 16-bit samples */
< #define AUDIO_U16MSB    0x1010  /**< As above, but big-endian byte order */
< #define AUDIO_S16MSB    0x9010  /**< As above, but big-endian byte order */
< #define AUDIO_U16       AUDIO_U16LSB
< #define AUDIO_S16       AUDIO_S16LSB
< /* @} */
< 
< /**
<  *  \name int32 support
<  */
< /* @{ */
< #define AUDIO_S32LSB    0x8020  /**< 32-bit integer samples */
< #define AUDIO_S32MSB    0x9020  /**< As above, but big-endian byte order */
< #define AUDIO_S32       AUDIO_S32LSB
< /* @} */
< 
< /**
<  *  \name float32 support
<  */
< /* @{ */
< #define AUDIO_F32LSB    0x8120  /**< 32-bit floating point samples */
< #define AUDIO_F32MSB    0x9120  /**< As above, but big-endian byte order */
< #define AUDIO_F32       AUDIO_F32LSB
< /* @} */
< 
< /**
<  *  \name Native audio byte ordering
<  */
< /* @{ */
< #if SDL_BYTEORDER == SDL_LIL_ENDIAN
< #define AUDIO_U16SYS    AUDIO_U16LSB
< #define AUDIO_S16SYS    AUDIO_S16LSB
< #define AUDIO_S32SYS    AUDIO_S32LSB
< #define AUDIO_F32SYS    AUDIO_F32LSB
< #else
< #define AUDIO_U16SYS    AUDIO_U16MSB
< #define AUDIO_S16SYS    AUDIO_S16MSB
< #define AUDIO_S32SYS    AUDIO_S32MSB
< #define AUDIO_F32SYS    AUDIO_F32MSB
< #endif
< /* @} */
< 
< /**
<  *  \name Allow change flags
<  *
<  *  Which audio format changes are allowed when opening a device.
<  */
< /* @{ */
< #define SDL_AUDIO_ALLOW_FREQUENCY_CHANGE    0x00000001
< #define SDL_AUDIO_ALLOW_FORMAT_CHANGE       0x00000002
< #define SDL_AUDIO_ALLOW_CHANNELS_CHANGE     0x00000004
< #define SDL_AUDIO_ALLOW_ANY_CHANGE          (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE|SDL_AUDIO_ALLOW_FORMAT_CHANGE|SDL_AUDIO_ALLOW_CHANNELS_CHANGE)
< /* @} */
< 
< /* @} *//* Audio flags */
< 
< /**
<  *  This function is called when the audio device needs more data.
<  *
<  *  \param userdata An application-specific parameter saved in
<  *                  the SDL_AudioSpec structure
<  *  \param stream A pointer to the audio data buffer.
<  *  \param len    The length of that buffer in bytes.
<  *
<  *  Once the callback returns, the buffer will no longer be valid.
<  *  Stereo samples are stored in a LRLRLR ordering.
<  */
< typedef void (SDLCALL * SDL_AudioCallback) (void *userdata, Uint8 * stream,
<                                             int len);
< 
< /**
<  *  The calculated values in this structure are calculated by SDL_OpenAudio().
<  */
< typedef struct SDL_AudioSpec
< {
<     int freq;                   /**< DSP frequency -- samples per second */
<     SDL_AudioFormat format;     /**< Audio data format */
<     Uint8 channels;             /**< Number of channels: 1 mono, 2 stereo */
<     Uint8 silence;              /**< Audio buffer silence value (calculated) */
<     Uint16 samples;             /**< Audio buffer size in samples (power of 2) */
<     Uint16 padding;             /**< Necessary for some compile environments */
<     Uint32 size;                /**< Audio buffer size in bytes (calculated) */
<     SDL_AudioCallback callback;
<     void *userdata;
< } SDL_AudioSpec;
< 
< 
< struct SDL_AudioCVT;
< typedef void (SDLCALL * SDL_AudioFilter) (struct SDL_AudioCVT * cvt,
<                                           SDL_AudioFormat format);
< 
< /**
<  *  A structure to hold a set of audio conversion filters and buffers.
<  */
< #ifdef __GNUC__
< /* This structure is 84 bytes on 32-bit architectures, make sure GCC doesn't
<    pad it out to 88 bytes to guarantee ABI compatibility between compilers.
<    vvv
<    The next time we rev the ABI, make sure to size the ints and add padding.
< */
< #define SDL_AUDIOCVT_PACKED __attribute__((packed))
< #else
< #define SDL_AUDIOCVT_PACKED
< #endif
< /* */
< typedef struct SDL_AudioCVT
< {
<     int needed;                 /**< Set to 1 if conversion possible */
<     SDL_AudioFormat src_format; /**< Source audio format */
<     SDL_AudioFormat dst_format; /**< Target audio format */
<     double rate_incr;           /**< Rate conversion increment */
<     Uint8 *buf;                 /**< Buffer to hold entire audio data */
<     int len;                    /**< Length of original audio buffer */
<     int len_cvt;                /**< Length of converted audio buffer */
<     int len_mult;               /**< buffer must be len*len_mult big */
<     double len_ratio;           /**< Given len, final size is len*len_ratio */
<     SDL_AudioFilter filters[10];        /**< Filter list */
<     int filter_index;           /**< Current audio conversion function */
< } SDL_AUDIOCVT_PACKED SDL_AudioCVT;
< 
< 
< /* Function prototypes */
< 
< /**
<  *  \name Driver discovery functions
<  *
<  *  These functions return the list of built in audio drivers, in the
<  *  order that they are normally initialized by default.
<  */
< /* @{ */
< extern DECLSPEC int SDLCALL SDL_GetNumAudioDrivers(void);
< extern DECLSPEC const char *SDLCALL SDL_GetAudioDriver(int index);
< /* @} */
< 
< /**
<  *  \name Initialization and cleanup
<  *
<  *  \internal These functions are used internally, and should not be used unless
<  *            you have a specific need to specify the audio driver you want to
<  *            use.  You should normally use SDL_Init() or SDL_InitSubSystem().
<  */
< /* @{ */
< extern DECLSPEC int SDLCALL SDL_AudioInit(const char *driver_name);
< extern DECLSPEC void SDLCALL SDL_AudioQuit(void);
< /* @} */
< 
< /**
<  *  This function returns the name of the current audio driver, or NULL
<  *  if no driver has been initialized.
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetCurrentAudioDriver(void);
< 
< /**
<  *  This function opens the audio device with the desired parameters, and
<  *  returns 0 if successful, placing the actual hardware parameters in the
<  *  structure pointed to by \c obtained.  If \c obtained is NULL, the audio
<  *  data passed to the callback function will be guaranteed to be in the
<  *  requested format, and will be automatically converted to the hardware
<  *  audio format if necessary.  This function returns -1 if it failed
<  *  to open the audio device, or couldn't set up the audio thread.
<  *
<  *  When filling in the desired audio spec structure,
<  *    - \c desired->freq should be the desired audio frequency in samples-per-
<  *      second.
<  *    - \c desired->format should be the desired audio format.
<  *    - \c desired->samples is the desired size of the audio buffer, in
<  *      samples.  This number should be a power of two, and may be adjusted by
<  *      the audio driver to a value more suitable for the hardware.  Good values
<  *      seem to range between 512 and 8096 inclusive, depending on the
<  *      application and CPU speed.  Smaller values yield faster response time,
<  *      but can lead to underflow if the application is doing heavy processing
<  *      and cannot fill the audio buffer in time.  A stereo sample consists of
<  *      both right and left channels in LR ordering.
<  *      Note that the number of samples is directly related to time by the
<  *      following formula:  \code ms = (samples*1000)/freq \endcode
<  *    - \c desired->size is the size in bytes of the audio buffer, and is
<  *      calculated by SDL_OpenAudio().
<  *    - \c desired->silence is the value used to set the buffer to silence,
<  *      and is calculated by SDL_OpenAudio().
<  *    - \c desired->callback should be set to a function that will be called
<  *      when the audio device is ready for more data.  It is passed a pointer
<  *      to the audio buffer, and the length in bytes of the audio buffer.
<  *      This function usually runs in a separate thread, and so you should
<  *      protect data structures that it accesses by calling SDL_LockAudio()
<  *      and SDL_UnlockAudio() in your code.
<  *    - \c desired->userdata is passed as the first parameter to your callback
<  *      function.
<  *
<  *  The audio device starts out playing silence when it's opened, and should
<  *  be enabled for playing by calling \c SDL_PauseAudio(0) when you are ready
<  *  for your audio callback function to be called.  Since the audio driver
<  *  may modify the requested size of the audio buffer, you should allocate
<  *  any local mixing buffers after you open the audio device.
<  */
< extern DECLSPEC int SDLCALL SDL_OpenAudio(SDL_AudioSpec * desired,
<                                           SDL_AudioSpec * obtained);
< 
< /**
<  *  SDL Audio Device IDs.
<  *
<  *  A successful call to SDL_OpenAudio() is always device id 1, and legacy
<  *  SDL audio APIs assume you want this device ID. SDL_OpenAudioDevice() calls
<  *  always returns devices >= 2 on success. The legacy calls are good both
<  *  for backwards compatibility and when you don't care about multiple,
<  *  specific, or capture devices.
<  */
< typedef Uint32 SDL_AudioDeviceID;
< 
< /**
<  *  Get the number of available devices exposed by the current driver.
<  *  Only valid after a successfully initializing the audio subsystem.
<  *  Returns -1 if an explicit list of devices can't be determined; this is
<  *  not an error. For example, if SDL is set up to talk to a remote audio
<  *  server, it can't list every one available on the Internet, but it will
<  *  still allow a specific host to be specified to SDL_OpenAudioDevice().
<  *
<  *  In many common cases, when this function returns a value <= 0, it can still
<  *  successfully open the default device (NULL for first argument of
<  *  SDL_OpenAudioDevice()).
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumAudioDevices(int iscapture);
< 
< /**
<  *  Get the human-readable name of a specific audio device.
<  *  Must be a value between 0 and (number of audio devices-1).
<  *  Only valid after a successfully initializing the audio subsystem.
<  *  The values returned by this function reflect the latest call to
<  *  SDL_GetNumAudioDevices(); recall that function to redetect available
<  *  hardware.
<  *
<  *  The string returned by this function is UTF-8 encoded, read-only, and
<  *  managed internally. You are not to free it. If you need to keep the
<  *  string for any length of time, you should make your own copy of it, as it
<  *  will be invalid next time any of several other SDL functions is called.
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetAudioDeviceName(int index,
<                                                            int iscapture);
< 
< 
< /**
<  *  Open a specific audio device. Passing in a device name of NULL requests
<  *  the most reasonable default (and is equivalent to calling SDL_OpenAudio()).
<  *
<  *  The device name is a UTF-8 string reported by SDL_GetAudioDeviceName(), but
<  *  some drivers allow arbitrary and driver-specific strings, such as a
<  *  hostname/IP address for a remote audio server, or a filename in the
<  *  diskaudio driver.
<  *
<  *  \return 0 on error, a valid device ID that is >= 2 on success.
<  *
<  *  SDL_OpenAudio(), unlike this function, always acts on device ID 1.
<  */
< extern DECLSPEC SDL_AudioDeviceID SDLCALL SDL_OpenAudioDevice(const char
<                                                               *device,
<                                                               int iscapture,
<                                                               const
<                                                               SDL_AudioSpec *
<                                                               desired,
<                                                               SDL_AudioSpec *
<                                                               obtained,
<                                                               int
<                                                               allowed_changes);
< 
< 
< 
< /**
<  *  \name Audio state
<  *
<  *  Get the current audio state.
<  */
< /* @{ */
< typedef enum
< {
<     SDL_AUDIO_STOPPED = 0,
<     SDL_AUDIO_PLAYING,
<     SDL_AUDIO_PAUSED
< } SDL_AudioStatus;
< extern DECLSPEC SDL_AudioStatus SDLCALL SDL_GetAudioStatus(void);
< 
< extern DECLSPEC SDL_AudioStatus SDLCALL
< SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
< /* @} *//* Audio State */
< 
< /**
<  *  \name Pause audio functions
<  *
<  *  These functions pause and unpause the audio callback processing.
<  *  They should be called with a parameter of 0 after opening the audio
<  *  device to start playing sound.  This is so you can safely initialize
<  *  data for your callback function after opening the audio device.
<  *  Silence will be written to the audio device during the pause.
<  */
< /* @{ */
< extern DECLSPEC void SDLCALL SDL_PauseAudio(int pause_on);
< extern DECLSPEC void SDLCALL SDL_PauseAudioDevice(SDL_AudioDeviceID dev,
<                                                   int pause_on);
< /* @} *//* Pause audio functions */
< 
< /**
<  *  This function loads a WAVE from the data source, automatically freeing
<  *  that source if \c freesrc is non-zero.  For example, to load a WAVE file,
<  *  you could do:
<  *  \code
<  *      SDL_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1, ...);
<  *  \endcode
<  *
<  *  If this function succeeds, it returns the given SDL_AudioSpec,
<  *  filled with the audio data format of the wave data, and sets
<  *  \c *audio_buf to a malloc()'d buffer containing the audio data,
<  *  and sets \c *audio_len to the length of that audio buffer, in bytes.
<  *  You need to free the audio buffer with SDL_FreeWAV() when you are
<  *  done with it.
<  *
<  *  This function returns NULL and sets the SDL error message if the
<  *  wave file cannot be opened, uses an unknown data format, or is
<  *  corrupt.  Currently raw and MS-ADPCM WAVE files are supported.
<  */
< extern DECLSPEC SDL_AudioSpec *SDLCALL SDL_LoadWAV_RW(SDL_RWops * src,
<                                                       int freesrc,
<                                                       SDL_AudioSpec * spec,
<                                                       Uint8 ** audio_buf,
<                                                       Uint32 * audio_len);
< 
< /**
<  *  Loads a WAV from a file.
<  *  Compatibility convenience function.
<  */
< #define SDL_LoadWAV(file, spec, audio_buf, audio_len) \
<     SDL_LoadWAV_RW(SDL_RWFromFile(file, "rb"),1, spec,audio_buf,audio_len)
< 
< /**
<  *  This function frees data previously allocated with SDL_LoadWAV_RW()
<  */
< extern DECLSPEC void SDLCALL SDL_FreeWAV(Uint8 * audio_buf);
< 
< /**
<  *  This function takes a source format and rate and a destination format
<  *  and rate, and initializes the \c cvt structure with information needed
<  *  by SDL_ConvertAudio() to convert a buffer of audio data from one format
<  *  to the other.
<  *
<  *  \return -1 if the format conversion is not supported, 0 if there's
<  *  no conversion needed, or 1 if the audio filter is set up.
<  */
< extern DECLSPEC int SDLCALL SDL_BuildAudioCVT(SDL_AudioCVT * cvt,
<                                               SDL_AudioFormat src_format,
<                                               Uint8 src_channels,
<                                               int src_rate,
<                                               SDL_AudioFormat dst_format,
<                                               Uint8 dst_channels,
<                                               int dst_rate);
< 
< /**
<  *  Once you have initialized the \c cvt structure using SDL_BuildAudioCVT(),
<  *  created an audio buffer \c cvt->buf, and filled it with \c cvt->len bytes of
<  *  audio data in the source format, this function will convert it in-place
<  *  to the desired format.
<  *
<  *  The data conversion may expand the size of the audio data, so the buffer
<  *  \c cvt->buf should be allocated after the \c cvt structure is initialized by
<  *  SDL_BuildAudioCVT(), and should be \c cvt->len*cvt->len_mult bytes long.
<  */
< extern DECLSPEC int SDLCALL SDL_ConvertAudio(SDL_AudioCVT * cvt);
< 
< #define SDL_MIX_MAXVOLUME 128
< /**
<  *  This takes two audio buffers of the playing audio format and mixes
<  *  them, performing addition, volume adjustment, and overflow clipping.
<  *  The volume ranges from 0 - 128, and should be set to ::SDL_MIX_MAXVOLUME
<  *  for full audio volume.  Note this does not change hardware volume.
<  *  This is provided for convenience -- you can mix your own audio data.
<  */
< extern DECLSPEC void SDLCALL SDL_MixAudio(Uint8 * dst, const Uint8 * src,
<                                           Uint32 len, int volume);
< 
< /**
<  *  This works like SDL_MixAudio(), but you specify the audio format instead of
<  *  using the format of audio device 1. Thus it can be used when no audio
<  *  device is open at all.
<  */
< extern DECLSPEC void SDLCALL SDL_MixAudioFormat(Uint8 * dst,
<                                                 const Uint8 * src,
<                                                 SDL_AudioFormat format,
<                                                 Uint32 len, int volume);
< 
< /**
<  *  \name Audio lock functions
<  *
<  *  The lock manipulated by these functions protects the callback function.
<  *  During a SDL_LockAudio()/SDL_UnlockAudio() pair, you can be guaranteed that
<  *  the callback function is not running.  Do not call these from the callback
<  *  function or you will cause deadlock.
<  */
< /* @{ */
< extern DECLSPEC void SDLCALL SDL_LockAudio(void);
< extern DECLSPEC void SDLCALL SDL_LockAudioDevice(SDL_AudioDeviceID dev);
< extern DECLSPEC void SDLCALL SDL_UnlockAudio(void);
< extern DECLSPEC void SDLCALL SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
< /* @} *//* Audio lock functions */
< 
< /**
<  *  This function shuts down audio processing and closes the audio device.
<  */
< extern DECLSPEC void SDLCALL SDL_CloseAudio(void);
< extern DECLSPEC void SDLCALL SDL_CloseAudioDevice(SDL_AudioDeviceID dev);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_audio_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_audio.h
>  *
>  *  Access to the raw audio mixing buffer for the SDL library.
>  */
> 
> #ifndef _SDL_audio_h
> #define _SDL_audio_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_endian.h"
> #include "SDL_mutex.h"
> #include "SDL_thread.h"
> #include "SDL_rwops.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief Audio format flags.
>  *
>  *  These are what the 16 bits in SDL_AudioFormat currently mean...
>  *  (Unspecified bits are always zero).
>  *
>  *  \verbatim
>     ++-----------------------sample is signed if set
>     ||
>     ||       ++-----------sample is bigendian if set
>     ||       ||
>     ||       ||          ++---sample is float if set
>     ||       ||          ||
>     ||       ||          || +---sample bit size---+
>     ||       ||          || |                     |
>     15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
>     \endverbatim
>  *
>  *  There are macros in SDL 2.0 and later to query these bits.
>  */
> typedef Uint16 SDL_AudioFormat;
> 
> /**
>  *  \name Audio flags
>  */
> /*@{*/
> 
> #define SDL_AUDIO_MASK_BITSIZE       (0xFF)
> #define SDL_AUDIO_MASK_DATATYPE      (1<<8)
> #define SDL_AUDIO_MASK_ENDIAN        (1<<12)
> #define SDL_AUDIO_MASK_SIGNED        (1<<15)
> #define SDL_AUDIO_BITSIZE(x)         (x & SDL_AUDIO_MASK_BITSIZE)
> #define SDL_AUDIO_ISFLOAT(x)         (x & SDL_AUDIO_MASK_DATATYPE)
> #define SDL_AUDIO_ISBIGENDIAN(x)     (x & SDL_AUDIO_MASK_ENDIAN)
> #define SDL_AUDIO_ISSIGNED(x)        (x & SDL_AUDIO_MASK_SIGNED)
> #define SDL_AUDIO_ISINT(x)           (!SDL_AUDIO_ISFLOAT(x))
> #define SDL_AUDIO_ISLITTLEENDIAN(x)  (!SDL_AUDIO_ISBIGENDIAN(x))
> #define SDL_AUDIO_ISUNSIGNED(x)      (!SDL_AUDIO_ISSIGNED(x))
> 
> /**
>  *  \name Audio format flags
>  *
>  *  Defaults to LSB byte order.
>  */
> /*@{*/
> #define AUDIO_U8        0x0008  /**< Unsigned 8-bit samples */
> #define AUDIO_S8        0x8008  /**< Signed 8-bit samples */
> #define AUDIO_U16LSB    0x0010  /**< Unsigned 16-bit samples */
> #define AUDIO_S16LSB    0x8010  /**< Signed 16-bit samples */
> #define AUDIO_U16MSB    0x1010  /**< As above, but big-endian byte order */
> #define AUDIO_S16MSB    0x9010  /**< As above, but big-endian byte order */
> #define AUDIO_U16       AUDIO_U16LSB
> #define AUDIO_S16       AUDIO_S16LSB
> /*@}*/
> 
> /**
>  *  \name int32 support
>  */
> /*@{*/
> #define AUDIO_S32LSB    0x8020  /**< 32-bit integer samples */
> #define AUDIO_S32MSB    0x9020  /**< As above, but big-endian byte order */
> #define AUDIO_S32       AUDIO_S32LSB
> /*@}*/
> 
> /**
>  *  \name float32 support
>  */
> /*@{*/
> #define AUDIO_F32LSB    0x8120  /**< 32-bit floating point samples */
> #define AUDIO_F32MSB    0x9120  /**< As above, but big-endian byte order */
> #define AUDIO_F32       AUDIO_F32LSB
> /*@}*/
> 
> /**
>  *  \name Native audio byte ordering
>  */
> /*@{*/
> #if SDL_BYTEORDER == SDL_LIL_ENDIAN
> #define AUDIO_U16SYS    AUDIO_U16LSB
> #define AUDIO_S16SYS    AUDIO_S16LSB
> #define AUDIO_S32SYS    AUDIO_S32LSB
> #define AUDIO_F32SYS    AUDIO_F32LSB
> #else
> #define AUDIO_U16SYS    AUDIO_U16MSB
> #define AUDIO_S16SYS    AUDIO_S16MSB
> #define AUDIO_S32SYS    AUDIO_S32MSB
> #define AUDIO_F32SYS    AUDIO_F32MSB
> #endif
> /*@}*/
> 
> /**
>  *  \name Allow change flags
>  *
>  *  Which audio format changes are allowed when opening a device.
>  */
> /*@{*/
> #define SDL_AUDIO_ALLOW_FREQUENCY_CHANGE    0x00000001
> #define SDL_AUDIO_ALLOW_FORMAT_CHANGE       0x00000002
> #define SDL_AUDIO_ALLOW_CHANNELS_CHANGE     0x00000004
> #define SDL_AUDIO_ALLOW_ANY_CHANGE          (SDL_AUDIO_ALLOW_FREQUENCY_CHANGE|SDL_AUDIO_ALLOW_FORMAT_CHANGE|SDL_AUDIO_ALLOW_CHANNELS_CHANGE)
> /*@}*/
> 
> /*@}*//*Audio flags*/
> 
> /**
>  *  This function is called when the audio device needs more data.
>  *
>  *  \param userdata An application-specific parameter saved in
>  *                  the SDL_AudioSpec structure
>  *  \param stream A pointer to the audio data buffer.
>  *  \param len    The length of that buffer in bytes.
>  *
>  *  Once the callback returns, the buffer will no longer be valid.
>  *  Stereo samples are stored in a LRLRLR ordering.
>  */
> typedef void (SDLCALL * SDL_AudioCallback) (void *userdata, Uint8 * stream,
>                                             int len);
> 
> /**
>  *  The calculated values in this structure are calculated by SDL_OpenAudio().
>  */
> typedef struct SDL_AudioSpec
> {
>     int freq;                   /**< DSP frequency -- samples per second */
>     SDL_AudioFormat format;     /**< Audio data format */
>     Uint8 channels;             /**< Number of channels: 1 mono, 2 stereo */
>     Uint8 silence;              /**< Audio buffer silence value (calculated) */
>     Uint16 samples;             /**< Audio buffer size in samples (power of 2) */
>     Uint16 padding;             /**< Necessary for some compile environments */
>     Uint32 size;                /**< Audio buffer size in bytes (calculated) */
>     SDL_AudioCallback callback;
>     void *userdata;
> } SDL_AudioSpec;
> 
> 
> struct SDL_AudioCVT;
> typedef void (SDLCALL * SDL_AudioFilter) (struct SDL_AudioCVT * cvt,
>                                           SDL_AudioFormat format);
> 
> /**
>  *  A structure to hold a set of audio conversion filters and buffers.
>  */
> #ifdef __GNUC__
> /* This structure is 84 bytes on 32-bit architectures, make sure GCC doesn't
>    pad it out to 88 bytes to guarantee ABI compatibility between compilers.
>    vvv
>    The next time we rev the ABI, make sure to size the ints and add padding.
> */
> #define SDL_AUDIOCVT_PACKED __attribute__((packed))
> #else
> #define SDL_AUDIOCVT_PACKED
> #endif
> /* */
> typedef struct SDL_AudioCVT
> {
>     int needed;                 /**< Set to 1 if conversion possible */
>     SDL_AudioFormat src_format; /**< Source audio format */
>     SDL_AudioFormat dst_format; /**< Target audio format */
>     double rate_incr;           /**< Rate conversion increment */
>     Uint8 *buf;                 /**< Buffer to hold entire audio data */
>     int len;                    /**< Length of original audio buffer */
>     int len_cvt;                /**< Length of converted audio buffer */
>     int len_mult;               /**< buffer must be len*len_mult big */
>     double len_ratio;           /**< Given len, final size is len*len_ratio */
>     SDL_AudioFilter filters[10];        /**< Filter list */
>     int filter_index;           /**< Current audio conversion function */
> } SDL_AUDIOCVT_PACKED SDL_AudioCVT;
> 
> 
> /* Function prototypes */
> 
> /**
>  *  \name Driver discovery functions
>  *
>  *  These functions return the list of built in audio drivers, in the
>  *  order that they are normally initialized by default.
>  */
> /*@{*/
> extern DECLSPEC int SDLCALL SDL_GetNumAudioDrivers(void);
> extern DECLSPEC const char *SDLCALL SDL_GetAudioDriver(int index);
> /*@}*/
> 
> /**
>  *  \name Initialization and cleanup
>  *
>  *  \internal These functions are used internally, and should not be used unless
>  *            you have a specific need to specify the audio driver you want to
>  *            use.  You should normally use SDL_Init() or SDL_InitSubSystem().
>  */
> /*@{*/
> extern DECLSPEC int SDLCALL SDL_AudioInit(const char *driver_name);
> extern DECLSPEC void SDLCALL SDL_AudioQuit(void);
> /*@}*/
> 
> /**
>  *  This function returns the name of the current audio driver, or NULL
>  *  if no driver has been initialized.
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetCurrentAudioDriver(void);
> 
> /**
>  *  This function opens the audio device with the desired parameters, and
>  *  returns 0 if successful, placing the actual hardware parameters in the
>  *  structure pointed to by \c obtained.  If \c obtained is NULL, the audio
>  *  data passed to the callback function will be guaranteed to be in the
>  *  requested format, and will be automatically converted to the hardware
>  *  audio format if necessary.  This function returns -1 if it failed
>  *  to open the audio device, or couldn't set up the audio thread.
>  *
>  *  When filling in the desired audio spec structure,
>  *    - \c desired->freq should be the desired audio frequency in samples-per-
>  *      second.
>  *    - \c desired->format should be the desired audio format.
>  *    - \c desired->samples is the desired size of the audio buffer, in
>  *      samples.  This number should be a power of two, and may be adjusted by
>  *      the audio driver to a value more suitable for the hardware.  Good values
>  *      seem to range between 512 and 8096 inclusive, depending on the
>  *      application and CPU speed.  Smaller values yield faster response time,
>  *      but can lead to underflow if the application is doing heavy processing
>  *      and cannot fill the audio buffer in time.  A stereo sample consists of
>  *      both right and left channels in LR ordering.
>  *      Note that the number of samples is directly related to time by the
>  *      following formula:  \code ms = (samples*1000)/freq \endcode
>  *    - \c desired->size is the size in bytes of the audio buffer, and is
>  *      calculated by SDL_OpenAudio().
>  *    - \c desired->silence is the value used to set the buffer to silence,
>  *      and is calculated by SDL_OpenAudio().
>  *    - \c desired->callback should be set to a function that will be called
>  *      when the audio device is ready for more data.  It is passed a pointer
>  *      to the audio buffer, and the length in bytes of the audio buffer.
>  *      This function usually runs in a separate thread, and so you should
>  *      protect data structures that it accesses by calling SDL_LockAudio()
>  *      and SDL_UnlockAudio() in your code.
>  *    - \c desired->userdata is passed as the first parameter to your callback
>  *      function.
>  *
>  *  The audio device starts out playing silence when it's opened, and should
>  *  be enabled for playing by calling \c SDL_PauseAudio(0) when you are ready
>  *  for your audio callback function to be called.  Since the audio driver
>  *  may modify the requested size of the audio buffer, you should allocate
>  *  any local mixing buffers after you open the audio device.
>  */
> extern DECLSPEC int SDLCALL SDL_OpenAudio(SDL_AudioSpec * desired,
>                                           SDL_AudioSpec * obtained);
> 
> /**
>  *  SDL Audio Device IDs.
>  *
>  *  A successful call to SDL_OpenAudio() is always device id 1, and legacy
>  *  SDL audio APIs assume you want this device ID. SDL_OpenAudioDevice() calls
>  *  always returns devices >= 2 on success. The legacy calls are good both
>  *  for backwards compatibility and when you don't care about multiple,
>  *  specific, or capture devices.
>  */
> typedef Uint32 SDL_AudioDeviceID;
> 
> /**
>  *  Get the number of available devices exposed by the current driver.
>  *  Only valid after a successfully initializing the audio subsystem.
>  *  Returns -1 if an explicit list of devices can't be determined; this is
>  *  not an error. For example, if SDL is set up to talk to a remote audio
>  *  server, it can't list every one available on the Internet, but it will
>  *  still allow a specific host to be specified to SDL_OpenAudioDevice().
>  *
>  *  In many common cases, when this function returns a value <= 0, it can still
>  *  successfully open the default device (NULL for first argument of
>  *  SDL_OpenAudioDevice()).
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumAudioDevices(int iscapture);
> 
> /**
>  *  Get the human-readable name of a specific audio device.
>  *  Must be a value between 0 and (number of audio devices-1).
>  *  Only valid after a successfully initializing the audio subsystem.
>  *  The values returned by this function reflect the latest call to
>  *  SDL_GetNumAudioDevices(); recall that function to redetect available
>  *  hardware.
>  *
>  *  The string returned by this function is UTF-8 encoded, read-only, and
>  *  managed internally. You are not to free it. If you need to keep the
>  *  string for any length of time, you should make your own copy of it, as it
>  *  will be invalid next time any of several other SDL functions is called.
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetAudioDeviceName(int index,
>                                                            int iscapture);
> 
> 
> /**
>  *  Open a specific audio device. Passing in a device name of NULL requests
>  *  the most reasonable default (and is equivalent to calling SDL_OpenAudio()).
>  *
>  *  The device name is a UTF-8 string reported by SDL_GetAudioDeviceName(), but
>  *  some drivers allow arbitrary and driver-specific strings, such as a
>  *  hostname/IP address for a remote audio server, or a filename in the
>  *  diskaudio driver.
>  *
>  *  \return 0 on error, a valid device ID that is >= 2 on success.
>  *
>  *  SDL_OpenAudio(), unlike this function, always acts on device ID 1.
>  */
> extern DECLSPEC SDL_AudioDeviceID SDLCALL SDL_OpenAudioDevice(const char
>                                                               *device,
>                                                               int iscapture,
>                                                               const
>                                                               SDL_AudioSpec *
>                                                               desired,
>                                                               SDL_AudioSpec *
>                                                               obtained,
>                                                               int
>                                                               allowed_changes);
> 
> 
> 
> /**
>  *  \name Audio state
>  *
>  *  Get the current audio state.
>  */
> /*@{*/
> typedef enum
> {
>     SDL_AUDIO_STOPPED = 0,
>     SDL_AUDIO_PLAYING,
>     SDL_AUDIO_PAUSED
> } SDL_AudioStatus;
> extern DECLSPEC SDL_AudioStatus SDLCALL SDL_GetAudioStatus(void);
> 
> extern DECLSPEC SDL_AudioStatus SDLCALL
> SDL_GetAudioDeviceStatus(SDL_AudioDeviceID dev);
> /*@}*//*Audio State*/
> 
> /**
>  *  \name Pause audio functions
>  *
>  *  These functions pause and unpause the audio callback processing.
>  *  They should be called with a parameter of 0 after opening the audio
>  *  device to start playing sound.  This is so you can safely initialize
>  *  data for your callback function after opening the audio device.
>  *  Silence will be written to the audio device during the pause.
>  */
> /*@{*/
> extern DECLSPEC void SDLCALL SDL_PauseAudio(int pause_on);
> extern DECLSPEC void SDLCALL SDL_PauseAudioDevice(SDL_AudioDeviceID dev,
>                                                   int pause_on);
> /*@}*//*Pause audio functions*/
> 
> /**
>  *  This function loads a WAVE from the data source, automatically freeing
>  *  that source if \c freesrc is non-zero.  For example, to load a WAVE file,
>  *  you could do:
>  *  \code
>  *      SDL_LoadWAV_RW(SDL_RWFromFile("sample.wav", "rb"), 1, ...);
>  *  \endcode
>  *
>  *  If this function succeeds, it returns the given SDL_AudioSpec,
>  *  filled with the audio data format of the wave data, and sets
>  *  \c *audio_buf to a malloc()'d buffer containing the audio data,
>  *  and sets \c *audio_len to the length of that audio buffer, in bytes.
>  *  You need to free the audio buffer with SDL_FreeWAV() when you are
>  *  done with it.
>  *
>  *  This function returns NULL and sets the SDL error message if the
>  *  wave file cannot be opened, uses an unknown data format, or is
>  *  corrupt.  Currently raw and MS-ADPCM WAVE files are supported.
>  */
> extern DECLSPEC SDL_AudioSpec *SDLCALL SDL_LoadWAV_RW(SDL_RWops * src,
>                                                       int freesrc,
>                                                       SDL_AudioSpec * spec,
>                                                       Uint8 ** audio_buf,
>                                                       Uint32 * audio_len);
> 
> /**
>  *  Loads a WAV from a file.
>  *  Compatibility convenience function.
>  */
> #define SDL_LoadWAV(file, spec, audio_buf, audio_len) \
>     SDL_LoadWAV_RW(SDL_RWFromFile(file, "rb"),1, spec,audio_buf,audio_len)
> 
> /**
>  *  This function frees data previously allocated with SDL_LoadWAV_RW()
>  */
> extern DECLSPEC void SDLCALL SDL_FreeWAV(Uint8 * audio_buf);
> 
> /**
>  *  This function takes a source format and rate and a destination format
>  *  and rate, and initializes the \c cvt structure with information needed
>  *  by SDL_ConvertAudio() to convert a buffer of audio data from one format
>  *  to the other.
>  *
>  *  \return -1 if the format conversion is not supported, 0 if there's
>  *  no conversion needed, or 1 if the audio filter is set up.
>  */
> extern DECLSPEC int SDLCALL SDL_BuildAudioCVT(SDL_AudioCVT * cvt,
>                                               SDL_AudioFormat src_format,
>                                               Uint8 src_channels,
>                                               int src_rate,
>                                               SDL_AudioFormat dst_format,
>                                               Uint8 dst_channels,
>                                               int dst_rate);
> 
> /**
>  *  Once you have initialized the \c cvt structure using SDL_BuildAudioCVT(),
>  *  created an audio buffer \c cvt->buf, and filled it with \c cvt->len bytes of
>  *  audio data in the source format, this function will convert it in-place
>  *  to the desired format.
>  *
>  *  The data conversion may expand the size of the audio data, so the buffer
>  *  \c cvt->buf should be allocated after the \c cvt structure is initialized by
>  *  SDL_BuildAudioCVT(), and should be \c cvt->len*cvt->len_mult bytes long.
>  */
> extern DECLSPEC int SDLCALL SDL_ConvertAudio(SDL_AudioCVT * cvt);
> 
> #define SDL_MIX_MAXVOLUME 128
> /**
>  *  This takes two audio buffers of the playing audio format and mixes
>  *  them, performing addition, volume adjustment, and overflow clipping.
>  *  The volume ranges from 0 - 128, and should be set to ::SDL_MIX_MAXVOLUME
>  *  for full audio volume.  Note this does not change hardware volume.
>  *  This is provided for convenience -- you can mix your own audio data.
>  */
> extern DECLSPEC void SDLCALL SDL_MixAudio(Uint8 * dst, const Uint8 * src,
>                                           Uint32 len, int volume);
> 
> /**
>  *  This works like SDL_MixAudio(), but you specify the audio format instead of
>  *  using the format of audio device 1. Thus it can be used when no audio
>  *  device is open at all.
>  */
> extern DECLSPEC void SDLCALL SDL_MixAudioFormat(Uint8 * dst,
>                                                 const Uint8 * src,
>                                                 SDL_AudioFormat format,
>                                                 Uint32 len, int volume);
> 
> /**
>  *  \name Audio lock functions
>  *
>  *  The lock manipulated by these functions protects the callback function.
>  *  During a SDL_LockAudio()/SDL_UnlockAudio() pair, you can be guaranteed that
>  *  the callback function is not running.  Do not call these from the callback
>  *  function or you will cause deadlock.
>  */
> /*@{*/
> extern DECLSPEC void SDLCALL SDL_LockAudio(void);
> extern DECLSPEC void SDLCALL SDL_LockAudioDevice(SDL_AudioDeviceID dev);
> extern DECLSPEC void SDLCALL SDL_UnlockAudio(void);
> extern DECLSPEC void SDLCALL SDL_UnlockAudioDevice(SDL_AudioDeviceID dev);
> /*@}*//*Audio lock functions*/
> 
> /**
>  *  This function shuts down audio processing and closes the audio device.
>  */
> extern DECLSPEC void SDLCALL SDL_CloseAudio(void);
> extern DECLSPEC void SDLCALL SDL_CloseAudioDevice(SDL_AudioDeviceID dev);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_audio_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_bits.h ../android-sdl/jni/SDL2/include/SDL_bits.h
1,97c1,97
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_bits.h
<  *
<  *  Functions for fiddling with bits and bitmasks.
<  */
< 
< #ifndef _SDL_bits_h
< #define _SDL_bits_h
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \file SDL_bits.h
<  */
< 
< /**
<  *  Get the index of the most significant bit. Result is undefined when called
<  *  with 0. This operation can also be stated as "count leading zeroes" and
<  *  "log base 2".
<  *
<  *  \return Index of the most significant bit, or -1 if the value is 0.
<  */
< SDL_FORCE_INLINE int
< SDL_MostSignificantBitIndex32(Uint32 x)
< {
< #if defined(__GNUC__) && __GNUC__ >= 4
<     /* Count Leading Zeroes builtin in GCC.
<      * http://gcc.gnu.org/onlinedocs/gcc-4.3.4/gcc/Other-Builtins.html
<      */
<     if (x == 0) {
<         return -1;
<     }
<     return 31 - __builtin_clz(x);
< #else
<     /* Based off of Bit Twiddling Hacks by Sean Eron Anderson
<      * <seander@cs.stanford.edu>, released in the public domain.
<      * http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog
<      */
<     const Uint32 b[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};
<     const int    S[] = {1, 2, 4, 8, 16};
< 
<     int msbIndex = 0;
<     int i;
< 
<     if (x == 0) {
<         return -1;
<     }
< 
<     for (i = 4; i >= 0; i--)
<     {
<         if (x & b[i])
<         {
<             x >>= S[i];
<             msbIndex |= S[i];
<         }
<     }
< 
<     return msbIndex;
< #endif
< }
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_bits_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_bits.h
>  *
>  *  Functions for fiddling with bits and bitmasks.
>  */
> 
> #ifndef _SDL_bits_h
> #define _SDL_bits_h
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \file SDL_bits.h
>  */
> 
> /**
>  *  Get the index of the most significant bit. Result is undefined when called
>  *  with 0. This operation can also be stated as "count leading zeroes" and
>  *  "log base 2".
>  *
>  *  \return Index of the most significant bit, or -1 if the value is 0.
>  */
> SDL_FORCE_INLINE int
> SDL_MostSignificantBitIndex32(Uint32 x)
> {
> #if defined(__GNUC__) && __GNUC__ >= 4
>     /* Count Leading Zeroes builtin in GCC.
>      * http://gcc.gnu.org/onlinedocs/gcc-4.3.4/gcc/Other-Builtins.html
>      */
>     if (x == 0) {
>         return -1;
>     }
>     return 31 - __builtin_clz(x);
> #else
>     /* Based off of Bit Twiddling Hacks by Sean Eron Anderson
>      * <seander@cs.stanford.edu>, released in the public domain.
>      * http://graphics.stanford.edu/~seander/bithacks.html#IntegerLog
>      */
>     const Uint32 b[] = {0x2, 0xC, 0xF0, 0xFF00, 0xFFFF0000};
>     const int    S[] = {1, 2, 4, 8, 16};
> 
>     int msbIndex = 0;
>     int i;
> 
>     if (x == 0) {
>         return -1;
>     }
> 
>     for (i = 4; i >= 0; i--)
>     {
>         if (x & b[i])
>         {
>             x >>= S[i];
>             msbIndex |= S[i];
>         }
>     }
> 
>     return msbIndex;
> #endif
> }
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_bits_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_blendmode.h ../android-sdl/jni/SDL2/include/SDL_blendmode.h
1,63c1,63
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_blendmode.h
<  *
<  *  Header file declaring the SDL_BlendMode enumeration
<  */
< 
< #ifndef _SDL_blendmode_h
< #define _SDL_blendmode_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief The blend mode used in SDL_RenderCopy() and drawing operations.
<  */
< typedef enum
< {
<     SDL_BLENDMODE_NONE = 0x00000000,     /**< no blending
<                                               dstRGBA = srcRGBA */
<     SDL_BLENDMODE_BLEND = 0x00000001,    /**< alpha blending
<                                               dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))
<                                               dstA = srcA + (dstA * (1-srcA)) */
<     SDL_BLENDMODE_ADD = 0x00000002,      /**< additive blending
<                                               dstRGB = (srcRGB * srcA) + dstRGB
<                                               dstA = dstA */
<     SDL_BLENDMODE_MOD = 0x00000004       /**< color modulate
<                                               dstRGB = srcRGB * dstRGB
<                                               dstA = dstA */
< } SDL_BlendMode;
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_video_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_blendmode.h
>  *
>  *  Header file declaring the SDL_BlendMode enumeration
>  */
> 
> #ifndef _SDL_blendmode_h
> #define _SDL_blendmode_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief The blend mode used in SDL_RenderCopy() and drawing operations.
>  */
> typedef enum
> {
>     SDL_BLENDMODE_NONE = 0x00000000,     /**< no blending
>                                               dstRGBA = srcRGBA */
>     SDL_BLENDMODE_BLEND = 0x00000001,    /**< alpha blending
>                                               dstRGB = (srcRGB * srcA) + (dstRGB * (1-srcA))
>                                               dstA = srcA + (dstA * (1-srcA)) */
>     SDL_BLENDMODE_ADD = 0x00000002,      /**< additive blending
>                                               dstRGB = (srcRGB * srcA) + dstRGB
>                                               dstA = dstA */
>     SDL_BLENDMODE_MOD = 0x00000004       /**< color modulate
>                                               dstRGB = srcRGB * dstRGB
>                                               dstA = dstA */
> } SDL_BlendMode;
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_video_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_clipboard.h ../android-sdl/jni/SDL2/include/SDL_clipboard.h
1,71c1,71
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  * \file SDL_clipboard.h
<  *
<  * Include file for SDL clipboard handling
<  */
< 
< #ifndef _SDL_clipboard_h
< #define _SDL_clipboard_h
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* Function prototypes */
< 
< /**
<  * \brief Put UTF-8 text into the clipboard
<  *
<  * \sa SDL_GetClipboardText()
<  */
< extern DECLSPEC int SDLCALL SDL_SetClipboardText(const char *text);
< 
< /**
<  * \brief Get UTF-8 text from the clipboard, which must be freed with SDL_free()
<  *
<  * \sa SDL_SetClipboardText()
<  */
< extern DECLSPEC char * SDLCALL SDL_GetClipboardText(void);
< 
< /**
<  * \brief Returns a flag indicating whether the clipboard exists and contains a text string that is non-empty
<  *
<  * \sa SDL_GetClipboardText()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasClipboardText(void);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_clipboard_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  * \file SDL_clipboard.h
>  *
>  * Include file for SDL clipboard handling
>  */
> 
> #ifndef _SDL_clipboard_h
> #define _SDL_clipboard_h
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* Function prototypes */
> 
> /**
>  * \brief Put UTF-8 text into the clipboard
>  *
>  * \sa SDL_GetClipboardText()
>  */
> extern DECLSPEC int SDLCALL SDL_SetClipboardText(const char *text);
> 
> /**
>  * \brief Get UTF-8 text from the clipboard, which must be freed with SDL_free()
>  *
>  * \sa SDL_SetClipboardText()
>  */
> extern DECLSPEC char * SDLCALL SDL_GetClipboardText(void);
> 
> /**
>  * \brief Returns a flag indicating whether the clipboard exists and contains a text string that is non-empty
>  *
>  * \sa SDL_GetClipboardText()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasClipboardText(void);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_clipboard_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_config.h ../android-sdl/jni/SDL2/include/SDL_config.h
1,51c1,51
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_h
< #define _SDL_config_h
< 
< #include "SDL_platform.h"
< 
< /**
<  *  \file SDL_config.h
<  */
< 
< /* Add any platform that doesn't build using the configure system. */
< #if defined(__WIN32__)
< #include "SDL_config_windows.h"
< #elif defined(__MACOSX__)
< #include "SDL_config_macosx.h"
< #elif defined(__IPHONEOS__)
< #include "SDL_config_iphoneos.h"
< #elif defined(__ANDROID__)
< #include "SDL_config_android.h"
< #elif defined(__PSP__)
< #include "SDL_config_psp.h"
< #else
< /* This is a minimal configuration just to get SDL running on new platforms */
< #include "SDL_config_minimal.h"
< #endif /* platform config */
< 
< #ifdef USING_GENERATED_CONFIG_H
< #error Wrong SDL_config.h, check your include path?
< #endif
< 
< #endif /* _SDL_config_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_h
> #define _SDL_config_h
> 
> #include "SDL_platform.h"
> 
> /**
>  *  \file SDL_config.h
>  */
> 
> /* Add any platform that doesn't build using the configure system. */
> #if defined(__WIN32__)
> #include "SDL_config_windows.h"
> #elif defined(__MACOSX__)
> #include "SDL_config_macosx.h"
> #elif defined(__IPHONEOS__)
> #include "SDL_config_iphoneos.h"
> #elif defined(__ANDROID__)
> #include "SDL_config_android.h"
> #elif defined(__PSP__)
> #include "SDL_config_psp.h"
> #else
> /* This is a minimal configuration just to get SDL running on new platforms */
> #include "SDL_config_minimal.h"
> #endif /* platform config */
> 
> #ifdef USING_GENERATED_CONFIG_H
> #error Wrong SDL_config.h, check your include path?
> #endif
> 
> #endif /* _SDL_config_h */
diff jni/SDL/include/SDL_config.h.cmake ../android-sdl/jni/SDL2/include/SDL_config.h.cmake
1,379c1,369
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_h
< #define _SDL_config_h
< 
< /**
<  *  \file SDL_config.h.in
<  *
<  *  This is a set of defines to configure the SDL features
<  */
< 
< /* General platform specific identifiers */
< #include "SDL_platform.h"
< 
< /* C language features */
< #cmakedefine const @HAVE_CONST@
< #cmakedefine inline @HAVE_INLINE@
< #cmakedefine volatile @HAVE_VOLATILE@
< 
< /* C datatypes */
< /* Define SIZEOF_VOIDP for 64/32 architectures */
< #ifdef __LP64__
< #define SIZEOF_VOIDP 8
< #else
< #define SIZEOF_VOIDP 4
< #endif
< 
< #cmakedefine HAVE_GCC_ATOMICS @HAVE_GCC_ATOMICS@
< #cmakedefine HAVE_GCC_SYNC_LOCK_TEST_AND_SET @HAVE_GCC_SYNC_LOCK_TEST_AND_SET@
< #cmakedefine HAVE_PTHREAD_SPINLOCK @HAVE_PTHREAD_SPINLOCK@
< 
< /* Comment this if you want to build without any C library requirements */
< #cmakedefine HAVE_LIBC 1
< #if HAVE_LIBC
< 
< /* Useful headers */
< #cmakedefine HAVE_ALLOCA_H 1
< #cmakedefine HAVE_SYS_TYPES_H 1
< #cmakedefine HAVE_STDIO_H 1
< #cmakedefine STDC_HEADERS 1
< #cmakedefine HAVE_STDLIB_H 1
< #cmakedefine HAVE_STDARG_H 1
< #cmakedefine HAVE_MALLOC_H 1
< #cmakedefine HAVE_MEMORY_H 1
< #cmakedefine HAVE_STRING_H 1
< #cmakedefine HAVE_STRINGS_H 1
< #cmakedefine HAVE_INTTYPES_H 1
< #cmakedefine HAVE_STDINT_H 1
< #cmakedefine HAVE_CTYPE_H 1
< #cmakedefine HAVE_MATH_H 1
< #cmakedefine HAVE_ICONV_H 1
< #cmakedefine HAVE_SIGNAL_H 1
< #cmakedefine HAVE_ALTIVEC_H 1
< #cmakedefine HAVE_PTHREAD_NP_H 1
< #cmakedefine HAVE_LIBUDEV_H 1
< #cmakedefine HAVE_DBUS_DBUS_H 1
< 
< /* C library functions */
< #cmakedefine HAVE_MALLOC 1
< #cmakedefine HAVE_CALLOC 1
< #cmakedefine HAVE_REALLOC 1
< #cmakedefine HAVE_FREE 1
< #cmakedefine HAVE_ALLOCA 1
< #ifndef __WIN32__ /* Don't use C runtime versions of these on Windows */
< #cmakedefine HAVE_GETENV 1
< #cmakedefine HAVE_SETENV 1
< #cmakedefine HAVE_PUTENV 1
< #cmakedefine HAVE_UNSETENV 1
< #endif
< #cmakedefine HAVE_QSORT 1
< #cmakedefine HAVE_ABS 1
< #cmakedefine HAVE_BCOPY 1
< #cmakedefine HAVE_MEMSET 1
< #cmakedefine HAVE_MEMCPY 1
< #cmakedefine HAVE_MEMMOVE 1
< #cmakedefine HAVE_MEMCMP 1
< #cmakedefine HAVE_STRLEN 1
< #cmakedefine HAVE_STRLCPY 1
< #cmakedefine HAVE_STRLCAT 1
< #cmakedefine HAVE_STRDUP 1
< #cmakedefine HAVE__STRREV 1
< #cmakedefine HAVE__STRUPR 1
< #cmakedefine HAVE__STRLWR 1
< #cmakedefine HAVE_INDEX 1
< #cmakedefine HAVE_RINDEX 1
< #cmakedefine HAVE_STRCHR 1
< #cmakedefine HAVE_STRRCHR 1
< #cmakedefine HAVE_STRSTR 1
< #cmakedefine HAVE_ITOA 1
< #cmakedefine HAVE__LTOA 1
< #cmakedefine HAVE__UITOA 1
< #cmakedefine HAVE__ULTOA 1
< #cmakedefine HAVE_STRTOL 1
< #cmakedefine HAVE_STRTOUL 1
< #cmakedefine HAVE__I64TOA 1
< #cmakedefine HAVE__UI64TOA 1
< #cmakedefine HAVE_STRTOLL 1
< #cmakedefine HAVE_STRTOULL 1
< #cmakedefine HAVE_STRTOD 1
< #cmakedefine HAVE_ATOI 1
< #cmakedefine HAVE_ATOF 1
< #cmakedefine HAVE_STRCMP 1
< #cmakedefine HAVE_STRNCMP 1
< #cmakedefine HAVE__STRICMP 1
< #cmakedefine HAVE_STRCASECMP 1
< #cmakedefine HAVE__STRNICMP 1
< #cmakedefine HAVE_STRNCASECMP 1
< #cmakedefine HAVE_SSCANF 1
< #cmakedefine HAVE_SNPRINTF 1
< #cmakedefine HAVE_VSNPRINTF 1
< #cmakedefine HAVE_M_PI 1
< #cmakedefine HAVE_ATAN 1
< #cmakedefine HAVE_ATAN2 1
< #cmakedefine HAVE_CEIL 1
< #cmakedefine HAVE_COPYSIGN 1
< #cmakedefine HAVE_COS 1
< #cmakedefine HAVE_COSF 1
< #cmakedefine HAVE_FABS 1
< #cmakedefine HAVE_FLOOR 1
< #cmakedefine HAVE_LOG 1
< #cmakedefine HAVE_POW 1
< #cmakedefine HAVE_SCALBN 1
< #cmakedefine HAVE_SIN 1
< #cmakedefine HAVE_SINF 1
< #cmakedefine HAVE_SQRT 1
< #cmakedefine HAVE_FSEEKO 1
< #cmakedefine HAVE_FSEEKO64 1
< #cmakedefine HAVE_SIGACTION 1
< #cmakedefine HAVE_SA_SIGACTION 1
< #cmakedefine HAVE_SETJMP 1
< #cmakedefine HAVE_NANOSLEEP 1
< #cmakedefine HAVE_SYSCONF 1
< #cmakedefine HAVE_SYSCTLBYNAME 1
< #cmakedefine HAVE_CLOCK_GETTIME 1
< #cmakedefine HAVE_GETPAGESIZE 1
< #cmakedefine HAVE_MPROTECT 1
< #cmakedefine HAVE_ICONV 1
< #cmakedefine HAVE_PTHREAD_SETNAME_NP 1
< #cmakedefine HAVE_PTHREAD_SET_NAME_NP 1
< #cmakedefine HAVE_SEM_TIMEDWAIT 1
< #elif __WIN32__
< #cmakedefine HAVE_STDARG_H 1
< #cmakedefine HAVE_STDDEF_H 1
< #else
< /* We may need some replacement for stdarg.h here */
< #include <stdarg.h>
< #endif /* HAVE_LIBC */
< 
< /* SDL internal assertion support */
< #cmakedefine SDL_DEFAULT_ASSERT_LEVEL @SDL_DEFAULT_ASSERT_LEVEL@
< 
< /* Allow disabling of core subsystems */
< #cmakedefine SDL_ATOMIC_DISABLED @SDL_ATOMIC_DISABLED@
< #cmakedefine SDL_AUDIO_DISABLED @SDL_AUDIO_DISABLED@
< #cmakedefine SDL_CPUINFO_DISABLED @SDL_CPUINFO_DISABLED@
< #cmakedefine SDL_EVENTS_DISABLED @SDL_EVENTS_DISABLED@
< #cmakedefine SDL_FILE_DISABLED @SDL_FILE_DISABLED@
< #cmakedefine SDL_JOYSTICK_DISABLED @SDL_JOYSTICK_DISABLED@
< #cmakedefine SDL_HAPTIC_DISABLED @SDL_HAPTIC_DISABLED@
< #cmakedefine SDL_LOADSO_DISABLED @SDL_LOADSO_DISABLED@
< #cmakedefine SDL_RENDER_DISABLED @SDL_RENDER_DISABLED@
< #cmakedefine SDL_THREADS_DISABLED @SDL_THREADS_DISABLED@
< #cmakedefine SDL_TIMERS_DISABLED @SDL_TIMERS_DISABLED@
< #cmakedefine SDL_VIDEO_DISABLED @SDL_VIDEO_DISABLED@
< #cmakedefine SDL_POWER_DISABLED @SDL_POWER_DISABLED@
< #cmakedefine SDL_FILESYSTEM_DISABLED @SDL_FILESYSTEM_DISABLED@
< 
< /* Enable various audio drivers */
< #cmakedefine SDL_AUDIO_DRIVER_ALSA @SDL_AUDIO_DRIVER_ALSA@
< #cmakedefine SDL_AUDIO_DRIVER_ALSA_DYNAMIC @SDL_AUDIO_DRIVER_ALSA_DYNAMIC@
< #cmakedefine SDL_AUDIO_DRIVER_ARTS @SDL_AUDIO_DRIVER_ARTS@
< #cmakedefine SDL_AUDIO_DRIVER_ARTS_DYNAMIC @SDL_AUDIO_DRIVER_ARTS_DYNAMIC@
< #cmakedefine SDL_AUDIO_DRIVER_PULSEAUDIO @SDL_AUDIO_DRIVER_PULSEAUDIO@
< #cmakedefine SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC @SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC@
< #cmakedefine SDL_AUDIO_DRIVER_BEOSAUDIO @SDL_AUDIO_DRIVER_BEOSAUDIO@
< #cmakedefine SDL_AUDIO_DRIVER_BSD @SDL_AUDIO_DRIVER_BSD@
< #cmakedefine SDL_AUDIO_DRIVER_COREAUDIO @SDL_AUDIO_DRIVER_COREAUDIO@
< #cmakedefine SDL_AUDIO_DRIVER_DISK @SDL_AUDIO_DRIVER_DISK@
< #cmakedefine SDL_AUDIO_DRIVER_DUMMY @SDL_AUDIO_DRIVER_DUMMY@
< #cmakedefine SDL_AUDIO_DRIVER_XAUDIO2 @SDL_AUDIO_DRIVER_XAUDIO2@
< #cmakedefine SDL_AUDIO_DRIVER_DSOUND @SDL_AUDIO_DRIVER_DSOUND@
< #cmakedefine SDL_AUDIO_DRIVER_ESD @SDL_AUDIO_DRIVER_ESD@
< #cmakedefine SDL_AUDIO_DRIVER_ESD_DYNAMIC @SDL_AUDIO_DRIVER_ESD_DYNAMIC@
< #cmakedefine SDL_AUDIO_DRIVER_NAS @SDL_AUDIO_DRIVER_NAS@
< #cmakedefine SDL_AUDIO_DRIVER_NAS_DYNAMIC @SDL_AUDIO_DRIVER_NAS_DYNAMIC@
< #cmakedefine SDL_AUDIO_DRIVER_SNDIO @SDL_AUDIO_DRIVER_SNDIO@
< #cmakedefine SDL_AUDIO_DRIVER_SNDIO_DYNAMIC @SDL_AUDIO_DRIVER_SNDIO_DYNAMIC@
< #cmakedefine SDL_AUDIO_DRIVER_OSS @SDL_AUDIO_DRIVER_OSS@
< #cmakedefine SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H @SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H@
< #cmakedefine SDL_AUDIO_DRIVER_PAUDIO @SDL_AUDIO_DRIVER_PAUDIO@
< #cmakedefine SDL_AUDIO_DRIVER_QSA @SDL_AUDIO_DRIVER_QSA@
< #cmakedefine SDL_AUDIO_DRIVER_SUNAUDIO @SDL_AUDIO_DRIVER_SUNAUDIO@
< #cmakedefine SDL_AUDIO_DRIVER_WINMM @SDL_AUDIO_DRIVER_WINMM@
< #cmakedefine SDL_AUDIO_DRIVER_FUSIONSOUND @SDL_AUDIO_DRIVER_FUSIONSOUND@
< #cmakedefine SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC @SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC@
< 
< /* Enable various input drivers */
< #cmakedefine SDL_INPUT_LINUXEV @SDL_INPUT_LINUXEV@
< #cmakedefine SDL_INPUT_TSLIB @SDL_INPUT_TSLIB@
< #cmakedefine SDL_JOYSTICK_BEOS @SDL_JOYSTICK_BEOS@
< #cmakedefine SDL_JOYSTICK_DINPUT @SDL_JOYSTICK_DINPUT@
< #cmakedefine SDL_JOYSTICK_DUMMY @SDL_JOYSTICK_DUMMY@
< #cmakedefine SDL_JOYSTICK_IOKIT @SDL_JOYSTICK_IOKIT@
< #cmakedefine SDL_JOYSTICK_LINUX @SDL_JOYSTICK_LINUX@
< #cmakedefine SDL_JOYSTICK_WINMM @SDL_JOYSTICK_WINMM@
< #cmakedefine SDL_JOYSTICK_USBHID @SDL_JOYSTICK_USBHID@
< #cmakedefine SDL_JOYSTICK_USBHID_MACHINE_JOYSTICK_H @SDL_JOYSTICK_USBHID_MACHINE_JOYSTICK_H@
< #cmakedefine SDL_HAPTIC_DUMMY @SDL_HAPTIC_DUMMY@
< #cmakedefine SDL_HAPTIC_LINUX @SDL_HAPTIC_LINUX@
< #cmakedefine SDL_HAPTIC_IOKIT @SDL_HAPTIC_IOKIT@
< #cmakedefine SDL_HAPTIC_DINPUT @SDL_HAPTIC_DINPUT@
< 
< /* Enable various shared object loading systems */
< #cmakedefine SDL_LOADSO_BEOS @SDL_LOADSO_BEOS@
< #cmakedefine SDL_LOADSO_DLOPEN @SDL_LOADSO_DLOPEN@
< #cmakedefine SDL_LOADSO_DUMMY @SDL_LOADSO_DUMMY@
< #cmakedefine SDL_LOADSO_LDG @SDL_LOADSO_LDG@
< #cmakedefine SDL_LOADSO_WINDOWS @SDL_LOADSO_WINDOWS@
< 
< /* Enable various threading systems */
< #cmakedefine SDL_THREAD_BEOS @SDL_THREAD_BEOS@
< #cmakedefine SDL_THREAD_PTHREAD @SDL_THREAD_PTHREAD@
< #cmakedefine SDL_THREAD_PTHREAD_RECURSIVE_MUTEX @SDL_THREAD_PTHREAD_RECURSIVE_MUTEX@
< #cmakedefine SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP @SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP@
< #cmakedefine SDL_THREAD_WINDOWS @SDL_THREAD_WINDOWS@
< 
< /* Enable various timer systems */
< #cmakedefine SDL_TIMER_BEOS @SDL_TIMER_BEOS@
< #cmakedefine SDL_TIMER_DUMMY @SDL_TIMER_DUMMY@
< #cmakedefine SDL_TIMER_UNIX @SDL_TIMER_UNIX@
< #cmakedefine SDL_TIMER_WINDOWS @SDL_TIMER_WINDOWS@
< #cmakedefine SDL_TIMER_WINCE @SDL_TIMER_WINCE@
< 
< /* Enable various video drivers */
< #cmakedefine SDL_VIDEO_DRIVER_BWINDOW @SDL_VIDEO_DRIVER_BWINDOW@
< #cmakedefine SDL_VIDEO_DRIVER_COCOA @SDL_VIDEO_DRIVER_COCOA@
< #cmakedefine SDL_VIDEO_DRIVER_DIRECTFB @SDL_VIDEO_DRIVER_DIRECTFB@
< #cmakedefine SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC @SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC@
< #cmakedefine SDL_VIDEO_DRIVER_DUMMY @SDL_VIDEO_DRIVER_DUMMY@
< #cmakedefine SDL_VIDEO_DRIVER_WINDOWS @SDL_VIDEO_DRIVER_WINDOWS@
< #cmakedefine SDL_VIDEO_DRIVER_X11 @SDL_VIDEO_DRIVER_X11@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC @SDL_VIDEO_DRIVER_X11_DYNAMIC@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT @SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR @SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA @SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 @SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR @SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS @SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS@
< #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE @SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XCURSOR @SDL_VIDEO_DRIVER_X11_XCURSOR@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XINERAMA @SDL_VIDEO_DRIVER_X11_XINERAMA@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XINPUT2 @SDL_VIDEO_DRIVER_X11_XINPUT2@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH @SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XRANDR @SDL_VIDEO_DRIVER_X11_XRANDR@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XSCRNSAVER @SDL_VIDEO_DRIVER_X11_XSCRNSAVER@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XSHAPE @SDL_VIDEO_DRIVER_X11_XSHAPE@
< #cmakedefine SDL_VIDEO_DRIVER_X11_XVIDMODE @SDL_VIDEO_DRIVER_X11_XVIDMODE@
< #cmakedefine SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS @SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS@
< #cmakedefine SDL_VIDEO_DRIVER_X11_CONST_PARAM_XDATA32 @SDL_VIDEO_DRIVER_X11_CONST_PARAM_XDATA32@
< #cmakedefine SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY @SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY@
< #cmakedefine SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM @SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM@
< 
< #cmakedefine SDL_VIDEO_RENDER_D3D @SDL_VIDEO_RENDER_D3D@
< #cmakedefine SDL_VIDEO_RENDER_OGL @SDL_VIDEO_RENDER_OGL@
< #cmakedefine SDL_VIDEO_RENDER_OGL_ES @SDL_VIDEO_RENDER_OGL_ES@
< #cmakedefine SDL_VIDEO_RENDER_OGL_ES2 @SDL_VIDEO_RENDER_OGL_ES2@
< #cmakedefine SDL_VIDEO_RENDER_DIRECTFB @SDL_VIDEO_RENDER_DIRECTFB@
< 
< /* Enable OpenGL support */
< #cmakedefine SDL_VIDEO_OPENGL @SDL_VIDEO_OPENGL@
< #cmakedefine SDL_VIDEO_OPENGL_ES @SDL_VIDEO_OPENGL_ES@
< #cmakedefine SDL_VIDEO_OPENGL_ES2 @SDL_VIDEO_OPENGL_ES2@
< #cmakedefine SDL_VIDEO_OPENGL_BGL @SDL_VIDEO_OPENGL_BGL@
< #cmakedefine SDL_VIDEO_OPENGL_CGL @SDL_VIDEO_OPENGL_CGL@
< #cmakedefine SDL_VIDEO_OPENGL_GLX @SDL_VIDEO_OPENGL_GLX@
< #cmakedefine SDL_VIDEO_OPENGL_WGL @SDL_VIDEO_OPENGL_WGL@
< #cmakedefine SDL_VIDEO_OPENGL_EGL @SDL_VIDEO_OPENGL_EGL@
< #cmakedefine SDL_VIDEO_OPENGL_OSMESA @SDL_VIDEO_OPENGL_OSMESA@
< #cmakedefine SDL_VIDEO_OPENGL_OSMESA_DYNAMIC @SDL_VIDEO_OPENGL_OSMESA_DYNAMIC@
< 
< /* Enable system power support */
< #cmakedefine SDL_POWER_LINUX @SDL_POWER_LINUX@
< #cmakedefine SDL_POWER_WINDOWS @SDL_POWER_WINDOWS@
< #cmakedefine SDL_POWER_MACOSX @SDL_POWER_MACOSX@
< #cmakedefine SDL_POWER_BEOS @SDL_POWER_BEOS@
< #cmakedefine SDL_POWER_HARDWIRED @SDL_POWER_HARDWIRED@
< 
< /* Enable system filesystem support */
< #cmakedefine SDL_FILESYSTEM_BEOS @SDL_FILESYSTEM_BEOS@
< #cmakedefine SDL_FILESYSTEM_COCOA @SDL_FILESYSTEM_COCOA@
< #cmakedefine SDL_FILESYSTEM_DUMMY @SDL_FILESYSTEM_DUMMY@
< #cmakedefine SDL_FILESYSTEM_UNIX @SDL_FILESYSTEM_UNIX@
< #cmakedefine SDL_FILESYSTEM_WINDOWS @SDL_FILESYSTEM_WINDOWS@
< 
< /* Enable assembly routines */
< #cmakedefine SDL_ASSEMBLY_ROUTINES @SDL_ASSEMBLY_ROUTINES@
< #cmakedefine SDL_ALTIVEC_BLITTERS @SDL_ALTIVEC_BLITTERS@
< 
< 
< /* Platform specific definitions */
< #if !defined(__WIN32__)
< #  if !defined(_STDINT_H_) && !defined(_STDINT_H) && !defined(HAVE_STDINT_H) && !defined(_HAVE_STDINT_H)
< typedef unsigned int size_t;
< typedef signed char int8_t;
< typedef unsigned char uint8_t;
< typedef signed short int16_t;
< typedef unsigned short uint16_t;
< typedef signed int int32_t;
< typedef unsigned int uint32_t;
< typedef signed long long int64_t;
< typedef unsigned long long uint64_t;
< typedef unsigned long uintptr_t;
< #  endif /* if (stdint.h isn't available) */
< #else /* __WIN32__ */
< #  if !defined(_STDINT_H_) && !defined(HAVE_STDINT_H) && !defined(_HAVE_STDINT_H)
< #    if defined(__GNUC__) || defined(__DMC__) || defined(__WATCOMC__)
< #define HAVE_STDINT_H	1
< #    elif defined(_MSC_VER)
< typedef signed __int8 int8_t;
< typedef unsigned __int8 uint8_t;
< typedef signed __int16 int16_t;
< typedef unsigned __int16 uint16_t;
< typedef signed __int32 int32_t;
< typedef unsigned __int32 uint32_t;
< typedef signed __int64 int64_t;
< typedef unsigned __int64 uint64_t;
< #      ifndef _UINTPTR_T_DEFINED
< #        ifdef  _WIN64
< typedef unsigned __int64 uintptr_t;
< #          else
< typedef unsigned int uintptr_t;
< #        endif
< #define _UINTPTR_T_DEFINED
< #      endif
< /* Older Visual C++ headers don't have the Win64-compatible typedefs... */
< #      if ((_MSC_VER <= 1200) && (!defined(DWORD_PTR)))
< #define DWORD_PTR DWORD
< #      endif
< #      if ((_MSC_VER <= 1200) && (!defined(LONG_PTR)))
< #define LONG_PTR LONG
< #      endif
< #    else /* !__GNUC__ && !_MSC_VER */
< typedef signed char int8_t;
< typedef unsigned char uint8_t;
< typedef signed short int16_t;
< typedef unsigned short uint16_t;
< typedef signed int int32_t;
< typedef unsigned int uint32_t;
< typedef signed long long int64_t;
< typedef unsigned long long uint64_t;
< #      ifndef _SIZE_T_DEFINED_
< #define _SIZE_T_DEFINED_
< typedef unsigned int size_t;
< #      endif
< typedef unsigned int uintptr_t;
< #    endif /* __GNUC__ || _MSC_VER */
< #  endif /* !_STDINT_H_ && !HAVE_STDINT_H */
< #endif /* __WIN32__ */
< 
< #endif /* _SDL_config_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_h
> #define _SDL_config_h
> 
> /**
>  *  \file SDL_config.h.in
>  *
>  *  This is a set of defines to configure the SDL features
>  */
> 
> /* General platform specific identifiers */
> #include "SDL_platform.h"
> 
> /* C language features */
> #cmakedefine const @HAVE_CONST@
> #cmakedefine inline @HAVE_INLINE@
> #cmakedefine volatile @HAVE_VOLATILE@
> 
> /* C datatypes */
> /* Define SIZEOF_VOIDP for 64/32 architectures */
> #ifdef __LP64__
> #define SIZEOF_VOIDP 8
> #else
> #define SIZEOF_VOIDP 4
> #endif
> 
> #cmakedefine HAVE_GCC_ATOMICS @HAVE_GCC_ATOMICS@
> #cmakedefine HAVE_GCC_SYNC_LOCK_TEST_AND_SET @HAVE_GCC_SYNC_LOCK_TEST_AND_SET@
> #cmakedefine HAVE_PTHREAD_SPINLOCK @HAVE_PTHREAD_SPINLOCK@
> 
> /* Comment this if you want to build without any C library requirements */
> #cmakedefine HAVE_LIBC 1
> #if HAVE_LIBC
> 
> /* Useful headers */
> #cmakedefine HAVE_ALLOCA_H 1
> #cmakedefine HAVE_SYS_TYPES_H 1
> #cmakedefine HAVE_STDIO_H 1
> #cmakedefine STDC_HEADERS 1
> #cmakedefine HAVE_STDLIB_H 1
> #cmakedefine HAVE_STDARG_H 1
> #cmakedefine HAVE_MALLOC_H 1
> #cmakedefine HAVE_MEMORY_H 1
> #cmakedefine HAVE_STRING_H 1
> #cmakedefine HAVE_STRINGS_H 1
> #cmakedefine HAVE_INTTYPES_H 1
> #cmakedefine HAVE_STDINT_H 1
> #cmakedefine HAVE_CTYPE_H 1
> #cmakedefine HAVE_MATH_H 1
> #cmakedefine HAVE_ICONV_H 1
> #cmakedefine HAVE_SIGNAL_H 1
> #cmakedefine HAVE_ALTIVEC_H 1
> #cmakedefine HAVE_PTHREAD_NP_H 1
> #cmakedefine HAVE_LIBUDEV_H 1
> #cmakedefine HAVE_DBUS_DBUS_H 1
> 
> /* C library functions */
> #cmakedefine HAVE_MALLOC 1
> #cmakedefine HAVE_CALLOC 1
> #cmakedefine HAVE_REALLOC 1
> #cmakedefine HAVE_FREE 1
> #cmakedefine HAVE_ALLOCA 1
> #ifndef __WIN32__ /* Don't use C runtime versions of these on Windows */
> #cmakedefine HAVE_GETENV 1
> #cmakedefine HAVE_SETENV 1
> #cmakedefine HAVE_PUTENV 1
> #cmakedefine HAVE_UNSETENV 1
> #endif
> #cmakedefine HAVE_QSORT 1
> #cmakedefine HAVE_ABS 1
> #cmakedefine HAVE_BCOPY 1
> #cmakedefine HAVE_MEMSET 1
> #cmakedefine HAVE_MEMCPY 1
> #cmakedefine HAVE_MEMMOVE 1
> #cmakedefine HAVE_MEMCMP 1
> #cmakedefine HAVE_STRLEN 1
> #cmakedefine HAVE_STRLCPY 1
> #cmakedefine HAVE_STRLCAT 1
> #cmakedefine HAVE_STRDUP 1
> #cmakedefine HAVE__STRREV 1
> #cmakedefine HAVE__STRUPR 1
> #cmakedefine HAVE__STRLWR 1
> #cmakedefine HAVE_INDEX 1
> #cmakedefine HAVE_RINDEX 1
> #cmakedefine HAVE_STRCHR 1
> #cmakedefine HAVE_STRRCHR 1
> #cmakedefine HAVE_STRSTR 1
> #cmakedefine HAVE_ITOA 1
> #cmakedefine HAVE__LTOA 1
> #cmakedefine HAVE__UITOA 1
> #cmakedefine HAVE__ULTOA 1
> #cmakedefine HAVE_STRTOL 1
> #cmakedefine HAVE_STRTOUL 1
> #cmakedefine HAVE__I64TOA 1
> #cmakedefine HAVE__UI64TOA 1
> #cmakedefine HAVE_STRTOLL 1
> #cmakedefine HAVE_STRTOULL 1
> #cmakedefine HAVE_STRTOD 1
> #cmakedefine HAVE_ATOI 1
> #cmakedefine HAVE_ATOF 1
> #cmakedefine HAVE_STRCMP 1
> #cmakedefine HAVE_STRNCMP 1
> #cmakedefine HAVE__STRICMP 1
> #cmakedefine HAVE_STRCASECMP 1
> #cmakedefine HAVE__STRNICMP 1
> #cmakedefine HAVE_STRNCASECMP 1
> #cmakedefine HAVE_SSCANF 1
> #cmakedefine HAVE_SNPRINTF 1
> #cmakedefine HAVE_VSNPRINTF 1
> #cmakedefine HAVE_M_PI 1
> #cmakedefine HAVE_ATAN 1
> #cmakedefine HAVE_ATAN2 1
> #cmakedefine HAVE_CEIL 1
> #cmakedefine HAVE_COPYSIGN 1
> #cmakedefine HAVE_COS 1
> #cmakedefine HAVE_COSF 1
> #cmakedefine HAVE_FABS 1
> #cmakedefine HAVE_FLOOR 1
> #cmakedefine HAVE_LOG 1
> #cmakedefine HAVE_POW 1
> #cmakedefine HAVE_SCALBN 1
> #cmakedefine HAVE_SIN 1
> #cmakedefine HAVE_SINF 1
> #cmakedefine HAVE_SQRT 1
> #cmakedefine HAVE_FSEEKO 1
> #cmakedefine HAVE_FSEEKO64 1
> #cmakedefine HAVE_SIGACTION 1
> #cmakedefine HAVE_SA_SIGACTION 1
> #cmakedefine HAVE_SETJMP 1
> #cmakedefine HAVE_NANOSLEEP 1
> #cmakedefine HAVE_SYSCONF 1
> #cmakedefine HAVE_SYSCTLBYNAME 1
> #cmakedefine HAVE_CLOCK_GETTIME 1
> #cmakedefine HAVE_GETPAGESIZE 1
> #cmakedefine HAVE_MPROTECT 1
> #cmakedefine HAVE_ICONV 1
> #cmakedefine HAVE_PTHREAD_SETNAME_NP 1
> #cmakedefine HAVE_PTHREAD_SET_NAME_NP 1
> #cmakedefine HAVE_SEM_TIMEDWAIT 1
> #elif __WIN32__
> #cmakedefine HAVE_STDARG_H 1
> #cmakedefine HAVE_STDDEF_H 1
> #else
> /* We may need some replacement for stdarg.h here */
> #include <stdarg.h>
> #endif /* HAVE_LIBC */
> 
> /* SDL internal assertion support */
> #cmakedefine SDL_DEFAULT_ASSERT_LEVEL @SDL_DEFAULT_ASSERT_LEVEL@
> 
> /* Allow disabling of core subsystems */
> #cmakedefine SDL_ATOMIC_DISABLED @SDL_ATOMIC_DISABLED@
> #cmakedefine SDL_AUDIO_DISABLED @SDL_AUDIO_DISABLED@
> #cmakedefine SDL_CPUINFO_DISABLED @SDL_CPUINFO_DISABLED@
> #cmakedefine SDL_EVENTS_DISABLED @SDL_EVENTS_DISABLED@
> #cmakedefine SDL_FILE_DISABLED @SDL_FILE_DISABLED@
> #cmakedefine SDL_JOYSTICK_DISABLED @SDL_JOYSTICK_DISABLED@
> #cmakedefine SDL_HAPTIC_DISABLED @SDL_HAPTIC_DISABLED@
> #cmakedefine SDL_LOADSO_DISABLED @SDL_LOADSO_DISABLED@
> #cmakedefine SDL_RENDER_DISABLED @SDL_RENDER_DISABLED@
> #cmakedefine SDL_THREADS_DISABLED @SDL_THREADS_DISABLED@
> #cmakedefine SDL_TIMERS_DISABLED @SDL_TIMERS_DISABLED@
> #cmakedefine SDL_VIDEO_DISABLED @SDL_VIDEO_DISABLED@
> #cmakedefine SDL_POWER_DISABLED @SDL_POWER_DISABLED@
> 
> /* Enable various audio drivers */
> #cmakedefine SDL_AUDIO_DRIVER_ALSA @SDL_AUDIO_DRIVER_ALSA@
> #cmakedefine SDL_AUDIO_DRIVER_ALSA_DYNAMIC @SDL_AUDIO_DRIVER_ALSA_DYNAMIC@
> #cmakedefine SDL_AUDIO_DRIVER_ARTS @SDL_AUDIO_DRIVER_ARTS@
> #cmakedefine SDL_AUDIO_DRIVER_ARTS_DYNAMIC @SDL_AUDIO_DRIVER_ARTS_DYNAMIC@
> #cmakedefine SDL_AUDIO_DRIVER_PULSEAUDIO @SDL_AUDIO_DRIVER_PULSEAUDIO@
> #cmakedefine SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC @SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC@
> #cmakedefine SDL_AUDIO_DRIVER_BEOSAUDIO @SDL_AUDIO_DRIVER_BEOSAUDIO@
> #cmakedefine SDL_AUDIO_DRIVER_BSD @SDL_AUDIO_DRIVER_BSD@
> #cmakedefine SDL_AUDIO_DRIVER_COREAUDIO @SDL_AUDIO_DRIVER_COREAUDIO@
> #cmakedefine SDL_AUDIO_DRIVER_DISK @SDL_AUDIO_DRIVER_DISK@
> #cmakedefine SDL_AUDIO_DRIVER_DUMMY @SDL_AUDIO_DRIVER_DUMMY@
> #cmakedefine SDL_AUDIO_DRIVER_XAUDIO2 @SDL_AUDIO_DRIVER_XAUDIO2@
> #cmakedefine SDL_AUDIO_DRIVER_DSOUND @SDL_AUDIO_DRIVER_DSOUND@
> #cmakedefine SDL_AUDIO_DRIVER_ESD @SDL_AUDIO_DRIVER_ESD@
> #cmakedefine SDL_AUDIO_DRIVER_ESD_DYNAMIC @SDL_AUDIO_DRIVER_ESD_DYNAMIC@
> #cmakedefine SDL_AUDIO_DRIVER_NAS @SDL_AUDIO_DRIVER_NAS@
> #cmakedefine SDL_AUDIO_DRIVER_NAS_DYNAMIC @SDL_AUDIO_DRIVER_NAS_DYNAMIC@
> #cmakedefine SDL_AUDIO_DRIVER_SNDIO @SDL_AUDIO_DRIVER_SNDIO@
> #cmakedefine SDL_AUDIO_DRIVER_SNDIO_DYNAMIC @SDL_AUDIO_DRIVER_SNDIO_DYNAMIC@
> #cmakedefine SDL_AUDIO_DRIVER_OSS @SDL_AUDIO_DRIVER_OSS@
> #cmakedefine SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H @SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H@
> #cmakedefine SDL_AUDIO_DRIVER_PAUDIO @SDL_AUDIO_DRIVER_PAUDIO@
> #cmakedefine SDL_AUDIO_DRIVER_QSA @SDL_AUDIO_DRIVER_QSA@
> #cmakedefine SDL_AUDIO_DRIVER_SUNAUDIO @SDL_AUDIO_DRIVER_SUNAUDIO@
> #cmakedefine SDL_AUDIO_DRIVER_WINMM @SDL_AUDIO_DRIVER_WINMM@
> #cmakedefine SDL_AUDIO_DRIVER_FUSIONSOUND @SDL_AUDIO_DRIVER_FUSIONSOUND@
> #cmakedefine SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC @SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC@
> 
> /* Enable various input drivers */
> #cmakedefine SDL_INPUT_LINUXEV @SDL_INPUT_LINUXEV@
> #cmakedefine SDL_INPUT_TSLIB @SDL_INPUT_TSLIB@
> #cmakedefine SDL_JOYSTICK_BEOS @SDL_JOYSTICK_BEOS@
> #cmakedefine SDL_JOYSTICK_DINPUT @SDL_JOYSTICK_DINPUT@
> #cmakedefine SDL_JOYSTICK_DUMMY @SDL_JOYSTICK_DUMMY@
> #cmakedefine SDL_JOYSTICK_IOKIT @SDL_JOYSTICK_IOKIT@
> #cmakedefine SDL_JOYSTICK_LINUX @SDL_JOYSTICK_LINUX@
> #cmakedefine SDL_JOYSTICK_WINMM @SDL_JOYSTICK_WINMM@
> #cmakedefine SDL_JOYSTICK_USBHID @SDL_JOYSTICK_USBHID@
> #cmakedefine SDL_JOYSTICK_USBHID_MACHINE_JOYSTICK_H @SDL_JOYSTICK_USBHID_MACHINE_JOYSTICK_H@
> #cmakedefine SDL_HAPTIC_DUMMY @SDL_HAPTIC_DUMMY@
> #cmakedefine SDL_HAPTIC_LINUX @SDL_HAPTIC_LINUX@
> #cmakedefine SDL_HAPTIC_IOKIT @SDL_HAPTIC_IOKIT@
> #cmakedefine SDL_HAPTIC_DINPUT @SDL_HAPTIC_DINPUT@
> 
> /* Enable various shared object loading systems */
> #cmakedefine SDL_LOADSO_BEOS @SDL_LOADSO_BEOS@
> #cmakedefine SDL_LOADSO_DLOPEN @SDL_LOADSO_DLOPEN@
> #cmakedefine SDL_LOADSO_DUMMY @SDL_LOADSO_DUMMY@
> #cmakedefine SDL_LOADSO_LDG @SDL_LOADSO_LDG@
> #cmakedefine SDL_LOADSO_WINDOWS @SDL_LOADSO_WINDOWS@
> 
> /* Enable various threading systems */
> #cmakedefine SDL_THREAD_BEOS @SDL_THREAD_BEOS@
> #cmakedefine SDL_THREAD_PTHREAD @SDL_THREAD_PTHREAD@
> #cmakedefine SDL_THREAD_PTHREAD_RECURSIVE_MUTEX @SDL_THREAD_PTHREAD_RECURSIVE_MUTEX@
> #cmakedefine SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP @SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP@
> #cmakedefine SDL_THREAD_WINDOWS @SDL_THREAD_WINDOWS@
> 
> /* Enable various timer systems */
> #cmakedefine SDL_TIMER_BEOS @SDL_TIMER_BEOS@
> #cmakedefine SDL_TIMER_DUMMY @SDL_TIMER_DUMMY@
> #cmakedefine SDL_TIMER_UNIX @SDL_TIMER_UNIX@
> #cmakedefine SDL_TIMER_WINDOWS @SDL_TIMER_WINDOWS@
> #cmakedefine SDL_TIMER_WINCE @SDL_TIMER_WINCE@
> 
> /* Enable various video drivers */
> #cmakedefine SDL_VIDEO_DRIVER_BWINDOW @SDL_VIDEO_DRIVER_BWINDOW@
> #cmakedefine SDL_VIDEO_DRIVER_COCOA @SDL_VIDEO_DRIVER_COCOA@
> #cmakedefine SDL_VIDEO_DRIVER_DIRECTFB @SDL_VIDEO_DRIVER_DIRECTFB@
> #cmakedefine SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC @SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC@
> #cmakedefine SDL_VIDEO_DRIVER_DUMMY @SDL_VIDEO_DRIVER_DUMMY@
> #cmakedefine SDL_VIDEO_DRIVER_WINDOWS @SDL_VIDEO_DRIVER_WINDOWS@
> #cmakedefine SDL_VIDEO_DRIVER_X11 @SDL_VIDEO_DRIVER_X11@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC @SDL_VIDEO_DRIVER_X11_DYNAMIC@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT @SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR @SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA @SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 @SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR @SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS @SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS@
> #cmakedefine SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE @SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XCURSOR @SDL_VIDEO_DRIVER_X11_XCURSOR@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XINERAMA @SDL_VIDEO_DRIVER_X11_XINERAMA@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XINPUT2 @SDL_VIDEO_DRIVER_X11_XINPUT2@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH @SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XRANDR @SDL_VIDEO_DRIVER_X11_XRANDR@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XSCRNSAVER @SDL_VIDEO_DRIVER_X11_XSCRNSAVER@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XSHAPE @SDL_VIDEO_DRIVER_X11_XSHAPE@
> #cmakedefine SDL_VIDEO_DRIVER_X11_XVIDMODE @SDL_VIDEO_DRIVER_X11_XVIDMODE@
> #cmakedefine SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS @SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS@
> #cmakedefine SDL_VIDEO_DRIVER_X11_CONST_PARAM_XDATA32 @SDL_VIDEO_DRIVER_X11_CONST_PARAM_XDATA32@
> #cmakedefine SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY @SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY@
> #cmakedefine SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM @SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM@
> 
> #cmakedefine SDL_VIDEO_RENDER_D3D @SDL_VIDEO_RENDER_D3D@
> #cmakedefine SDL_VIDEO_RENDER_OGL @SDL_VIDEO_RENDER_OGL@
> #cmakedefine SDL_VIDEO_RENDER_OGL_ES @SDL_VIDEO_RENDER_OGL_ES@
> #cmakedefine SDL_VIDEO_RENDER_OGL_ES2 @SDL_VIDEO_RENDER_OGL_ES2@
> #cmakedefine SDL_VIDEO_RENDER_DIRECTFB @SDL_VIDEO_RENDER_DIRECTFB@
> 
> /* Enable OpenGL support */
> #cmakedefine SDL_VIDEO_OPENGL @SDL_VIDEO_OPENGL@
> #cmakedefine SDL_VIDEO_OPENGL_ES @SDL_VIDEO_OPENGL_ES@
> #cmakedefine SDL_VIDEO_OPENGL_BGL @SDL_VIDEO_OPENGL_BGL@
> #cmakedefine SDL_VIDEO_OPENGL_CGL @SDL_VIDEO_OPENGL_CGL@
> #cmakedefine SDL_VIDEO_OPENGL_GLX @SDL_VIDEO_OPENGL_GLX@
> #cmakedefine SDL_VIDEO_OPENGL_WGL @SDL_VIDEO_OPENGL_WGL@
> #cmakedefine SDL_VIDEO_OPENGL_OSMESA @SDL_VIDEO_OPENGL_OSMESA@
> #cmakedefine SDL_VIDEO_OPENGL_OSMESA_DYNAMIC @SDL_VIDEO_OPENGL_OSMESA_DYNAMIC@
> 
> /* Enable system power support */
> #cmakedefine SDL_POWER_LINUX @SDL_POWER_LINUX@
> #cmakedefine SDL_POWER_WINDOWS @SDL_POWER_WINDOWS@
> #cmakedefine SDL_POWER_MACOSX @SDL_POWER_MACOSX@
> #cmakedefine SDL_POWER_BEOS @SDL_POWER_BEOS@
> #cmakedefine SDL_POWER_HARDWIRED @SDL_POWER_HARDWIRED@
> 
> /* Enable assembly routines */
> #cmakedefine SDL_ASSEMBLY_ROUTINES @SDL_ASSEMBLY_ROUTINES@
> #cmakedefine SDL_ALTIVEC_BLITTERS @SDL_ALTIVEC_BLITTERS@
> 
> 
> /* Platform specific definitions */
> #if !defined(__WIN32__)
> #  if !defined(_STDINT_H_) && !defined(_STDINT_H) && !defined(HAVE_STDINT_H) && !defined(_HAVE_STDINT_H)
> typedef unsigned int size_t;
> typedef signed char int8_t;
> typedef unsigned char uint8_t;
> typedef signed short int16_t;
> typedef unsigned short uint16_t;
> typedef signed int int32_t;
> typedef unsigned int uint32_t;
> typedef signed long long int64_t;
> typedef unsigned long long uint64_t;
> typedef unsigned long uintptr_t;
> #  endif /* if (stdint.h isn't available) */
> #else /* __WIN32__ */
> #  if !defined(_STDINT_H_) && !defined(HAVE_STDINT_H) && !defined(_HAVE_STDINT_H)
> #    if defined(__GNUC__) || defined(__DMC__) || defined(__WATCOMC__)
> #define HAVE_STDINT_H	1
> #    elif defined(_MSC_VER)
> typedef signed __int8 int8_t;
> typedef unsigned __int8 uint8_t;
> typedef signed __int16 int16_t;
> typedef unsigned __int16 uint16_t;
> typedef signed __int32 int32_t;
> typedef unsigned __int32 uint32_t;
> typedef signed __int64 int64_t;
> typedef unsigned __int64 uint64_t;
> #      ifndef _UINTPTR_T_DEFINED
> #        ifdef  _WIN64
> typedef unsigned __int64 uintptr_t;
> #          else
> typedef unsigned int uintptr_t;
> #        endif
> #define _UINTPTR_T_DEFINED
> #      endif
> /* Older Visual C++ headers don't have the Win64-compatible typedefs... */
> #      if ((_MSC_VER <= 1200) && (!defined(DWORD_PTR)))
> #define DWORD_PTR DWORD
> #      endif
> #      if ((_MSC_VER <= 1200) && (!defined(LONG_PTR)))
> #define LONG_PTR LONG
> #      endif
> #    else /* !__GNUC__ && !_MSC_VER */
> typedef signed char int8_t;
> typedef unsigned char uint8_t;
> typedef signed short int16_t;
> typedef unsigned short uint16_t;
> typedef signed int int32_t;
> typedef unsigned int uint32_t;
> typedef signed long long int64_t;
> typedef unsigned long long uint64_t;
> #      ifndef _SIZE_T_DEFINED_
> #define _SIZE_T_DEFINED_
> typedef unsigned int size_t;
> #      endif
> typedef unsigned int uintptr_t;
> #    endif /* __GNUC__ || _MSC_VER */
> #  endif /* !_STDINT_H_ && !HAVE_STDINT_H */
> #endif /* __WIN32__ */
> 
> #endif /* _SDL_config_h */
diff jni/SDL/include/SDL_config.h.in ../android-sdl/jni/SDL2/include/SDL_config.h.in
1,321c1,309
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_h
< #define _SDL_config_h
< 
< /**
<  *  \file SDL_config.h.in
<  *
<  *  This is a set of defines to configure the SDL features
<  */
< 
< /* General platform specific identifiers */
< #include "SDL_platform.h"
< 
< /* Make sure that this isn't included by Visual C++ */
< #ifdef _MSC_VER
< #error You should run hg revert SDL_config.h 
< #endif
< 
< /* C language features */
< #undef const
< #undef inline
< #undef volatile
< 
< /* C datatypes */
< #ifdef __LP64__
< #define SIZEOF_VOIDP 8
< #else
< #define SIZEOF_VOIDP 4
< #endif
< #undef HAVE_GCC_ATOMICS
< #undef HAVE_GCC_SYNC_LOCK_TEST_AND_SET
< #undef HAVE_PTHREAD_SPINLOCK
< 
< /* Comment this if you want to build without any C library requirements */
< #undef HAVE_LIBC
< #if HAVE_LIBC
< 
< /* Useful headers */
< #undef HAVE_ALLOCA_H
< #undef HAVE_SYS_TYPES_H
< #undef HAVE_STDIO_H
< #undef STDC_HEADERS
< #undef HAVE_STDLIB_H
< #undef HAVE_STDARG_H
< #undef HAVE_MALLOC_H
< #undef HAVE_MEMORY_H
< #undef HAVE_STRING_H
< #undef HAVE_STRINGS_H
< #undef HAVE_INTTYPES_H
< #undef HAVE_STDINT_H
< #undef HAVE_CTYPE_H
< #undef HAVE_MATH_H
< #undef HAVE_ICONV_H
< #undef HAVE_SIGNAL_H
< #undef HAVE_ALTIVEC_H
< #undef HAVE_PTHREAD_NP_H
< #undef HAVE_LIBUDEV_H
< #undef HAVE_DBUS_DBUS_H
< 
< /* C library functions */
< #undef HAVE_MALLOC
< #undef HAVE_CALLOC
< #undef HAVE_REALLOC
< #undef HAVE_FREE
< #undef HAVE_ALLOCA
< #ifndef __WIN32__ /* Don't use C runtime versions of these on Windows */
< #undef HAVE_GETENV
< #undef HAVE_SETENV
< #undef HAVE_PUTENV
< #undef HAVE_UNSETENV
< #endif
< #undef HAVE_QSORT
< #undef HAVE_ABS
< #undef HAVE_BCOPY
< #undef HAVE_MEMSET
< #undef HAVE_MEMCPY
< #undef HAVE_MEMMOVE
< #undef HAVE_MEMCMP
< #undef HAVE_STRLEN
< #undef HAVE_STRLCPY
< #undef HAVE_STRLCAT
< #undef HAVE_STRDUP
< #undef HAVE__STRREV
< #undef HAVE__STRUPR
< #undef HAVE__STRLWR
< #undef HAVE_INDEX
< #undef HAVE_RINDEX
< #undef HAVE_STRCHR
< #undef HAVE_STRRCHR
< #undef HAVE_STRSTR
< #undef HAVE_ITOA
< #undef HAVE__LTOA
< #undef HAVE__UITOA
< #undef HAVE__ULTOA
< #undef HAVE_STRTOL
< #undef HAVE_STRTOUL
< #undef HAVE__I64TOA
< #undef HAVE__UI64TOA
< #undef HAVE_STRTOLL
< #undef HAVE_STRTOULL
< #undef HAVE_STRTOD
< #undef HAVE_ATOI
< #undef HAVE_ATOF
< #undef HAVE_STRCMP
< #undef HAVE_STRNCMP
< #undef HAVE__STRICMP
< #undef HAVE_STRCASECMP
< #undef HAVE__STRNICMP
< #undef HAVE_STRNCASECMP
< #undef HAVE_SSCANF
< #undef HAVE_SNPRINTF
< #undef HAVE_VSNPRINTF
< #undef HAVE_M_PI
< #undef HAVE_ATAN
< #undef HAVE_ATAN2
< #undef HAVE_CEIL
< #undef HAVE_COPYSIGN
< #undef HAVE_COS
< #undef HAVE_COSF
< #undef HAVE_FABS
< #undef HAVE_FLOOR
< #undef HAVE_LOG
< #undef HAVE_POW
< #undef HAVE_SCALBN
< #undef HAVE_SIN
< #undef HAVE_SINF
< #undef HAVE_SQRT
< #undef HAVE_FSEEKO
< #undef HAVE_FSEEKO64
< #undef HAVE_SIGACTION
< #undef HAVE_SA_SIGACTION
< #undef HAVE_SETJMP
< #undef HAVE_NANOSLEEP
< #undef HAVE_SYSCONF
< #undef HAVE_SYSCTLBYNAME
< #undef HAVE_CLOCK_GETTIME
< #undef HAVE_GETPAGESIZE
< #undef HAVE_MPROTECT
< #undef HAVE_ICONV
< #undef HAVE_PTHREAD_SETNAME_NP
< #undef HAVE_PTHREAD_SET_NAME_NP
< #undef HAVE_SEM_TIMEDWAIT
< 
< #else
< #define HAVE_STDARG_H   1
< #define HAVE_STDDEF_H   1
< #define HAVE_STDINT_H   1
< #endif /* HAVE_LIBC */
< 
< /* SDL internal assertion support */
< #undef SDL_DEFAULT_ASSERT_LEVEL
< 
< /* Allow disabling of core subsystems */
< #undef SDL_ATOMIC_DISABLED
< #undef SDL_AUDIO_DISABLED
< #undef SDL_CPUINFO_DISABLED
< #undef SDL_EVENTS_DISABLED
< #undef SDL_FILE_DISABLED
< #undef SDL_JOYSTICK_DISABLED
< #undef SDL_HAPTIC_DISABLED
< #undef SDL_LOADSO_DISABLED
< #undef SDL_RENDER_DISABLED
< #undef SDL_THREADS_DISABLED
< #undef SDL_TIMERS_DISABLED
< #undef SDL_VIDEO_DISABLED
< #undef SDL_POWER_DISABLED
< #undef SDL_FILESYSTEM_DISABLED
< 
< /* Enable various audio drivers */
< #undef SDL_AUDIO_DRIVER_ALSA
< #undef SDL_AUDIO_DRIVER_ALSA_DYNAMIC
< #undef SDL_AUDIO_DRIVER_ARTS
< #undef SDL_AUDIO_DRIVER_ARTS_DYNAMIC
< #undef SDL_AUDIO_DRIVER_PULSEAUDIO
< #undef SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC
< #undef SDL_AUDIO_DRIVER_BEOSAUDIO
< #undef SDL_AUDIO_DRIVER_BSD
< #undef SDL_AUDIO_DRIVER_COREAUDIO
< #undef SDL_AUDIO_DRIVER_DISK
< #undef SDL_AUDIO_DRIVER_DUMMY
< #undef SDL_AUDIO_DRIVER_XAUDIO2
< #undef SDL_AUDIO_DRIVER_DSOUND
< #undef SDL_AUDIO_DRIVER_ESD
< #undef SDL_AUDIO_DRIVER_ESD_DYNAMIC
< #undef SDL_AUDIO_DRIVER_NAS
< #undef SDL_AUDIO_DRIVER_NAS_DYNAMIC
< #undef SDL_AUDIO_DRIVER_SNDIO
< #undef SDL_AUDIO_DRIVER_SNDIO_DYNAMIC
< #undef SDL_AUDIO_DRIVER_OSS
< #undef SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H
< #undef SDL_AUDIO_DRIVER_PAUDIO
< #undef SDL_AUDIO_DRIVER_QSA
< #undef SDL_AUDIO_DRIVER_SUNAUDIO
< #undef SDL_AUDIO_DRIVER_WINMM
< #undef SDL_AUDIO_DRIVER_FUSIONSOUND
< #undef SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC
< 
< /* Enable various input drivers */
< #undef SDL_INPUT_LINUXEV
< #undef SDL_INPUT_LINUXKD
< #undef SDL_INPUT_TSLIB
< #undef SDL_JOYSTICK_BEOS
< #undef SDL_JOYSTICK_DINPUT
< #undef SDL_JOYSTICK_DUMMY
< #undef SDL_JOYSTICK_IOKIT
< #undef SDL_JOYSTICK_LINUX
< #undef SDL_JOYSTICK_WINMM
< #undef SDL_JOYSTICK_USBHID
< #undef SDL_JOYSTICK_USBHID_MACHINE_JOYSTICK_H
< #undef SDL_HAPTIC_DUMMY
< #undef SDL_HAPTIC_LINUX
< #undef SDL_HAPTIC_IOKIT
< #undef SDL_HAPTIC_DINPUT
< 
< /* Enable various shared object loading systems */
< #undef SDL_LOADSO_BEOS
< #undef SDL_LOADSO_DLOPEN
< #undef SDL_LOADSO_DUMMY
< #undef SDL_LOADSO_LDG
< #undef SDL_LOADSO_WINDOWS
< 
< /* Enable various threading systems */
< #undef SDL_THREAD_BEOS
< #undef SDL_THREAD_PTHREAD
< #undef SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
< #undef SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP
< #undef SDL_THREAD_WINDOWS
< 
< /* Enable various timer systems */
< #undef SDL_TIMER_BEOS
< #undef SDL_TIMER_DUMMY
< #undef SDL_TIMER_UNIX
< #undef SDL_TIMER_WINDOWS
< 
< /* Enable various video drivers */
< #undef SDL_VIDEO_DRIVER_BWINDOW
< #undef SDL_VIDEO_DRIVER_COCOA
< #undef SDL_VIDEO_DRIVER_DIRECTFB
< #undef SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC
< #undef SDL_VIDEO_DRIVER_DUMMY
< #undef SDL_VIDEO_DRIVER_WINDOWS
< #undef SDL_VIDEO_DRIVER_X11
< #undef SDL_VIDEO_DRIVER_RPI
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS
< #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE
< #undef SDL_VIDEO_DRIVER_X11_XCURSOR
< #undef SDL_VIDEO_DRIVER_X11_XINERAMA
< #undef SDL_VIDEO_DRIVER_X11_XINPUT2
< #undef SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH
< #undef SDL_VIDEO_DRIVER_X11_XRANDR
< #undef SDL_VIDEO_DRIVER_X11_XSCRNSAVER
< #undef SDL_VIDEO_DRIVER_X11_XSHAPE
< #undef SDL_VIDEO_DRIVER_X11_XVIDMODE
< #undef SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS
< #undef SDL_VIDEO_DRIVER_X11_CONST_PARAM_XDATA32
< #undef SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY
< #undef SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM
< 
< #undef SDL_VIDEO_RENDER_D3D
< #undef SDL_VIDEO_RENDER_OGL
< #undef SDL_VIDEO_RENDER_OGL_ES
< #undef SDL_VIDEO_RENDER_OGL_ES2
< #undef SDL_VIDEO_RENDER_DIRECTFB
< 
< /* Enable OpenGL support */
< #undef SDL_VIDEO_OPENGL
< #undef SDL_VIDEO_OPENGL_ES
< #undef SDL_VIDEO_OPENGL_ES2
< #undef SDL_VIDEO_OPENGL_BGL
< #undef SDL_VIDEO_OPENGL_CGL
< #undef SDL_VIDEO_OPENGL_EGL
< #undef SDL_VIDEO_OPENGL_GLX
< #undef SDL_VIDEO_OPENGL_WGL
< #undef SDL_VIDEO_OPENGL_OSMESA
< #undef SDL_VIDEO_OPENGL_OSMESA_DYNAMIC
< 
< /* Enable system power support */
< #undef SDL_POWER_LINUX
< #undef SDL_POWER_WINDOWS
< #undef SDL_POWER_MACOSX
< #undef SDL_POWER_BEOS
< #undef SDL_POWER_HARDWIRED
< 
< /* Enable system filesystem support */
< #undef SDL_FILESYSTEM_BEOS
< #undef SDL_FILESYSTEM_COCOA
< #undef SDL_FILESYSTEM_DUMMY
< #undef SDL_FILESYSTEM_UNIX
< #undef SDL_FILESYSTEM_WINDOWS
< 
< /* Enable assembly routines */
< #undef SDL_ASSEMBLY_ROUTINES
< #undef SDL_ALTIVEC_BLITTERS
< 
< #endif /* _SDL_config_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_h
> #define _SDL_config_h
> 
> /**
>  *  \file SDL_config.h.in
>  *
>  *  This is a set of defines to configure the SDL features
>  */
> 
> /* General platform specific identifiers */
> #include "SDL_platform.h"
> 
> /* Make sure that this isn't included by Visual C++ */
> #ifdef _MSC_VER
> #error You should run hg revert SDL_config.h 
> #endif
> 
> /* C language features */
> #undef const
> #undef inline
> #undef volatile
> 
> /* C datatypes */
> #ifdef __LP64__
> #define SIZEOF_VOIDP 8
> #else
> #define SIZEOF_VOIDP 4
> #endif
> #undef HAVE_GCC_ATOMICS
> #undef HAVE_GCC_SYNC_LOCK_TEST_AND_SET
> #undef HAVE_PTHREAD_SPINLOCK
> 
> /* Comment this if you want to build without any C library requirements */
> #undef HAVE_LIBC
> #if HAVE_LIBC
> 
> /* Useful headers */
> #undef HAVE_ALLOCA_H
> #undef HAVE_SYS_TYPES_H
> #undef HAVE_STDIO_H
> #undef STDC_HEADERS
> #undef HAVE_STDLIB_H
> #undef HAVE_STDARG_H
> #undef HAVE_MALLOC_H
> #undef HAVE_MEMORY_H
> #undef HAVE_STRING_H
> #undef HAVE_STRINGS_H
> #undef HAVE_INTTYPES_H
> #undef HAVE_STDINT_H
> #undef HAVE_CTYPE_H
> #undef HAVE_MATH_H
> #undef HAVE_ICONV_H
> #undef HAVE_SIGNAL_H
> #undef HAVE_ALTIVEC_H
> #undef HAVE_PTHREAD_NP_H
> #undef HAVE_LIBUDEV_H
> #undef HAVE_DBUS_DBUS_H
> 
> /* C library functions */
> #undef HAVE_MALLOC
> #undef HAVE_CALLOC
> #undef HAVE_REALLOC
> #undef HAVE_FREE
> #undef HAVE_ALLOCA
> #ifndef __WIN32__ /* Don't use C runtime versions of these on Windows */
> #undef HAVE_GETENV
> #undef HAVE_SETENV
> #undef HAVE_PUTENV
> #undef HAVE_UNSETENV
> #endif
> #undef HAVE_QSORT
> #undef HAVE_ABS
> #undef HAVE_BCOPY
> #undef HAVE_MEMSET
> #undef HAVE_MEMCPY
> #undef HAVE_MEMMOVE
> #undef HAVE_MEMCMP
> #undef HAVE_STRLEN
> #undef HAVE_STRLCPY
> #undef HAVE_STRLCAT
> #undef HAVE_STRDUP
> #undef HAVE__STRREV
> #undef HAVE__STRUPR
> #undef HAVE__STRLWR
> #undef HAVE_INDEX
> #undef HAVE_RINDEX
> #undef HAVE_STRCHR
> #undef HAVE_STRRCHR
> #undef HAVE_STRSTR
> #undef HAVE_ITOA
> #undef HAVE__LTOA
> #undef HAVE__UITOA
> #undef HAVE__ULTOA
> #undef HAVE_STRTOL
> #undef HAVE_STRTOUL
> #undef HAVE__I64TOA
> #undef HAVE__UI64TOA
> #undef HAVE_STRTOLL
> #undef HAVE_STRTOULL
> #undef HAVE_STRTOD
> #undef HAVE_ATOI
> #undef HAVE_ATOF
> #undef HAVE_STRCMP
> #undef HAVE_STRNCMP
> #undef HAVE__STRICMP
> #undef HAVE_STRCASECMP
> #undef HAVE__STRNICMP
> #undef HAVE_STRNCASECMP
> #undef HAVE_SSCANF
> #undef HAVE_SNPRINTF
> #undef HAVE_VSNPRINTF
> #undef HAVE_M_PI
> #undef HAVE_ATAN
> #undef HAVE_ATAN2
> #undef HAVE_CEIL
> #undef HAVE_COPYSIGN
> #undef HAVE_COS
> #undef HAVE_COSF
> #undef HAVE_FABS
> #undef HAVE_FLOOR
> #undef HAVE_LOG
> #undef HAVE_POW
> #undef HAVE_SCALBN
> #undef HAVE_SIN
> #undef HAVE_SINF
> #undef HAVE_SQRT
> #undef HAVE_FSEEKO
> #undef HAVE_FSEEKO64
> #undef HAVE_SIGACTION
> #undef HAVE_SA_SIGACTION
> #undef HAVE_SETJMP
> #undef HAVE_NANOSLEEP
> #undef HAVE_SYSCONF
> #undef HAVE_SYSCTLBYNAME
> #undef HAVE_CLOCK_GETTIME
> #undef HAVE_GETPAGESIZE
> #undef HAVE_MPROTECT
> #undef HAVE_ICONV
> #undef HAVE_PTHREAD_SETNAME_NP
> #undef HAVE_PTHREAD_SET_NAME_NP
> #undef HAVE_SEM_TIMEDWAIT
> 
> #else
> #define HAVE_STDARG_H   1
> #define HAVE_STDDEF_H   1
> #define HAVE_STDINT_H   1
> #endif /* HAVE_LIBC */
> 
> /* SDL internal assertion support */
> #undef SDL_DEFAULT_ASSERT_LEVEL
> 
> /* Allow disabling of core subsystems */
> #undef SDL_ATOMIC_DISABLED
> #undef SDL_AUDIO_DISABLED
> #undef SDL_CPUINFO_DISABLED
> #undef SDL_EVENTS_DISABLED
> #undef SDL_FILE_DISABLED
> #undef SDL_JOYSTICK_DISABLED
> #undef SDL_HAPTIC_DISABLED
> #undef SDL_LOADSO_DISABLED
> #undef SDL_RENDER_DISABLED
> #undef SDL_THREADS_DISABLED
> #undef SDL_TIMERS_DISABLED
> #undef SDL_VIDEO_DISABLED
> #undef SDL_POWER_DISABLED
> 
> /* Enable various audio drivers */
> #undef SDL_AUDIO_DRIVER_ALSA
> #undef SDL_AUDIO_DRIVER_ALSA_DYNAMIC
> #undef SDL_AUDIO_DRIVER_ARTS
> #undef SDL_AUDIO_DRIVER_ARTS_DYNAMIC
> #undef SDL_AUDIO_DRIVER_PULSEAUDIO
> #undef SDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC
> #undef SDL_AUDIO_DRIVER_BEOSAUDIO
> #undef SDL_AUDIO_DRIVER_BSD
> #undef SDL_AUDIO_DRIVER_COREAUDIO
> #undef SDL_AUDIO_DRIVER_DISK
> #undef SDL_AUDIO_DRIVER_DUMMY
> #undef SDL_AUDIO_DRIVER_XAUDIO2
> #undef SDL_AUDIO_DRIVER_DSOUND
> #undef SDL_AUDIO_DRIVER_ESD
> #undef SDL_AUDIO_DRIVER_ESD_DYNAMIC
> #undef SDL_AUDIO_DRIVER_NAS
> #undef SDL_AUDIO_DRIVER_NAS_DYNAMIC
> #undef SDL_AUDIO_DRIVER_SNDIO
> #undef SDL_AUDIO_DRIVER_SNDIO_DYNAMIC
> #undef SDL_AUDIO_DRIVER_OSS
> #undef SDL_AUDIO_DRIVER_OSS_SOUNDCARD_H
> #undef SDL_AUDIO_DRIVER_PAUDIO
> #undef SDL_AUDIO_DRIVER_QSA
> #undef SDL_AUDIO_DRIVER_SUNAUDIO
> #undef SDL_AUDIO_DRIVER_WINMM
> #undef SDL_AUDIO_DRIVER_FUSIONSOUND
> #undef SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC
> 
> /* Enable various input drivers */
> #undef SDL_INPUT_LINUXEV
> #undef SDL_INPUT_TSLIB
> #undef SDL_JOYSTICK_BEOS
> #undef SDL_JOYSTICK_DINPUT
> #undef SDL_JOYSTICK_DUMMY
> #undef SDL_JOYSTICK_IOKIT
> #undef SDL_JOYSTICK_LINUX
> #undef SDL_JOYSTICK_WINMM
> #undef SDL_JOYSTICK_USBHID
> #undef SDL_JOYSTICK_USBHID_MACHINE_JOYSTICK_H
> #undef SDL_HAPTIC_DUMMY
> #undef SDL_HAPTIC_LINUX
> #undef SDL_HAPTIC_IOKIT
> #undef SDL_HAPTIC_DINPUT
> 
> /* Enable various shared object loading systems */
> #undef SDL_LOADSO_BEOS
> #undef SDL_LOADSO_DLOPEN
> #undef SDL_LOADSO_DUMMY
> #undef SDL_LOADSO_LDG
> #undef SDL_LOADSO_WINDOWS
> 
> /* Enable various threading systems */
> #undef SDL_THREAD_BEOS
> #undef SDL_THREAD_PTHREAD
> #undef SDL_THREAD_PTHREAD_RECURSIVE_MUTEX
> #undef SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP
> #undef SDL_THREAD_WINDOWS
> 
> /* Enable various timer systems */
> #undef SDL_TIMER_BEOS
> #undef SDL_TIMER_DUMMY
> #undef SDL_TIMER_UNIX
> #undef SDL_TIMER_WINDOWS
> 
> /* Enable various video drivers */
> #undef SDL_VIDEO_DRIVER_BWINDOW
> #undef SDL_VIDEO_DRIVER_COCOA
> #undef SDL_VIDEO_DRIVER_DIRECTFB
> #undef SDL_VIDEO_DRIVER_DIRECTFB_DYNAMIC
> #undef SDL_VIDEO_DRIVER_DUMMY
> #undef SDL_VIDEO_DRIVER_WINDOWS
> #undef SDL_VIDEO_DRIVER_X11
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XCURSOR
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS
> #undef SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE
> #undef SDL_VIDEO_DRIVER_X11_XCURSOR
> #undef SDL_VIDEO_DRIVER_X11_XINERAMA
> #undef SDL_VIDEO_DRIVER_X11_XINPUT2
> #undef SDL_VIDEO_DRIVER_X11_XINPUT2_SUPPORTS_MULTITOUCH
> #undef SDL_VIDEO_DRIVER_X11_XRANDR
> #undef SDL_VIDEO_DRIVER_X11_XSCRNSAVER
> #undef SDL_VIDEO_DRIVER_X11_XSHAPE
> #undef SDL_VIDEO_DRIVER_X11_XVIDMODE
> #undef SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS
> #undef SDL_VIDEO_DRIVER_X11_CONST_PARAM_XDATA32
> #undef SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY
> #undef SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM
> 
> #undef SDL_VIDEO_RENDER_D3D
> #undef SDL_VIDEO_RENDER_OGL
> #undef SDL_VIDEO_RENDER_OGL_ES
> #undef SDL_VIDEO_RENDER_OGL_ES2
> #undef SDL_VIDEO_RENDER_DIRECTFB
> 
> /* Enable OpenGL support */
> #undef SDL_VIDEO_OPENGL
> #undef SDL_VIDEO_OPENGL_ES
> #undef SDL_VIDEO_OPENGL_BGL
> #undef SDL_VIDEO_OPENGL_CGL
> #undef SDL_VIDEO_OPENGL_GLX
> #undef SDL_VIDEO_OPENGL_WGL
> #undef SDL_VIDEO_OPENGL_OSMESA
> #undef SDL_VIDEO_OPENGL_OSMESA_DYNAMIC
> 
> /* Enable system power support */
> #undef SDL_POWER_LINUX
> #undef SDL_POWER_WINDOWS
> #undef SDL_POWER_MACOSX
> #undef SDL_POWER_BEOS
> #undef SDL_POWER_HARDWIRED
> 
> /* Enable assembly routines */
> #undef SDL_ASSEMBLY_ROUTINES
> #undef SDL_ALTIVEC_BLITTERS
> 
> #endif /* _SDL_config_h */
diff jni/SDL/include/SDL_config_android.h ../android-sdl/jni/SDL2/include/SDL_config_android.h
1,142c1,138
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_android_h
< #define _SDL_config_android_h
< 
< #include "SDL_platform.h"
< 
< /**
<  *  \file SDL_config_android.h
<  *
<  *  This is a configuration that can be used to build SDL for Android
<  */
< 
< #include <stdarg.h>
< 
< #define HAVE_GCC_ATOMICS    1
< 
< #define HAVE_ALLOCA_H       1
< #define HAVE_SYS_TYPES_H    1
< #define HAVE_STDIO_H    1
< #define STDC_HEADERS    1
< #define HAVE_STRING_H   1
< #define HAVE_INTTYPES_H 1
< #define HAVE_STDINT_H   1
< #define HAVE_CTYPE_H    1
< #define HAVE_MATH_H 1
< #define HAVE_SIGNAL_H   1
< 
< /* C library functions */
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC    1
< #define HAVE_FREE   1
< #define HAVE_ALLOCA 1
< #define HAVE_GETENV 1
< #define HAVE_SETENV 1
< #define HAVE_PUTENV 1
< #define HAVE_SETENV 1
< #define HAVE_UNSETENV   1
< #define HAVE_QSORT  1
< #define HAVE_ABS    1
< #define HAVE_BCOPY  1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE    1
< #define HAVE_MEMCMP 1
< #define HAVE_STRLEN 1
< #define HAVE_STRLCPY    1
< #define HAVE_STRLCAT    1
< #define HAVE_STRDUP 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR    1
< #define HAVE_STRSTR 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL    1
< #define HAVE_STRTOLL    1
< #define HAVE_STRTOULL   1
< #define HAVE_STRTOD 1
< #define HAVE_ATOI   1
< #define HAVE_ATOF   1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP    1
< #define HAVE_STRCASECMP 1
< #define HAVE_STRNCASECMP 1
< #define HAVE_SSCANF 1
< #define HAVE_SNPRINTF   1
< #define HAVE_VSNPRINTF  1
< #define HAVE_M_PI   1
< #define HAVE_ATAN   1
< #define HAVE_ATAN2  1
< #define HAVE_CEIL   1
< #define HAVE_COPYSIGN   1
< #define HAVE_COS    1
< #define HAVE_COSF   1
< #define HAVE_FABS   1
< #define HAVE_FLOOR  1
< #define HAVE_LOG    1
< #define HAVE_POW    1
< #define HAVE_SCALBN 1
< #define HAVE_SIN    1
< #define HAVE_SINF   1
< #define HAVE_SQRT   1
< #define HAVE_SIGACTION  1
< #define HAVE_SETJMP 1
< #define HAVE_NANOSLEEP  1
< #define HAVE_SYSCONF    1
< 
< #define SIZEOF_VOIDP 4
< 
< /* Enable various audio drivers */
< #define SDL_AUDIO_DRIVER_ANDROID    1
< #define SDL_AUDIO_DRIVER_DUMMY  1
< 
< /* Enable various input drivers */
< #define SDL_JOYSTICK_ANDROID    1
< #define SDL_HAPTIC_DUMMY    1
< 
< /* Enable various shared object loading systems */
< #define SDL_LOADSO_DLOPEN   1
< 
< /* Enable various threading systems */
< #define SDL_THREAD_PTHREAD  1
< #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX  1
< 
< /* Enable various timer systems */
< #define SDL_TIMER_UNIX  1
< 
< /* Enable various video drivers */
< #define SDL_VIDEO_DRIVER_ANDROID 1
< 
< /* Enable OpenGL ES */
< #define SDL_VIDEO_OPENGL_ES 1
< #define SDL_VIDEO_OPENGL_EGL 1
< #define SDL_VIDEO_RENDER_OGL_ES 1
< #define SDL_VIDEO_RENDER_OGL_ES2    1
< 
< /* Enable system power support */
< #define SDL_POWER_ANDROID 1
< 
< /* !!! FIXME: what does Android do for filesystem stuff? */
< #define SDL_FILESYSTEM_DUMMY   1
< 
< #endif /* _SDL_config_android_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_android_h
> #define _SDL_config_android_h
> 
> #include "SDL_platform.h"
> 
> /**
>  *  \file SDL_config_android.h
>  *
>  *  This is a configuration that can be used to build SDL for Android
>  */
> 
> #include <stdarg.h>
> 
> #define HAVE_GCC_ATOMICS    1
> 
> #define HAVE_ALLOCA_H       1
> #define HAVE_SYS_TYPES_H    1
> #define HAVE_STDIO_H    1
> #define STDC_HEADERS    1
> #define HAVE_STRING_H   1
> #define HAVE_INTTYPES_H 1
> #define HAVE_STDINT_H   1
> #define HAVE_CTYPE_H    1
> #define HAVE_MATH_H 1
> #define HAVE_SIGNAL_H   1
> 
> /* C library functions */
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC    1
> #define HAVE_FREE   1
> #define HAVE_ALLOCA 1
> #define HAVE_GETENV 1
> #define HAVE_SETENV 1
> #define HAVE_PUTENV 1
> #define HAVE_SETENV 1
> #define HAVE_UNSETENV   1
> #define HAVE_QSORT  1
> #define HAVE_ABS    1
> #define HAVE_BCOPY  1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE    1
> #define HAVE_MEMCMP 1
> #define HAVE_STRLEN 1
> #define HAVE_STRLCPY    1
> #define HAVE_STRLCAT    1
> #define HAVE_STRDUP 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR    1
> #define HAVE_STRSTR 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL    1
> #define HAVE_STRTOLL    1
> #define HAVE_STRTOULL   1
> #define HAVE_STRTOD 1
> #define HAVE_ATOI   1
> #define HAVE_ATOF   1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP    1
> #define HAVE_STRCASECMP 1
> #define HAVE_STRNCASECMP 1
> #define HAVE_SSCANF 1
> #define HAVE_SNPRINTF   1
> #define HAVE_VSNPRINTF  1
> #define HAVE_M_PI   1
> #define HAVE_ATAN   1
> #define HAVE_ATAN2  1
> #define HAVE_CEIL   1
> #define HAVE_COPYSIGN   1
> #define HAVE_COS    1
> #define HAVE_COSF   1
> #define HAVE_FABS   1
> #define HAVE_FLOOR  1
> #define HAVE_LOG    1
> #define HAVE_POW    1
> #define HAVE_SCALBN 1
> #define HAVE_SIN    1
> #define HAVE_SINF   1
> #define HAVE_SQRT   1
> #define HAVE_SIGACTION  1
> #define HAVE_SETJMP 1
> #define HAVE_NANOSLEEP  1
> #define HAVE_SYSCONF    1
> 
> #define SIZEOF_VOIDP 4
> 
> /* Enable various audio drivers */
> #define SDL_AUDIO_DRIVER_ANDROID    1
> #define SDL_AUDIO_DRIVER_DUMMY  1
> 
> /* Enable various input drivers */
> #define SDL_JOYSTICK_ANDROID    1
> #define SDL_HAPTIC_DUMMY    1
> 
> /* Enable various shared object loading systems */
> #define SDL_LOADSO_DLOPEN   1
> 
> /* Enable various threading systems */
> #define SDL_THREAD_PTHREAD  1
> #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX  1
> 
> /* Enable various timer systems */
> #define SDL_TIMER_UNIX  1
> 
> /* Enable various video drivers */
> #define SDL_VIDEO_DRIVER_ANDROID 1
> 
> /* Enable OpenGL ES */
> #define SDL_VIDEO_OPENGL_ES 1
> #define SDL_VIDEO_RENDER_OGL_ES 1
> #define SDL_VIDEO_RENDER_OGL_ES2    1
> 
> /* Enable system power support */
> #define SDL_POWER_ANDROID 1
> 
> #endif /* _SDL_config_android_h */
diff jni/SDL/include/SDL_config_iphoneos.h ../android-sdl/jni/SDL2/include/SDL_config_iphoneos.h
1,154c1,151
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_iphoneos_h
< #define _SDL_config_iphoneos_h
< 
< #include "SDL_platform.h"
< 
< #ifdef __LP64__
< #define SIZEOF_VOIDP 8
< #else
< #define SIZEOF_VOIDP 4
< #endif
< 
< #define HAVE_GCC_ATOMICS    1
< 
< #define HAVE_ALLOCA_H       1
< #define HAVE_SYS_TYPES_H    1
< #define HAVE_STDIO_H    1
< #define STDC_HEADERS    1
< #define HAVE_STRING_H   1
< #define HAVE_INTTYPES_H 1
< #define HAVE_STDINT_H   1
< #define HAVE_CTYPE_H    1
< #define HAVE_MATH_H 1
< #define HAVE_SIGNAL_H   1
< 
< /* C library functions */
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC    1
< #define HAVE_FREE   1
< #define HAVE_ALLOCA 1
< #define HAVE_GETENV 1
< #define HAVE_SETENV 1
< #define HAVE_PUTENV 1
< #define HAVE_SETENV 1
< #define HAVE_UNSETENV   1
< #define HAVE_QSORT  1
< #define HAVE_ABS    1
< #define HAVE_BCOPY  1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE    1
< #define HAVE_MEMCMP 1
< #define HAVE_STRLEN 1
< #define HAVE_STRLCPY    1
< #define HAVE_STRLCAT    1
< #define HAVE_STRDUP 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR    1
< #define HAVE_STRSTR 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL    1
< #define HAVE_STRTOLL    1
< #define HAVE_STRTOULL   1
< #define HAVE_STRTOD 1
< #define HAVE_ATOI   1
< #define HAVE_ATOF   1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP    1
< #define HAVE_STRCASECMP 1
< #define HAVE_STRNCASECMP 1
< #define HAVE_SSCANF 1
< #define HAVE_SNPRINTF   1
< #define HAVE_VSNPRINTF  1
< #define HAVE_M_PI   1
< #define HAVE_ATAN   1
< #define HAVE_ATAN2  1
< #define HAVE_CEIL   1
< #define HAVE_COPYSIGN   1
< #define HAVE_COS    1
< #define HAVE_COSF   1
< #define HAVE_FABS   1
< #define HAVE_FLOOR  1
< #define HAVE_LOG    1
< #define HAVE_POW    1
< #define HAVE_SCALBN 1
< #define HAVE_SIN    1
< #define HAVE_SINF   1
< #define HAVE_SQRT   1
< #define HAVE_SIGACTION  1
< #define HAVE_SETJMP 1
< #define HAVE_NANOSLEEP  1
< #define HAVE_SYSCONF    1
< #define HAVE_SYSCTLBYNAME 1
< 
< /* enable iPhone version of Core Audio driver */
< #define SDL_AUDIO_DRIVER_COREAUDIO 1
< /* Enable the dummy audio driver (src/audio/dummy/\*.c) */
< #define SDL_AUDIO_DRIVER_DUMMY  1
< 
< /* Enable the stub haptic driver (src/haptic/dummy/\*.c) */
< #define SDL_HAPTIC_DISABLED 1
< 
< /* Enable Unix style SO loading */
< /* Technically this works, but it violates the iPhone developer agreement */
< /* #define SDL_LOADSO_DLOPEN 1 */
< 
< /* Enable the stub shared object loader (src/loadso/dummy/\*.c) */
< #define SDL_LOADSO_DISABLED 1
< 
< /* Enable various threading systems */
< #define SDL_THREAD_PTHREAD  1
< #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX  1
< 
< /* Enable various timer systems */
< #define SDL_TIMER_UNIX  1
< 
< /* Supported video drivers */
< #define SDL_VIDEO_DRIVER_UIKIT  1
< #define SDL_VIDEO_DRIVER_DUMMY  1
< 
< /* enable OpenGL ES */
< #define SDL_VIDEO_OPENGL_ES 1
< #define SDL_VIDEO_RENDER_OGL_ES 1
< #define SDL_VIDEO_RENDER_OGL_ES2    1
< 
< /* Enable system power support */
< #define SDL_POWER_UIKIT 1
< 
< /* enable iPhone keyboard support */
< #define SDL_IPHONE_KEYBOARD 1
< 
< /* enable joystick subsystem */
< #define SDL_JOYSTICK_DISABLED 0
< 
< /* Set max recognized G-force from accelerometer
<    See src/joystick/uikit/SDLUIAccelerationDelegate.m for notes on why this is needed
<  */
< #define SDL_IPHONE_MAX_GFORCE 5.0
< 
< /* enable filesystem support */
< #define SDL_FILESYSTEM_COCOA   1
< 
< #endif /* _SDL_config_iphoneos_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_iphoneos_h
> #define _SDL_config_iphoneos_h
> 
> #include "SDL_platform.h"
> 
> #ifdef __LP64__
> #define SIZEOF_VOIDP 8
> #else
> #define SIZEOF_VOIDP 4
> #endif
> 
> #define HAVE_GCC_ATOMICS    1
> 
> #define HAVE_ALLOCA_H       1
> #define HAVE_SYS_TYPES_H    1
> #define HAVE_STDIO_H    1
> #define STDC_HEADERS    1
> #define HAVE_STRING_H   1
> #define HAVE_INTTYPES_H 1
> #define HAVE_STDINT_H   1
> #define HAVE_CTYPE_H    1
> #define HAVE_MATH_H 1
> #define HAVE_SIGNAL_H   1
> 
> /* C library functions */
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC    1
> #define HAVE_FREE   1
> #define HAVE_ALLOCA 1
> #define HAVE_GETENV 1
> #define HAVE_SETENV 1
> #define HAVE_PUTENV 1
> #define HAVE_SETENV 1
> #define HAVE_UNSETENV   1
> #define HAVE_QSORT  1
> #define HAVE_ABS    1
> #define HAVE_BCOPY  1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE    1
> #define HAVE_MEMCMP 1
> #define HAVE_STRLEN 1
> #define HAVE_STRLCPY    1
> #define HAVE_STRLCAT    1
> #define HAVE_STRDUP 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR    1
> #define HAVE_STRSTR 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL    1
> #define HAVE_STRTOLL    1
> #define HAVE_STRTOULL   1
> #define HAVE_STRTOD 1
> #define HAVE_ATOI   1
> #define HAVE_ATOF   1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP    1
> #define HAVE_STRCASECMP 1
> #define HAVE_STRNCASECMP 1
> #define HAVE_SSCANF 1
> #define HAVE_SNPRINTF   1
> #define HAVE_VSNPRINTF  1
> #define HAVE_M_PI   1
> #define HAVE_ATAN   1
> #define HAVE_ATAN2  1
> #define HAVE_CEIL   1
> #define HAVE_COPYSIGN   1
> #define HAVE_COS    1
> #define HAVE_COSF   1
> #define HAVE_FABS   1
> #define HAVE_FLOOR  1
> #define HAVE_LOG    1
> #define HAVE_POW    1
> #define HAVE_SCALBN 1
> #define HAVE_SIN    1
> #define HAVE_SINF   1
> #define HAVE_SQRT   1
> #define HAVE_SIGACTION  1
> #define HAVE_SETJMP 1
> #define HAVE_NANOSLEEP  1
> #define HAVE_SYSCONF    1
> #define HAVE_SYSCTLBYNAME 1
> 
> /* enable iPhone version of Core Audio driver */
> #define SDL_AUDIO_DRIVER_COREAUDIO 1
> /* Enable the dummy audio driver (src/audio/dummy/\*.c) */
> #define SDL_AUDIO_DRIVER_DUMMY  1
> 
> /* Enable the stub haptic driver (src/haptic/dummy/\*.c) */
> #define SDL_HAPTIC_DISABLED 1
> 
> /* Enable Unix style SO loading */
> /* Technically this works, but it violates the iPhone developer agreement */
> /* #define SDL_LOADSO_DLOPEN 1 */
> 
> /* Enable the stub shared object loader (src/loadso/dummy/\*.c) */
> #define SDL_LOADSO_DISABLED 1
> 
> /* Enable various threading systems */
> #define SDL_THREAD_PTHREAD  1
> #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX  1
> 
> /* Enable various timer systems */
> #define SDL_TIMER_UNIX  1
> 
> /* Supported video drivers */
> #define SDL_VIDEO_DRIVER_UIKIT  1
> #define SDL_VIDEO_DRIVER_DUMMY  1
> 
> /* enable OpenGL ES */
> #define SDL_VIDEO_OPENGL_ES 1
> #define SDL_VIDEO_RENDER_OGL_ES 1
> #define SDL_VIDEO_RENDER_OGL_ES2    1
> 
> /* Enable system power support */
> #define SDL_POWER_UIKIT 1
> 
> /* enable iPhone keyboard support */
> #define SDL_IPHONE_KEYBOARD 1
> 
> /* enable joystick subsystem */
> #define SDL_JOYSTICK_DISABLED 0
> 
> /* Set max recognized G-force from accelerometer
>    See src/joystick/uikit/SDLUIAccelerationDelegate.m for notes on why this is needed
>  */
> #define SDL_IPHONE_MAX_GFORCE 5.0
> 
> #endif /* _SDL_config_iphoneos_h */
diff jni/SDL/include/SDL_config_macosx.h ../android-sdl/jni/SDL2/include/SDL_config_macosx.h
1,183c1,180
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_macosx_h
< #define _SDL_config_macosx_h
< 
< #include "SDL_platform.h"
< 
< /* This gets us MAC_OS_X_VERSION_MIN_REQUIRED... */
< #include <AvailabilityMacros.h>
< 
< /* This is a set of defines to configure the SDL features */
< 
< #ifdef __LP64__
<     #define SIZEOF_VOIDP 8
< #else
<     #define SIZEOF_VOIDP 4
< #endif
< 
< /* Useful headers */
< #define HAVE_ALLOCA_H       1
< #define HAVE_SYS_TYPES_H    1
< #define HAVE_STDIO_H    1
< #define STDC_HEADERS    1
< #define HAVE_STRING_H   1
< #define HAVE_INTTYPES_H 1
< #define HAVE_STDINT_H   1
< #define HAVE_CTYPE_H    1
< #define HAVE_MATH_H 1
< #define HAVE_SIGNAL_H   1
< 
< /* C library functions */
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC    1
< #define HAVE_FREE   1
< #define HAVE_ALLOCA 1
< #define HAVE_GETENV 1
< #define HAVE_SETENV 1
< #define HAVE_PUTENV 1
< #define HAVE_UNSETENV   1
< #define HAVE_QSORT  1
< #define HAVE_ABS    1
< #define HAVE_BCOPY  1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE    1
< #define HAVE_MEMCMP 1
< #define HAVE_STRLEN 1
< #define HAVE_STRLCPY    1
< #define HAVE_STRLCAT    1
< #define HAVE_STRDUP 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR    1
< #define HAVE_STRSTR 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL    1
< #define HAVE_STRTOLL    1
< #define HAVE_STRTOULL   1
< #define HAVE_STRTOD 1
< #define HAVE_ATOI   1
< #define HAVE_ATOF   1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP    1
< #define HAVE_STRCASECMP 1
< #define HAVE_STRNCASECMP 1
< #define HAVE_SSCANF 1
< #define HAVE_SNPRINTF   1
< #define HAVE_VSNPRINTF  1
< #define HAVE_CEIL   1
< #define HAVE_COPYSIGN   1
< #define HAVE_COS    1
< #define HAVE_COSF   1
< #define HAVE_FABS   1
< #define HAVE_FLOOR  1
< #define HAVE_LOG    1
< #define HAVE_POW    1
< #define HAVE_SCALBN 1
< #define HAVE_SIN    1
< #define HAVE_SINF   1
< #define HAVE_SQRT   1
< #define HAVE_SIGACTION  1
< #define HAVE_SETJMP 1
< #define HAVE_NANOSLEEP  1
< #define HAVE_SYSCONF    1
< #define HAVE_SYSCTLBYNAME 1
< #define HAVE_ATAN 1
< #define HAVE_ATAN2 1
< 
< /* Enable various audio drivers */
< #define SDL_AUDIO_DRIVER_COREAUDIO  1
< #define SDL_AUDIO_DRIVER_DISK   1
< #define SDL_AUDIO_DRIVER_DUMMY  1
< 
< /* Enable various input drivers */
< #define SDL_JOYSTICK_IOKIT  1
< #define SDL_HAPTIC_IOKIT    1
< 
< /* Enable various shared object loading systems */
< #define SDL_LOADSO_DLOPEN   1
< 
< /* Enable various threading systems */
< #define SDL_THREAD_PTHREAD  1
< #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX  1
< 
< /* Enable various timer systems */
< #define SDL_TIMER_UNIX  1
< 
< /* Enable various video drivers */
< #define SDL_VIDEO_DRIVER_COCOA  1
< #define SDL_VIDEO_DRIVER_DUMMY  1
< #undef SDL_VIDEO_DRIVER_X11
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC "/usr/X11R6/lib/libX11.6.dylib"
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT "/usr/X11R6/lib/libXext.6.dylib"
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA "/usr/X11R6/lib/libXinerama.1.dylib"
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 "/usr/X11R6/lib/libXi.6.dylib"
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR "/usr/X11R6/lib/libXrandr.2.dylib"
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS "/usr/X11R6/lib/libXss.1.dylib"
< #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE "/usr/X11R6/lib/libXxf86vm.1.dylib"
< #define SDL_VIDEO_DRIVER_X11_XINERAMA 1
< #define SDL_VIDEO_DRIVER_X11_XRANDR 1
< #define SDL_VIDEO_DRIVER_X11_XSCRNSAVER 1
< #define SDL_VIDEO_DRIVER_X11_XSHAPE 1
< #define SDL_VIDEO_DRIVER_X11_XVIDMODE 1
< #define SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM 1
< 
< #ifdef MAC_OS_X_VERSION_10_8
< /*
<  * No matter the versions targeted, this is the 10.8 or later SDK, so you have
<  *  to use the external Xquartz, which is a more modern Xlib. Previous SDKs
<  *  used an older Xlib.
<  */
< #define SDL_VIDEO_DRIVER_X11_XINPUT2 1
< #define SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS 1
< #define SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY 1
< #endif
< 
< #ifndef SDL_VIDEO_RENDER_OGL
< #define SDL_VIDEO_RENDER_OGL    1
< #endif
< 
< /* Enable OpenGL support */
< #ifndef SDL_VIDEO_OPENGL
< #define SDL_VIDEO_OPENGL    1
< #endif
< #ifndef SDL_VIDEO_OPENGL_CGL
< #define SDL_VIDEO_OPENGL_CGL    1
< #endif
< #ifndef SDL_VIDEO_OPENGL_GLX
< #define SDL_VIDEO_OPENGL_GLX    1
< #endif
< 
< /* Enable system power support */
< #define SDL_POWER_MACOSX 1
< 
< /* enable filesystem support */
< #define SDL_FILESYSTEM_COCOA   1
< 
< /* Enable assembly routines */
< #define SDL_ASSEMBLY_ROUTINES   1
< #ifdef __ppc__
< #define SDL_ALTIVEC_BLITTERS    1
< #endif
< 
< #endif /* _SDL_config_macosx_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_macosx_h
> #define _SDL_config_macosx_h
> 
> #include "SDL_platform.h"
> 
> /* This gets us MAC_OS_X_VERSION_MIN_REQUIRED... */
> #include <AvailabilityMacros.h>
> 
> /* This is a set of defines to configure the SDL features */
> 
> #ifdef __LP64__
>     #define SIZEOF_VOIDP 8
> #else
>     #define SIZEOF_VOIDP 4
> #endif
> 
> /* Useful headers */
> #define HAVE_ALLOCA_H       1
> #define HAVE_SYS_TYPES_H    1
> #define HAVE_STDIO_H    1
> #define STDC_HEADERS    1
> #define HAVE_STRING_H   1
> #define HAVE_INTTYPES_H 1
> #define HAVE_STDINT_H   1
> #define HAVE_CTYPE_H    1
> #define HAVE_MATH_H 1
> #define HAVE_SIGNAL_H   1
> 
> /* C library functions */
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC    1
> #define HAVE_FREE   1
> #define HAVE_ALLOCA 1
> #define HAVE_GETENV 1
> #define HAVE_SETENV 1
> #define HAVE_PUTENV 1
> #define HAVE_UNSETENV   1
> #define HAVE_QSORT  1
> #define HAVE_ABS    1
> #define HAVE_BCOPY  1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE    1
> #define HAVE_MEMCMP 1
> #define HAVE_STRLEN 1
> #define HAVE_STRLCPY    1
> #define HAVE_STRLCAT    1
> #define HAVE_STRDUP 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR    1
> #define HAVE_STRSTR 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL    1
> #define HAVE_STRTOLL    1
> #define HAVE_STRTOULL   1
> #define HAVE_STRTOD 1
> #define HAVE_ATOI   1
> #define HAVE_ATOF   1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP    1
> #define HAVE_STRCASECMP 1
> #define HAVE_STRNCASECMP 1
> #define HAVE_SSCANF 1
> #define HAVE_SNPRINTF   1
> #define HAVE_VSNPRINTF  1
> #define HAVE_CEIL   1
> #define HAVE_COPYSIGN   1
> #define HAVE_COS    1
> #define HAVE_COSF   1
> #define HAVE_FABS   1
> #define HAVE_FLOOR  1
> #define HAVE_LOG    1
> #define HAVE_POW    1
> #define HAVE_SCALBN 1
> #define HAVE_SIN    1
> #define HAVE_SINF   1
> #define HAVE_SQRT   1
> #define HAVE_SIGACTION  1
> #define HAVE_SETJMP 1
> #define HAVE_NANOSLEEP  1
> #define HAVE_SYSCONF    1
> #define HAVE_SYSCTLBYNAME 1
> #define HAVE_ATAN 1
> #define HAVE_ATAN2 1
> 
> /* Enable various audio drivers */
> #define SDL_AUDIO_DRIVER_COREAUDIO  1
> #define SDL_AUDIO_DRIVER_DISK   1
> #define SDL_AUDIO_DRIVER_DUMMY  1
> 
> /* Enable various input drivers */
> #define SDL_JOYSTICK_IOKIT  1
> #define SDL_HAPTIC_IOKIT    1
> 
> /* Enable various shared object loading systems */
> #define SDL_LOADSO_DLOPEN   1
> 
> /* Enable various threading systems */
> #define SDL_THREAD_PTHREAD  1
> #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX  1
> 
> /* Enable various timer systems */
> #define SDL_TIMER_UNIX  1
> 
> /* Enable various video drivers */
> #define SDL_VIDEO_DRIVER_COCOA  1
> #define SDL_VIDEO_DRIVER_DUMMY  1
> #undef SDL_VIDEO_DRIVER_X11
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC "/usr/X11R6/lib/libX11.6.dylib"
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XEXT "/usr/X11R6/lib/libXext.6.dylib"
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XINERAMA "/usr/X11R6/lib/libXinerama.1.dylib"
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XINPUT2 "/usr/X11R6/lib/libXi.6.dylib"
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XRANDR "/usr/X11R6/lib/libXrandr.2.dylib"
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XSS "/usr/X11R6/lib/libXss.1.dylib"
> #define SDL_VIDEO_DRIVER_X11_DYNAMIC_XVIDMODE "/usr/X11R6/lib/libXxf86vm.1.dylib"
> #define SDL_VIDEO_DRIVER_X11_XINERAMA 1
> #define SDL_VIDEO_DRIVER_X11_XRANDR 1
> #define SDL_VIDEO_DRIVER_X11_XSCRNSAVER 1
> #define SDL_VIDEO_DRIVER_X11_XSHAPE 1
> #define SDL_VIDEO_DRIVER_X11_XVIDMODE 1
> #define SDL_VIDEO_DRIVER_X11_HAS_XKBKEYCODETOKEYSYM 1
> 
> #ifdef MAC_OS_X_VERSION_10_8
> /*
>  * No matter the versions targeted, this is the 10.8 or later SDK, so you have
>  *  to use the external Xquartz, which is a more modern Xlib. Previous SDKs
>  *  used an older Xlib.
>  */
> #define SDL_VIDEO_DRIVER_X11_XINPUT2 1
> #define SDL_VIDEO_DRIVER_X11_SUPPORTS_GENERIC_EVENTS 1
> #define SDL_VIDEO_DRIVER_X11_CONST_PARAM_XEXTADDDISPLAY 1
> #endif
> 
> #ifndef SDL_VIDEO_RENDER_OGL
> #define SDL_VIDEO_RENDER_OGL    1
> #endif
> 
> /* Enable OpenGL support */
> #ifndef SDL_VIDEO_OPENGL
> #define SDL_VIDEO_OPENGL    1
> #endif
> #ifndef SDL_VIDEO_OPENGL_CGL
> #define SDL_VIDEO_OPENGL_CGL    1
> #endif
> #ifndef SDL_VIDEO_OPENGL_GLX
> #define SDL_VIDEO_OPENGL_GLX    1
> #endif
> 
> /* Enable system power support */
> #define SDL_POWER_MACOSX 1
> 
> /* Enable assembly routines */
> #define SDL_ASSEMBLY_ROUTINES   1
> #ifdef __ppc__
> #define SDL_ALTIVEC_BLITTERS    1
> #endif
> 
> #endif /* _SDL_config_macosx_h */
diff jni/SDL/include/SDL_config_minimal.h ../android-sdl/jni/SDL2/include/SDL_config_minimal.h
1,81c1,78
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_minimal_h
< #define _SDL_config_minimal_h
< 
< #include "SDL_platform.h"
< 
< /**
<  *  \file SDL_config_minimal.h
<  *
<  *  This is the minimal configuration that can be used to build SDL.
<  */
< 
< #define HAVE_STDARG_H   1
< #define HAVE_STDDEF_H   1
< 
< /* Most everything except Visual Studio 2008 and earlier has stdint.h now */
< #if defined(_MSC_VER) && (_MSC_VER < 1600)
< /* Here are some reasonable defaults */
< typedef unsigned int size_t;
< typedef signed char int8_t;
< typedef unsigned char uint8_t;
< typedef signed short int16_t;
< typedef unsigned short uint16_t;
< typedef signed int int32_t;
< typedef unsigned int uint32_t;
< typedef signed long long int64_t;
< typedef unsigned long long uint64_t;
< typedef unsigned long uintptr_t;
< #else
< #define HAVE_STDINT_H 1
< #endif /* Visual Studio 2008 */
< 
< #ifdef __GNUC__
< #define HAVE_GCC_SYNC_LOCK_TEST_AND_SET 1
< #endif
< 
< /* Enable the dummy audio driver (src/audio/dummy/\*.c) */
< #define SDL_AUDIO_DRIVER_DUMMY  1
< 
< /* Enable the stub joystick driver (src/joystick/dummy/\*.c) */
< #define SDL_JOYSTICK_DISABLED   1
< 
< /* Enable the stub haptic driver (src/haptic/dummy/\*.c) */
< #define SDL_HAPTIC_DISABLED 1
< 
< /* Enable the stub shared object loader (src/loadso/dummy/\*.c) */
< #define SDL_LOADSO_DISABLED 1
< 
< /* Enable the stub thread support (src/thread/generic/\*.c) */
< #define SDL_THREADS_DISABLED    1
< 
< /* Enable the stub timer support (src/timer/dummy/\*.c) */
< #define SDL_TIMERS_DISABLED 1
< 
< /* Enable the dummy video driver (src/video/dummy/\*.c) */
< #define SDL_VIDEO_DRIVER_DUMMY  1
< 
< /* Enable the dummy filesystem driver (src/filesystem/dummy/\*.c) */
< #define SDL_FILESYSTEM_DUMMY  1
< 
< #endif /* _SDL_config_minimal_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_minimal_h
> #define _SDL_config_minimal_h
> 
> #include "SDL_platform.h"
> 
> /**
>  *  \file SDL_config_minimal.h
>  *
>  *  This is the minimal configuration that can be used to build SDL.
>  */
> 
> #define HAVE_STDARG_H   1
> #define HAVE_STDDEF_H   1
> 
> /* Most everything except Visual Studio 2008 and earlier has stdint.h now */
> #if defined(_MSC_VER) && (_MSC_VER < 1600)
> /* Here are some reasonable defaults */
> typedef unsigned int size_t;
> typedef signed char int8_t;
> typedef unsigned char uint8_t;
> typedef signed short int16_t;
> typedef unsigned short uint16_t;
> typedef signed int int32_t;
> typedef unsigned int uint32_t;
> typedef signed long long int64_t;
> typedef unsigned long long uint64_t;
> typedef unsigned long uintptr_t;
> #else
> #define HAVE_STDINT_H 1
> #endif /* Visual Studio 2008 */
> 
> #ifdef __GNUC__
> #define HAVE_GCC_SYNC_LOCK_TEST_AND_SET 1
> #endif
> 
> /* Enable the dummy audio driver (src/audio/dummy/\*.c) */
> #define SDL_AUDIO_DRIVER_DUMMY  1
> 
> /* Enable the stub joystick driver (src/joystick/dummy/\*.c) */
> #define SDL_JOYSTICK_DISABLED   1
> 
> /* Enable the stub haptic driver (src/haptic/dummy/\*.c) */
> #define SDL_HAPTIC_DISABLED 1
> 
> /* Enable the stub shared object loader (src/loadso/dummy/\*.c) */
> #define SDL_LOADSO_DISABLED 1
> 
> /* Enable the stub thread support (src/thread/generic/\*.c) */
> #define SDL_THREADS_DISABLED    1
> 
> /* Enable the stub timer support (src/timer/dummy/\*.c) */
> #define SDL_TIMERS_DISABLED 1
> 
> /* Enable the dummy video driver (src/video/dummy/\*.c) */
> #define SDL_VIDEO_DRIVER_DUMMY  1
> 
> #endif /* _SDL_config_minimal_h */
diff jni/SDL/include/SDL_config_pandora.h ../android-sdl/jni/SDL2/include/SDL_config_pandora.h
1,125c1,124
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_h
< #define _SDL_config_h
< 
< /* This is a set of defines to configure the SDL features */
< 
< /* General platform specific identifiers */
< #include "SDL_platform.h"
< 
< #ifdef __LP64__
< #define SIZEOF_VOIDP 8
< #else
< #define SIZEOF_VOIDP 4
< #endif
< 
< #define SDL_BYTEORDER 1234
< 
< #define HAVE_ALLOCA_H 1
< #define HAVE_SYS_TYPES_H 1
< #define HAVE_STDIO_H 1
< #define STDC_HEADERS 1
< #define HAVE_STDLIB_H 1
< #define HAVE_STDARG_H 1
< #define HAVE_MALLOC_H 1
< #define HAVE_MEMORY_H 1
< #define HAVE_STRING_H 1
< #define HAVE_STRINGS_H 1
< #define HAVE_INTTYPES_H 1
< #define HAVE_STDINT_H 1
< #define HAVE_CTYPE_H 1
< #define HAVE_MATH_H 1
< #define HAVE_ICONV_H 1
< #define HAVE_SIGNAL_H 1
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC 1
< #define HAVE_FREE 1
< #define HAVE_ALLOCA 1
< #define HAVE_GETENV 1
< #define HAVE_SETENV 1
< #define HAVE_PUTENV 1
< #define HAVE_UNSETENV 1
< #define HAVE_QSORT 1
< #define HAVE_ABS 1
< #define HAVE_BCOPY 1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE 1
< #define HAVE_STRLEN 1
< #define HAVE_STRDUP 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR 1
< #define HAVE_STRSTR 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL 1
< #define HAVE_STRTOLL 1
< #define HAVE_STRTOULL 1
< #define HAVE_ATOI 1
< #define HAVE_ATOF 1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP 1
< #define HAVE_STRCASECMP 1
< #define HAVE_STRNCASECMP 1
< #define HAVE_SSCANF 1
< #define HAVE_SNPRINTF 1
< #define HAVE_VSNPRINTF 1
< #define HAVE_M_PI 1
< #define HAVE_CEIL 1
< #define HAVE_COPYSIGN 1
< #define HAVE_COS 1
< #define HAVE_COSF 1
< #define HAVE_FABS 1
< #define HAVE_FLOOR 1
< #define HAVE_LOG 1
< #define HAVE_SCALBN 1
< #define HAVE_SIN 1
< #define HAVE_SINF 1
< #define HAVE_SQRT 1
< #define HAVE_SIGACTION 1
< #define HAVE_SETJMP 1
< #define HAVE_NANOSLEEP 1
< 
< #define SDL_AUDIO_DRIVER_DUMMY 1
< #define SDL_AUDIO_DRIVER_OSS 1
< 
< #define SDL_INPUT_LINUXEV 1
< #define SDL_INPUT_TSLIB 1
< #define SDL_JOYSTICK_LINUX 1
< #define SDL_HAPTIC_LINUX 1
< 
< #define SDL_LOADSO_DLOPEN 1
< 
< #define SDL_THREAD_PTHREAD 1
< #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP 1
< 
< #define SDL_TIMER_UNIX 1
< #define SDL_FILESYSTEM_UNIX 1
< 
< #define SDL_VIDEO_DRIVER_DUMMY 1
< #define SDL_VIDEO_DRIVER_X11 1
< #define SDL_VIDEO_DRIVER_PANDORA 1
< #define SDL_VIDEO_RENDER_OGL_ES 1
< #define SDL_VIDEO_OPENGL_ES 1
< 
< #endif /* _SDL_config_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_h
> #define _SDL_config_h
> 
> /* This is a set of defines to configure the SDL features */
> 
> /* General platform specific identifiers */
> #include "SDL_platform.h"
> 
> #ifdef __LP64__
> #define SIZEOF_VOIDP 8
> #else
> #define SIZEOF_VOIDP 4
> #endif
> 
> #define SDL_BYTEORDER 1234
> 
> #define HAVE_ALLOCA_H 1
> #define HAVE_SYS_TYPES_H 1
> #define HAVE_STDIO_H 1
> #define STDC_HEADERS 1
> #define HAVE_STDLIB_H 1
> #define HAVE_STDARG_H 1
> #define HAVE_MALLOC_H 1
> #define HAVE_MEMORY_H 1
> #define HAVE_STRING_H 1
> #define HAVE_STRINGS_H 1
> #define HAVE_INTTYPES_H 1
> #define HAVE_STDINT_H 1
> #define HAVE_CTYPE_H 1
> #define HAVE_MATH_H 1
> #define HAVE_ICONV_H 1
> #define HAVE_SIGNAL_H 1
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC 1
> #define HAVE_FREE 1
> #define HAVE_ALLOCA 1
> #define HAVE_GETENV 1
> #define HAVE_SETENV 1
> #define HAVE_PUTENV 1
> #define HAVE_UNSETENV 1
> #define HAVE_QSORT 1
> #define HAVE_ABS 1
> #define HAVE_BCOPY 1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE 1
> #define HAVE_STRLEN 1
> #define HAVE_STRDUP 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR 1
> #define HAVE_STRSTR 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL 1
> #define HAVE_STRTOLL 1
> #define HAVE_STRTOULL 1
> #define HAVE_ATOI 1
> #define HAVE_ATOF 1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP 1
> #define HAVE_STRCASECMP 1
> #define HAVE_STRNCASECMP 1
> #define HAVE_SSCANF 1
> #define HAVE_SNPRINTF 1
> #define HAVE_VSNPRINTF 1
> #define HAVE_M_PI 1
> #define HAVE_CEIL 1
> #define HAVE_COPYSIGN 1
> #define HAVE_COS 1
> #define HAVE_COSF 1
> #define HAVE_FABS 1
> #define HAVE_FLOOR 1
> #define HAVE_LOG 1
> #define HAVE_SCALBN 1
> #define HAVE_SIN 1
> #define HAVE_SINF 1
> #define HAVE_SQRT 1
> #define HAVE_SIGACTION 1
> #define HAVE_SETJMP 1
> #define HAVE_NANOSLEEP 1
> 
> #define SDL_AUDIO_DRIVER_DUMMY 1
> #define SDL_AUDIO_DRIVER_OSS 1
> 
> #define SDL_INPUT_LINUXEV 1
> #define SDL_INPUT_TSLIB 1
> #define SDL_JOYSTICK_LINUX 1
> #define SDL_HAPTIC_LINUX 1
> 
> #define SDL_LOADSO_DLOPEN 1
> 
> #define SDL_THREAD_PTHREAD 1
> #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP 1
> 
> #define SDL_TIMER_UNIX 1
> 
> #define SDL_VIDEO_DRIVER_DUMMY 1
> #define SDL_VIDEO_DRIVER_X11 1
> #define SDL_VIDEO_DRIVER_PANDORA 1
> #define SDL_VIDEO_RENDER_OGL_ES 1
> #define SDL_VIDEO_OPENGL_ES 1
> 
> #endif /* _SDL_config_h */
diff jni/SDL/include/SDL_config_psp.h ../android-sdl/jni/SDL2/include/SDL_config_psp.h
1,139c1,136
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_psp_h
< #define _SDL_config_psp_h
< 
< #include "SDL_platform.h"
< 
< 
< 
< #ifdef __GNUC__
< #define HAVE_GCC_SYNC_LOCK_TEST_AND_SET 1
< #endif
< 
< #define HAVE_GCC_ATOMICS    1
< 
< #define HAVE_ALLOCA_H       1
< #define HAVE_SYS_TYPES_H    1
< #define HAVE_STDIO_H    1
< #define STDC_HEADERS    1
< #define HAVE_STRING_H   1
< #define HAVE_INTTYPES_H 1
< #define HAVE_STDINT_H   1
< #define HAVE_CTYPE_H    1
< #define HAVE_MATH_H 1
< #define HAVE_SIGNAL_H   1
< 
< /* C library functions */
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC    1
< #define HAVE_FREE   1
< #define HAVE_ALLOCA 1
< #define HAVE_GETENV 1
< #define HAVE_SETENV 1
< #define HAVE_PUTENV 1
< #define HAVE_SETENV 1
< #define HAVE_UNSETENV   1
< #define HAVE_QSORT  1
< #define HAVE_ABS    1
< #define HAVE_BCOPY  1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE    1
< #define HAVE_MEMCMP 1
< #define HAVE_STRLEN 1
< #define HAVE_STRLCPY    1
< #define HAVE_STRLCAT    1
< #define HAVE_STRDUP 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR    1
< #define HAVE_STRSTR 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL    1
< #define HAVE_STRTOLL    1
< #define HAVE_STRTOULL   1
< #define HAVE_STRTOD 1
< #define HAVE_ATOI   1
< #define HAVE_ATOF   1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP    1
< #define HAVE_STRCASECMP 1
< #define HAVE_STRNCASECMP 1
< #define HAVE_SSCANF 1
< #define HAVE_SNPRINTF   1
< #define HAVE_VSNPRINTF  1
< #define HAVE_M_PI   1
< #define HAVE_ATAN   1
< #define HAVE_ATAN2  1
< #define HAVE_CEIL   1
< #define HAVE_COPYSIGN   1
< #define HAVE_COS    1
< #define HAVE_COSF   1
< #define HAVE_FABS   1
< #define HAVE_FLOOR  1
< #define HAVE_LOG    1
< #define HAVE_POW    1
< #define HAVE_SCALBN 1
< #define HAVE_SIN    1
< #define HAVE_SINF   1
< #define HAVE_SQRT   1
< #define HAVE_SETJMP 1
< #define HAVE_NANOSLEEP  1
< /* #define HAVE_SYSCONF  1 */
< /* #define HAVE_SIGACTION    1 */
< 
< 
< /* PSP isn't that sophisticated */
< #define LACKS_SYS_MMAN_H 1
< 
< /* Enable the stub thread support (src/thread/psp/\*.c) */
< #define SDL_THREAD_PSP  1
< 
< /* Enable the stub timer support (src/timer/psp/\*.c) */
< #define SDL_TIMERS_PSP  1
< 
< /* Enable the stub joystick driver (src/joystick/psp/\*.c) */
< #define SDL_JOYSTICK_PSP        1
< 
< /* Enable the stub audio driver (src/audio/psp/\*.c) */
< #define SDL_AUDIO_DRIVER_PSP    1
< 
< /* PSP video dirver */
< #define SDL_VIDEO_DRIVER_PSP   1
< 
< /* PSP render dirver */
< #define SDL_VIDEO_RENDER_PSP   1
< 
< #define SDL_POWER_PSP          1
< 
< /* !!! FIXME: what does PSP do for filesystem stuff? */
< #define SDL_FILESYSTEM_DUMMY   1
< 
< /* PSP doesn't have haptic device (src/haptic/dummy/\*.c) */
< #define SDL_HAPTIC_DISABLED    1
< 
< /* PSP can't load shared object (src/loadso/dummy/\*.c) */
< #define SDL_LOADSO_DISABLED    1
< 
< 
< #endif /* _SDL_config_psp_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_psp_h
> #define _SDL_config_psp_h
> 
> #include "SDL_platform.h"
> 
> 
> 
> #ifdef __GNUC__
> #define HAVE_GCC_SYNC_LOCK_TEST_AND_SET 1
> #endif
> 
> #define HAVE_GCC_ATOMICS    1
> 
> #define HAVE_ALLOCA_H       1
> #define HAVE_SYS_TYPES_H    1
> #define HAVE_STDIO_H    1
> #define STDC_HEADERS    1
> #define HAVE_STRING_H   1
> #define HAVE_INTTYPES_H 1
> #define HAVE_STDINT_H   1
> #define HAVE_CTYPE_H    1
> #define HAVE_MATH_H 1
> #define HAVE_SIGNAL_H   1
> 
> /* C library functions */
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC    1
> #define HAVE_FREE   1
> #define HAVE_ALLOCA 1
> #define HAVE_GETENV 1
> #define HAVE_SETENV 1
> #define HAVE_PUTENV 1
> #define HAVE_SETENV 1
> #define HAVE_UNSETENV   1
> #define HAVE_QSORT  1
> #define HAVE_ABS    1
> #define HAVE_BCOPY  1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE    1
> #define HAVE_MEMCMP 1
> #define HAVE_STRLEN 1
> #define HAVE_STRLCPY    1
> #define HAVE_STRLCAT    1
> #define HAVE_STRDUP 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR    1
> #define HAVE_STRSTR 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL    1
> #define HAVE_STRTOLL    1
> #define HAVE_STRTOULL   1
> #define HAVE_STRTOD 1
> #define HAVE_ATOI   1
> #define HAVE_ATOF   1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP    1
> #define HAVE_STRCASECMP 1
> #define HAVE_STRNCASECMP 1
> #define HAVE_SSCANF 1
> #define HAVE_SNPRINTF   1
> #define HAVE_VSNPRINTF  1
> #define HAVE_M_PI   1
> #define HAVE_ATAN   1
> #define HAVE_ATAN2  1
> #define HAVE_CEIL   1
> #define HAVE_COPYSIGN   1
> #define HAVE_COS    1
> #define HAVE_COSF   1
> #define HAVE_FABS   1
> #define HAVE_FLOOR  1
> #define HAVE_LOG    1
> #define HAVE_POW    1
> #define HAVE_SCALBN 1
> #define HAVE_SIN    1
> #define HAVE_SINF   1
> #define HAVE_SQRT   1
> #define HAVE_SETJMP 1
> #define HAVE_NANOSLEEP  1
> //#define HAVE_SYSCONF  1
> //#define HAVE_SIGACTION    1
> 
> 
> /* PSP isn't that sophisticated */
> #define LACKS_SYS_MMAN_H 1
> 
> /* Enable the stub thread support (src/thread/psp/\*.c) */
> #define SDL_THREAD_PSP  1
> 
> /* Enable the stub timer support (src/timer/psp/\*.c) */
> #define SDL_TIMERS_PSP  1
> 
> /* Enable the stub joystick driver (src/joystick/psp/\*.c) */
> #define SDL_JOYSTICK_PSP        1
> 
> /* Enable the stub audio driver (src/audio/psp/\*.c) */
> #define SDL_AUDIO_DRIVER_PSP    1
> 
> /* PSP video dirver */
> #define SDL_VIDEO_DRIVER_PSP   1
> 
> /* PSP render dirver */
> #define SDL_VIDEO_RENDER_PSP   1
> 
> #define SDL_POWER_PSP          1
> 
> /* PSP doesn't have haptic device (src/haptic/dummy/\*.c) */
> #define SDL_HAPTIC_DISABLED    1
> 
> /* PSP can't load shared object (src/loadso/dummy/\*.c) */
> #define SDL_LOADSO_DISABLED    1
> 
> 
> #endif /* _SDL_config_psp_h */
diff jni/SDL/include/SDL_config_windows.h ../android-sdl/jni/SDL2/include/SDL_config_windows.h
1,195c1,189
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_windows_h
< #define _SDL_config_windows_h
< 
< #include "SDL_platform.h"
< 
< /* This is a set of defines to configure the SDL features */
< 
< #if !defined(_STDINT_H_) && (!defined(HAVE_STDINT_H) || !_HAVE_STDINT_H)
< #if defined(__GNUC__) || defined(__DMC__) || defined(__WATCOMC__)
< #define HAVE_STDINT_H   1
< #elif defined(_MSC_VER)
< typedef signed __int8 int8_t;
< typedef unsigned __int8 uint8_t;
< typedef signed __int16 int16_t;
< typedef unsigned __int16 uint16_t;
< typedef signed __int32 int32_t;
< typedef unsigned __int32 uint32_t;
< typedef signed __int64 int64_t;
< typedef unsigned __int64 uint64_t;
< #ifndef _UINTPTR_T_DEFINED
< #ifdef  _WIN64
< typedef unsigned __int64 uintptr_t;
< #else
< typedef unsigned int uintptr_t;
< #endif
< #define _UINTPTR_T_DEFINED
< #endif
< /* Older Visual C++ headers don't have the Win64-compatible typedefs... */
< #if ((_MSC_VER <= 1200) && (!defined(DWORD_PTR)))
< #define DWORD_PTR DWORD
< #endif
< #if ((_MSC_VER <= 1200) && (!defined(LONG_PTR)))
< #define LONG_PTR LONG
< #endif
< #else /* !__GNUC__ && !_MSC_VER */
< typedef signed char int8_t;
< typedef unsigned char uint8_t;
< typedef signed short int16_t;
< typedef unsigned short uint16_t;
< typedef signed int int32_t;
< typedef unsigned int uint32_t;
< typedef signed long long int64_t;
< typedef unsigned long long uint64_t;
< #ifndef _SIZE_T_DEFINED_
< #define _SIZE_T_DEFINED_
< typedef unsigned int size_t;
< #endif
< typedef unsigned int uintptr_t;
< #endif /* __GNUC__ || _MSC_VER */
< #endif /* !_STDINT_H_ && !HAVE_STDINT_H */
< 
< #ifdef _WIN64
< # define SIZEOF_VOIDP 8
< #else
< # define SIZEOF_VOIDP 4
< #endif
< 
< /* This is disabled by default to avoid C runtime dependencies and manifest requirements */
< #ifdef HAVE_LIBC
< /* Useful headers */
< #define HAVE_STDIO_H 1
< #define STDC_HEADERS 1
< #define HAVE_STRING_H 1
< #define HAVE_CTYPE_H 1
< #define HAVE_MATH_H 1
< #define HAVE_SIGNAL_H 1
< 
< /* C library functions */
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC 1
< #define HAVE_FREE 1
< #define HAVE_ALLOCA 1
< #define HAVE_QSORT 1
< #define HAVE_ABS 1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE 1
< #define HAVE_MEMCMP 1
< #define HAVE_STRLEN 1
< #define HAVE__STRREV 1
< #define HAVE__STRUPR 1
< #define HAVE__STRLWR 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR 1
< #define HAVE_STRSTR 1
< #define HAVE__LTOA 1
< #define HAVE__ULTOA 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL 1
< #define HAVE_STRTOD 1
< #define HAVE_ATOI 1
< #define HAVE_ATOF 1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP 1
< #define HAVE__STRICMP 1
< #define HAVE__STRNICMP 1
< #define HAVE_ATAN 1
< #define HAVE_ATAN2 1
< #define HAVE_CEIL 1
< #define HAVE_COS 1
< #define HAVE_COSF 1
< #define HAVE_FABS 1
< #define HAVE_FLOOR 1
< #define HAVE_LOG 1
< #define HAVE_POW 1
< #define HAVE_SIN 1
< #define HAVE_SINF 1
< #define HAVE_SQRT 1
< #if _MSC_VER >= 1800
< #define HAVE_STRTOLL 1
< #define HAVE_SSCANF 1
< #define HAVE_COPYSIGN 1
< #define HAVE_SCALBN 1
< #endif
< #if !defined(_MSC_VER) || defined(_USE_MATH_DEFINES)
< #define HAVE_M_PI 1
< #endif
< #else
< #define HAVE_STDARG_H   1
< #define HAVE_STDDEF_H   1
< #endif
< 
< /* Enable various audio drivers */
< #define SDL_AUDIO_DRIVER_DSOUND 1
< #define SDL_AUDIO_DRIVER_XAUDIO2    1
< #define SDL_AUDIO_DRIVER_WINMM  1
< #define SDL_AUDIO_DRIVER_DISK   1
< #define SDL_AUDIO_DRIVER_DUMMY  1
< 
< /* Enable various input drivers */
< #define SDL_JOYSTICK_DINPUT 1
< #define SDL_HAPTIC_DINPUT   1
< 
< /* Enable various shared object loading systems */
< #define SDL_LOADSO_WINDOWS  1
< 
< /* Enable various threading systems */
< #define SDL_THREAD_WINDOWS  1
< 
< /* Enable various timer systems */
< #define SDL_TIMER_WINDOWS   1
< 
< /* Enable various video drivers */
< #define SDL_VIDEO_DRIVER_DUMMY  1
< #define SDL_VIDEO_DRIVER_WINDOWS    1
< 
< #ifndef SDL_VIDEO_RENDER_D3D
< #define SDL_VIDEO_RENDER_D3D    1
< #endif
< 
< /* Enable OpenGL support */
< #ifndef SDL_VIDEO_OPENGL
< #define SDL_VIDEO_OPENGL    1
< #endif
< #ifndef SDL_VIDEO_OPENGL_WGL
< #define SDL_VIDEO_OPENGL_WGL    1
< #endif
< #ifndef SDL_VIDEO_RENDER_OGL
< #define SDL_VIDEO_RENDER_OGL    1
< #endif
< 
< /* Enable system power support */
< #define SDL_POWER_WINDOWS 1
< 
< /* Enable filesystem support */
< #define SDL_FILESYSTEM_WINDOWS  1
< 
< /* Enable assembly routines (Win64 doesn't have inline asm) */
< #ifndef _WIN64
< #define SDL_ASSEMBLY_ROUTINES   1
< #endif
< 
< #endif /* _SDL_config_windows_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_windows_h
> #define _SDL_config_windows_h
> 
> #include "SDL_platform.h"
> 
> /* This is a set of defines to configure the SDL features */
> 
> #if !defined(_STDINT_H_) && (!defined(HAVE_STDINT_H) || !_HAVE_STDINT_H)
> #if defined(__GNUC__) || defined(__DMC__) || defined(__WATCOMC__)
> #define HAVE_STDINT_H   1
> #elif defined(_MSC_VER)
> typedef signed __int8 int8_t;
> typedef unsigned __int8 uint8_t;
> typedef signed __int16 int16_t;
> typedef unsigned __int16 uint16_t;
> typedef signed __int32 int32_t;
> typedef unsigned __int32 uint32_t;
> typedef signed __int64 int64_t;
> typedef unsigned __int64 uint64_t;
> #ifndef _UINTPTR_T_DEFINED
> #ifdef  _WIN64
> typedef unsigned __int64 uintptr_t;
> #else
> typedef unsigned int uintptr_t;
> #endif
> #define _UINTPTR_T_DEFINED
> #endif
> /* Older Visual C++ headers don't have the Win64-compatible typedefs... */
> #if ((_MSC_VER <= 1200) && (!defined(DWORD_PTR)))
> #define DWORD_PTR DWORD
> #endif
> #if ((_MSC_VER <= 1200) && (!defined(LONG_PTR)))
> #define LONG_PTR LONG
> #endif
> #else /* !__GNUC__ && !_MSC_VER */
> typedef signed char int8_t;
> typedef unsigned char uint8_t;
> typedef signed short int16_t;
> typedef unsigned short uint16_t;
> typedef signed int int32_t;
> typedef unsigned int uint32_t;
> typedef signed long long int64_t;
> typedef unsigned long long uint64_t;
> #ifndef _SIZE_T_DEFINED_
> #define _SIZE_T_DEFINED_
> typedef unsigned int size_t;
> #endif
> typedef unsigned int uintptr_t;
> #endif /* __GNUC__ || _MSC_VER */
> #endif /* !_STDINT_H_ && !HAVE_STDINT_H */
> 
> #ifdef _WIN64
> # define SIZEOF_VOIDP 8
> #else
> # define SIZEOF_VOIDP 4
> #endif
> 
> /* This is disabled by default to avoid C runtime dependencies and manifest requirements */
> #ifdef HAVE_LIBC
> /* Useful headers */
> #define HAVE_STDIO_H 1
> #define STDC_HEADERS 1
> #define HAVE_STRING_H 1
> #define HAVE_CTYPE_H 1
> #define HAVE_MATH_H 1
> #define HAVE_SIGNAL_H 1
> 
> /* C library functions */
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC 1
> #define HAVE_FREE 1
> #define HAVE_ALLOCA 1
> #define HAVE_QSORT 1
> #define HAVE_ABS 1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE 1
> #define HAVE_MEMCMP 1
> #define HAVE_STRLEN 1
> #define HAVE__STRREV 1
> #define HAVE__STRUPR 1
> #define HAVE__STRLWR 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR 1
> #define HAVE_STRSTR 1
> #define HAVE_ITOA 1
> #define HAVE__LTOA 1
> #define HAVE__ULTOA 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL 1
> #define HAVE_STRTOLL 1
> #define HAVE_STRTOD 1
> #define HAVE_ATOI 1
> #define HAVE_ATOF 1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP 1
> #define HAVE__STRICMP 1
> #define HAVE__STRNICMP 1
> #define HAVE_SSCANF 1
> #define HAVE_M_PI 1
> #define HAVE_ATAN 1
> #define HAVE_ATAN2 1
> #define HAVE_CEIL 1
> #define HAVE_COPYSIGN 1
> #define HAVE_COS 1
> #define HAVE_COSF 1
> #define HAVE_FABS 1
> #define HAVE_FLOOR 1
> #define HAVE_LOG 1
> #define HAVE_POW 1
> #define HAVE_SCALBN 1
> #define HAVE_SIN 1
> #define HAVE_SINF 1
> #define HAVE_SQRT 1
> #else
> #define HAVE_STDARG_H   1
> #define HAVE_STDDEF_H   1
> #endif
> 
> /* Enable various audio drivers */
> #define SDL_AUDIO_DRIVER_DSOUND 1
> #define SDL_AUDIO_DRIVER_XAUDIO2    1
> #define SDL_AUDIO_DRIVER_WINMM  1
> #define SDL_AUDIO_DRIVER_DISK   1
> #define SDL_AUDIO_DRIVER_DUMMY  1
> 
> /* Enable various input drivers */
> #define SDL_JOYSTICK_DINPUT 1
> #define SDL_HAPTIC_DINPUT   1
> 
> /* Enable various shared object loading systems */
> #define SDL_LOADSO_WINDOWS  1
> 
> /* Enable various threading systems */
> #define SDL_THREAD_WINDOWS  1
> 
> /* Enable various timer systems */
> #define SDL_TIMER_WINDOWS   1
> 
> /* Enable various video drivers */
> #define SDL_VIDEO_DRIVER_DUMMY  1
> #define SDL_VIDEO_DRIVER_WINDOWS    1
> 
> #ifndef SDL_VIDEO_RENDER_D3D
> #define SDL_VIDEO_RENDER_D3D    1
> #endif
> 
> /* Enable OpenGL support */
> #ifndef SDL_VIDEO_OPENGL
> #define SDL_VIDEO_OPENGL    1
> #endif
> #ifndef SDL_VIDEO_OPENGL_WGL
> #define SDL_VIDEO_OPENGL_WGL    1
> #endif
> #ifndef SDL_VIDEO_RENDER_OGL
> #define SDL_VIDEO_RENDER_OGL    1
> #endif
> 
> /* Enable system power support */
> #define SDL_POWER_WINDOWS 1
> 
> /* Enable assembly routines (Win64 doesn't have inline asm) */
> #ifndef _WIN64
> #define SDL_ASSEMBLY_ROUTINES   1
> #endif
> 
> #endif /* _SDL_config_windows_h */
diff jni/SDL/include/SDL_config_wiz.h ../android-sdl/jni/SDL2/include/SDL_config_wiz.h
1,119c1,119
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_config_h
< #define _SDL_config_h
< 
< /* This is a set of defines to configure the SDL features */
< 
< /* General platform specific identifiers */
< #include "SDL_platform.h"
< 
< #define SDL_BYTEORDER 1234
< 
< #define HAVE_ALLOCA_H 1
< #define HAVE_SYS_TYPES_H 1
< #define HAVE_STDIO_H 1
< #define STDC_HEADERS 1
< #define HAVE_STDLIB_H 1
< #define HAVE_STDARG_H 1
< #define HAVE_MALLOC_H 1
< #define HAVE_MEMORY_H 1
< #define HAVE_STRING_H 1
< #define HAVE_STRINGS_H 1
< #define HAVE_INTTYPES_H 1
< #define HAVE_STDINT_H 1
< #define HAVE_CTYPE_H 1
< #define HAVE_MATH_H 1
< #define HAVE_ICONV_H 1
< #define HAVE_SIGNAL_H 1
< #define HAVE_MALLOC 1
< #define HAVE_CALLOC 1
< #define HAVE_REALLOC 1
< #define HAVE_FREE 1
< #define HAVE_ALLOCA 1
< #define HAVE_GETENV 1
< #define HAVE_SETENV 1
< #define HAVE_PUTENV 1
< #define HAVE_UNSETENV 1
< #define HAVE_QSORT 1
< #define HAVE_ABS 1
< #define HAVE_BCOPY 1
< #define HAVE_MEMSET 1
< #define HAVE_MEMCPY 1
< #define HAVE_MEMMOVE 1
< #define HAVE_STRLEN 1
< #define HAVE_STRDUP 1
< #define HAVE_STRCHR 1
< #define HAVE_STRRCHR 1
< #define HAVE_STRSTR 1
< #define HAVE_STRTOL 1
< #define HAVE_STRTOUL 1
< #define HAVE_STRTOLL 1
< #define HAVE_STRTOULL 1
< #define HAVE_ATOI 1
< #define HAVE_ATOF 1
< #define HAVE_STRCMP 1
< #define HAVE_STRNCMP 1
< #define HAVE_STRCASECMP 1
< #define HAVE_STRNCASECMP 1
< #define HAVE_SSCANF 1
< #define HAVE_SNPRINTF 1
< #define HAVE_VSNPRINTF 1
< #define HAVE_M_PI 1
< #define HAVE_CEIL 1
< #define HAVE_COPYSIGN 1
< #define HAVE_COS 1
< #define HAVE_COSF 1
< #define HAVE_FABS 1
< #define HAVE_FLOOR 1
< #define HAVE_LOG 1
< #define HAVE_SCALBN 1
< #define HAVE_SIN 1
< #define HAVE_SINF 1
< #define HAVE_SQRT 1
< #define HAVE_SIGACTION 1
< #define HAVE_SETJMP 1
< #define HAVE_NANOSLEEP 1
< #define HAVE_POW 1
< 
< #define SDL_CDROM_DISABLED 1
< #define SDL_AUDIO_DRIVER_DUMMY 1
< #define SDL_AUDIO_DRIVER_OSS 1
< 
< #define SDL_INPUT_LINUXEV 1
< #define SDL_INPUT_TSLIB 1
< #define SDL_JOYSTICK_LINUX 1
< #define SDL_HAPTIC_LINUX 1
< 
< #define SDL_LOADSO_DLOPEN 1
< 
< #define SDL_THREAD_PTHREAD 1
< #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP 1
< 
< #define SDL_TIMER_UNIX 1
< 
< #define SDL_VIDEO_DRIVER_DUMMY 1
< #define SDL_VIDEO_DRIVER_PANDORA 1
< #define SDL_VIDEO_RENDER_OGL_ES 1
< #define SDL_VIDEO_OPENGL_ES 1
< 
< #endif /* _SDL_config_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_config_h
> #define _SDL_config_h
> 
> /* This is a set of defines to configure the SDL features */
> 
> /* General platform specific identifiers */
> #include "SDL_platform.h"
> 
> #define SDL_BYTEORDER 1234
> 
> #define HAVE_ALLOCA_H 1
> #define HAVE_SYS_TYPES_H 1
> #define HAVE_STDIO_H 1
> #define STDC_HEADERS 1
> #define HAVE_STDLIB_H 1
> #define HAVE_STDARG_H 1
> #define HAVE_MALLOC_H 1
> #define HAVE_MEMORY_H 1
> #define HAVE_STRING_H 1
> #define HAVE_STRINGS_H 1
> #define HAVE_INTTYPES_H 1
> #define HAVE_STDINT_H 1
> #define HAVE_CTYPE_H 1
> #define HAVE_MATH_H 1
> #define HAVE_ICONV_H 1
> #define HAVE_SIGNAL_H 1
> #define HAVE_MALLOC 1
> #define HAVE_CALLOC 1
> #define HAVE_REALLOC 1
> #define HAVE_FREE 1
> #define HAVE_ALLOCA 1
> #define HAVE_GETENV 1
> #define HAVE_SETENV 1
> #define HAVE_PUTENV 1
> #define HAVE_UNSETENV 1
> #define HAVE_QSORT 1
> #define HAVE_ABS 1
> #define HAVE_BCOPY 1
> #define HAVE_MEMSET 1
> #define HAVE_MEMCPY 1
> #define HAVE_MEMMOVE 1
> #define HAVE_STRLEN 1
> #define HAVE_STRDUP 1
> #define HAVE_STRCHR 1
> #define HAVE_STRRCHR 1
> #define HAVE_STRSTR 1
> #define HAVE_STRTOL 1
> #define HAVE_STRTOUL 1
> #define HAVE_STRTOLL 1
> #define HAVE_STRTOULL 1
> #define HAVE_ATOI 1
> #define HAVE_ATOF 1
> #define HAVE_STRCMP 1
> #define HAVE_STRNCMP 1
> #define HAVE_STRCASECMP 1
> #define HAVE_STRNCASECMP 1
> #define HAVE_SSCANF 1
> #define HAVE_SNPRINTF 1
> #define HAVE_VSNPRINTF 1
> #define HAVE_M_PI 1
> #define HAVE_CEIL 1
> #define HAVE_COPYSIGN 1
> #define HAVE_COS 1
> #define HAVE_COSF 1
> #define HAVE_FABS 1
> #define HAVE_FLOOR 1
> #define HAVE_LOG 1
> #define HAVE_SCALBN 1
> #define HAVE_SIN 1
> #define HAVE_SINF 1
> #define HAVE_SQRT 1
> #define HAVE_SIGACTION 1
> #define HAVE_SETJMP 1
> #define HAVE_NANOSLEEP 1
> #define HAVE_POW 1
> 
> #define SDL_CDROM_DISABLED 1
> #define SDL_AUDIO_DRIVER_DUMMY 1
> #define SDL_AUDIO_DRIVER_OSS 1
> 
> #define SDL_INPUT_LINUXEV 1
> #define SDL_INPUT_TSLIB 1
> #define SDL_JOYSTICK_LINUX 1
> #define SDL_HAPTIC_LINUX 1
> 
> #define SDL_LOADSO_DLOPEN 1
> 
> #define SDL_THREAD_PTHREAD 1
> #define SDL_THREAD_PTHREAD_RECURSIVE_MUTEX_NP 1
> 
> #define SDL_TIMER_UNIX 1
> 
> #define SDL_VIDEO_DRIVER_DUMMY 1
> #define SDL_VIDEO_DRIVER_PANDORA 1
> #define SDL_VIDEO_RENDER_OGL_ES 1
> #define SDL_VIDEO_OPENGL_ES 1
> 
> #endif /* _SDL_config_h */
diff jni/SDL/include/SDL_copying.h ../android-sdl/jni/SDL2/include/SDL_copying.h
1,20c1,20
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
diff jni/SDL/include/SDL_cpuinfo.h ../android-sdl/jni/SDL2/include/SDL_cpuinfo.h
1,151c1,146
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_cpuinfo.h
<  *
<  *  CPU feature detection for SDL.
<  */
< 
< #ifndef _SDL_cpuinfo_h
< #define _SDL_cpuinfo_h
< 
< #include "SDL_stdinc.h"
< 
< /* Need to do this here because intrin.h has C++ code in it */
< /* Visual Studio 2005 has a bug where intrin.h conflicts with winnt.h */
< #if defined(_MSC_VER) && (_MSC_VER >= 1500)
< #include <intrin.h>
< #ifndef _WIN64
< #define __MMX__
< #define __3dNOW__
< #endif
< #define __SSE__
< #define __SSE2__
< #elif defined(__MINGW64_VERSION_MAJOR)
< #include <intrin.h>
< #else
< #ifdef __ALTIVEC__
< #if HAVE_ALTIVEC_H && !defined(__APPLE_ALTIVEC__)
< #include <altivec.h>
< #undef pixel
< #endif
< #endif
< #ifdef __MMX__
< #include <mmintrin.h>
< #endif
< #ifdef __3dNOW__
< #include <mm3dnow.h>
< #endif
< #ifdef __SSE__
< #include <xmmintrin.h>
< #endif
< #ifdef __SSE2__
< #include <emmintrin.h>
< #endif
< #endif
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* This is a guess for the cacheline size used for padding.
<  * Most x86 processors have a 64 byte cache line.
<  * The 64-bit PowerPC processors have a 128 byte cache line.
<  * We'll use the larger value to be generally safe.
<  */
< #define SDL_CACHELINE_SIZE  128
< 
< /**
<  *  This function returns the number of CPU cores available.
<  */
< extern DECLSPEC int SDLCALL SDL_GetCPUCount(void);
< 
< /**
<  *  This function returns the L1 cache line size of the CPU
<  *
<  *  This is useful for determining multi-threaded structure padding
<  *  or SIMD prefetch sizes.
<  */
< extern DECLSPEC int SDLCALL SDL_GetCPUCacheLineSize(void);
< 
< /**
<  *  This function returns true if the CPU has the RDTSC instruction.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasRDTSC(void);
< 
< /**
<  *  This function returns true if the CPU has AltiVec features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasAltiVec(void);
< 
< /**
<  *  This function returns true if the CPU has MMX features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasMMX(void);
< 
< /**
<  *  This function returns true if the CPU has 3DNow! features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_Has3DNow(void);
< 
< /**
<  *  This function returns true if the CPU has SSE features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE(void);
< 
< /**
<  *  This function returns true if the CPU has SSE2 features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE2(void);
< 
< /**
<  *  This function returns true if the CPU has SSE3 features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE3(void);
< 
< /**
<  *  This function returns true if the CPU has SSE4.1 features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE41(void);
< 
< /**
<  *  This function returns true if the CPU has SSE4.2 features.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE42(void);
< 
< /**
<  *  This function returns the amount of RAM configured in the system, in MB.
<  */
< extern DECLSPEC int SDLCALL SDL_GetSystemRAM(void);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_cpuinfo_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_cpuinfo.h
>  *
>  *  CPU feature detection for SDL.
>  */
> 
> #ifndef _SDL_cpuinfo_h
> #define _SDL_cpuinfo_h
> 
> #include "SDL_stdinc.h"
> 
> /* Need to do this here because intrin.h has C++ code in it */
> /* Visual Studio 2005 has a bug where intrin.h conflicts with winnt.h */
> #if defined(_MSC_VER) && (_MSC_VER >= 1500)
> #include <intrin.h>
> #ifndef _WIN64
> #define __MMX__
> #define __3dNOW__
> #endif
> #define __SSE__
> #define __SSE2__
> #elif defined(__MINGW64_VERSION_MAJOR)
> #include <intrin.h>
> #else
> #ifdef __ALTIVEC__
> #if HAVE_ALTIVEC_H && !defined(__APPLE_ALTIVEC__)
> #include <altivec.h>
> #undef pixel
> #endif
> #endif
> #ifdef __MMX__
> #include <mmintrin.h>
> #endif
> #ifdef __3dNOW__
> #include <mm3dnow.h>
> #endif
> #ifdef __SSE__
> #include <xmmintrin.h>
> #endif
> #ifdef __SSE2__
> #include <emmintrin.h>
> #endif
> #endif
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* This is a guess for the cacheline size used for padding.
>  * Most x86 processors have a 64 byte cache line.
>  * The 64-bit PowerPC processors have a 128 byte cache line.
>  * We'll use the larger value to be generally safe.
>  */
> #define SDL_CACHELINE_SIZE  128
> 
> /**
>  *  This function returns the number of CPU cores available.
>  */
> extern DECLSPEC int SDLCALL SDL_GetCPUCount(void);
> 
> /**
>  *  This function returns the L1 cache line size of the CPU
>  *
>  *  This is useful for determining multi-threaded structure padding
>  *  or SIMD prefetch sizes.
>  */
> extern DECLSPEC int SDLCALL SDL_GetCPUCacheLineSize(void);
> 
> /**
>  *  This function returns true if the CPU has the RDTSC instruction.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasRDTSC(void);
> 
> /**
>  *  This function returns true if the CPU has AltiVec features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasAltiVec(void);
> 
> /**
>  *  This function returns true if the CPU has MMX features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasMMX(void);
> 
> /**
>  *  This function returns true if the CPU has 3DNow! features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_Has3DNow(void);
> 
> /**
>  *  This function returns true if the CPU has SSE features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE(void);
> 
> /**
>  *  This function returns true if the CPU has SSE2 features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE2(void);
> 
> /**
>  *  This function returns true if the CPU has SSE3 features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE3(void);
> 
> /**
>  *  This function returns true if the CPU has SSE4.1 features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE41(void);
> 
> /**
>  *  This function returns true if the CPU has SSE4.2 features.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasSSE42(void);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_cpuinfo_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_endian.h ../android-sdl/jni/SDL2/include/SDL_endian.h
1,239c1,239
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_endian.h
<  *
<  *  Functions for reading and writing endian-specific values
<  */
< 
< #ifndef _SDL_endian_h
< #define _SDL_endian_h
< 
< #include "SDL_stdinc.h"
< 
< /**
<  *  \name The two types of endianness
<  */
< /* @{ */
< #define SDL_LIL_ENDIAN  1234
< #define SDL_BIG_ENDIAN  4321
< /* @} */
< 
< #ifndef SDL_BYTEORDER           /* Not defined in SDL_config.h? */
< #ifdef __linux__
< #include <endian.h>
< #define SDL_BYTEORDER  __BYTE_ORDER
< #else /* __linux __ */
< #if defined(__hppa__) || \
<     defined(__m68k__) || defined(mc68000) || defined(_M_M68K) || \
<     (defined(__MIPS__) && defined(__MISPEB__)) || \
<     defined(__ppc__) || defined(__POWERPC__) || defined(_M_PPC) || \
<     defined(__sparc__)
< #define SDL_BYTEORDER   SDL_BIG_ENDIAN
< #else
< #define SDL_BYTEORDER   SDL_LIL_ENDIAN
< #endif
< #endif /* __linux __ */
< #endif /* !SDL_BYTEORDER */
< 
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \file SDL_endian.h
<  */
< #if defined(__GNUC__) && defined(__i386__) && \
<    !(__GNUC__ == 2 && __GNUC_MINOR__ == 95 /* broken gcc version */)
< SDL_FORCE_INLINE Uint16
< SDL_Swap16(Uint16 x)
< {
<   __asm__("xchgb %b0,%h0": "=q"(x):"0"(x));
<     return x;
< }
< #elif defined(__GNUC__) && defined(__x86_64__)
< SDL_FORCE_INLINE Uint16
< SDL_Swap16(Uint16 x)
< {
<   __asm__("xchgb %b0,%h0": "=Q"(x):"0"(x));
<     return x;
< }
< #elif defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__))
< SDL_FORCE_INLINE Uint16
< SDL_Swap16(Uint16 x)
< {
<     int result;
< 
<   __asm__("rlwimi %0,%2,8,16,23": "=&r"(result):"0"(x >> 8), "r"(x));
<     return (Uint16)result;
< }
< #elif defined(__GNUC__) && (defined(__M68000__) || defined(__M68020__)) && !defined(__mcoldfire__)
< SDL_FORCE_INLINE Uint16
< SDL_Swap16(Uint16 x)
< {
<   __asm__("rorw #8,%0": "=d"(x): "0"(x):"cc");
<     return x;
< }
< #else
< SDL_FORCE_INLINE Uint16
< SDL_Swap16(Uint16 x)
< {
<     return SDL_static_cast(Uint16, ((x << 8) | (x >> 8)));
< }
< #endif
< 
< #if defined(__GNUC__) && defined(__i386__)
< SDL_FORCE_INLINE Uint32
< SDL_Swap32(Uint32 x)
< {
<   __asm__("bswap %0": "=r"(x):"0"(x));
<     return x;
< }
< #elif defined(__GNUC__) && defined(__x86_64__)
< SDL_FORCE_INLINE Uint32
< SDL_Swap32(Uint32 x)
< {
<   __asm__("bswapl %0": "=r"(x):"0"(x));
<     return x;
< }
< #elif defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__))
< SDL_FORCE_INLINE Uint32
< SDL_Swap32(Uint32 x)
< {
<     Uint32 result;
< 
<   __asm__("rlwimi %0,%2,24,16,23": "=&r"(result):"0"(x >> 24), "r"(x));
<   __asm__("rlwimi %0,%2,8,8,15": "=&r"(result):"0"(result), "r"(x));
<   __asm__("rlwimi %0,%2,24,0,7": "=&r"(result):"0"(result), "r"(x));
<     return result;
< }
< #elif defined(__GNUC__) && (defined(__M68000__) || defined(__M68020__)) && !defined(__mcoldfire__)
< SDL_FORCE_INLINE Uint32
< SDL_Swap32(Uint32 x)
< {
<   __asm__("rorw #8,%0\n\tswap %0\n\trorw #8,%0": "=d"(x): "0"(x):"cc");
<     return x;
< }
< #else
< SDL_FORCE_INLINE Uint32
< SDL_Swap32(Uint32 x)
< {
<     return SDL_static_cast(Uint32, ((x << 24) | ((x << 8) & 0x00FF0000) |
<                                     ((x >> 8) & 0x0000FF00) | (x >> 24)));
< }
< #endif
< 
< #if defined(__GNUC__) && defined(__i386__)
< SDL_FORCE_INLINE Uint64
< SDL_Swap64(Uint64 x)
< {
<     union
<     {
<         struct
<         {
<             Uint32 a, b;
<         } s;
<         Uint64 u;
<     } v;
<     v.u = x;
<   __asm__("bswapl %0 ; bswapl %1 ; xchgl %0,%1": "=r"(v.s.a), "=r"(v.s.b):"0"(v.s.a),
<             "1"(v.s.
<                 b));
<     return v.u;
< }
< #elif defined(__GNUC__) && defined(__x86_64__)
< SDL_FORCE_INLINE Uint64
< SDL_Swap64(Uint64 x)
< {
<   __asm__("bswapq %0": "=r"(x):"0"(x));
<     return x;
< }
< #else
< SDL_FORCE_INLINE Uint64
< SDL_Swap64(Uint64 x)
< {
<     Uint32 hi, lo;
< 
<     /* Separate into high and low 32-bit values and swap them */
<     lo = SDL_static_cast(Uint32, x & 0xFFFFFFFF);
<     x >>= 32;
<     hi = SDL_static_cast(Uint32, x & 0xFFFFFFFF);
<     x = SDL_Swap32(lo);
<     x <<= 32;
<     x |= SDL_Swap32(hi);
<     return (x);
< }
< #endif
< 
< 
< SDL_FORCE_INLINE float
< SDL_SwapFloat(float x)
< {
<     union
<     {
<         float f;
<         Uint32 ui32;
<     } swapper;
<     swapper.f = x;
<     swapper.ui32 = SDL_Swap32(swapper.ui32);
<     return swapper.f;
< }
< 
< 
< /**
<  *  \name Swap to native
<  *  Byteswap item from the specified endianness to the native endianness.
<  */
< /* @{ */
< #if SDL_BYTEORDER == SDL_LIL_ENDIAN
< #define SDL_SwapLE16(X) (X)
< #define SDL_SwapLE32(X) (X)
< #define SDL_SwapLE64(X) (X)
< #define SDL_SwapFloatLE(X)  (X)
< #define SDL_SwapBE16(X) SDL_Swap16(X)
< #define SDL_SwapBE32(X) SDL_Swap32(X)
< #define SDL_SwapBE64(X) SDL_Swap64(X)
< #define SDL_SwapFloatBE(X)  SDL_SwapFloat(X)
< #else
< #define SDL_SwapLE16(X) SDL_Swap16(X)
< #define SDL_SwapLE32(X) SDL_Swap32(X)
< #define SDL_SwapLE64(X) SDL_Swap64(X)
< #define SDL_SwapFloatLE(X)  SDL_SwapFloat(X)
< #define SDL_SwapBE16(X) (X)
< #define SDL_SwapBE32(X) (X)
< #define SDL_SwapBE64(X) (X)
< #define SDL_SwapFloatBE(X)  (X)
< #endif
< /* @} *//* Swap to native */
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_endian_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_endian.h
>  *
>  *  Functions for reading and writing endian-specific values
>  */
> 
> #ifndef _SDL_endian_h
> #define _SDL_endian_h
> 
> #include "SDL_stdinc.h"
> 
> /**
>  *  \name The two types of endianness
>  */
> /*@{*/
> #define SDL_LIL_ENDIAN  1234
> #define SDL_BIG_ENDIAN  4321
> /*@}*/
> 
> #ifndef SDL_BYTEORDER           /* Not defined in SDL_config.h? */
> #ifdef __linux__
> #include <endian.h>
> #define SDL_BYTEORDER  __BYTE_ORDER
> #else /* __linux __ */
> #if defined(__hppa__) || \
>     defined(__m68k__) || defined(mc68000) || defined(_M_M68K) || \
>     (defined(__MIPS__) && defined(__MISPEB__)) || \
>     defined(__ppc__) || defined(__POWERPC__) || defined(_M_PPC) || \
>     defined(__sparc__)
> #define SDL_BYTEORDER   SDL_BIG_ENDIAN
> #else
> #define SDL_BYTEORDER   SDL_LIL_ENDIAN
> #endif
> #endif /* __linux __ */
> #endif /* !SDL_BYTEORDER */
> 
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \file SDL_endian.h
>  */
> #if defined(__GNUC__) && defined(__i386__) && \
>    !(__GNUC__ == 2 && __GNUC_MINOR__ == 95 /* broken gcc version */)
> SDL_FORCE_INLINE Uint16
> SDL_Swap16(Uint16 x)
> {
>   __asm__("xchgb %b0,%h0": "=q"(x):"0"(x));
>     return x;
> }
> #elif defined(__GNUC__) && defined(__x86_64__)
> SDL_FORCE_INLINE Uint16
> SDL_Swap16(Uint16 x)
> {
>   __asm__("xchgb %b0,%h0": "=Q"(x):"0"(x));
>     return x;
> }
> #elif defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__))
> SDL_FORCE_INLINE Uint16
> SDL_Swap16(Uint16 x)
> {
>     int result;
> 
>   __asm__("rlwimi %0,%2,8,16,23": "=&r"(result):"0"(x >> 8), "r"(x));
>     return (Uint16)result;
> }
> #elif defined(__GNUC__) && (defined(__M68000__) || defined(__M68020__)) && !defined(__mcoldfire__)
> SDL_FORCE_INLINE Uint16
> SDL_Swap16(Uint16 x)
> {
>   __asm__("rorw #8,%0": "=d"(x): "0"(x):"cc");
>     return x;
> }
> #else
> SDL_FORCE_INLINE Uint16
> SDL_Swap16(Uint16 x)
> {
>     return SDL_static_cast(Uint16, ((x << 8) | (x >> 8)));
> }
> #endif
> 
> #if defined(__GNUC__) && defined(__i386__)
> SDL_FORCE_INLINE Uint32
> SDL_Swap32(Uint32 x)
> {
>   __asm__("bswap %0": "=r"(x):"0"(x));
>     return x;
> }
> #elif defined(__GNUC__) && defined(__x86_64__)
> SDL_FORCE_INLINE Uint32
> SDL_Swap32(Uint32 x)
> {
>   __asm__("bswapl %0": "=r"(x):"0"(x));
>     return x;
> }
> #elif defined(__GNUC__) && (defined(__powerpc__) || defined(__ppc__))
> SDL_FORCE_INLINE Uint32
> SDL_Swap32(Uint32 x)
> {
>     Uint32 result;
> 
>   __asm__("rlwimi %0,%2,24,16,23": "=&r"(result):"0"(x >> 24), "r"(x));
>   __asm__("rlwimi %0,%2,8,8,15": "=&r"(result):"0"(result), "r"(x));
>   __asm__("rlwimi %0,%2,24,0,7": "=&r"(result):"0"(result), "r"(x));
>     return result;
> }
> #elif defined(__GNUC__) && (defined(__M68000__) || defined(__M68020__)) && !defined(__mcoldfire__)
> SDL_FORCE_INLINE Uint32
> SDL_Swap32(Uint32 x)
> {
>   __asm__("rorw #8,%0\n\tswap %0\n\trorw #8,%0": "=d"(x): "0"(x):"cc");
>     return x;
> }
> #else
> SDL_FORCE_INLINE Uint32
> SDL_Swap32(Uint32 x)
> {
>     return SDL_static_cast(Uint32, ((x << 24) | ((x << 8) & 0x00FF0000) |
>                                     ((x >> 8) & 0x0000FF00) | (x >> 24)));
> }
> #endif
> 
> #if defined(__GNUC__) && defined(__i386__)
> SDL_FORCE_INLINE Uint64
> SDL_Swap64(Uint64 x)
> {
>     union
>     {
>         struct
>         {
>             Uint32 a, b;
>         } s;
>         Uint64 u;
>     } v;
>     v.u = x;
>   __asm__("bswapl %0 ; bswapl %1 ; xchgl %0,%1": "=r"(v.s.a), "=r"(v.s.b):"0"(v.s.a),
>             "1"(v.s.
>                 b));
>     return v.u;
> }
> #elif defined(__GNUC__) && defined(__x86_64__)
> SDL_FORCE_INLINE Uint64
> SDL_Swap64(Uint64 x)
> {
>   __asm__("bswapq %0": "=r"(x):"0"(x));
>     return x;
> }
> #else
> SDL_FORCE_INLINE Uint64
> SDL_Swap64(Uint64 x)
> {
>     Uint32 hi, lo;
> 
>     /* Separate into high and low 32-bit values and swap them */
>     lo = SDL_static_cast(Uint32, x & 0xFFFFFFFF);
>     x >>= 32;
>     hi = SDL_static_cast(Uint32, x & 0xFFFFFFFF);
>     x = SDL_Swap32(lo);
>     x <<= 32;
>     x |= SDL_Swap32(hi);
>     return (x);
> }
> #endif
> 
> 
> SDL_FORCE_INLINE float
> SDL_SwapFloat(float x)
> {
>     union
>     {
>         float f;
>         Uint32 ui32;
>     } swapper;
>     swapper.f = x;
>     swapper.ui32 = SDL_Swap32(swapper.ui32);
>     return swapper.f;
> }
> 
> 
> /**
>  *  \name Swap to native
>  *  Byteswap item from the specified endianness to the native endianness.
>  */
> /*@{*/
> #if SDL_BYTEORDER == SDL_LIL_ENDIAN
> #define SDL_SwapLE16(X) (X)
> #define SDL_SwapLE32(X) (X)
> #define SDL_SwapLE64(X) (X)
> #define SDL_SwapFloatLE(X)  (X)
> #define SDL_SwapBE16(X) SDL_Swap16(X)
> #define SDL_SwapBE32(X) SDL_Swap32(X)
> #define SDL_SwapBE64(X) SDL_Swap64(X)
> #define SDL_SwapFloatBE(X)  SDL_SwapFloat(X)
> #else
> #define SDL_SwapLE16(X) SDL_Swap16(X)
> #define SDL_SwapLE32(X) SDL_Swap32(X)
> #define SDL_SwapLE64(X) SDL_Swap64(X)
> #define SDL_SwapFloatLE(X)  SDL_SwapFloat(X)
> #define SDL_SwapBE16(X) (X)
> #define SDL_SwapBE32(X) (X)
> #define SDL_SwapBE64(X) (X)
> #define SDL_SwapFloatBE(X)  (X)
> #endif
> /*@}*//*Swap to native*/
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_endian_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_error.h ../android-sdl/jni/SDL2/include/SDL_error.h
1,76c1,76
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_error.h
<  *
<  *  Simple error message routines for SDL.
<  */
< 
< #ifndef _SDL_error_h
< #define _SDL_error_h
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* Public functions */
< /* SDL_SetError() unconditionally returns -1. */
< extern DECLSPEC int SDLCALL SDL_SetError(const char *fmt, ...);
< extern DECLSPEC const char *SDLCALL SDL_GetError(void);
< extern DECLSPEC void SDLCALL SDL_ClearError(void);
< 
< /**
<  *  \name Internal error functions
<  *
<  *  \internal
<  *  Private error reporting function - used internally.
<  */
< /* @{ */
< #define SDL_OutOfMemory()   SDL_Error(SDL_ENOMEM)
< #define SDL_Unsupported()   SDL_Error(SDL_UNSUPPORTED)
< #define SDL_InvalidParamError(param)    SDL_SetError("Parameter '%s' is invalid", (param))
< typedef enum
< {
<     SDL_ENOMEM,
<     SDL_EFREAD,
<     SDL_EFWRITE,
<     SDL_EFSEEK,
<     SDL_UNSUPPORTED,
<     SDL_LASTERROR
< } SDL_errorcode;
< /* SDL_Error() unconditionally returns -1. */
< extern DECLSPEC int SDLCALL SDL_Error(SDL_errorcode code);
< /* @} *//* Internal error functions */
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_error_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_error.h
>  *
>  *  Simple error message routines for SDL.
>  */
> 
> #ifndef _SDL_error_h
> #define _SDL_error_h
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* Public functions */
> /* SDL_SetError() unconditionally returns -1. */
> extern DECLSPEC int SDLCALL SDL_SetError(const char *fmt, ...);
> extern DECLSPEC const char *SDLCALL SDL_GetError(void);
> extern DECLSPEC void SDLCALL SDL_ClearError(void);
> 
> /**
>  *  \name Internal error functions
>  *
>  *  \internal
>  *  Private error reporting function - used internally.
>  */
> /*@{*/
> #define SDL_OutOfMemory()   SDL_Error(SDL_ENOMEM)
> #define SDL_Unsupported()   SDL_Error(SDL_UNSUPPORTED)
> #define SDL_InvalidParamError(param)    SDL_SetError("Parameter '%s' is invalid", (param))
> typedef enum
> {
>     SDL_ENOMEM,
>     SDL_EFREAD,
>     SDL_EFWRITE,
>     SDL_EFSEEK,
>     SDL_UNSUPPORTED,
>     SDL_LASTERROR
> } SDL_errorcode;
> /* SDL_Error() unconditionally returns -1. */
> extern DECLSPEC int SDLCALL SDL_Error(SDL_errorcode code);
> /*@}*//*Internal error functions*/
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_error_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_events.h ../android-sdl/jni/SDL2/include/SDL_events.h
1,720c1,720
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_events.h
<  *
<  *  Include file for SDL event handling.
<  */
< 
< #ifndef _SDL_events_h
< #define _SDL_events_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_video.h"
< #include "SDL_keyboard.h"
< #include "SDL_mouse.h"
< #include "SDL_joystick.h"
< #include "SDL_gamecontroller.h"
< #include "SDL_quit.h"
< #include "SDL_gesture.h"
< #include "SDL_touch.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* General keyboard/mouse state definitions */
< #define SDL_RELEASED    0
< #define SDL_PRESSED 1
< 
< /**
<  * \brief The types of events that can be delivered.
<  */
< typedef enum
< {
<     SDL_FIRSTEVENT     = 0,     /**< Unused (do not remove) */
< 
<     /* Application events */
<     SDL_QUIT           = 0x100, /**< User-requested quit */
< 
<     /* These application events have special meaning on iOS, see README-ios.txt for details */
<     SDL_APP_TERMINATING,        /**< The application is being terminated by the OS
<                                      Called on iOS in applicationWillTerminate()
<                                      Called on Android in onDestroy()
<                                 */
<     SDL_APP_LOWMEMORY,          /**< The application is low on memory, free memory if possible.
<                                      Called on iOS in applicationDidReceiveMemoryWarning()
<                                      Called on Android in onLowMemory()
<                                 */
<     SDL_APP_WILLENTERBACKGROUND, /**< The application is about to enter the background
<                                      Called on iOS in applicationWillResignActive()
<                                      Called on Android in onPause()
<                                 */
<     SDL_APP_DIDENTERBACKGROUND, /**< The application did enter the background and may not get CPU for some time
<                                      Called on iOS in applicationDidEnterBackground()
<                                      Called on Android in onPause()
<                                 */
<     SDL_APP_WILLENTERFOREGROUND, /**< The application is about to enter the foreground
<                                      Called on iOS in applicationWillEnterForeground()
<                                      Called on Android in onResume()
<                                 */
<     SDL_APP_DIDENTERFOREGROUND, /**< The application is now interactive
<                                      Called on iOS in applicationDidBecomeActive()
<                                      Called on Android in onResume()
<                                 */
< 
<     /* Window events */
<     SDL_WINDOWEVENT    = 0x200, /**< Window state change */
<     SDL_SYSWMEVENT,             /**< System specific event */
< 
<     /* Keyboard events */
<     SDL_KEYDOWN        = 0x300, /**< Key pressed */
<     SDL_KEYUP,                  /**< Key released */
<     SDL_TEXTEDITING,            /**< Keyboard text editing (composition) */
<     SDL_TEXTINPUT,              /**< Keyboard text input */
< 
<     /* Mouse events */
<     SDL_MOUSEMOTION    = 0x400, /**< Mouse moved */
<     SDL_MOUSEBUTTONDOWN,        /**< Mouse button pressed */
<     SDL_MOUSEBUTTONUP,          /**< Mouse button released */
<     SDL_MOUSEWHEEL,             /**< Mouse wheel motion */
< 
<     /* Joystick events */
<     SDL_JOYAXISMOTION  = 0x600, /**< Joystick axis motion */
<     SDL_JOYBALLMOTION,          /**< Joystick trackball motion */
<     SDL_JOYHATMOTION,           /**< Joystick hat position change */
<     SDL_JOYBUTTONDOWN,          /**< Joystick button pressed */
<     SDL_JOYBUTTONUP,            /**< Joystick button released */
<     SDL_JOYDEVICEADDED,         /**< A new joystick has been inserted into the system */
<     SDL_JOYDEVICEREMOVED,       /**< An opened joystick has been removed */
< 
<     /* Game controller events */
<     SDL_CONTROLLERAXISMOTION  = 0x650, /**< Game controller axis motion */
<     SDL_CONTROLLERBUTTONDOWN,          /**< Game controller button pressed */
<     SDL_CONTROLLERBUTTONUP,            /**< Game controller button released */
<     SDL_CONTROLLERDEVICEADDED,         /**< A new Game controller has been inserted into the system */
<     SDL_CONTROLLERDEVICEREMOVED,       /**< An opened Game controller has been removed */
<     SDL_CONTROLLERDEVICEREMAPPED,      /**< The controller mapping was updated */
< 
<     /* Touch events */
<     SDL_FINGERDOWN      = 0x700,
<     SDL_FINGERUP,
<     SDL_FINGERMOTION,
< 
<     /* Gesture events */
<     SDL_DOLLARGESTURE   = 0x800,
<     SDL_DOLLARRECORD,
<     SDL_MULTIGESTURE,
< 
<     /* Clipboard events */
<     SDL_CLIPBOARDUPDATE = 0x900, /**< The clipboard changed */
< 
<     /* Drag and drop events */
<     SDL_DROPFILE        = 0x1000, /**< The system requests a file open */
< 
<     /** Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
<      *  and should be allocated with SDL_RegisterEvents()
<      */
<     SDL_USEREVENT    = 0x8000,
< 
<     /**
<      *  This last event is only for bounding internal arrays
<      */
<     SDL_LASTEVENT    = 0xFFFF
< } SDL_EventType;
< 
< /**
<  *  \brief Fields shared by every event
<  */
< typedef struct SDL_CommonEvent
< {
<     Uint32 type;
<     Uint32 timestamp;
< } SDL_CommonEvent;
< 
< /**
<  *  \brief Window state change event data (event.window.*)
<  */
< typedef struct SDL_WindowEvent
< {
<     Uint32 type;        /**< ::SDL_WINDOWEVENT */
<     Uint32 timestamp;
<     Uint32 windowID;    /**< The associated window */
<     Uint8 event;        /**< ::SDL_WindowEventID */
<     Uint8 padding1;
<     Uint8 padding2;
<     Uint8 padding3;
<     Sint32 data1;       /**< event dependent data */
<     Sint32 data2;       /**< event dependent data */
< } SDL_WindowEvent;
< 
< /**
<  *  \brief Keyboard button event structure (event.key.*)
<  */
< typedef struct SDL_KeyboardEvent
< {
<     Uint32 type;        /**< ::SDL_KEYDOWN or ::SDL_KEYUP */
<     Uint32 timestamp;
<     Uint32 windowID;    /**< The window with keyboard focus, if any */
<     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
<     Uint8 repeat;       /**< Non-zero if this is a key repeat */
<     Uint8 padding2;
<     Uint8 padding3;
<     SDL_Keysym keysym;  /**< The key that was pressed or released */
< } SDL_KeyboardEvent;
< 
< #define SDL_TEXTEDITINGEVENT_TEXT_SIZE (32)
< /**
<  *  \brief Keyboard text editing event structure (event.edit.*)
<  */
< typedef struct SDL_TextEditingEvent
< {
<     Uint32 type;                                /**< ::SDL_TEXTEDITING */
<     Uint32 timestamp;
<     Uint32 windowID;                            /**< The window with keyboard focus, if any */
<     char text[SDL_TEXTEDITINGEVENT_TEXT_SIZE];  /**< The editing text */
<     Sint32 start;                               /**< The start cursor of selected editing text */
<     Sint32 length;                              /**< The length of selected editing text */
< } SDL_TextEditingEvent;
< 
< 
< #define SDL_TEXTINPUTEVENT_TEXT_SIZE (32)
< /**
<  *  \brief Keyboard text input event structure (event.text.*)
<  */
< typedef struct SDL_TextInputEvent
< {
<     Uint32 type;                              /**< ::SDL_TEXTINPUT */
<     Uint32 timestamp;
<     Uint32 windowID;                          /**< The window with keyboard focus, if any */
<     char text[SDL_TEXTINPUTEVENT_TEXT_SIZE];  /**< The input text */
< } SDL_TextInputEvent;
< 
< /**
<  *  \brief Mouse motion event structure (event.motion.*)
<  */
< typedef struct SDL_MouseMotionEvent
< {
<     Uint32 type;        /**< ::SDL_MOUSEMOTION */
<     Uint32 timestamp;
<     Uint32 windowID;    /**< The window with mouse focus, if any */
<     Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
<     Uint32 state;       /**< The current button state */
<     Sint32 x;           /**< X coordinate, relative to window */
<     Sint32 y;           /**< Y coordinate, relative to window */
<     Sint32 xrel;        /**< The relative motion in the X direction */
<     Sint32 yrel;        /**< The relative motion in the Y direction */
< } SDL_MouseMotionEvent;
< 
< /**
<  *  \brief Mouse button event structure (event.button.*)
<  */
< typedef struct SDL_MouseButtonEvent
< {
<     Uint32 type;        /**< ::SDL_MOUSEBUTTONDOWN or ::SDL_MOUSEBUTTONUP */
<     Uint32 timestamp;
<     Uint32 windowID;    /**< The window with mouse focus, if any */
<     Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
<     Uint8 button;       /**< The mouse button index */
<     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
<     Uint8 padding1;
<     Uint8 padding2;
<     Sint32 x;           /**< X coordinate, relative to window */
<     Sint32 y;           /**< Y coordinate, relative to window */
< } SDL_MouseButtonEvent;
< 
< /**
<  *  \brief Mouse wheel event structure (event.wheel.*)
<  */
< typedef struct SDL_MouseWheelEvent
< {
<     Uint32 type;        /**< ::SDL_MOUSEWHEEL */
<     Uint32 timestamp;
<     Uint32 windowID;    /**< The window with mouse focus, if any */
<     Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
<     Sint32 x;           /**< The amount scrolled horizontally */
<     Sint32 y;           /**< The amount scrolled vertically */
< } SDL_MouseWheelEvent;
< 
< /**
<  *  \brief Joystick axis motion event structure (event.jaxis.*)
<  */
< typedef struct SDL_JoyAxisEvent
< {
<     Uint32 type;        /**< ::SDL_JOYAXISMOTION */
<     Uint32 timestamp;
<     SDL_JoystickID which; /**< The joystick instance id */
<     Uint8 axis;         /**< The joystick axis index */
<     Uint8 padding1;
<     Uint8 padding2;
<     Uint8 padding3;
<     Sint16 value;       /**< The axis value (range: -32768 to 32767) */
<     Uint16 padding4;
< } SDL_JoyAxisEvent;
< 
< /**
<  *  \brief Joystick trackball motion event structure (event.jball.*)
<  */
< typedef struct SDL_JoyBallEvent
< {
<     Uint32 type;        /**< ::SDL_JOYBALLMOTION */
<     Uint32 timestamp;
<     SDL_JoystickID which; /**< The joystick instance id */
<     Uint8 ball;         /**< The joystick trackball index */
<     Uint8 padding1;
<     Uint8 padding2;
<     Uint8 padding3;
<     Sint16 xrel;        /**< The relative motion in the X direction */
<     Sint16 yrel;        /**< The relative motion in the Y direction */
< } SDL_JoyBallEvent;
< 
< /**
<  *  \brief Joystick hat position change event structure (event.jhat.*)
<  */
< typedef struct SDL_JoyHatEvent
< {
<     Uint32 type;        /**< ::SDL_JOYHATMOTION */
<     Uint32 timestamp;
<     SDL_JoystickID which; /**< The joystick instance id */
<     Uint8 hat;          /**< The joystick hat index */
<     Uint8 value;        /**< The hat position value.
<                          *   \sa ::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP
<                          *   \sa ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT
<                          *   \sa ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN
<                          *
<                          *   Note that zero means the POV is centered.
<                          */
<     Uint8 padding1;
<     Uint8 padding2;
< } SDL_JoyHatEvent;
< 
< /**
<  *  \brief Joystick button event structure (event.jbutton.*)
<  */
< typedef struct SDL_JoyButtonEvent
< {
<     Uint32 type;        /**< ::SDL_JOYBUTTONDOWN or ::SDL_JOYBUTTONUP */
<     Uint32 timestamp;
<     SDL_JoystickID which; /**< The joystick instance id */
<     Uint8 button;       /**< The joystick button index */
<     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
<     Uint8 padding1;
<     Uint8 padding2;
< } SDL_JoyButtonEvent;
< 
< /**
<  *  \brief Joystick device event structure (event.jdevice.*)
<  */
< typedef struct SDL_JoyDeviceEvent
< {
<     Uint32 type;        /**< ::SDL_JOYDEVICEADDED or ::SDL_JOYDEVICEREMOVED */
<     Uint32 timestamp;
<     Sint32 which;       /**< The joystick device index for the ADDED event, instance id for the REMOVED event */
< } SDL_JoyDeviceEvent;
< 
< 
< /**
<  *  \brief Game controller axis motion event structure (event.caxis.*)
<  */
< typedef struct SDL_ControllerAxisEvent
< {
<     Uint32 type;        /**< ::SDL_CONTROLLERAXISMOTION */
<     Uint32 timestamp;
<     SDL_JoystickID which; /**< The joystick instance id */
<     Uint8 axis;         /**< The controller axis (SDL_GameControllerAxis) */
<     Uint8 padding1;
<     Uint8 padding2;
<     Uint8 padding3;
<     Sint16 value;       /**< The axis value (range: -32768 to 32767) */
<     Uint16 padding4;
< } SDL_ControllerAxisEvent;
< 
< 
< /**
<  *  \brief Game controller button event structure (event.cbutton.*)
<  */
< typedef struct SDL_ControllerButtonEvent
< {
<     Uint32 type;        /**< ::SDL_CONTROLLERBUTTONDOWN or ::SDL_CONTROLLERBUTTONUP */
<     Uint32 timestamp;
<     SDL_JoystickID which; /**< The joystick instance id */
<     Uint8 button;       /**< The controller button (SDL_GameControllerButton) */
<     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
<     Uint8 padding1;
<     Uint8 padding2;
< } SDL_ControllerButtonEvent;
< 
< 
< /**
<  *  \brief Controller device event structure (event.cdevice.*)
<  */
< typedef struct SDL_ControllerDeviceEvent
< {
<     Uint32 type;        /**< ::SDL_CONTROLLERDEVICEADDED, ::SDL_CONTROLLERDEVICEREMOVED, or ::SDL_CONTROLLERDEVICEREMAPPED */
<     Uint32 timestamp;
<     Sint32 which;       /**< The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event */
< } SDL_ControllerDeviceEvent;
< 
< 
< /**
<  *  \brief Touch finger event structure (event.tfinger.*)
<  */
< typedef struct SDL_TouchFingerEvent
< {
<     Uint32 type;        /**< ::SDL_FINGERMOTION or ::SDL_FINGERDOWN or ::SDL_FINGERUP */
<     Uint32 timestamp;
<     SDL_TouchID touchId; /**< The touch device id */
<     SDL_FingerID fingerId;
<     float x;            /**< Normalized in the range 0...1 */
<     float y;            /**< Normalized in the range 0...1 */
<     float dx;           /**< Normalized in the range 0...1 */
<     float dy;           /**< Normalized in the range 0...1 */
<     float pressure;     /**< Normalized in the range 0...1 */
< } SDL_TouchFingerEvent;
< 
< 
< /**
<  *  \brief Multiple Finger Gesture Event (event.mgesture.*)
<  */
< typedef struct SDL_MultiGestureEvent
< {
<     Uint32 type;        /**< ::SDL_MULTIGESTURE */
<     Uint32 timestamp;
<     SDL_TouchID touchId; /**< The touch device index */
<     float dTheta;
<     float dDist;
<     float x;
<     float y;
<     Uint16 numFingers;
<     Uint16 padding;
< } SDL_MultiGestureEvent;
< 
< 
< /**
<  * \brief Dollar Gesture Event (event.dgesture.*)
<  */
< typedef struct SDL_DollarGestureEvent
< {
<     Uint32 type;        /**< ::SDL_DOLLARGESTURE */
<     Uint32 timestamp;
<     SDL_TouchID touchId; /**< The touch device id */
<     SDL_GestureID gestureId;
<     Uint32 numFingers;
<     float error;
<     float x;            /**< Normalized center of gesture */
<     float y;            /**< Normalized center of gesture */
< } SDL_DollarGestureEvent;
< 
< 
< /**
<  *  \brief An event used to request a file open by the system (event.drop.*)
<  *         This event is disabled by default, you can enable it with SDL_EventState()
<  *  \note If you enable this event, you must free the filename in the event.
<  */
< typedef struct SDL_DropEvent
< {
<     Uint32 type;        /**< ::SDL_DROPFILE */
<     Uint32 timestamp;
<     char *file;         /**< The file name, which should be freed with SDL_free() */
< } SDL_DropEvent;
< 
< 
< /**
<  *  \brief The "quit requested" event
<  */
< typedef struct SDL_QuitEvent
< {
<     Uint32 type;        /**< ::SDL_QUIT */
<     Uint32 timestamp;
< } SDL_QuitEvent;
< 
< /**
<  *  \brief OS Specific event
<  */
< typedef struct SDL_OSEvent
< {
<     Uint32 type;        /**< ::SDL_QUIT */
<     Uint32 timestamp;
< } SDL_OSEvent;
< 
< /**
<  *  \brief A user-defined event type (event.user.*)
<  */
< typedef struct SDL_UserEvent
< {
<     Uint32 type;        /**< ::SDL_USEREVENT through ::SDL_LASTEVENT-1 */
<     Uint32 timestamp;
<     Uint32 windowID;    /**< The associated window if any */
<     Sint32 code;        /**< User defined event code */
<     void *data1;        /**< User defined data pointer */
<     void *data2;        /**< User defined data pointer */
< } SDL_UserEvent;
< 
< 
< struct SDL_SysWMmsg;
< typedef struct SDL_SysWMmsg SDL_SysWMmsg;
< 
< /**
<  *  \brief A video driver dependent system event (event.syswm.*)
<  *         This event is disabled by default, you can enable it with SDL_EventState()
<  *
<  *  \note If you want to use this event, you should include SDL_syswm.h.
<  */
< typedef struct SDL_SysWMEvent
< {
<     Uint32 type;        /**< ::SDL_SYSWMEVENT */
<     Uint32 timestamp;
<     SDL_SysWMmsg *msg;  /**< driver dependent data, defined in SDL_syswm.h */
< } SDL_SysWMEvent;
< 
< /**
<  *  \brief General event structure
<  */
< typedef union SDL_Event
< {
<     Uint32 type;                    /**< Event type, shared with all events */
<     SDL_CommonEvent common;         /**< Common event data */
<     SDL_WindowEvent window;         /**< Window event data */
<     SDL_KeyboardEvent key;          /**< Keyboard event data */
<     SDL_TextEditingEvent edit;      /**< Text editing event data */
<     SDL_TextInputEvent text;        /**< Text input event data */
<     SDL_MouseMotionEvent motion;    /**< Mouse motion event data */
<     SDL_MouseButtonEvent button;    /**< Mouse button event data */
<     SDL_MouseWheelEvent wheel;      /**< Mouse wheel event data */
<     SDL_JoyAxisEvent jaxis;         /**< Joystick axis event data */
<     SDL_JoyBallEvent jball;         /**< Joystick ball event data */
<     SDL_JoyHatEvent jhat;           /**< Joystick hat event data */
<     SDL_JoyButtonEvent jbutton;     /**< Joystick button event data */
<     SDL_JoyDeviceEvent jdevice;     /**< Joystick device change event data */
<     SDL_ControllerAxisEvent caxis;      /**< Game Controller axis event data */
<     SDL_ControllerButtonEvent cbutton;  /**< Game Controller button event data */
<     SDL_ControllerDeviceEvent cdevice;  /**< Game Controller device event data */
<     SDL_QuitEvent quit;             /**< Quit request event data */
<     SDL_UserEvent user;             /**< Custom event data */
<     SDL_SysWMEvent syswm;           /**< System dependent window event data */
<     SDL_TouchFingerEvent tfinger;   /**< Touch finger event data */
<     SDL_MultiGestureEvent mgesture; /**< Gesture event data */
<     SDL_DollarGestureEvent dgesture; /**< Gesture event data */
<     SDL_DropEvent drop;             /**< Drag and drop event data */
< 
<     /* This is necessary for ABI compatibility between Visual C++ and GCC
<        Visual C++ will respect the push pack pragma and use 52 bytes for
<        this structure, and GCC will use the alignment of the largest datatype
<        within the union, which is 8 bytes.
< 
<        So... we'll add padding to force the size to be 56 bytes for both.
<     */
<     Uint8 padding[56];
< } SDL_Event;
< 
< 
< /* Function prototypes */
< 
< /**
<  *  Pumps the event loop, gathering events from the input devices.
<  *
<  *  This function updates the event queue and internal input device state.
<  *
<  *  This should only be run in the thread that sets the video mode.
<  */
< extern DECLSPEC void SDLCALL SDL_PumpEvents(void);
< 
< /* @{ */
< typedef enum
< {
<     SDL_ADDEVENT,
<     SDL_PEEKEVENT,
<     SDL_GETEVENT
< } SDL_eventaction;
< 
< /**
<  *  Checks the event queue for messages and optionally returns them.
<  *
<  *  If \c action is ::SDL_ADDEVENT, up to \c numevents events will be added to
<  *  the back of the event queue.
<  *
<  *  If \c action is ::SDL_PEEKEVENT, up to \c numevents events at the front
<  *  of the event queue, within the specified minimum and maximum type,
<  *  will be returned and will not be removed from the queue.
<  *
<  *  If \c action is ::SDL_GETEVENT, up to \c numevents events at the front
<  *  of the event queue, within the specified minimum and maximum type,
<  *  will be returned and will be removed from the queue.
<  *
<  *  \return The number of events actually stored, or -1 if there was an error.
<  *
<  *  This function is thread-safe.
<  */
< extern DECLSPEC int SDLCALL SDL_PeepEvents(SDL_Event * events, int numevents,
<                                            SDL_eventaction action,
<                                            Uint32 minType, Uint32 maxType);
< /* @} */
< 
< /**
<  *  Checks to see if certain event types are in the event queue.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasEvent(Uint32 type);
< extern DECLSPEC SDL_bool SDLCALL SDL_HasEvents(Uint32 minType, Uint32 maxType);
< 
< /**
<  *  This function clears events from the event queue
<  */
< extern DECLSPEC void SDLCALL SDL_FlushEvent(Uint32 type);
< extern DECLSPEC void SDLCALL SDL_FlushEvents(Uint32 minType, Uint32 maxType);
< 
< /**
<  *  \brief Polls for currently pending events.
<  *
<  *  \return 1 if there are any pending events, or 0 if there are none available.
<  *
<  *  \param event If not NULL, the next event is removed from the queue and
<  *               stored in that area.
<  */
< extern DECLSPEC int SDLCALL SDL_PollEvent(SDL_Event * event);
< 
< /**
<  *  \brief Waits indefinitely for the next available event.
<  *
<  *  \return 1, or 0 if there was an error while waiting for events.
<  *
<  *  \param event If not NULL, the next event is removed from the queue and
<  *               stored in that area.
<  */
< extern DECLSPEC int SDLCALL SDL_WaitEvent(SDL_Event * event);
< 
< /**
<  *  \brief Waits until the specified timeout (in milliseconds) for the next
<  *         available event.
<  *
<  *  \return 1, or 0 if there was an error while waiting for events.
<  *
<  *  \param event If not NULL, the next event is removed from the queue and
<  *               stored in that area.
<  *  \param timeout The timeout (in milliseconds) to wait for next event.
<  */
< extern DECLSPEC int SDLCALL SDL_WaitEventTimeout(SDL_Event * event,
<                                                  int timeout);
< 
< /**
<  *  \brief Add an event to the event queue.
<  *
<  *  \return 1 on success, 0 if the event was filtered, or -1 if the event queue
<  *          was full or there was some other error.
<  */
< extern DECLSPEC int SDLCALL SDL_PushEvent(SDL_Event * event);
< 
< typedef int (SDLCALL * SDL_EventFilter) (void *userdata, SDL_Event * event);
< 
< /**
<  *  Sets up a filter to process all events before they change internal state and
<  *  are posted to the internal event queue.
<  *
<  *  The filter is prototyped as:
<  *  \code
<  *      int SDL_EventFilter(void *userdata, SDL_Event * event);
<  *  \endcode
<  *
<  *  If the filter returns 1, then the event will be added to the internal queue.
<  *  If it returns 0, then the event will be dropped from the queue, but the
<  *  internal state will still be updated.  This allows selective filtering of
<  *  dynamically arriving events.
<  *
<  *  \warning  Be very careful of what you do in the event filter function, as
<  *            it may run in a different thread!
<  *
<  *  There is one caveat when dealing with the ::SDL_QuitEvent event type.  The
<  *  event filter is only called when the window manager desires to close the
<  *  application window.  If the event filter returns 1, then the window will
<  *  be closed, otherwise the window will remain open if possible.
<  *
<  *  If the quit event is generated by an interrupt signal, it will bypass the
<  *  internal queue and be delivered to the application at the next event poll.
<  */
< extern DECLSPEC void SDLCALL SDL_SetEventFilter(SDL_EventFilter filter,
<                                                 void *userdata);
< 
< /**
<  *  Return the current event filter - can be used to "chain" filters.
<  *  If there is no event filter set, this function returns SDL_FALSE.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_GetEventFilter(SDL_EventFilter * filter,
<                                                     void **userdata);
< 
< /**
<  *  Add a function which is called when an event is added to the queue.
<  */
< extern DECLSPEC void SDLCALL SDL_AddEventWatch(SDL_EventFilter filter,
<                                                void *userdata);
< 
< /**
<  *  Remove an event watch function added with SDL_AddEventWatch()
<  */
< extern DECLSPEC void SDLCALL SDL_DelEventWatch(SDL_EventFilter filter,
<                                                void *userdata);
< 
< /**
<  *  Run the filter function on the current event queue, removing any
<  *  events for which the filter returns 0.
<  */
< extern DECLSPEC void SDLCALL SDL_FilterEvents(SDL_EventFilter filter,
<                                               void *userdata);
< 
< /* @{ */
< #define SDL_QUERY   -1
< #define SDL_IGNORE   0
< #define SDL_DISABLE  0
< #define SDL_ENABLE   1
< 
< /**
<  *  This function allows you to set the state of processing certain events.
<  *   - If \c state is set to ::SDL_IGNORE, that event will be automatically
<  *     dropped from the event queue and will not event be filtered.
<  *   - If \c state is set to ::SDL_ENABLE, that event will be processed
<  *     normally.
<  *   - If \c state is set to ::SDL_QUERY, SDL_EventState() will return the
<  *     current processing state of the specified event.
<  */
< extern DECLSPEC Uint8 SDLCALL SDL_EventState(Uint32 type, int state);
< /* @} */
< #define SDL_GetEventState(type) SDL_EventState(type, SDL_QUERY)
< 
< /**
<  *  This function allocates a set of user-defined events, and returns
<  *  the beginning event number for that set of events.
<  *
<  *  If there aren't enough user-defined events left, this function
<  *  returns (Uint32)-1
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_RegisterEvents(int numevents);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_events_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_events.h
>  *
>  *  Include file for SDL event handling.
>  */
> 
> #ifndef _SDL_events_h
> #define _SDL_events_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_video.h"
> #include "SDL_keyboard.h"
> #include "SDL_mouse.h"
> #include "SDL_joystick.h"
> #include "SDL_gamecontroller.h"
> #include "SDL_quit.h"
> #include "SDL_gesture.h"
> #include "SDL_touch.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* General keyboard/mouse state definitions */
> #define SDL_RELEASED    0
> #define SDL_PRESSED 1
> 
> /**
>  * \brief The types of events that can be delivered.
>  */
> typedef enum
> {
>     SDL_FIRSTEVENT     = 0,     /**< Unused (do not remove) */
> 
>     /* Application events */
>     SDL_QUIT           = 0x100, /**< User-requested quit */
> 
>     /* These application events have special meaning on iOS, see README-ios.txt for details */
>     SDL_APP_TERMINATING,        /**< The application is being terminated by the OS
>                                      Called on iOS in applicationWillTerminate()
>                                      Called on Android in onDestroy()
>                                 */
>     SDL_APP_LOWMEMORY,          /**< The application is low on memory, free memory if possible.
>                                      Called on iOS in applicationDidReceiveMemoryWarning()
>                                      Called on Android in onLowMemory()
>                                 */
>     SDL_APP_WILLENTERBACKGROUND, /**< The application is about to enter the background
>                                      Called on iOS in applicationWillResignActive()
>                                      Called on Android in onPause()
>                                 */
>     SDL_APP_DIDENTERBACKGROUND, /**< The application did enter the background and may not get CPU for some time
>                                      Called on iOS in applicationDidEnterBackground()
>                                      Called on Android in onPause()
>                                 */
>     SDL_APP_WILLENTERFOREGROUND, /**< The application is about to enter the foreground
>                                      Called on iOS in applicationWillEnterForeground()
>                                      Called on Android in onResume()
>                                 */
>     SDL_APP_DIDENTERFOREGROUND, /**< The application is now interactive
>                                      Called on iOS in applicationDidBecomeActive()
>                                      Called on Android in onResume()
>                                 */
> 
>     /* Window events */
>     SDL_WINDOWEVENT    = 0x200, /**< Window state change */
>     SDL_SYSWMEVENT,             /**< System specific event */
> 
>     /* Keyboard events */
>     SDL_KEYDOWN        = 0x300, /**< Key pressed */
>     SDL_KEYUP,                  /**< Key released */
>     SDL_TEXTEDITING,            /**< Keyboard text editing (composition) */
>     SDL_TEXTINPUT,              /**< Keyboard text input */
> 
>     /* Mouse events */
>     SDL_MOUSEMOTION    = 0x400, /**< Mouse moved */
>     SDL_MOUSEBUTTONDOWN,        /**< Mouse button pressed */
>     SDL_MOUSEBUTTONUP,          /**< Mouse button released */
>     SDL_MOUSEWHEEL,             /**< Mouse wheel motion */
> 
>     /* Joystick events */
>     SDL_JOYAXISMOTION  = 0x600, /**< Joystick axis motion */
>     SDL_JOYBALLMOTION,          /**< Joystick trackball motion */
>     SDL_JOYHATMOTION,           /**< Joystick hat position change */
>     SDL_JOYBUTTONDOWN,          /**< Joystick button pressed */
>     SDL_JOYBUTTONUP,            /**< Joystick button released */
>     SDL_JOYDEVICEADDED,         /**< A new joystick has been inserted into the system */
>     SDL_JOYDEVICEREMOVED,       /**< An opened joystick has been removed */
> 
>     /* Game controller events */
>     SDL_CONTROLLERAXISMOTION  = 0x650, /**< Game controller axis motion */
>     SDL_CONTROLLERBUTTONDOWN,          /**< Game controller button pressed */
>     SDL_CONTROLLERBUTTONUP,            /**< Game controller button released */
>     SDL_CONTROLLERDEVICEADDED,         /**< A new Game controller has been inserted into the system */
>     SDL_CONTROLLERDEVICEREMOVED,       /**< An opened Game controller has been removed */
>     SDL_CONTROLLERDEVICEREMAPPED,      /**< The controller mapping was updated */
> 
>     /* Touch events */
>     SDL_FINGERDOWN      = 0x700,
>     SDL_FINGERUP,
>     SDL_FINGERMOTION,
> 
>     /* Gesture events */
>     SDL_DOLLARGESTURE   = 0x800,
>     SDL_DOLLARRECORD,
>     SDL_MULTIGESTURE,
> 
>     /* Clipboard events */
>     SDL_CLIPBOARDUPDATE = 0x900, /**< The clipboard changed */
> 
>     /* Drag and drop events */
>     SDL_DROPFILE        = 0x1000, /**< The system requests a file open */
> 
>     /** Events ::SDL_USEREVENT through ::SDL_LASTEVENT are for your use,
>      *  and should be allocated with SDL_RegisterEvents()
>      */
>     SDL_USEREVENT    = 0x8000,
> 
>     /**
>      *  This last event is only for bounding internal arrays
>      */
>     SDL_LASTEVENT    = 0xFFFF
> } SDL_EventType;
> 
> /**
>  *  \brief Fields shared by every event
>  */
> typedef struct SDL_CommonEvent
> {
>     Uint32 type;
>     Uint32 timestamp;
> } SDL_CommonEvent;
> 
> /**
>  *  \brief Window state change event data (event.window.*)
>  */
> typedef struct SDL_WindowEvent
> {
>     Uint32 type;        /**< ::SDL_WINDOWEVENT */
>     Uint32 timestamp;
>     Uint32 windowID;    /**< The associated window */
>     Uint8 event;        /**< ::SDL_WindowEventID */
>     Uint8 padding1;
>     Uint8 padding2;
>     Uint8 padding3;
>     Sint32 data1;       /**< event dependent data */
>     Sint32 data2;       /**< event dependent data */
> } SDL_WindowEvent;
> 
> /**
>  *  \brief Keyboard button event structure (event.key.*)
>  */
> typedef struct SDL_KeyboardEvent
> {
>     Uint32 type;        /**< ::SDL_KEYDOWN or ::SDL_KEYUP */
>     Uint32 timestamp;
>     Uint32 windowID;    /**< The window with keyboard focus, if any */
>     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
>     Uint8 repeat;       /**< Non-zero if this is a key repeat */
>     Uint8 padding2;
>     Uint8 padding3;
>     SDL_Keysym keysym;  /**< The key that was pressed or released */
> } SDL_KeyboardEvent;
> 
> #define SDL_TEXTEDITINGEVENT_TEXT_SIZE (32)
> /**
>  *  \brief Keyboard text editing event structure (event.edit.*)
>  */
> typedef struct SDL_TextEditingEvent
> {
>     Uint32 type;                                /**< ::SDL_TEXTEDITING */
>     Uint32 timestamp;
>     Uint32 windowID;                            /**< The window with keyboard focus, if any */
>     char text[SDL_TEXTEDITINGEVENT_TEXT_SIZE];  /**< The editing text */
>     Sint32 start;                               /**< The start cursor of selected editing text */
>     Sint32 length;                              /**< The length of selected editing text */
> } SDL_TextEditingEvent;
> 
> 
> #define SDL_TEXTINPUTEVENT_TEXT_SIZE (32)
> /**
>  *  \brief Keyboard text input event structure (event.text.*)
>  */
> typedef struct SDL_TextInputEvent
> {
>     Uint32 type;                              /**< ::SDL_TEXTINPUT */
>     Uint32 timestamp;
>     Uint32 windowID;                          /**< The window with keyboard focus, if any */
>     char text[SDL_TEXTINPUTEVENT_TEXT_SIZE];  /**< The input text */
> } SDL_TextInputEvent;
> 
> /**
>  *  \brief Mouse motion event structure (event.motion.*)
>  */
> typedef struct SDL_MouseMotionEvent
> {
>     Uint32 type;        /**< ::SDL_MOUSEMOTION */
>     Uint32 timestamp;
>     Uint32 windowID;    /**< The window with mouse focus, if any */
>     Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
>     Uint32 state;       /**< The current button state */
>     Sint32 x;           /**< X coordinate, relative to window */
>     Sint32 y;           /**< Y coordinate, relative to window */
>     Sint32 xrel;        /**< The relative motion in the X direction */
>     Sint32 yrel;        /**< The relative motion in the Y direction */
> } SDL_MouseMotionEvent;
> 
> /**
>  *  \brief Mouse button event structure (event.button.*)
>  */
> typedef struct SDL_MouseButtonEvent
> {
>     Uint32 type;        /**< ::SDL_MOUSEBUTTONDOWN or ::SDL_MOUSEBUTTONUP */
>     Uint32 timestamp;
>     Uint32 windowID;    /**< The window with mouse focus, if any */
>     Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
>     Uint8 button;       /**< The mouse button index */
>     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
>     Uint8 padding1;
>     Uint8 padding2;
>     Sint32 x;           /**< X coordinate, relative to window */
>     Sint32 y;           /**< Y coordinate, relative to window */
> } SDL_MouseButtonEvent;
> 
> /**
>  *  \brief Mouse wheel event structure (event.wheel.*)
>  */
> typedef struct SDL_MouseWheelEvent
> {
>     Uint32 type;        /**< ::SDL_MOUSEWHEEL */
>     Uint32 timestamp;
>     Uint32 windowID;    /**< The window with mouse focus, if any */
>     Uint32 which;       /**< The mouse instance id, or SDL_TOUCH_MOUSEID */
>     Sint32 x;           /**< The amount scrolled horizontally */
>     Sint32 y;           /**< The amount scrolled vertically */
> } SDL_MouseWheelEvent;
> 
> /**
>  *  \brief Joystick axis motion event structure (event.jaxis.*)
>  */
> typedef struct SDL_JoyAxisEvent
> {
>     Uint32 type;        /**< ::SDL_JOYAXISMOTION */
>     Uint32 timestamp;
>     SDL_JoystickID which; /**< The joystick instance id */
>     Uint8 axis;         /**< The joystick axis index */
>     Uint8 padding1;
>     Uint8 padding2;
>     Uint8 padding3;
>     Sint16 value;       /**< The axis value (range: -32768 to 32767) */
>     Uint16 padding4;
> } SDL_JoyAxisEvent;
> 
> /**
>  *  \brief Joystick trackball motion event structure (event.jball.*)
>  */
> typedef struct SDL_JoyBallEvent
> {
>     Uint32 type;        /**< ::SDL_JOYBALLMOTION */
>     Uint32 timestamp;
>     SDL_JoystickID which; /**< The joystick instance id */
>     Uint8 ball;         /**< The joystick trackball index */
>     Uint8 padding1;
>     Uint8 padding2;
>     Uint8 padding3;
>     Sint16 xrel;        /**< The relative motion in the X direction */
>     Sint16 yrel;        /**< The relative motion in the Y direction */
> } SDL_JoyBallEvent;
> 
> /**
>  *  \brief Joystick hat position change event structure (event.jhat.*)
>  */
> typedef struct SDL_JoyHatEvent
> {
>     Uint32 type;        /**< ::SDL_JOYHATMOTION */
>     Uint32 timestamp;
>     SDL_JoystickID which; /**< The joystick instance id */
>     Uint8 hat;          /**< The joystick hat index */
>     Uint8 value;        /**< The hat position value.
>                          *   \sa ::SDL_HAT_LEFTUP ::SDL_HAT_UP ::SDL_HAT_RIGHTUP
>                          *   \sa ::SDL_HAT_LEFT ::SDL_HAT_CENTERED ::SDL_HAT_RIGHT
>                          *   \sa ::SDL_HAT_LEFTDOWN ::SDL_HAT_DOWN ::SDL_HAT_RIGHTDOWN
>                          *
>                          *   Note that zero means the POV is centered.
>                          */
>     Uint8 padding1;
>     Uint8 padding2;
> } SDL_JoyHatEvent;
> 
> /**
>  *  \brief Joystick button event structure (event.jbutton.*)
>  */
> typedef struct SDL_JoyButtonEvent
> {
>     Uint32 type;        /**< ::SDL_JOYBUTTONDOWN or ::SDL_JOYBUTTONUP */
>     Uint32 timestamp;
>     SDL_JoystickID which; /**< The joystick instance id */
>     Uint8 button;       /**< The joystick button index */
>     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
>     Uint8 padding1;
>     Uint8 padding2;
> } SDL_JoyButtonEvent;
> 
> /**
>  *  \brief Joystick device event structure (event.jdevice.*)
>  */
> typedef struct SDL_JoyDeviceEvent
> {
>     Uint32 type;        /**< ::SDL_JOYDEVICEADDED or ::SDL_JOYDEVICEREMOVED */
>     Uint32 timestamp;
>     Sint32 which;       /**< The joystick device index for the ADDED event, instance id for the REMOVED event */
> } SDL_JoyDeviceEvent;
> 
> 
> /**
>  *  \brief Game controller axis motion event structure (event.caxis.*)
>  */
> typedef struct SDL_ControllerAxisEvent
> {
>     Uint32 type;        /**< ::SDL_CONTROLLERAXISMOTION */
>     Uint32 timestamp;
>     SDL_JoystickID which; /**< The joystick instance id */
>     Uint8 axis;         /**< The controller axis (SDL_GameControllerAxis) */
>     Uint8 padding1;
>     Uint8 padding2;
>     Uint8 padding3;
>     Sint16 value;       /**< The axis value (range: -32768 to 32767) */
>     Uint16 padding4;
> } SDL_ControllerAxisEvent;
> 
> 
> /**
>  *  \brief Game controller button event structure (event.cbutton.*)
>  */
> typedef struct SDL_ControllerButtonEvent
> {
>     Uint32 type;        /**< ::SDL_CONTROLLERBUTTONDOWN or ::SDL_CONTROLLERBUTTONUP */
>     Uint32 timestamp;
>     SDL_JoystickID which; /**< The joystick instance id */
>     Uint8 button;       /**< The controller button (SDL_GameControllerButton) */
>     Uint8 state;        /**< ::SDL_PRESSED or ::SDL_RELEASED */
>     Uint8 padding1;
>     Uint8 padding2;
> } SDL_ControllerButtonEvent;
> 
> 
> /**
>  *  \brief Controller device event structure (event.cdevice.*)
>  */
> typedef struct SDL_ControllerDeviceEvent
> {
>     Uint32 type;        /**< ::SDL_CONTROLLERDEVICEADDED, ::SDL_CONTROLLERDEVICEREMOVED, or ::SDL_CONTROLLERDEVICEREMAPPED */
>     Uint32 timestamp;
>     Sint32 which;       /**< The joystick device index for the ADDED event, instance id for the REMOVED or REMAPPED event */
> } SDL_ControllerDeviceEvent;
> 
> 
> /**
>  *  \brief Touch finger event structure (event.tfinger.*)
>  */
> typedef struct SDL_TouchFingerEvent
> {
>     Uint32 type;        /**< ::SDL_FINGERMOTION or ::SDL_FINGERDOWN or ::SDL_FINGERUP */
>     Uint32 timestamp;
>     SDL_TouchID touchId; /**< The touch device id */
>     SDL_FingerID fingerId;
>     float x;            /**< Normalized in the range 0...1 */
>     float y;            /**< Normalized in the range 0...1 */
>     float dx;           /**< Normalized in the range 0...1 */
>     float dy;           /**< Normalized in the range 0...1 */
>     float pressure;     /**< Normalized in the range 0...1 */
> } SDL_TouchFingerEvent;
> 
> 
> /**
>  *  \brief Multiple Finger Gesture Event (event.mgesture.*)
>  */
> typedef struct SDL_MultiGestureEvent
> {
>     Uint32 type;        /**< ::SDL_MULTIGESTURE */
>     Uint32 timestamp;
>     SDL_TouchID touchId; /**< The touch device index */
>     float dTheta;
>     float dDist;
>     float x;
>     float y;
>     Uint16 numFingers;
>     Uint16 padding;
> } SDL_MultiGestureEvent;
> 
> 
> /**
>  * \brief Dollar Gesture Event (event.dgesture.*)
>  */
> typedef struct SDL_DollarGestureEvent
> {
>     Uint32 type;        /**< ::SDL_DOLLARGESTURE */
>     Uint32 timestamp;
>     SDL_TouchID touchId; /**< The touch device id */
>     SDL_GestureID gestureId;
>     Uint32 numFingers;
>     float error;
>     float x;            /**< Normalized center of gesture */
>     float y;            /**< Normalized center of gesture */
> } SDL_DollarGestureEvent;
> 
> 
> /**
>  *  \brief An event used to request a file open by the system (event.drop.*)
>  *         This event is disabled by default, you can enable it with SDL_EventState()
>  *  \note If you enable this event, you must free the filename in the event.
>  */
> typedef struct SDL_DropEvent
> {
>     Uint32 type;        /**< ::SDL_DROPFILE */
>     Uint32 timestamp;
>     char *file;         /**< The file name, which should be freed with SDL_free() */
> } SDL_DropEvent;
> 
> 
> /**
>  *  \brief The "quit requested" event
>  */
> typedef struct SDL_QuitEvent
> {
>     Uint32 type;        /**< ::SDL_QUIT */
>     Uint32 timestamp;
> } SDL_QuitEvent;
> 
> /**
>  *  \brief OS Specific event
>  */
> typedef struct SDL_OSEvent
> {
>     Uint32 type;        /**< ::SDL_QUIT */
>     Uint32 timestamp;
> } SDL_OSEvent;
> 
> /**
>  *  \brief A user-defined event type (event.user.*)
>  */
> typedef struct SDL_UserEvent
> {
>     Uint32 type;        /**< ::SDL_USEREVENT through ::SDL_LASTEVENT-1 */
>     Uint32 timestamp;
>     Uint32 windowID;    /**< The associated window if any */
>     Sint32 code;        /**< User defined event code */
>     void *data1;        /**< User defined data pointer */
>     void *data2;        /**< User defined data pointer */
> } SDL_UserEvent;
> 
> 
> struct SDL_SysWMmsg;
> typedef struct SDL_SysWMmsg SDL_SysWMmsg;
> 
> /**
>  *  \brief A video driver dependent system event (event.syswm.*)
>  *         This event is disabled by default, you can enable it with SDL_EventState()
>  *
>  *  \note If you want to use this event, you should include SDL_syswm.h.
>  */
> typedef struct SDL_SysWMEvent
> {
>     Uint32 type;        /**< ::SDL_SYSWMEVENT */
>     Uint32 timestamp;
>     SDL_SysWMmsg *msg;  /**< driver dependent data, defined in SDL_syswm.h */
> } SDL_SysWMEvent;
> 
> /**
>  *  \brief General event structure
>  */
> typedef union SDL_Event
> {
>     Uint32 type;                    /**< Event type, shared with all events */
>     SDL_CommonEvent common;         /**< Common event data */
>     SDL_WindowEvent window;         /**< Window event data */
>     SDL_KeyboardEvent key;          /**< Keyboard event data */
>     SDL_TextEditingEvent edit;      /**< Text editing event data */
>     SDL_TextInputEvent text;        /**< Text input event data */
>     SDL_MouseMotionEvent motion;    /**< Mouse motion event data */
>     SDL_MouseButtonEvent button;    /**< Mouse button event data */
>     SDL_MouseWheelEvent wheel;      /**< Mouse wheel event data */
>     SDL_JoyAxisEvent jaxis;         /**< Joystick axis event data */
>     SDL_JoyBallEvent jball;         /**< Joystick ball event data */
>     SDL_JoyHatEvent jhat;           /**< Joystick hat event data */
>     SDL_JoyButtonEvent jbutton;     /**< Joystick button event data */
>     SDL_JoyDeviceEvent jdevice;     /**< Joystick device change event data */
>     SDL_ControllerAxisEvent caxis;      /**< Game Controller axis event data */
>     SDL_ControllerButtonEvent cbutton;  /**< Game Controller button event data */
>     SDL_ControllerDeviceEvent cdevice;  /**< Game Controller device event data */
>     SDL_QuitEvent quit;             /**< Quit request event data */
>     SDL_UserEvent user;             /**< Custom event data */
>     SDL_SysWMEvent syswm;           /**< System dependent window event data */
>     SDL_TouchFingerEvent tfinger;   /**< Touch finger event data */
>     SDL_MultiGestureEvent mgesture; /**< Gesture event data */
>     SDL_DollarGestureEvent dgesture; /**< Gesture event data */
>     SDL_DropEvent drop;             /**< Drag and drop event data */
> 
>     /* This is necessary for ABI compatibility between Visual C++ and GCC
>        Visual C++ will respect the push pack pragma and use 52 bytes for
>        this structure, and GCC will use the alignment of the largest datatype
>        within the union, which is 8 bytes.
> 
>        So... we'll add padding to force the size to be 56 bytes for both.
>     */
>     Uint8 padding[56];
> } SDL_Event;
> 
> 
> /* Function prototypes */
> 
> /**
>  *  Pumps the event loop, gathering events from the input devices.
>  *
>  *  This function updates the event queue and internal input device state.
>  *
>  *  This should only be run in the thread that sets the video mode.
>  */
> extern DECLSPEC void SDLCALL SDL_PumpEvents(void);
> 
> /*@{*/
> typedef enum
> {
>     SDL_ADDEVENT,
>     SDL_PEEKEVENT,
>     SDL_GETEVENT
> } SDL_eventaction;
> 
> /**
>  *  Checks the event queue for messages and optionally returns them.
>  *
>  *  If \c action is ::SDL_ADDEVENT, up to \c numevents events will be added to
>  *  the back of the event queue.
>  *
>  *  If \c action is ::SDL_PEEKEVENT, up to \c numevents events at the front
>  *  of the event queue, within the specified minimum and maximum type,
>  *  will be returned and will not be removed from the queue.
>  *
>  *  If \c action is ::SDL_GETEVENT, up to \c numevents events at the front
>  *  of the event queue, within the specified minimum and maximum type,
>  *  will be returned and will be removed from the queue.
>  *
>  *  \return The number of events actually stored, or -1 if there was an error.
>  *
>  *  This function is thread-safe.
>  */
> extern DECLSPEC int SDLCALL SDL_PeepEvents(SDL_Event * events, int numevents,
>                                            SDL_eventaction action,
>                                            Uint32 minType, Uint32 maxType);
> /*@}*/
> 
> /**
>  *  Checks to see if certain event types are in the event queue.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasEvent(Uint32 type);
> extern DECLSPEC SDL_bool SDLCALL SDL_HasEvents(Uint32 minType, Uint32 maxType);
> 
> /**
>  *  This function clears events from the event queue
>  */
> extern DECLSPEC void SDLCALL SDL_FlushEvent(Uint32 type);
> extern DECLSPEC void SDLCALL SDL_FlushEvents(Uint32 minType, Uint32 maxType);
> 
> /**
>  *  \brief Polls for currently pending events.
>  *
>  *  \return 1 if there are any pending events, or 0 if there are none available.
>  *
>  *  \param event If not NULL, the next event is removed from the queue and
>  *               stored in that area.
>  */
> extern DECLSPEC int SDLCALL SDL_PollEvent(SDL_Event * event);
> 
> /**
>  *  \brief Waits indefinitely for the next available event.
>  *
>  *  \return 1, or 0 if there was an error while waiting for events.
>  *
>  *  \param event If not NULL, the next event is removed from the queue and
>  *               stored in that area.
>  */
> extern DECLSPEC int SDLCALL SDL_WaitEvent(SDL_Event * event);
> 
> /**
>  *  \brief Waits until the specified timeout (in milliseconds) for the next
>  *         available event.
>  *
>  *  \return 1, or 0 if there was an error while waiting for events.
>  *
>  *  \param event If not NULL, the next event is removed from the queue and
>  *               stored in that area.
>  *  \param timeout The timeout (in milliseconds) to wait for next event.
>  */
> extern DECLSPEC int SDLCALL SDL_WaitEventTimeout(SDL_Event * event,
>                                                  int timeout);
> 
> /**
>  *  \brief Add an event to the event queue.
>  *
>  *  \return 1 on success, 0 if the event was filtered, or -1 if the event queue
>  *          was full or there was some other error.
>  */
> extern DECLSPEC int SDLCALL SDL_PushEvent(SDL_Event * event);
> 
> typedef int (SDLCALL * SDL_EventFilter) (void *userdata, SDL_Event * event);
> 
> /**
>  *  Sets up a filter to process all events before they change internal state and
>  *  are posted to the internal event queue.
>  *
>  *  The filter is prototyped as:
>  *  \code
>  *      int SDL_EventFilter(void *userdata, SDL_Event * event);
>  *  \endcode
>  *
>  *  If the filter returns 1, then the event will be added to the internal queue.
>  *  If it returns 0, then the event will be dropped from the queue, but the
>  *  internal state will still be updated.  This allows selective filtering of
>  *  dynamically arriving events.
>  *
>  *  \warning  Be very careful of what you do in the event filter function, as
>  *            it may run in a different thread!
>  *
>  *  There is one caveat when dealing with the ::SDL_QuitEvent event type.  The
>  *  event filter is only called when the window manager desires to close the
>  *  application window.  If the event filter returns 1, then the window will
>  *  be closed, otherwise the window will remain open if possible.
>  *
>  *  If the quit event is generated by an interrupt signal, it will bypass the
>  *  internal queue and be delivered to the application at the next event poll.
>  */
> extern DECLSPEC void SDLCALL SDL_SetEventFilter(SDL_EventFilter filter,
>                                                 void *userdata);
> 
> /**
>  *  Return the current event filter - can be used to "chain" filters.
>  *  If there is no event filter set, this function returns SDL_FALSE.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_GetEventFilter(SDL_EventFilter * filter,
>                                                     void **userdata);
> 
> /**
>  *  Add a function which is called when an event is added to the queue.
>  */
> extern DECLSPEC void SDLCALL SDL_AddEventWatch(SDL_EventFilter filter,
>                                                void *userdata);
> 
> /**
>  *  Remove an event watch function added with SDL_AddEventWatch()
>  */
> extern DECLSPEC void SDLCALL SDL_DelEventWatch(SDL_EventFilter filter,
>                                                void *userdata);
> 
> /**
>  *  Run the filter function on the current event queue, removing any
>  *  events for which the filter returns 0.
>  */
> extern DECLSPEC void SDLCALL SDL_FilterEvents(SDL_EventFilter filter,
>                                               void *userdata);
> 
> /*@{*/
> #define SDL_QUERY   -1
> #define SDL_IGNORE   0
> #define SDL_DISABLE  0
> #define SDL_ENABLE   1
> 
> /**
>  *  This function allows you to set the state of processing certain events.
>  *   - If \c state is set to ::SDL_IGNORE, that event will be automatically
>  *     dropped from the event queue and will not event be filtered.
>  *   - If \c state is set to ::SDL_ENABLE, that event will be processed
>  *     normally.
>  *   - If \c state is set to ::SDL_QUERY, SDL_EventState() will return the
>  *     current processing state of the specified event.
>  */
> extern DECLSPEC Uint8 SDLCALL SDL_EventState(Uint32 type, int state);
> /*@}*/
> #define SDL_GetEventState(type) SDL_EventState(type, SDL_QUERY)
> 
> /**
>  *  This function allocates a set of user-defined events, and returns
>  *  the beginning event number for that set of events.
>  *
>  *  If there aren't enough user-defined events left, this function
>  *  returns (Uint32)-1
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_RegisterEvents(int numevents);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_events_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
Only in jni/SDL/include: SDL_filesystem.h
diff jni/SDL/include/SDL_gamecontroller.h ../android-sdl/jni/SDL2/include/SDL_gamecontroller.h
1,298c1,298
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_gamecontroller.h
<  *
<  *  Include file for SDL game controller event handling
<  */
< 
< #ifndef _SDL_gamecontroller_h
< #define _SDL_gamecontroller_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_joystick.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \file SDL_gamecontroller.h
<  *
<  *  In order to use these functions, SDL_Init() must have been called
<  *  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
<  *  for game controllers, and load appropriate drivers.
<  *
<  *  If you would like to receive controller updates while the application
<  *  is in the background, you should set the following hint before calling
<  *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS
<  */
< 
< /* The gamecontroller structure used to identify an SDL game controller */
< struct _SDL_GameController;
< typedef struct _SDL_GameController SDL_GameController;
< 
< 
< typedef enum
< {
<     SDL_CONTROLLER_BINDTYPE_NONE = 0,
<     SDL_CONTROLLER_BINDTYPE_BUTTON,
<     SDL_CONTROLLER_BINDTYPE_AXIS,
<     SDL_CONTROLLER_BINDTYPE_HAT
< } SDL_GameControllerBindType;
< 
< /**
<  *  Get the SDL joystick layer binding for this controller button/axis mapping
<  */
< typedef struct SDL_GameControllerButtonBind
< {
<     SDL_GameControllerBindType bindType;
<     union
<     {
<         int button;
<         int axis;
<         struct {
<             int hat;
<             int hat_mask;
<         } hat;
<     } value;
< 
< } SDL_GameControllerButtonBind;
< 
< 
< /**
<  *  To count the number of game controllers in the system for the following:
<  *  int nJoysticks = SDL_NumJoysticks();
<  *  int nGameControllers = 0;
<  *  for ( int i = 0; i < nJoysticks; i++ ) {
<  *      if ( SDL_IsGameController(i) ) {
<  *          nGameControllers++;
<  *      }
<  *  }
<  *
<  *  Using the SDL_HINT_GAMECONTROLLERCONFIG hint or the SDL_GameControllerAddMapping you can add support for controllers SDL is unaware of or cause an existing controller to have a different binding. The format is:
<  *  guid,name,mappings
<  *
<  *  Where GUID is the string value from SDL_JoystickGetGUIDString(), name is the human readable string for the device and mappings are controller mappings to joystick ones.
<  *  Under Windows there is a reserved GUID of "xinput" that covers any XInput devices.
<  *  The mapping format for joystick is:
<  *      bX - a joystick button, index X
<  *      hX.Y - hat X with value Y
<  *      aX - axis X of the joystick
<  *  Buttons can be used as a controller axis and vice versa.
<  *
<  *  This string shows an example of a valid mapping for a controller
<  *  "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7",
<  *
<  */
< 
< /**
<  *  Add or update an existing mapping configuration
<  *
<  * \return 1 if mapping is added, 0 if updated, -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_GameControllerAddMapping( const char* mappingString );
< 
< /**
<  *  Get a mapping string for a GUID
<  *
<  *  \return the mapping string.  Must be freed with SDL_free.  Returns NULL if no mapping is available
<  */
< extern DECLSPEC char * SDLCALL SDL_GameControllerMappingForGUID( SDL_JoystickGUID guid );
< 
< /**
<  *  Get a mapping string for an open GameController
<  *
<  *  \return the mapping string.  Must be freed with SDL_free.  Returns NULL if no mapping is available
<  */
< extern DECLSPEC char * SDLCALL SDL_GameControllerMapping( SDL_GameController * gamecontroller );
< 
< /**
<  *  Is the joystick on this index supported by the game controller interface?
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IsGameController(int joystick_index);
< 
< 
< /**
<  *  Get the implementation dependent name of a game controller.
<  *  This can be called before any controllers are opened.
<  *  If no name can be found, this function returns NULL.
<  */
< extern DECLSPEC const char *SDLCALL SDL_GameControllerNameForIndex(int joystick_index);
< 
< /**
<  *  Open a game controller for use.
<  *  The index passed as an argument refers to the N'th game controller on the system.
<  *  This index is the value which will identify this controller in future controller
<  *  events.
<  *
<  *  \return A controller identifier, or NULL if an error occurred.
<  */
< extern DECLSPEC SDL_GameController *SDLCALL SDL_GameControllerOpen(int joystick_index);
< 
< /**
<  *  Return the name for this currently opened controller
<  */
< extern DECLSPEC const char *SDLCALL SDL_GameControllerName(SDL_GameController *gamecontroller);
< 
< /**
<  *  Returns SDL_TRUE if the controller has been opened and currently connected,
<  *  or SDL_FALSE if it has not.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);
< 
< /**
<  *  Get the underlying joystick object used by a controller
<  */
< extern DECLSPEC SDL_Joystick *SDLCALL SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);
< 
< /**
<  *  Enable/disable controller event polling.
<  *
<  *  If controller events are disabled, you must call SDL_GameControllerUpdate()
<  *  yourself and check the state of the controller when you want controller
<  *  information.
<  *
<  *  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
<  */
< extern DECLSPEC int SDLCALL SDL_GameControllerEventState(int state);
< 
< /**
<  *  Update the current state of the open game controllers.
<  *
<  *  This is called automatically by the event loop if any game controller
<  *  events are enabled.
<  */
< extern DECLSPEC void SDLCALL SDL_GameControllerUpdate(void);
< 
< 
< /**
<  *  The list of axes available from a controller
<  */
< typedef enum
< {
<     SDL_CONTROLLER_AXIS_INVALID = -1,
<     SDL_CONTROLLER_AXIS_LEFTX,
<     SDL_CONTROLLER_AXIS_LEFTY,
<     SDL_CONTROLLER_AXIS_RIGHTX,
<     SDL_CONTROLLER_AXIS_RIGHTY,
<     SDL_CONTROLLER_AXIS_TRIGGERLEFT,
<     SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
<     SDL_CONTROLLER_AXIS_MAX
< } SDL_GameControllerAxis;
< 
< /**
<  *  turn this string into a axis mapping
<  */
< extern DECLSPEC SDL_GameControllerAxis SDLCALL SDL_GameControllerGetAxisFromString(const char *pchString);
< 
< /**
<  *  turn this axis enum into a string mapping
<  */
< extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
< 
< /**
<  *  Get the SDL joystick layer binding for this controller button mapping
<  */
< extern DECLSPEC SDL_GameControllerButtonBind SDLCALL
< SDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller,
<                                  SDL_GameControllerAxis axis);
< 
< /**
<  *  Get the current state of an axis control on a game controller.
<  *
<  *  The state is a value ranging from -32768 to 32767.
<  *
<  *  The axis indices start at index 0.
<  */
< extern DECLSPEC Sint16 SDLCALL
< SDL_GameControllerGetAxis(SDL_GameController *gamecontroller,
<                           SDL_GameControllerAxis axis);
< 
< /**
<  *  The list of buttons available from a controller
<  */
< typedef enum
< {
<     SDL_CONTROLLER_BUTTON_INVALID = -1,
<     SDL_CONTROLLER_BUTTON_A,
<     SDL_CONTROLLER_BUTTON_B,
<     SDL_CONTROLLER_BUTTON_X,
<     SDL_CONTROLLER_BUTTON_Y,
<     SDL_CONTROLLER_BUTTON_BACK,
<     SDL_CONTROLLER_BUTTON_GUIDE,
<     SDL_CONTROLLER_BUTTON_START,
<     SDL_CONTROLLER_BUTTON_LEFTSTICK,
<     SDL_CONTROLLER_BUTTON_RIGHTSTICK,
<     SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
<     SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
<     SDL_CONTROLLER_BUTTON_DPAD_UP,
<     SDL_CONTROLLER_BUTTON_DPAD_DOWN,
<     SDL_CONTROLLER_BUTTON_DPAD_LEFT,
<     SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
<     SDL_CONTROLLER_BUTTON_MAX
< } SDL_GameControllerButton;
< 
< /**
<  *  turn this string into a button mapping
<  */
< extern DECLSPEC SDL_GameControllerButton SDLCALL SDL_GameControllerGetButtonFromString(const char *pchString);
< 
< /**
<  *  turn this button enum into a string mapping
<  */
< extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
< 
< /**
<  *  Get the SDL joystick layer binding for this controller button mapping
<  */
< extern DECLSPEC SDL_GameControllerButtonBind SDLCALL
< SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,
<                                    SDL_GameControllerButton button);
< 
< 
< /**
<  *  Get the current state of a button on a game controller.
<  *
<  *  The button indices start at index 0.
<  */
< extern DECLSPEC Uint8 SDLCALL SDL_GameControllerGetButton(SDL_GameController *gamecontroller,
<                                                           SDL_GameControllerButton button);
< 
< /**
<  *  Close a controller previously opened with SDL_GameControllerOpen().
<  */
< extern DECLSPEC void SDLCALL SDL_GameControllerClose(SDL_GameController *gamecontroller);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_gamecontroller_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_gamecontroller.h
>  *
>  *  Include file for SDL game controller event handling
>  */
> 
> #ifndef _SDL_gamecontroller_h
> #define _SDL_gamecontroller_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_joystick.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \file SDL_gamecontroller.h
>  *
>  *  In order to use these functions, SDL_Init() must have been called
>  *  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
>  *  for game controllers, and load appropriate drivers.
>  *
>  *  If you would like to receive controller updates while the application
>  *  is in the background, you should set the following hint before calling
>  *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS
>  */
> 
> /* The gamecontroller structure used to identify an SDL game controller */
> struct _SDL_GameController;
> typedef struct _SDL_GameController SDL_GameController;
> 
> 
> typedef enum
> {
>     SDL_CONTROLLER_BINDTYPE_NONE = 0,
>     SDL_CONTROLLER_BINDTYPE_BUTTON,
>     SDL_CONTROLLER_BINDTYPE_AXIS,
>     SDL_CONTROLLER_BINDTYPE_HAT
> } SDL_GameControllerBindType;
> 
> /**
>  *  Get the SDL joystick layer binding for this controller button/axis mapping
>  */
> typedef struct SDL_GameControllerButtonBind
> {
>     SDL_GameControllerBindType bindType;
>     union
>     {
>         int button;
>         int axis;
>         struct {
>             int hat;
>             int hat_mask;
>         } hat;
>     } value;
> 
> } SDL_GameControllerButtonBind;
> 
> 
> /**
>  *  To count the number of game controllers in the system for the following:
>  *  int nJoysticks = SDL_NumJoysticks();
>  *  int nGameControllers = 0;
>  *  for ( int i = 0; i < nJoysticks; i++ ) {
>  *      if ( SDL_IsGameController(i) ) {
>  *          nGameControllers++;
>  *      }
>  *  }
>  *
>  *  Using the SDL_HINT_GAMECONTROLLERCONFIG hint or the SDL_GameControllerAddMapping you can add support for controllers SDL is unaware of or cause an existing controller to have a different binding. The format is:
>  *  guid,name,mappings
>  *
>  *  Where GUID is the string value from SDL_JoystickGetGUIDString(), name is the human readable string for the device and mappings are controller mappings to joystick ones.
>  *  Under Windows there is a reserved GUID of "xinput" that covers any XInput devices.
>  *  The mapping format for joystick is:
>  *      bX - a joystick button, index X
>  *      hX.Y - hat X with value Y
>  *      aX - axis X of the joystick
>  *  Buttons can be used as a controller axis and vice versa.
>  *
>  *  This string shows an example of a valid mapping for a controller
>  *  "341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,dpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger:b7",
>  *
>  */
> 
> /**
>  *  Add or update an existing mapping configuration
>  *
>  * \return 1 if mapping is added, 0 if updated, -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_GameControllerAddMapping( const char* mappingString );
> 
> /**
>  *  Get a mapping string for a GUID
>  *
>  *  \return the mapping string.  Must be freed with SDL_free.  Returns NULL if no mapping is available
>  */
> extern DECLSPEC char * SDLCALL SDL_GameControllerMappingForGUID( SDL_JoystickGUID guid );
> 
> /**
>  *  Get a mapping string for an open GameController
>  *
>  *  \return the mapping string.  Must be freed with SDL_free.  Returns NULL if no mapping is available
>  */
> extern DECLSPEC char * SDLCALL SDL_GameControllerMapping( SDL_GameController * gamecontroller );
> 
> /**
>  *  Is the joystick on this index supported by the game controller interface?
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IsGameController(int joystick_index);
> 
> 
> /**
>  *  Get the implementation dependent name of a game controller.
>  *  This can be called before any controllers are opened.
>  *  If no name can be found, this function returns NULL.
>  */
> extern DECLSPEC const char *SDLCALL SDL_GameControllerNameForIndex(int joystick_index);
> 
> /**
>  *  Open a game controller for use.
>  *  The index passed as an argument refers to the N'th game controller on the system.
>  *  This index is the value which will identify this controller in future controller
>  *  events.
>  *
>  *  \return A controller identifier, or NULL if an error occurred.
>  */
> extern DECLSPEC SDL_GameController *SDLCALL SDL_GameControllerOpen(int joystick_index);
> 
> /**
>  *  Return the name for this currently opened controller
>  */
> extern DECLSPEC const char *SDLCALL SDL_GameControllerName(SDL_GameController *gamecontroller);
> 
> /**
>  *  Returns SDL_TRUE if the controller has been opened and currently connected,
>  *  or SDL_FALSE if it has not.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_GameControllerGetAttached(SDL_GameController *gamecontroller);
> 
> /**
>  *  Get the underlying joystick object used by a controller
>  */
> extern DECLSPEC SDL_Joystick *SDLCALL SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller);
> 
> /**
>  *  Enable/disable controller event polling.
>  *
>  *  If controller events are disabled, you must call SDL_GameControllerUpdate()
>  *  yourself and check the state of the controller when you want controller
>  *  information.
>  *
>  *  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
>  */
> extern DECLSPEC int SDLCALL SDL_GameControllerEventState(int state);
> 
> /**
>  *  Update the current state of the open game controllers.
>  *
>  *  This is called automatically by the event loop if any game controller
>  *  events are enabled.
>  */
> extern DECLSPEC void SDLCALL SDL_GameControllerUpdate(void);
> 
> 
> /**
>  *  The list of axes available from a controller
>  */
> typedef enum
> {
>     SDL_CONTROLLER_AXIS_INVALID = -1,
>     SDL_CONTROLLER_AXIS_LEFTX,
>     SDL_CONTROLLER_AXIS_LEFTY,
>     SDL_CONTROLLER_AXIS_RIGHTX,
>     SDL_CONTROLLER_AXIS_RIGHTY,
>     SDL_CONTROLLER_AXIS_TRIGGERLEFT,
>     SDL_CONTROLLER_AXIS_TRIGGERRIGHT,
>     SDL_CONTROLLER_AXIS_MAX
> } SDL_GameControllerAxis;
> 
> /**
>  *  turn this string into a axis mapping
>  */
> extern DECLSPEC SDL_GameControllerAxis SDLCALL SDL_GameControllerGetAxisFromString(const char *pchString);
> 
> /**
>  *  turn this axis enum into a string mapping
>  */
> extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis);
> 
> /**
>  *  Get the SDL joystick layer binding for this controller button mapping
>  */
> extern DECLSPEC SDL_GameControllerButtonBind SDLCALL
> SDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller,
>                                  SDL_GameControllerAxis axis);
> 
> /**
>  *  Get the current state of an axis control on a game controller.
>  *
>  *  The state is a value ranging from -32768 to 32767.
>  *
>  *  The axis indices start at index 0.
>  */
> extern DECLSPEC Sint16 SDLCALL
> SDL_GameControllerGetAxis(SDL_GameController *gamecontroller,
>                           SDL_GameControllerAxis axis);
> 
> /**
>  *  The list of buttons available from a controller
>  */
> typedef enum
> {
>     SDL_CONTROLLER_BUTTON_INVALID = -1,
>     SDL_CONTROLLER_BUTTON_A,
>     SDL_CONTROLLER_BUTTON_B,
>     SDL_CONTROLLER_BUTTON_X,
>     SDL_CONTROLLER_BUTTON_Y,
>     SDL_CONTROLLER_BUTTON_BACK,
>     SDL_CONTROLLER_BUTTON_GUIDE,
>     SDL_CONTROLLER_BUTTON_START,
>     SDL_CONTROLLER_BUTTON_LEFTSTICK,
>     SDL_CONTROLLER_BUTTON_RIGHTSTICK,
>     SDL_CONTROLLER_BUTTON_LEFTSHOULDER,
>     SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,
>     SDL_CONTROLLER_BUTTON_DPAD_UP,
>     SDL_CONTROLLER_BUTTON_DPAD_DOWN,
>     SDL_CONTROLLER_BUTTON_DPAD_LEFT,
>     SDL_CONTROLLER_BUTTON_DPAD_RIGHT,
>     SDL_CONTROLLER_BUTTON_MAX
> } SDL_GameControllerButton;
> 
> /**
>  *  turn this string into a button mapping
>  */
> extern DECLSPEC SDL_GameControllerButton SDLCALL SDL_GameControllerGetButtonFromString(const char *pchString);
> 
> /**
>  *  turn this button enum into a string mapping
>  */
> extern DECLSPEC const char* SDLCALL SDL_GameControllerGetStringForButton(SDL_GameControllerButton button);
> 
> /**
>  *  Get the SDL joystick layer binding for this controller button mapping
>  */
> extern DECLSPEC SDL_GameControllerButtonBind SDLCALL
> SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller,
>                                    SDL_GameControllerButton button);
> 
> 
> /**
>  *  Get the current state of a button on a game controller.
>  *
>  *  The button indices start at index 0.
>  */
> extern DECLSPEC Uint8 SDLCALL SDL_GameControllerGetButton(SDL_GameController *gamecontroller,
>                                                           SDL_GameControllerButton button);
> 
> /**
>  *  Close a controller previously opened with SDL_GameControllerOpen().
>  */
> extern DECLSPEC void SDLCALL SDL_GameControllerClose(SDL_GameController *gamecontroller);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_gamecontroller_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_gesture.h ../android-sdl/jni/SDL2/include/SDL_gesture.h
1,87c1,87
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_gesture.h
<  *
<  *  Include file for SDL gesture event handling.
<  */
< 
< #ifndef _SDL_gesture_h
< #define _SDL_gesture_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_video.h"
< 
< #include "SDL_touch.h"
< 
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< typedef Sint64 SDL_GestureID;
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Begin Recording a gesture on the specified touch, or all touches (-1)
<  *
<  *
<  */
< extern DECLSPEC int SDLCALL SDL_RecordGesture(SDL_TouchID touchId);
< 
< 
< /**
<  *  \brief Save all currently loaded Dollar Gesture templates
<  *
<  *
<  */
< extern DECLSPEC int SDLCALL SDL_SaveAllDollarTemplates(SDL_RWops *src);
< 
< /**
<  *  \brief Save a currently loaded Dollar Gesture template
<  *
<  *
<  */
< extern DECLSPEC int SDLCALL SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *src);
< 
< 
< /**
<  *  \brief Load Dollar Gesture templates from a file
<  *
<  *
<  */
< extern DECLSPEC int SDLCALL SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_gesture_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_gesture.h
>  *
>  *  Include file for SDL gesture event handling.
>  */
> 
> #ifndef _SDL_gesture_h
> #define _SDL_gesture_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_video.h"
> 
> #include "SDL_touch.h"
> 
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> typedef Sint64 SDL_GestureID;
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Begin Recording a gesture on the specified touch, or all touches (-1)
>  *
>  *
>  */
> extern DECLSPEC int SDLCALL SDL_RecordGesture(SDL_TouchID touchId);
> 
> 
> /**
>  *  \brief Save all currently loaded Dollar Gesture templates
>  *
>  *
>  */
> extern DECLSPEC int SDLCALL SDL_SaveAllDollarTemplates(SDL_RWops *src);
> 
> /**
>  *  \brief Save a currently loaded Dollar Gesture template
>  *
>  *
>  */
> extern DECLSPEC int SDLCALL SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *src);
> 
> 
> /**
>  *  \brief Load Dollar Gesture templates from a file
>  *
>  *
>  */
> extern DECLSPEC int SDLCALL SDL_LoadDollarTemplates(SDL_TouchID touchId, SDL_RWops *src);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_gesture_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_haptic.h ../android-sdl/jni/SDL2/include/SDL_haptic.h
1,1225c1,1225
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_haptic.h
<  *
<  *  \brief The SDL Haptic subsystem allows you to control haptic (force feedback)
<  *         devices.
<  *
<  *  The basic usage is as follows:
<  *   - Initialize the Subsystem (::SDL_INIT_HAPTIC).
<  *   - Open a Haptic Device.
<  *    - SDL_HapticOpen() to open from index.
<  *    - SDL_HapticOpenFromJoystick() to open from an existing joystick.
<  *   - Create an effect (::SDL_HapticEffect).
<  *   - Upload the effect with SDL_HapticNewEffect().
<  *   - Run the effect with SDL_HapticRunEffect().
<  *   - (optional) Free the effect with SDL_HapticDestroyEffect().
<  *   - Close the haptic device with SDL_HapticClose().
<  *
<  * \par Simple rumble example:
<  * \code
<  *    SDL_Haptic *haptic;
<  *
<  *    // Open the device
<  *    haptic = SDL_HapticOpen( 0 );
<  *    if (haptic == NULL)
<  *       return -1;
<  *
<  *    // Initialize simple rumble
<  *    if (SDL_HapticRumbleInit( haptic ) != 0)
<  *       return -1;
<  *
<  *    // Play effect at 50% strength for 2 seconds
<  *    if (SDL_HapticRumblePlay( haptic, 0.5, 2000 ) != 0)
<  *       return -1;
<  *    SDL_Delay( 2000 );
<  *
<  *    // Clean up
<  *    SDL_HapticClose( haptic );
<  * \endcode
<  *
<  * \par Complete example:
<  * \code
<  * int test_haptic( SDL_Joystick * joystick ) {
<  *    SDL_Haptic *haptic;
<  *    SDL_HapticEffect effect;
<  *    int effect_id;
<  *
<  *    // Open the device
<  *    haptic = SDL_HapticOpenFromJoystick( joystick );
<  *    if (haptic == NULL) return -1; // Most likely joystick isn't haptic
<  *
<  *    // See if it can do sine waves
<  *    if ((SDL_HapticQuery(haptic) & SDL_HAPTIC_SINE)==0) {
<  *       SDL_HapticClose(haptic); // No sine effect
<  *       return -1;
<  *    }
<  *
<  *    // Create the effect
<  *    memset( &effect, 0, sizeof(SDL_HapticEffect) ); // 0 is safe default
<  *    effect.type = SDL_HAPTIC_SINE;
<  *    effect.periodic.direction.type = SDL_HAPTIC_POLAR; // Polar coordinates
<  *    effect.periodic.direction.dir[0] = 18000; // Force comes from south
<  *    effect.periodic.period = 1000; // 1000 ms
<  *    effect.periodic.magnitude = 20000; // 20000/32767 strength
<  *    effect.periodic.length = 5000; // 5 seconds long
<  *    effect.periodic.attack_length = 1000; // Takes 1 second to get max strength
<  *    effect.periodic.fade_length = 1000; // Takes 1 second to fade away
<  *
<  *    // Upload the effect
<  *    effect_id = SDL_HapticNewEffect( haptic, &effect );
<  *
<  *    // Test the effect
<  *    SDL_HapticRunEffect( haptic, effect_id, 1 );
<  *    SDL_Delay( 5000); // Wait for the effect to finish
<  *
<  *    // We destroy the effect, although closing the device also does this
<  *    SDL_HapticDestroyEffect( haptic, effect_id );
<  *
<  *    // Close the device
<  *    SDL_HapticClose(haptic);
<  *
<  *    return 0; // Success
<  * }
<  * \endcode
<  *
<  * You can also find out more information on my blog:
<  * http://bobbens.dyndns.org/journal/2010/sdl_haptic/
<  *
<  * \author Edgar Simo Serra
<  */
< 
< #ifndef _SDL_haptic_h
< #define _SDL_haptic_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_joystick.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif /* __cplusplus */
< 
< /**
<  *  \typedef SDL_Haptic
<  *
<  *  \brief The haptic structure used to identify an SDL haptic.
<  *
<  *  \sa SDL_HapticOpen
<  *  \sa SDL_HapticOpenFromJoystick
<  *  \sa SDL_HapticClose
<  */
< struct _SDL_Haptic;
< typedef struct _SDL_Haptic SDL_Haptic;
< 
< 
< /**
<  *  \name Haptic features
<  *
<  *  Different haptic features a device can have.
<  */
< /* @{ */
< 
< /**
<  *  \name Haptic effects
<  */
< /* @{ */
< 
< /**
<  *  \brief Constant effect supported.
<  *
<  *  Constant haptic effect.
<  *
<  *  \sa SDL_HapticCondition
<  */
< #define SDL_HAPTIC_CONSTANT   (1<<0)
< 
< /**
<  *  \brief Sine wave effect supported.
<  *
<  *  Periodic haptic effect that simulates sine waves.
<  *
<  *  \sa SDL_HapticPeriodic
<  */
< #define SDL_HAPTIC_SINE       (1<<1)
< 
< /**
<  *  \brief Left/Right effect supported.
<  *
<  *  Haptic effect for direct control over high/low frequency motors.
<  *
<  *  \sa SDL_HapticLeftRight
<  * \warning this value was SDL_HAPTIC_SQUARE right before 2.0.0 shipped. Sorry,
<  *          we ran out of bits, and this is important for XInput devices.
<  */
< #define SDL_HAPTIC_LEFTRIGHT     (1<<2)
< 
< /* !!! FIXME: put this back when we have more bits in 2.1 */
< /* #define SDL_HAPTIC_SQUARE     (1<<2) */
< 
< /**
<  *  \brief Triangle wave effect supported.
<  *
<  *  Periodic haptic effect that simulates triangular waves.
<  *
<  *  \sa SDL_HapticPeriodic
<  */
< #define SDL_HAPTIC_TRIANGLE   (1<<3)
< 
< /**
<  *  \brief Sawtoothup wave effect supported.
<  *
<  *  Periodic haptic effect that simulates saw tooth up waves.
<  *
<  *  \sa SDL_HapticPeriodic
<  */
< #define SDL_HAPTIC_SAWTOOTHUP (1<<4)
< 
< /**
<  *  \brief Sawtoothdown wave effect supported.
<  *
<  *  Periodic haptic effect that simulates saw tooth down waves.
<  *
<  *  \sa SDL_HapticPeriodic
<  */
< #define SDL_HAPTIC_SAWTOOTHDOWN (1<<5)
< 
< /**
<  *  \brief Ramp effect supported.
<  *
<  *  Ramp haptic effect.
<  *
<  *  \sa SDL_HapticRamp
<  */
< #define SDL_HAPTIC_RAMP       (1<<6)
< 
< /**
<  *  \brief Spring effect supported - uses axes position.
<  *
<  *  Condition haptic effect that simulates a spring.  Effect is based on the
<  *  axes position.
<  *
<  *  \sa SDL_HapticCondition
<  */
< #define SDL_HAPTIC_SPRING     (1<<7)
< 
< /**
<  *  \brief Damper effect supported - uses axes velocity.
<  *
<  *  Condition haptic effect that simulates dampening.  Effect is based on the
<  *  axes velocity.
<  *
<  *  \sa SDL_HapticCondition
<  */
< #define SDL_HAPTIC_DAMPER     (1<<8)
< 
< /**
<  *  \brief Inertia effect supported - uses axes acceleration.
<  *
<  *  Condition haptic effect that simulates inertia.  Effect is based on the axes
<  *  acceleration.
<  *
<  *  \sa SDL_HapticCondition
<  */
< #define SDL_HAPTIC_INERTIA    (1<<9)
< 
< /**
<  *  \brief Friction effect supported - uses axes movement.
<  *
<  *  Condition haptic effect that simulates friction.  Effect is based on the
<  *  axes movement.
<  *
<  *  \sa SDL_HapticCondition
<  */
< #define SDL_HAPTIC_FRICTION   (1<<10)
< 
< /**
<  *  \brief Custom effect is supported.
<  *
<  *  User defined custom haptic effect.
<  */
< #define SDL_HAPTIC_CUSTOM     (1<<11)
< 
< /* @} *//* Haptic effects */
< 
< /* These last few are features the device has, not effects */
< 
< /**
<  *  \brief Device can set global gain.
<  *
<  *  Device supports setting the global gain.
<  *
<  *  \sa SDL_HapticSetGain
<  */
< #define SDL_HAPTIC_GAIN       (1<<12)
< 
< /**
<  *  \brief Device can set autocenter.
<  *
<  *  Device supports setting autocenter.
<  *
<  *  \sa SDL_HapticSetAutocenter
<  */
< #define SDL_HAPTIC_AUTOCENTER (1<<13)
< 
< /**
<  *  \brief Device can be queried for effect status.
<  *
<  *  Device can be queried for effect status.
<  *
<  *  \sa SDL_HapticGetEffectStatus
<  */
< #define SDL_HAPTIC_STATUS     (1<<14)
< 
< /**
<  *  \brief Device can be paused.
<  *
<  *  \sa SDL_HapticPause
<  *  \sa SDL_HapticUnpause
<  */
< #define SDL_HAPTIC_PAUSE      (1<<15)
< 
< 
< /**
<  * \name Direction encodings
<  */
< /* @{ */
< 
< /**
<  *  \brief Uses polar coordinates for the direction.
<  *
<  *  \sa SDL_HapticDirection
<  */
< #define SDL_HAPTIC_POLAR      0
< 
< /**
<  *  \brief Uses cartesian coordinates for the direction.
<  *
<  *  \sa SDL_HapticDirection
<  */
< #define SDL_HAPTIC_CARTESIAN  1
< 
< /**
<  *  \brief Uses spherical coordinates for the direction.
<  *
<  *  \sa SDL_HapticDirection
<  */
< #define SDL_HAPTIC_SPHERICAL  2
< 
< /* @} *//* Direction encodings */
< 
< /* @} *//* Haptic features */
< 
< /*
<  * Misc defines.
<  */
< 
< /**
<  * \brief Used to play a device an infinite number of times.
<  *
<  * \sa SDL_HapticRunEffect
<  */
< #define SDL_HAPTIC_INFINITY   4294967295U
< 
< 
< /**
<  *  \brief Structure that represents a haptic direction.
<  *
<  *  Directions can be specified by:
<  *   - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.
<  *   - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.
<  *   - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.
<  *
<  *  Cardinal directions of the haptic device are relative to the positioning
<  *  of the device.  North is considered to be away from the user.
<  *
<  *  The following diagram represents the cardinal directions:
<  *  \verbatim
<                  .--.
<                  |__| .-------.
<                  |=.| |.-----.|
<                  |--| ||     ||
<                  |  | |'-----'|
<                  |__|~')_____('
<                    [ COMPUTER ]
< 
< 
<                      North (0,-1)
<                          ^
<                          |
<                          |
<     (1,0)  West <----[ HAPTIC ]----> East (-1,0)
<                          |
<                          |
<                          v
<                       South (0,1)
< 
< 
<                       [ USER ]
<                         \|||/
<                         (o o)
<                   ---ooO-(_)-Ooo---
<     \endverbatim
<  *
<  *  If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a
<  *  degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses
<  *  the first \c dir parameter.  The cardinal directions would be:
<  *   - North: 0 (0 degrees)
<  *   - East: 9000 (90 degrees)
<  *   - South: 18000 (180 degrees)
<  *   - West: 27000 (270 degrees)
<  *
<  *  If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions
<  *  (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses
<  *  the first three \c dir parameters.  The cardinal directions would be:
<  *   - North:  0,-1, 0
<  *   - East:  -1, 0, 0
<  *   - South:  0, 1, 0
<  *   - West:   1, 0, 0
<  *
<  *  The Z axis represents the height of the effect if supported, otherwise
<  *  it's unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you
<  *  can use any multiple you want, only the direction matters.
<  *
<  *  If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.
<  *  The first two \c dir parameters are used.  The \c dir parameters are as
<  *  follows (all values are in hundredths of degrees):
<  *   - Degrees from (1, 0) rotated towards (0, 1).
<  *   - Degrees towards (0, 0, 1) (device needs at least 3 axes).
<  *
<  *
<  *  Example of force coming from the south with all encodings (force coming
<  *  from the south means the user will have to pull the stick to counteract):
<  *  \code
<  *  SDL_HapticDirection direction;
<  *
<  *  // Cartesian directions
<  *  direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.
<  *  direction.dir[0] = 0; // X position
<  *  direction.dir[1] = 1; // Y position
<  *  // Assuming the device has 2 axes, we don't need to specify third parameter.
<  *
<  *  // Polar directions
<  *  direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.
<  *  direction.dir[0] = 18000; // Polar only uses first parameter
<  *
<  *  // Spherical coordinates
<  *  direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
<  *  direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.
<  *  \endcode
<  *
<  *  \sa SDL_HAPTIC_POLAR
<  *  \sa SDL_HAPTIC_CARTESIAN
<  *  \sa SDL_HAPTIC_SPHERICAL
<  *  \sa SDL_HapticEffect
<  *  \sa SDL_HapticNumAxes
<  */
< typedef struct SDL_HapticDirection
< {
<     Uint8 type;         /**< The type of encoding. */
<     Sint32 dir[3];      /**< The encoded direction. */
< } SDL_HapticDirection;
< 
< 
< /**
<  *  \brief A structure containing a template for a Constant effect.
<  *
<  *  The struct is exclusive to the ::SDL_HAPTIC_CONSTANT effect.
<  *
<  *  A constant effect applies a constant force in the specified direction
<  *  to the joystick.
<  *
<  *  \sa SDL_HAPTIC_CONSTANT
<  *  \sa SDL_HapticEffect
<  */
< typedef struct SDL_HapticConstant
< {
<     /* Header */
<     Uint16 type;            /**< ::SDL_HAPTIC_CONSTANT */
<     SDL_HapticDirection direction;  /**< Direction of the effect. */
< 
<     /* Replay */
<     Uint32 length;          /**< Duration of the effect. */
<     Uint16 delay;           /**< Delay before starting the effect. */
< 
<     /* Trigger */
<     Uint16 button;          /**< Button that triggers the effect. */
<     Uint16 interval;        /**< How soon it can be triggered again after button. */
< 
<     /* Constant */
<     Sint16 level;           /**< Strength of the constant effect. */
< 
<     /* Envelope */
<     Uint16 attack_length;   /**< Duration of the attack. */
<     Uint16 attack_level;    /**< Level at the start of the attack. */
<     Uint16 fade_length;     /**< Duration of the fade. */
<     Uint16 fade_level;      /**< Level at the end of the fade. */
< } SDL_HapticConstant;
< 
< /**
<  *  \brief A structure containing a template for a Periodic effect.
<  *
<  *  The struct handles the following effects:
<  *   - ::SDL_HAPTIC_SINE
<  *   - ::SDL_HAPTIC_LEFTRIGHT
<  *   - ::SDL_HAPTIC_TRIANGLE
<  *   - ::SDL_HAPTIC_SAWTOOTHUP
<  *   - ::SDL_HAPTIC_SAWTOOTHDOWN
<  *
<  *  A periodic effect consists in a wave-shaped effect that repeats itself
<  *  over time.  The type determines the shape of the wave and the parameters
<  *  determine the dimensions of the wave.
<  *
<  *  Phase is given by hundredth of a cycle meaning that giving the phase a value
<  *  of 9000 will displace it 25% of its period.  Here are sample values:
<  *   -     0: No phase displacement.
<  *   -  9000: Displaced 25% of its period.
<  *   - 18000: Displaced 50% of its period.
<  *   - 27000: Displaced 75% of its period.
<  *   - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.
<  *
<  *  Examples:
<  *  \verbatim
<     SDL_HAPTIC_SINE
<       __      __      __      __
<      /  \    /  \    /  \    /
<     /    \__/    \__/    \__/
< 
<     SDL_HAPTIC_SQUARE
<      __    __    __    __    __
<     |  |  |  |  |  |  |  |  |  |
<     |  |__|  |__|  |__|  |__|  |
< 
<     SDL_HAPTIC_TRIANGLE
<       /\    /\    /\    /\    /\
<      /  \  /  \  /  \  /  \  /
<     /    \/    \/    \/    \/
< 
<     SDL_HAPTIC_SAWTOOTHUP
<       /|  /|  /|  /|  /|  /|  /|
<      / | / | / | / | / | / | / |
<     /  |/  |/  |/  |/  |/  |/  |
< 
<     SDL_HAPTIC_SAWTOOTHDOWN
<     \  |\  |\  |\  |\  |\  |\  |
<      \ | \ | \ | \ | \ | \ | \ |
<       \|  \|  \|  \|  \|  \|  \|
<     \endverbatim
<  *
<  *  \sa SDL_HAPTIC_SINE
<  *  \sa SDL_HAPTIC_LEFTRIGHT
<  *  \sa SDL_HAPTIC_TRIANGLE
<  *  \sa SDL_HAPTIC_SAWTOOTHUP
<  *  \sa SDL_HAPTIC_SAWTOOTHDOWN
<  *  \sa SDL_HapticEffect
<  */
< typedef struct SDL_HapticPeriodic
< {
<     /* Header */
<     Uint16 type;        /**< ::SDL_HAPTIC_SINE, ::SDL_HAPTIC_LEFTRIGHT,
<                              ::SDL_HAPTIC_TRIANGLE, ::SDL_HAPTIC_SAWTOOTHUP or
<                              ::SDL_HAPTIC_SAWTOOTHDOWN */
<     SDL_HapticDirection direction;  /**< Direction of the effect. */
< 
<     /* Replay */
<     Uint32 length;      /**< Duration of the effect. */
<     Uint16 delay;       /**< Delay before starting the effect. */
< 
<     /* Trigger */
<     Uint16 button;      /**< Button that triggers the effect. */
<     Uint16 interval;    /**< How soon it can be triggered again after button. */
< 
<     /* Periodic */
<     Uint16 period;      /**< Period of the wave. */
<     Sint16 magnitude;   /**< Peak value. */
<     Sint16 offset;      /**< Mean value of the wave. */
<     Uint16 phase;       /**< Horizontal shift given by hundredth of a cycle. */
< 
<     /* Envelope */
<     Uint16 attack_length;   /**< Duration of the attack. */
<     Uint16 attack_level;    /**< Level at the start of the attack. */
<     Uint16 fade_length; /**< Duration of the fade. */
<     Uint16 fade_level;  /**< Level at the end of the fade. */
< } SDL_HapticPeriodic;
< 
< /**
<  *  \brief A structure containing a template for a Condition effect.
<  *
<  *  The struct handles the following effects:
<  *   - ::SDL_HAPTIC_SPRING: Effect based on axes position.
<  *   - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.
<  *   - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.
<  *   - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.
<  *
<  *  Direction is handled by condition internals instead of a direction member.
<  *  The condition effect specific members have three parameters.  The first
<  *  refers to the X axis, the second refers to the Y axis and the third
<  *  refers to the Z axis.  The right terms refer to the positive side of the
<  *  axis and the left terms refer to the negative side of the axis.  Please
<  *  refer to the ::SDL_HapticDirection diagram for which side is positive and
<  *  which is negative.
<  *
<  *  \sa SDL_HapticDirection
<  *  \sa SDL_HAPTIC_SPRING
<  *  \sa SDL_HAPTIC_DAMPER
<  *  \sa SDL_HAPTIC_INERTIA
<  *  \sa SDL_HAPTIC_FRICTION
<  *  \sa SDL_HapticEffect
<  */
< typedef struct SDL_HapticCondition
< {
<     /* Header */
<     Uint16 type;            /**< ::SDL_HAPTIC_SPRING, ::SDL_HAPTIC_DAMPER,
<                                  ::SDL_HAPTIC_INERTIA or ::SDL_HAPTIC_FRICTION */
<     SDL_HapticDirection direction;  /**< Direction of the effect - Not used ATM. */
< 
<     /* Replay */
<     Uint32 length;          /**< Duration of the effect. */
<     Uint16 delay;           /**< Delay before starting the effect. */
< 
<     /* Trigger */
<     Uint16 button;          /**< Button that triggers the effect. */
<     Uint16 interval;        /**< How soon it can be triggered again after button. */
< 
<     /* Condition */
<     Uint16 right_sat[3];    /**< Level when joystick is to the positive side. */
<     Uint16 left_sat[3];     /**< Level when joystick is to the negative side. */
<     Sint16 right_coeff[3];  /**< How fast to increase the force towards the positive side. */
<     Sint16 left_coeff[3];   /**< How fast to increase the force towards the negative side. */
<     Uint16 deadband[3];     /**< Size of the dead zone. */
<     Sint16 center[3];       /**< Position of the dead zone. */
< } SDL_HapticCondition;
< 
< /**
<  *  \brief A structure containing a template for a Ramp effect.
<  *
<  *  This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.
<  *
<  *  The ramp effect starts at start strength and ends at end strength.
<  *  It augments in linear fashion.  If you use attack and fade with a ramp
<  *  the effects get added to the ramp effect making the effect become
<  *  quadratic instead of linear.
<  *
<  *  \sa SDL_HAPTIC_RAMP
<  *  \sa SDL_HapticEffect
<  */
< typedef struct SDL_HapticRamp
< {
<     /* Header */
<     Uint16 type;            /**< ::SDL_HAPTIC_RAMP */
<     SDL_HapticDirection direction;  /**< Direction of the effect. */
< 
<     /* Replay */
<     Uint32 length;          /**< Duration of the effect. */
<     Uint16 delay;           /**< Delay before starting the effect. */
< 
<     /* Trigger */
<     Uint16 button;          /**< Button that triggers the effect. */
<     Uint16 interval;        /**< How soon it can be triggered again after button. */
< 
<     /* Ramp */
<     Sint16 start;           /**< Beginning strength level. */
<     Sint16 end;             /**< Ending strength level. */
< 
<     /* Envelope */
<     Uint16 attack_length;   /**< Duration of the attack. */
<     Uint16 attack_level;    /**< Level at the start of the attack. */
<     Uint16 fade_length;     /**< Duration of the fade. */
<     Uint16 fade_level;      /**< Level at the end of the fade. */
< } SDL_HapticRamp;
< 
< /**
<  * \brief A structure containing a template for a Left/Right effect.
<  *
<  * This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.
<  *
<  * The Left/Right effect is used to explicitly control the large and small
<  * motors, commonly found in modern game controllers. One motor is high
<  * frequency, the other is low frequency.
<  *
<  * \sa SDL_HAPTIC_LEFTRIGHT
<  * \sa SDL_HapticEffect
<  */
< typedef struct SDL_HapticLeftRight
< {
<     /* Header */
<     Uint16 type;            /**< ::SDL_HAPTIC_LEFTRIGHT */
< 
<     /* Replay */
<     Uint32 length;          /**< Duration of the effect. */
< 
<     /* Rumble */
<     Uint16 large_magnitude; /**< Control of the large controller motor. */
<     Uint16 small_magnitude; /**< Control of the small controller motor. */
< } SDL_HapticLeftRight;
< 
< /**
<  *  \brief A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.
<  *
<  *  A custom force feedback effect is much like a periodic effect, where the
<  *  application can define its exact shape.  You will have to allocate the
<  *  data yourself.  Data should consist of channels * samples Uint16 samples.
<  *
<  *  If channels is one, the effect is rotated using the defined direction.
<  *  Otherwise it uses the samples in data for the different axes.
<  *
<  *  \sa SDL_HAPTIC_CUSTOM
<  *  \sa SDL_HapticEffect
<  */
< typedef struct SDL_HapticCustom
< {
<     /* Header */
<     Uint16 type;            /**< ::SDL_HAPTIC_CUSTOM */
<     SDL_HapticDirection direction;  /**< Direction of the effect. */
< 
<     /* Replay */
<     Uint32 length;          /**< Duration of the effect. */
<     Uint16 delay;           /**< Delay before starting the effect. */
< 
<     /* Trigger */
<     Uint16 button;          /**< Button that triggers the effect. */
<     Uint16 interval;        /**< How soon it can be triggered again after button. */
< 
<     /* Custom */
<     Uint8 channels;         /**< Axes to use, minimum of one. */
<     Uint16 period;          /**< Sample periods. */
<     Uint16 samples;         /**< Amount of samples. */
<     Uint16 *data;           /**< Should contain channels*samples items. */
< 
<     /* Envelope */
<     Uint16 attack_length;   /**< Duration of the attack. */
<     Uint16 attack_level;    /**< Level at the start of the attack. */
<     Uint16 fade_length;     /**< Duration of the fade. */
<     Uint16 fade_level;      /**< Level at the end of the fade. */
< } SDL_HapticCustom;
< 
< /**
<  *  \brief The generic template for any haptic effect.
<  *
<  *  All values max at 32767 (0x7FFF).  Signed values also can be negative.
<  *  Time values unless specified otherwise are in milliseconds.
<  *
<  *  You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767
<  *  value.  Neither delay, interval, attack_length nor fade_length support
<  *  ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.
<  *
<  *  Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of
<  *  ::SDL_HAPTIC_INFINITY.
<  *
<  *  Button triggers may not be supported on all devices, it is advised to not
<  *  use them if possible.  Buttons start at index 1 instead of index 0 like
<  *  the joystick.
<  *
<  *  If both attack_length and fade_level are 0, the envelope is not used,
<  *  otherwise both values are used.
<  *
<  *  Common parts:
<  *  \code
<  *  // Replay - All effects have this
<  *  Uint32 length;        // Duration of effect (ms).
<  *  Uint16 delay;         // Delay before starting effect.
<  *
<  *  // Trigger - All effects have this
<  *  Uint16 button;        // Button that triggers effect.
<  *  Uint16 interval;      // How soon before effect can be triggered again.
<  *
<  *  // Envelope - All effects except condition effects have this
<  *  Uint16 attack_length; // Duration of the attack (ms).
<  *  Uint16 attack_level;  // Level at the start of the attack.
<  *  Uint16 fade_length;   // Duration of the fade out (ms).
<  *  Uint16 fade_level;    // Level at the end of the fade.
<  *  \endcode
<  *
<  *
<  *  Here we have an example of a constant effect evolution in time:
<  *  \verbatim
<     Strength
<     ^
<     |
<     |    effect level -->  _________________
<     |                     /                 \
<     |                    /                   \
<     |                   /                     \
<     |                  /                       \
<     | attack_level --> |                        \
<     |                  |                        |  <---  fade_level
<     |
<     +--------------------------------------------------> Time
<                        [--]                 [---]
<                        attack_length        fade_length
< 
<     [------------------][-----------------------]
<     delay               length
<     \endverbatim
<  *
<  *  Note either the attack_level or the fade_level may be above the actual
<  *  effect level.
<  *
<  *  \sa SDL_HapticConstant
<  *  \sa SDL_HapticPeriodic
<  *  \sa SDL_HapticCondition
<  *  \sa SDL_HapticRamp
<  *  \sa SDL_HapticLeftRight
<  *  \sa SDL_HapticCustom
<  */
< typedef union SDL_HapticEffect
< {
<     /* Common for all force feedback effects */
<     Uint16 type;                    /**< Effect type. */
<     SDL_HapticConstant constant;    /**< Constant effect. */
<     SDL_HapticPeriodic periodic;    /**< Periodic effect. */
<     SDL_HapticCondition condition;  /**< Condition effect. */
<     SDL_HapticRamp ramp;            /**< Ramp effect. */
<     SDL_HapticLeftRight leftright;  /**< Left/Right effect. */
<     SDL_HapticCustom custom;        /**< Custom effect. */
< } SDL_HapticEffect;
< 
< 
< /* Function prototypes */
< /**
<  *  \brief Count the number of haptic devices attached to the system.
<  *
<  *  \return Number of haptic devices detected on the system.
<  */
< extern DECLSPEC int SDLCALL SDL_NumHaptics(void);
< 
< /**
<  *  \brief Get the implementation dependent name of a Haptic device.
<  *
<  *  This can be called before any joysticks are opened.
<  *  If no name can be found, this function returns NULL.
<  *
<  *  \param device_index Index of the device to get its name.
<  *  \return Name of the device or NULL on error.
<  *
<  *  \sa SDL_NumHaptics
<  */
< extern DECLSPEC const char *SDLCALL SDL_HapticName(int device_index);
< 
< /**
<  *  \brief Opens a Haptic device for usage.
<  *
<  *  The index passed as an argument refers to the N'th Haptic device on this
<  *  system.
<  *
<  *  When opening a haptic device, its gain will be set to maximum and
<  *  autocenter will be disabled.  To modify these values use
<  *  SDL_HapticSetGain() and SDL_HapticSetAutocenter().
<  *
<  *  \param device_index Index of the device to open.
<  *  \return Device identifier or NULL on error.
<  *
<  *  \sa SDL_HapticIndex
<  *  \sa SDL_HapticOpenFromMouse
<  *  \sa SDL_HapticOpenFromJoystick
<  *  \sa SDL_HapticClose
<  *  \sa SDL_HapticSetGain
<  *  \sa SDL_HapticSetAutocenter
<  *  \sa SDL_HapticPause
<  *  \sa SDL_HapticStopAll
<  */
< extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpen(int device_index);
< 
< /**
<  *  \brief Checks if the haptic device at index has been opened.
<  *
<  *  \param device_index Index to check to see if it has been opened.
<  *  \return 1 if it has been opened or 0 if it hasn't.
<  *
<  *  \sa SDL_HapticOpen
<  *  \sa SDL_HapticIndex
<  */
< extern DECLSPEC int SDLCALL SDL_HapticOpened(int device_index);
< 
< /**
<  *  \brief Gets the index of a haptic device.
<  *
<  *  \param haptic Haptic device to get the index of.
<  *  \return The index of the haptic device or -1 on error.
<  *
<  *  \sa SDL_HapticOpen
<  *  \sa SDL_HapticOpened
<  */
< extern DECLSPEC int SDLCALL SDL_HapticIndex(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Gets whether or not the current mouse has haptic capabilities.
<  *
<  *  \return SDL_TRUE if the mouse is haptic, SDL_FALSE if it isn't.
<  *
<  *  \sa SDL_HapticOpenFromMouse
<  */
< extern DECLSPEC int SDLCALL SDL_MouseIsHaptic(void);
< 
< /**
<  *  \brief Tries to open a haptic device from the current mouse.
<  *
<  *  \return The haptic device identifier or NULL on error.
<  *
<  *  \sa SDL_MouseIsHaptic
<  *  \sa SDL_HapticOpen
<  */
< extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpenFromMouse(void);
< 
< /**
<  *  \brief Checks to see if a joystick has haptic features.
<  *
<  *  \param joystick Joystick to test for haptic capabilities.
<  *  \return 1 if the joystick is haptic, 0 if it isn't
<  *          or -1 if an error ocurred.
<  *
<  *  \sa SDL_HapticOpenFromJoystick
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickIsHaptic(SDL_Joystick * joystick);
< 
< /**
<  *  \brief Opens a Haptic device for usage from a Joystick device.
<  *
<  *  You must still close the haptic device seperately.  It will not be closed
<  *  with the joystick.
<  *
<  *  When opening from a joystick you should first close the haptic device before
<  *  closing the joystick device.  If not, on some implementations the haptic
<  *  device will also get unallocated and you'll be unable to use force feedback
<  *  on that device.
<  *
<  *  \param joystick Joystick to create a haptic device from.
<  *  \return A valid haptic device identifier on success or NULL on error.
<  *
<  *  \sa SDL_HapticOpen
<  *  \sa SDL_HapticClose
<  */
< extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpenFromJoystick(SDL_Joystick *
<                                                                joystick);
< 
< /**
<  *  \brief Closes a Haptic device previously opened with SDL_HapticOpen().
<  *
<  *  \param haptic Haptic device to close.
<  */
< extern DECLSPEC void SDLCALL SDL_HapticClose(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Returns the number of effects a haptic device can store.
<  *
<  *  On some platforms this isn't fully supported, and therefore is an
<  *  approximation.  Always check to see if your created effect was actually
<  *  created and do not rely solely on SDL_HapticNumEffects().
<  *
<  *  \param haptic The haptic device to query effect max.
<  *  \return The number of effects the haptic device can store or
<  *          -1 on error.
<  *
<  *  \sa SDL_HapticNumEffectsPlaying
<  *  \sa SDL_HapticQuery
<  */
< extern DECLSPEC int SDLCALL SDL_HapticNumEffects(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Returns the number of effects a haptic device can play at the same
<  *         time.
<  *
<  *  This is not supported on all platforms, but will always return a value.
<  *  Added here for the sake of completeness.
<  *
<  *  \param haptic The haptic device to query maximum playing effects.
<  *  \return The number of effects the haptic device can play at the same time
<  *          or -1 on error.
<  *
<  *  \sa SDL_HapticNumEffects
<  *  \sa SDL_HapticQuery
<  */
< extern DECLSPEC int SDLCALL SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Gets the haptic devices supported features in bitwise matter.
<  *
<  *  Example:
<  *  \code
<  *  if (SDL_HapticQuery(haptic) & SDL_HAPTIC_CONSTANT) {
<  *      printf("We have constant haptic effect!");
<  *  }
<  *  \endcode
<  *
<  *  \param haptic The haptic device to query.
<  *  \return Haptic features in bitwise manner (OR'd).
<  *
<  *  \sa SDL_HapticNumEffects
<  *  \sa SDL_HapticEffectSupported
<  */
< extern DECLSPEC unsigned int SDLCALL SDL_HapticQuery(SDL_Haptic * haptic);
< 
< 
< /**
<  *  \brief Gets the number of haptic axes the device has.
<  *
<  *  \sa SDL_HapticDirection
<  */
< extern DECLSPEC int SDLCALL SDL_HapticNumAxes(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Checks to see if effect is supported by haptic.
<  *
<  *  \param haptic Haptic device to check on.
<  *  \param effect Effect to check to see if it is supported.
<  *  \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.
<  *
<  *  \sa SDL_HapticQuery
<  *  \sa SDL_HapticNewEffect
<  */
< extern DECLSPEC int SDLCALL SDL_HapticEffectSupported(SDL_Haptic * haptic,
<                                                       SDL_HapticEffect *
<                                                       effect);
< 
< /**
<  *  \brief Creates a new haptic effect on the device.
<  *
<  *  \param haptic Haptic device to create the effect on.
<  *  \param effect Properties of the effect to create.
<  *  \return The id of the effect on success or -1 on error.
<  *
<  *  \sa SDL_HapticUpdateEffect
<  *  \sa SDL_HapticRunEffect
<  *  \sa SDL_HapticDestroyEffect
<  */
< extern DECLSPEC int SDLCALL SDL_HapticNewEffect(SDL_Haptic * haptic,
<                                                 SDL_HapticEffect * effect);
< 
< /**
<  *  \brief Updates the properties of an effect.
<  *
<  *  Can be used dynamically, although behaviour when dynamically changing
<  *  direction may be strange.  Specifically the effect may reupload itself
<  *  and start playing from the start.  You cannot change the type either when
<  *  running SDL_HapticUpdateEffect().
<  *
<  *  \param haptic Haptic device that has the effect.
<  *  \param effect Effect to update.
<  *  \param data New effect properties to use.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticNewEffect
<  *  \sa SDL_HapticRunEffect
<  *  \sa SDL_HapticDestroyEffect
<  */
< extern DECLSPEC int SDLCALL SDL_HapticUpdateEffect(SDL_Haptic * haptic,
<                                                    int effect,
<                                                    SDL_HapticEffect * data);
< 
< /**
<  *  \brief Runs the haptic effect on its associated haptic device.
<  *
<  *  If iterations are ::SDL_HAPTIC_INFINITY, it'll run the effect over and over
<  *  repeating the envelope (attack and fade) every time.  If you only want the
<  *  effect to last forever, set ::SDL_HAPTIC_INFINITY in the effect's length
<  *  parameter.
<  *
<  *  \param haptic Haptic device to run the effect on.
<  *  \param effect Identifier of the haptic effect to run.
<  *  \param iterations Number of iterations to run the effect. Use
<  *         ::SDL_HAPTIC_INFINITY for infinity.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticStopEffect
<  *  \sa SDL_HapticDestroyEffect
<  *  \sa SDL_HapticGetEffectStatus
<  */
< extern DECLSPEC int SDLCALL SDL_HapticRunEffect(SDL_Haptic * haptic,
<                                                 int effect,
<                                                 Uint32 iterations);
< 
< /**
<  *  \brief Stops the haptic effect on its associated haptic device.
<  *
<  *  \param haptic Haptic device to stop the effect on.
<  *  \param effect Identifier of the effect to stop.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticRunEffect
<  *  \sa SDL_HapticDestroyEffect
<  */
< extern DECLSPEC int SDLCALL SDL_HapticStopEffect(SDL_Haptic * haptic,
<                                                  int effect);
< 
< /**
<  *  \brief Destroys a haptic effect on the device.
<  *
<  *  This will stop the effect if it's running.  Effects are automatically
<  *  destroyed when the device is closed.
<  *
<  *  \param haptic Device to destroy the effect on.
<  *  \param effect Identifier of the effect to destroy.
<  *
<  *  \sa SDL_HapticNewEffect
<  */
< extern DECLSPEC void SDLCALL SDL_HapticDestroyEffect(SDL_Haptic * haptic,
<                                                      int effect);
< 
< /**
<  *  \brief Gets the status of the current effect on the haptic device.
<  *
<  *  Device must support the ::SDL_HAPTIC_STATUS feature.
<  *
<  *  \param haptic Haptic device to query the effect status on.
<  *  \param effect Identifier of the effect to query its status.
<  *  \return 0 if it isn't playing, 1 if it is playing or -1 on error.
<  *
<  *  \sa SDL_HapticRunEffect
<  *  \sa SDL_HapticStopEffect
<  */
< extern DECLSPEC int SDLCALL SDL_HapticGetEffectStatus(SDL_Haptic * haptic,
<                                                       int effect);
< 
< /**
<  *  \brief Sets the global gain of the device.
<  *
<  *  Device must support the ::SDL_HAPTIC_GAIN feature.
<  *
<  *  The user may specify the maximum gain by setting the environment variable
<  *  SDL_HAPTIC_GAIN_MAX which should be between 0 and 100.  All calls to
<  *  SDL_HapticSetGain() will scale linearly using SDL_HAPTIC_GAIN_MAX as the
<  *  maximum.
<  *
<  *  \param haptic Haptic device to set the gain on.
<  *  \param gain Value to set the gain to, should be between 0 and 100.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticQuery
<  */
< extern DECLSPEC int SDLCALL SDL_HapticSetGain(SDL_Haptic * haptic, int gain);
< 
< /**
<  *  \brief Sets the global autocenter of the device.
<  *
<  *  Autocenter should be between 0 and 100.  Setting it to 0 will disable
<  *  autocentering.
<  *
<  *  Device must support the ::SDL_HAPTIC_AUTOCENTER feature.
<  *
<  *  \param haptic Haptic device to set autocentering on.
<  *  \param autocenter Value to set autocenter to, 0 disables autocentering.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticQuery
<  */
< extern DECLSPEC int SDLCALL SDL_HapticSetAutocenter(SDL_Haptic * haptic,
<                                                     int autocenter);
< 
< /**
<  *  \brief Pauses a haptic device.
<  *
<  *  Device must support the ::SDL_HAPTIC_PAUSE feature.  Call
<  *  SDL_HapticUnpause() to resume playback.
<  *
<  *  Do not modify the effects nor add new ones while the device is paused.
<  *  That can cause all sorts of weird errors.
<  *
<  *  \param haptic Haptic device to pause.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticUnpause
<  */
< extern DECLSPEC int SDLCALL SDL_HapticPause(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Unpauses a haptic device.
<  *
<  *  Call to unpause after SDL_HapticPause().
<  *
<  *  \param haptic Haptic device to pause.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticPause
<  */
< extern DECLSPEC int SDLCALL SDL_HapticUnpause(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Stops all the currently playing effects on a haptic device.
<  *
<  *  \param haptic Haptic device to stop.
<  *  \return 0 on success or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_HapticStopAll(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Checks to see if rumble is supported on a haptic device.
<  *
<  *  \param haptic Haptic device to check to see if it supports rumble.
<  *  \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.
<  *
<  *  \sa SDL_HapticRumbleInit
<  *  \sa SDL_HapticRumblePlay
<  *  \sa SDL_HapticRumbleStop
<  */
< extern DECLSPEC int SDLCALL SDL_HapticRumbleSupported(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Initializes the haptic device for simple rumble playback.
<  *
<  *  \param haptic Haptic device to initialize for simple rumble playback.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticOpen
<  *  \sa SDL_HapticRumbleSupported
<  *  \sa SDL_HapticRumblePlay
<  *  \sa SDL_HapticRumbleStop
<  */
< extern DECLSPEC int SDLCALL SDL_HapticRumbleInit(SDL_Haptic * haptic);
< 
< /**
<  *  \brief Runs simple rumble on a haptic device
<  *
<  *  \param haptic Haptic device to play rumble effect on.
<  *  \param strength Strength of the rumble to play as a 0-1 float value.
<  *  \param length Length of the rumble to play in milliseconds.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticRumbleSupported
<  *  \sa SDL_HapticRumbleInit
<  *  \sa SDL_HapticRumbleStop
<  */
< extern DECLSPEC int SDLCALL SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length );
< 
< /**
<  *  \brief Stops the simple rumble on a haptic device.
<  *
<  *  \param haptic Haptic to stop the rumble on.
<  *  \return 0 on success or -1 on error.
<  *
<  *  \sa SDL_HapticRumbleSupported
<  *  \sa SDL_HapticRumbleInit
<  *  \sa SDL_HapticRumblePlay
<  */
< extern DECLSPEC int SDLCALL SDL_HapticRumbleStop(SDL_Haptic * haptic);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_haptic_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_haptic.h
>  *
>  *  \brief The SDL Haptic subsystem allows you to control haptic (force feedback)
>  *         devices.
>  *
>  *  The basic usage is as follows:
>  *   - Initialize the Subsystem (::SDL_INIT_HAPTIC).
>  *   - Open a Haptic Device.
>  *    - SDL_HapticOpen() to open from index.
>  *    - SDL_HapticOpenFromJoystick() to open from an existing joystick.
>  *   - Create an effect (::SDL_HapticEffect).
>  *   - Upload the effect with SDL_HapticNewEffect().
>  *   - Run the effect with SDL_HapticRunEffect().
>  *   - (optional) Free the effect with SDL_HapticDestroyEffect().
>  *   - Close the haptic device with SDL_HapticClose().
>  *
>  * \par Simple rumble example:
>  * \code
>  *    SDL_Haptic *haptic;
>  *
>  *    // Open the device
>  *    haptic = SDL_HapticOpen( 0 );
>  *    if (haptic == NULL)
>  *       return -1;
>  *
>  *    // Initialize simple rumble
>  *    if (SDL_HapticRumbleInit( haptic ) != 0)
>  *       return -1;
>  *
>  *    // Play effect at 50% strength for 2 seconds
>  *    if (SDL_HapticRumblePlay( haptic, 0.5, 2000 ) != 0)
>  *       return -1;
>  *    SDL_Delay( 2000 );
>  *
>  *    // Clean up
>  *    SDL_HapticClose( haptic );
>  * \endcode
>  *
>  * \par Complete example:
>  * \code
>  * int test_haptic( SDL_Joystick * joystick ) {
>  *    SDL_Haptic *haptic;
>  *    SDL_HapticEffect effect;
>  *    int effect_id;
>  *
>  *    // Open the device
>  *    haptic = SDL_HapticOpenFromJoystick( joystick );
>  *    if (haptic == NULL) return -1; // Most likely joystick isn't haptic
>  *
>  *    // See if it can do sine waves
>  *    if ((SDL_HapticQuery(haptic) & SDL_HAPTIC_SINE)==0) {
>  *       SDL_HapticClose(haptic); // No sine effect
>  *       return -1;
>  *    }
>  *
>  *    // Create the effect
>  *    memset( &effect, 0, sizeof(SDL_HapticEffect) ); // 0 is safe default
>  *    effect.type = SDL_HAPTIC_SINE;
>  *    effect.periodic.direction.type = SDL_HAPTIC_POLAR; // Polar coordinates
>  *    effect.periodic.direction.dir[0] = 18000; // Force comes from south
>  *    effect.periodic.period = 1000; // 1000 ms
>  *    effect.periodic.magnitude = 20000; // 20000/32767 strength
>  *    effect.periodic.length = 5000; // 5 seconds long
>  *    effect.periodic.attack_length = 1000; // Takes 1 second to get max strength
>  *    effect.periodic.fade_length = 1000; // Takes 1 second to fade away
>  *
>  *    // Upload the effect
>  *    effect_id = SDL_HapticNewEffect( haptic, &effect );
>  *
>  *    // Test the effect
>  *    SDL_HapticRunEffect( haptic, effect_id, 1 );
>  *    SDL_Delay( 5000); // Wait for the effect to finish
>  *
>  *    // We destroy the effect, although closing the device also does this
>  *    SDL_HapticDestroyEffect( haptic, effect_id );
>  *
>  *    // Close the device
>  *    SDL_HapticClose(haptic);
>  *
>  *    return 0; // Success
>  * }
>  * \endcode
>  *
>  * You can also find out more information on my blog:
>  * http://bobbens.dyndns.org/journal/2010/sdl_haptic/
>  *
>  * \author Edgar Simo Serra
>  */
> 
> #ifndef _SDL_haptic_h
> #define _SDL_haptic_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_joystick.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif /* __cplusplus */
> 
> /**
>  *  \typedef SDL_Haptic
>  *
>  *  \brief The haptic structure used to identify an SDL haptic.
>  *
>  *  \sa SDL_HapticOpen
>  *  \sa SDL_HapticOpenFromJoystick
>  *  \sa SDL_HapticClose
>  */
> struct _SDL_Haptic;
> typedef struct _SDL_Haptic SDL_Haptic;
> 
> 
> /**
>  *  \name Haptic features
>  *
>  *  Different haptic features a device can have.
>  */
> /*@{*/
> 
> /**
>  *  \name Haptic effects
>  */
> /*@{*/
> 
> /**
>  *  \brief Constant effect supported.
>  *
>  *  Constant haptic effect.
>  *
>  *  \sa SDL_HapticCondition
>  */
> #define SDL_HAPTIC_CONSTANT   (1<<0)
> 
> /**
>  *  \brief Sine wave effect supported.
>  *
>  *  Periodic haptic effect that simulates sine waves.
>  *
>  *  \sa SDL_HapticPeriodic
>  */
> #define SDL_HAPTIC_SINE       (1<<1)
> 
> /**
>  *  \brief Left/Right effect supported.
>  *
>  *  Haptic effect for direct control over high/low frequency motors.
>  *
>  *  \sa SDL_HapticLeftRight
>  * \warning this value was SDL_HAPTIC_SQUARE right before 2.0.0 shipped. Sorry,
>  *          we ran out of bits, and this is important for XInput devices.
>  */
> #define SDL_HAPTIC_LEFTRIGHT     (1<<2)
> 
> /* !!! FIXME: put this back when we have more bits in 2.1 */
> /*#define SDL_HAPTIC_SQUARE     (1<<2)*/
> 
> /**
>  *  \brief Triangle wave effect supported.
>  *
>  *  Periodic haptic effect that simulates triangular waves.
>  *
>  *  \sa SDL_HapticPeriodic
>  */
> #define SDL_HAPTIC_TRIANGLE   (1<<3)
> 
> /**
>  *  \brief Sawtoothup wave effect supported.
>  *
>  *  Periodic haptic effect that simulates saw tooth up waves.
>  *
>  *  \sa SDL_HapticPeriodic
>  */
> #define SDL_HAPTIC_SAWTOOTHUP (1<<4)
> 
> /**
>  *  \brief Sawtoothdown wave effect supported.
>  *
>  *  Periodic haptic effect that simulates saw tooth down waves.
>  *
>  *  \sa SDL_HapticPeriodic
>  */
> #define SDL_HAPTIC_SAWTOOTHDOWN (1<<5)
> 
> /**
>  *  \brief Ramp effect supported.
>  *
>  *  Ramp haptic effect.
>  *
>  *  \sa SDL_HapticRamp
>  */
> #define SDL_HAPTIC_RAMP       (1<<6)
> 
> /**
>  *  \brief Spring effect supported - uses axes position.
>  *
>  *  Condition haptic effect that simulates a spring.  Effect is based on the
>  *  axes position.
>  *
>  *  \sa SDL_HapticCondition
>  */
> #define SDL_HAPTIC_SPRING     (1<<7)
> 
> /**
>  *  \brief Damper effect supported - uses axes velocity.
>  *
>  *  Condition haptic effect that simulates dampening.  Effect is based on the
>  *  axes velocity.
>  *
>  *  \sa SDL_HapticCondition
>  */
> #define SDL_HAPTIC_DAMPER     (1<<8)
> 
> /**
>  *  \brief Inertia effect supported - uses axes acceleration.
>  *
>  *  Condition haptic effect that simulates inertia.  Effect is based on the axes
>  *  acceleration.
>  *
>  *  \sa SDL_HapticCondition
>  */
> #define SDL_HAPTIC_INERTIA    (1<<9)
> 
> /**
>  *  \brief Friction effect supported - uses axes movement.
>  *
>  *  Condition haptic effect that simulates friction.  Effect is based on the
>  *  axes movement.
>  *
>  *  \sa SDL_HapticCondition
>  */
> #define SDL_HAPTIC_FRICTION   (1<<10)
> 
> /**
>  *  \brief Custom effect is supported.
>  *
>  *  User defined custom haptic effect.
>  */
> #define SDL_HAPTIC_CUSTOM     (1<<11)
> 
> /*@}*//*Haptic effects*/
> 
> /* These last few are features the device has, not effects */
> 
> /**
>  *  \brief Device can set global gain.
>  *
>  *  Device supports setting the global gain.
>  *
>  *  \sa SDL_HapticSetGain
>  */
> #define SDL_HAPTIC_GAIN       (1<<12)
> 
> /**
>  *  \brief Device can set autocenter.
>  *
>  *  Device supports setting autocenter.
>  *
>  *  \sa SDL_HapticSetAutocenter
>  */
> #define SDL_HAPTIC_AUTOCENTER (1<<13)
> 
> /**
>  *  \brief Device can be queried for effect status.
>  *
>  *  Device can be queried for effect status.
>  *
>  *  \sa SDL_HapticGetEffectStatus
>  */
> #define SDL_HAPTIC_STATUS     (1<<14)
> 
> /**
>  *  \brief Device can be paused.
>  *
>  *  \sa SDL_HapticPause
>  *  \sa SDL_HapticUnpause
>  */
> #define SDL_HAPTIC_PAUSE      (1<<15)
> 
> 
> /**
>  * \name Direction encodings
>  */
> /*@{*/
> 
> /**
>  *  \brief Uses polar coordinates for the direction.
>  *
>  *  \sa SDL_HapticDirection
>  */
> #define SDL_HAPTIC_POLAR      0
> 
> /**
>  *  \brief Uses cartesian coordinates for the direction.
>  *
>  *  \sa SDL_HapticDirection
>  */
> #define SDL_HAPTIC_CARTESIAN  1
> 
> /**
>  *  \brief Uses spherical coordinates for the direction.
>  *
>  *  \sa SDL_HapticDirection
>  */
> #define SDL_HAPTIC_SPHERICAL  2
> 
> /*@}*//*Direction encodings*/
> 
> /*@}*//*Haptic features*/
> 
> /*
>  * Misc defines.
>  */
> 
> /**
>  * \brief Used to play a device an infinite number of times.
>  *
>  * \sa SDL_HapticRunEffect
>  */
> #define SDL_HAPTIC_INFINITY   4294967295U
> 
> 
> /**
>  *  \brief Structure that represents a haptic direction.
>  *
>  *  Directions can be specified by:
>  *   - ::SDL_HAPTIC_POLAR : Specified by polar coordinates.
>  *   - ::SDL_HAPTIC_CARTESIAN : Specified by cartesian coordinates.
>  *   - ::SDL_HAPTIC_SPHERICAL : Specified by spherical coordinates.
>  *
>  *  Cardinal directions of the haptic device are relative to the positioning
>  *  of the device.  North is considered to be away from the user.
>  *
>  *  The following diagram represents the cardinal directions:
>  *  \verbatim
>                  .--.
>                  |__| .-------.
>                  |=.| |.-----.|
>                  |--| ||     ||
>                  |  | |'-----'|
>                  |__|~')_____('
>                    [ COMPUTER ]
> 
> 
>                      North (0,-1)
>                          ^
>                          |
>                          |
>     (1,0)  West <----[ HAPTIC ]----> East (-1,0)
>                          |
>                          |
>                          v
>                       South (0,1)
> 
> 
>                       [ USER ]
>                         \|||/
>                         (o o)
>                   ---ooO-(_)-Ooo---
>     \endverbatim
>  *
>  *  If type is ::SDL_HAPTIC_POLAR, direction is encoded by hundredths of a
>  *  degree starting north and turning clockwise.  ::SDL_HAPTIC_POLAR only uses
>  *  the first \c dir parameter.  The cardinal directions would be:
>  *   - North: 0 (0 degrees)
>  *   - East: 9000 (90 degrees)
>  *   - South: 18000 (180 degrees)
>  *   - West: 27000 (270 degrees)
>  *
>  *  If type is ::SDL_HAPTIC_CARTESIAN, direction is encoded by three positions
>  *  (X axis, Y axis and Z axis (with 3 axes)).  ::SDL_HAPTIC_CARTESIAN uses
>  *  the first three \c dir parameters.  The cardinal directions would be:
>  *   - North:  0,-1, 0
>  *   - East:  -1, 0, 0
>  *   - South:  0, 1, 0
>  *   - West:   1, 0, 0
>  *
>  *  The Z axis represents the height of the effect if supported, otherwise
>  *  it's unused.  In cartesian encoding (1, 2) would be the same as (2, 4), you
>  *  can use any multiple you want, only the direction matters.
>  *
>  *  If type is ::SDL_HAPTIC_SPHERICAL, direction is encoded by two rotations.
>  *  The first two \c dir parameters are used.  The \c dir parameters are as
>  *  follows (all values are in hundredths of degrees):
>  *   - Degrees from (1, 0) rotated towards (0, 1).
>  *   - Degrees towards (0, 0, 1) (device needs at least 3 axes).
>  *
>  *
>  *  Example of force coming from the south with all encodings (force coming
>  *  from the south means the user will have to pull the stick to counteract):
>  *  \code
>  *  SDL_HapticDirection direction;
>  *
>  *  // Cartesian directions
>  *  direction.type = SDL_HAPTIC_CARTESIAN; // Using cartesian direction encoding.
>  *  direction.dir[0] = 0; // X position
>  *  direction.dir[1] = 1; // Y position
>  *  // Assuming the device has 2 axes, we don't need to specify third parameter.
>  *
>  *  // Polar directions
>  *  direction.type = SDL_HAPTIC_POLAR; // We'll be using polar direction encoding.
>  *  direction.dir[0] = 18000; // Polar only uses first parameter
>  *
>  *  // Spherical coordinates
>  *  direction.type = SDL_HAPTIC_SPHERICAL; // Spherical encoding
>  *  direction.dir[0] = 9000; // Since we only have two axes we don't need more parameters.
>  *  \endcode
>  *
>  *  \sa SDL_HAPTIC_POLAR
>  *  \sa SDL_HAPTIC_CARTESIAN
>  *  \sa SDL_HAPTIC_SPHERICAL
>  *  \sa SDL_HapticEffect
>  *  \sa SDL_HapticNumAxes
>  */
> typedef struct SDL_HapticDirection
> {
>     Uint8 type;         /**< The type of encoding. */
>     Sint32 dir[3];      /**< The encoded direction. */
> } SDL_HapticDirection;
> 
> 
> /**
>  *  \brief A structure containing a template for a Constant effect.
>  *
>  *  The struct is exclusive to the ::SDL_HAPTIC_CONSTANT effect.
>  *
>  *  A constant effect applies a constant force in the specified direction
>  *  to the joystick.
>  *
>  *  \sa SDL_HAPTIC_CONSTANT
>  *  \sa SDL_HapticEffect
>  */
> typedef struct SDL_HapticConstant
> {
>     /* Header */
>     Uint16 type;            /**< ::SDL_HAPTIC_CONSTANT */
>     SDL_HapticDirection direction;  /**< Direction of the effect. */
> 
>     /* Replay */
>     Uint32 length;          /**< Duration of the effect. */
>     Uint16 delay;           /**< Delay before starting the effect. */
> 
>     /* Trigger */
>     Uint16 button;          /**< Button that triggers the effect. */
>     Uint16 interval;        /**< How soon it can be triggered again after button. */
> 
>     /* Constant */
>     Sint16 level;           /**< Strength of the constant effect. */
> 
>     /* Envelope */
>     Uint16 attack_length;   /**< Duration of the attack. */
>     Uint16 attack_level;    /**< Level at the start of the attack. */
>     Uint16 fade_length;     /**< Duration of the fade. */
>     Uint16 fade_level;      /**< Level at the end of the fade. */
> } SDL_HapticConstant;
> 
> /**
>  *  \brief A structure containing a template for a Periodic effect.
>  *
>  *  The struct handles the following effects:
>  *   - ::SDL_HAPTIC_SINE
>  *   - ::SDL_HAPTIC_LEFTRIGHT
>  *   - ::SDL_HAPTIC_TRIANGLE
>  *   - ::SDL_HAPTIC_SAWTOOTHUP
>  *   - ::SDL_HAPTIC_SAWTOOTHDOWN
>  *
>  *  A periodic effect consists in a wave-shaped effect that repeats itself
>  *  over time.  The type determines the shape of the wave and the parameters
>  *  determine the dimensions of the wave.
>  *
>  *  Phase is given by hundredth of a cycle meaning that giving the phase a value
>  *  of 9000 will displace it 25% of its period.  Here are sample values:
>  *   -     0: No phase displacement.
>  *   -  9000: Displaced 25% of its period.
>  *   - 18000: Displaced 50% of its period.
>  *   - 27000: Displaced 75% of its period.
>  *   - 36000: Displaced 100% of its period, same as 0, but 0 is preferred.
>  *
>  *  Examples:
>  *  \verbatim
>     SDL_HAPTIC_SINE
>       __      __      __      __
>      /  \    /  \    /  \    /
>     /    \__/    \__/    \__/
> 
>     SDL_HAPTIC_SQUARE
>      __    __    __    __    __
>     |  |  |  |  |  |  |  |  |  |
>     |  |__|  |__|  |__|  |__|  |
> 
>     SDL_HAPTIC_TRIANGLE
>       /\    /\    /\    /\    /\
>      /  \  /  \  /  \  /  \  /
>     /    \/    \/    \/    \/
> 
>     SDL_HAPTIC_SAWTOOTHUP
>       /|  /|  /|  /|  /|  /|  /|
>      / | / | / | / | / | / | / |
>     /  |/  |/  |/  |/  |/  |/  |
> 
>     SDL_HAPTIC_SAWTOOTHDOWN
>     \  |\  |\  |\  |\  |\  |\  |
>      \ | \ | \ | \ | \ | \ | \ |
>       \|  \|  \|  \|  \|  \|  \|
>     \endverbatim
>  *
>  *  \sa SDL_HAPTIC_SINE
>  *  \sa SDL_HAPTIC_LEFTRIGHT
>  *  \sa SDL_HAPTIC_TRIANGLE
>  *  \sa SDL_HAPTIC_SAWTOOTHUP
>  *  \sa SDL_HAPTIC_SAWTOOTHDOWN
>  *  \sa SDL_HapticEffect
>  */
> typedef struct SDL_HapticPeriodic
> {
>     /* Header */
>     Uint16 type;        /**< ::SDL_HAPTIC_SINE, ::SDL_HAPTIC_LEFTRIGHT,
>                              ::SDL_HAPTIC_TRIANGLE, ::SDL_HAPTIC_SAWTOOTHUP or
>                              ::SDL_HAPTIC_SAWTOOTHDOWN */
>     SDL_HapticDirection direction;  /**< Direction of the effect. */
> 
>     /* Replay */
>     Uint32 length;      /**< Duration of the effect. */
>     Uint16 delay;       /**< Delay before starting the effect. */
> 
>     /* Trigger */
>     Uint16 button;      /**< Button that triggers the effect. */
>     Uint16 interval;    /**< How soon it can be triggered again after button. */
> 
>     /* Periodic */
>     Uint16 period;      /**< Period of the wave. */
>     Sint16 magnitude;   /**< Peak value. */
>     Sint16 offset;      /**< Mean value of the wave. */
>     Uint16 phase;       /**< Horizontal shift given by hundredth of a cycle. */
> 
>     /* Envelope */
>     Uint16 attack_length;   /**< Duration of the attack. */
>     Uint16 attack_level;    /**< Level at the start of the attack. */
>     Uint16 fade_length; /**< Duration of the fade. */
>     Uint16 fade_level;  /**< Level at the end of the fade. */
> } SDL_HapticPeriodic;
> 
> /**
>  *  \brief A structure containing a template for a Condition effect.
>  *
>  *  The struct handles the following effects:
>  *   - ::SDL_HAPTIC_SPRING: Effect based on axes position.
>  *   - ::SDL_HAPTIC_DAMPER: Effect based on axes velocity.
>  *   - ::SDL_HAPTIC_INERTIA: Effect based on axes acceleration.
>  *   - ::SDL_HAPTIC_FRICTION: Effect based on axes movement.
>  *
>  *  Direction is handled by condition internals instead of a direction member.
>  *  The condition effect specific members have three parameters.  The first
>  *  refers to the X axis, the second refers to the Y axis and the third
>  *  refers to the Z axis.  The right terms refer to the positive side of the
>  *  axis and the left terms refer to the negative side of the axis.  Please
>  *  refer to the ::SDL_HapticDirection diagram for which side is positive and
>  *  which is negative.
>  *
>  *  \sa SDL_HapticDirection
>  *  \sa SDL_HAPTIC_SPRING
>  *  \sa SDL_HAPTIC_DAMPER
>  *  \sa SDL_HAPTIC_INERTIA
>  *  \sa SDL_HAPTIC_FRICTION
>  *  \sa SDL_HapticEffect
>  */
> typedef struct SDL_HapticCondition
> {
>     /* Header */
>     Uint16 type;            /**< ::SDL_HAPTIC_SPRING, ::SDL_HAPTIC_DAMPER,
>                                  ::SDL_HAPTIC_INERTIA or ::SDL_HAPTIC_FRICTION */
>     SDL_HapticDirection direction;  /**< Direction of the effect - Not used ATM. */
> 
>     /* Replay */
>     Uint32 length;          /**< Duration of the effect. */
>     Uint16 delay;           /**< Delay before starting the effect. */
> 
>     /* Trigger */
>     Uint16 button;          /**< Button that triggers the effect. */
>     Uint16 interval;        /**< How soon it can be triggered again after button. */
> 
>     /* Condition */
>     Uint16 right_sat[3];    /**< Level when joystick is to the positive side. */
>     Uint16 left_sat[3];     /**< Level when joystick is to the negative side. */
>     Sint16 right_coeff[3];  /**< How fast to increase the force towards the positive side. */
>     Sint16 left_coeff[3];   /**< How fast to increase the force towards the negative side. */
>     Uint16 deadband[3];     /**< Size of the dead zone. */
>     Sint16 center[3];       /**< Position of the dead zone. */
> } SDL_HapticCondition;
> 
> /**
>  *  \brief A structure containing a template for a Ramp effect.
>  *
>  *  This struct is exclusively for the ::SDL_HAPTIC_RAMP effect.
>  *
>  *  The ramp effect starts at start strength and ends at end strength.
>  *  It augments in linear fashion.  If you use attack and fade with a ramp
>  *  the effects get added to the ramp effect making the effect become
>  *  quadratic instead of linear.
>  *
>  *  \sa SDL_HAPTIC_RAMP
>  *  \sa SDL_HapticEffect
>  */
> typedef struct SDL_HapticRamp
> {
>     /* Header */
>     Uint16 type;            /**< ::SDL_HAPTIC_RAMP */
>     SDL_HapticDirection direction;  /**< Direction of the effect. */
> 
>     /* Replay */
>     Uint32 length;          /**< Duration of the effect. */
>     Uint16 delay;           /**< Delay before starting the effect. */
> 
>     /* Trigger */
>     Uint16 button;          /**< Button that triggers the effect. */
>     Uint16 interval;        /**< How soon it can be triggered again after button. */
> 
>     /* Ramp */
>     Sint16 start;           /**< Beginning strength level. */
>     Sint16 end;             /**< Ending strength level. */
> 
>     /* Envelope */
>     Uint16 attack_length;   /**< Duration of the attack. */
>     Uint16 attack_level;    /**< Level at the start of the attack. */
>     Uint16 fade_length;     /**< Duration of the fade. */
>     Uint16 fade_level;      /**< Level at the end of the fade. */
> } SDL_HapticRamp;
> 
> /**
>  * \brief A structure containing a template for a Left/Right effect.
>  *
>  * This struct is exclusively for the ::SDL_HAPTIC_LEFTRIGHT effect.
>  *
>  * The Left/Right effect is used to explicitly control the large and small
>  * motors, commonly found in modern game controllers. One motor is high
>  * frequency, the other is low frequency.
>  *
>  * \sa SDL_HAPTIC_LEFTRIGHT
>  * \sa SDL_HapticEffect
>  */
> typedef struct SDL_HapticLeftRight
> {
>     /* Header */
>     Uint16 type;            /**< ::SDL_HAPTIC_LEFTRIGHT */
> 
>     /* Replay */
>     Uint32 length;          /**< Duration of the effect. */
> 
>     /* Rumble */
>     Uint16 large_magnitude; /**< Control of the large controller motor. */
>     Uint16 small_magnitude; /**< Control of the small controller motor. */
> } SDL_HapticLeftRight;
> 
> /**
>  *  \brief A structure containing a template for the ::SDL_HAPTIC_CUSTOM effect.
>  *
>  *  A custom force feedback effect is much like a periodic effect, where the
>  *  application can define its exact shape.  You will have to allocate the
>  *  data yourself.  Data should consist of channels * samples Uint16 samples.
>  *
>  *  If channels is one, the effect is rotated using the defined direction.
>  *  Otherwise it uses the samples in data for the different axes.
>  *
>  *  \sa SDL_HAPTIC_CUSTOM
>  *  \sa SDL_HapticEffect
>  */
> typedef struct SDL_HapticCustom
> {
>     /* Header */
>     Uint16 type;            /**< ::SDL_HAPTIC_CUSTOM */
>     SDL_HapticDirection direction;  /**< Direction of the effect. */
> 
>     /* Replay */
>     Uint32 length;          /**< Duration of the effect. */
>     Uint16 delay;           /**< Delay before starting the effect. */
> 
>     /* Trigger */
>     Uint16 button;          /**< Button that triggers the effect. */
>     Uint16 interval;        /**< How soon it can be triggered again after button. */
> 
>     /* Custom */
>     Uint8 channels;         /**< Axes to use, minimum of one. */
>     Uint16 period;          /**< Sample periods. */
>     Uint16 samples;         /**< Amount of samples. */
>     Uint16 *data;           /**< Should contain channels*samples items. */
> 
>     /* Envelope */
>     Uint16 attack_length;   /**< Duration of the attack. */
>     Uint16 attack_level;    /**< Level at the start of the attack. */
>     Uint16 fade_length;     /**< Duration of the fade. */
>     Uint16 fade_level;      /**< Level at the end of the fade. */
> } SDL_HapticCustom;
> 
> /**
>  *  \brief The generic template for any haptic effect.
>  *
>  *  All values max at 32767 (0x7FFF).  Signed values also can be negative.
>  *  Time values unless specified otherwise are in milliseconds.
>  *
>  *  You can also pass ::SDL_HAPTIC_INFINITY to length instead of a 0-32767
>  *  value.  Neither delay, interval, attack_length nor fade_length support
>  *  ::SDL_HAPTIC_INFINITY.  Fade will also not be used since effect never ends.
>  *
>  *  Additionally, the ::SDL_HAPTIC_RAMP effect does not support a duration of
>  *  ::SDL_HAPTIC_INFINITY.
>  *
>  *  Button triggers may not be supported on all devices, it is advised to not
>  *  use them if possible.  Buttons start at index 1 instead of index 0 like
>  *  the joystick.
>  *
>  *  If both attack_length and fade_level are 0, the envelope is not used,
>  *  otherwise both values are used.
>  *
>  *  Common parts:
>  *  \code
>  *  // Replay - All effects have this
>  *  Uint32 length;        // Duration of effect (ms).
>  *  Uint16 delay;         // Delay before starting effect.
>  *
>  *  // Trigger - All effects have this
>  *  Uint16 button;        // Button that triggers effect.
>  *  Uint16 interval;      // How soon before effect can be triggered again.
>  *
>  *  // Envelope - All effects except condition effects have this
>  *  Uint16 attack_length; // Duration of the attack (ms).
>  *  Uint16 attack_level;  // Level at the start of the attack.
>  *  Uint16 fade_length;   // Duration of the fade out (ms).
>  *  Uint16 fade_level;    // Level at the end of the fade.
>  *  \endcode
>  *
>  *
>  *  Here we have an example of a constant effect evolution in time:
>  *  \verbatim
>     Strength
>     ^
>     |
>     |    effect level -->  _________________
>     |                     /                 \
>     |                    /                   \
>     |                   /                     \
>     |                  /                       \
>     | attack_level --> |                        \
>     |                  |                        |  <---  fade_level
>     |
>     +--------------------------------------------------> Time
>                        [--]                 [---]
>                        attack_length        fade_length
> 
>     [------------------][-----------------------]
>     delay               length
>     \endverbatim
>  *
>  *  Note either the attack_level or the fade_level may be above the actual
>  *  effect level.
>  *
>  *  \sa SDL_HapticConstant
>  *  \sa SDL_HapticPeriodic
>  *  \sa SDL_HapticCondition
>  *  \sa SDL_HapticRamp
>  *  \sa SDL_HapticLeftRight
>  *  \sa SDL_HapticCustom
>  */
> typedef union SDL_HapticEffect
> {
>     /* Common for all force feedback effects */
>     Uint16 type;                    /**< Effect type. */
>     SDL_HapticConstant constant;    /**< Constant effect. */
>     SDL_HapticPeriodic periodic;    /**< Periodic effect. */
>     SDL_HapticCondition condition;  /**< Condition effect. */
>     SDL_HapticRamp ramp;            /**< Ramp effect. */
>     SDL_HapticLeftRight leftright;  /**< Left/Right effect. */
>     SDL_HapticCustom custom;        /**< Custom effect. */
> } SDL_HapticEffect;
> 
> 
> /* Function prototypes */
> /**
>  *  \brief Count the number of haptic devices attached to the system.
>  *
>  *  \return Number of haptic devices detected on the system.
>  */
> extern DECLSPEC int SDLCALL SDL_NumHaptics(void);
> 
> /**
>  *  \brief Get the implementation dependent name of a Haptic device.
>  *
>  *  This can be called before any joysticks are opened.
>  *  If no name can be found, this function returns NULL.
>  *
>  *  \param device_index Index of the device to get its name.
>  *  \return Name of the device or NULL on error.
>  *
>  *  \sa SDL_NumHaptics
>  */
> extern DECLSPEC const char *SDLCALL SDL_HapticName(int device_index);
> 
> /**
>  *  \brief Opens a Haptic device for usage.
>  *
>  *  The index passed as an argument refers to the N'th Haptic device on this
>  *  system.
>  *
>  *  When opening a haptic device, its gain will be set to maximum and
>  *  autocenter will be disabled.  To modify these values use
>  *  SDL_HapticSetGain() and SDL_HapticSetAutocenter().
>  *
>  *  \param device_index Index of the device to open.
>  *  \return Device identifier or NULL on error.
>  *
>  *  \sa SDL_HapticIndex
>  *  \sa SDL_HapticOpenFromMouse
>  *  \sa SDL_HapticOpenFromJoystick
>  *  \sa SDL_HapticClose
>  *  \sa SDL_HapticSetGain
>  *  \sa SDL_HapticSetAutocenter
>  *  \sa SDL_HapticPause
>  *  \sa SDL_HapticStopAll
>  */
> extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpen(int device_index);
> 
> /**
>  *  \brief Checks if the haptic device at index has been opened.
>  *
>  *  \param device_index Index to check to see if it has been opened.
>  *  \return 1 if it has been opened or 0 if it hasn't.
>  *
>  *  \sa SDL_HapticOpen
>  *  \sa SDL_HapticIndex
>  */
> extern DECLSPEC int SDLCALL SDL_HapticOpened(int device_index);
> 
> /**
>  *  \brief Gets the index of a haptic device.
>  *
>  *  \param haptic Haptic device to get the index of.
>  *  \return The index of the haptic device or -1 on error.
>  *
>  *  \sa SDL_HapticOpen
>  *  \sa SDL_HapticOpened
>  */
> extern DECLSPEC int SDLCALL SDL_HapticIndex(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Gets whether or not the current mouse has haptic capabilities.
>  *
>  *  \return SDL_TRUE if the mouse is haptic, SDL_FALSE if it isn't.
>  *
>  *  \sa SDL_HapticOpenFromMouse
>  */
> extern DECLSPEC int SDLCALL SDL_MouseIsHaptic(void);
> 
> /**
>  *  \brief Tries to open a haptic device from the current mouse.
>  *
>  *  \return The haptic device identifier or NULL on error.
>  *
>  *  \sa SDL_MouseIsHaptic
>  *  \sa SDL_HapticOpen
>  */
> extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpenFromMouse(void);
> 
> /**
>  *  \brief Checks to see if a joystick has haptic features.
>  *
>  *  \param joystick Joystick to test for haptic capabilities.
>  *  \return 1 if the joystick is haptic, 0 if it isn't
>  *          or -1 if an error ocurred.
>  *
>  *  \sa SDL_HapticOpenFromJoystick
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickIsHaptic(SDL_Joystick * joystick);
> 
> /**
>  *  \brief Opens a Haptic device for usage from a Joystick device.
>  *
>  *  You must still close the haptic device seperately.  It will not be closed
>  *  with the joystick.
>  *
>  *  When opening from a joystick you should first close the haptic device before
>  *  closing the joystick device.  If not, on some implementations the haptic
>  *  device will also get unallocated and you'll be unable to use force feedback
>  *  on that device.
>  *
>  *  \param joystick Joystick to create a haptic device from.
>  *  \return A valid haptic device identifier on success or NULL on error.
>  *
>  *  \sa SDL_HapticOpen
>  *  \sa SDL_HapticClose
>  */
> extern DECLSPEC SDL_Haptic *SDLCALL SDL_HapticOpenFromJoystick(SDL_Joystick *
>                                                                joystick);
> 
> /**
>  *  \brief Closes a Haptic device previously opened with SDL_HapticOpen().
>  *
>  *  \param haptic Haptic device to close.
>  */
> extern DECLSPEC void SDLCALL SDL_HapticClose(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Returns the number of effects a haptic device can store.
>  *
>  *  On some platforms this isn't fully supported, and therefore is an
>  *  approximation.  Always check to see if your created effect was actually
>  *  created and do not rely solely on SDL_HapticNumEffects().
>  *
>  *  \param haptic The haptic device to query effect max.
>  *  \return The number of effects the haptic device can store or
>  *          -1 on error.
>  *
>  *  \sa SDL_HapticNumEffectsPlaying
>  *  \sa SDL_HapticQuery
>  */
> extern DECLSPEC int SDLCALL SDL_HapticNumEffects(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Returns the number of effects a haptic device can play at the same
>  *         time.
>  *
>  *  This is not supported on all platforms, but will always return a value.
>  *  Added here for the sake of completeness.
>  *
>  *  \param haptic The haptic device to query maximum playing effects.
>  *  \return The number of effects the haptic device can play at the same time
>  *          or -1 on error.
>  *
>  *  \sa SDL_HapticNumEffects
>  *  \sa SDL_HapticQuery
>  */
> extern DECLSPEC int SDLCALL SDL_HapticNumEffectsPlaying(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Gets the haptic devices supported features in bitwise matter.
>  *
>  *  Example:
>  *  \code
>  *  if (SDL_HapticQuery(haptic) & SDL_HAPTIC_CONSTANT) {
>  *      printf("We have constant haptic effect!");
>  *  }
>  *  \endcode
>  *
>  *  \param haptic The haptic device to query.
>  *  \return Haptic features in bitwise manner (OR'd).
>  *
>  *  \sa SDL_HapticNumEffects
>  *  \sa SDL_HapticEffectSupported
>  */
> extern DECLSPEC unsigned int SDLCALL SDL_HapticQuery(SDL_Haptic * haptic);
> 
> 
> /**
>  *  \brief Gets the number of haptic axes the device has.
>  *
>  *  \sa SDL_HapticDirection
>  */
> extern DECLSPEC int SDLCALL SDL_HapticNumAxes(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Checks to see if effect is supported by haptic.
>  *
>  *  \param haptic Haptic device to check on.
>  *  \param effect Effect to check to see if it is supported.
>  *  \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.
>  *
>  *  \sa SDL_HapticQuery
>  *  \sa SDL_HapticNewEffect
>  */
> extern DECLSPEC int SDLCALL SDL_HapticEffectSupported(SDL_Haptic * haptic,
>                                                       SDL_HapticEffect *
>                                                       effect);
> 
> /**
>  *  \brief Creates a new haptic effect on the device.
>  *
>  *  \param haptic Haptic device to create the effect on.
>  *  \param effect Properties of the effect to create.
>  *  \return The id of the effect on success or -1 on error.
>  *
>  *  \sa SDL_HapticUpdateEffect
>  *  \sa SDL_HapticRunEffect
>  *  \sa SDL_HapticDestroyEffect
>  */
> extern DECLSPEC int SDLCALL SDL_HapticNewEffect(SDL_Haptic * haptic,
>                                                 SDL_HapticEffect * effect);
> 
> /**
>  *  \brief Updates the properties of an effect.
>  *
>  *  Can be used dynamically, although behaviour when dynamically changing
>  *  direction may be strange.  Specifically the effect may reupload itself
>  *  and start playing from the start.  You cannot change the type either when
>  *  running SDL_HapticUpdateEffect().
>  *
>  *  \param haptic Haptic device that has the effect.
>  *  \param effect Effect to update.
>  *  \param data New effect properties to use.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticNewEffect
>  *  \sa SDL_HapticRunEffect
>  *  \sa SDL_HapticDestroyEffect
>  */
> extern DECLSPEC int SDLCALL SDL_HapticUpdateEffect(SDL_Haptic * haptic,
>                                                    int effect,
>                                                    SDL_HapticEffect * data);
> 
> /**
>  *  \brief Runs the haptic effect on its associated haptic device.
>  *
>  *  If iterations are ::SDL_HAPTIC_INFINITY, it'll run the effect over and over
>  *  repeating the envelope (attack and fade) every time.  If you only want the
>  *  effect to last forever, set ::SDL_HAPTIC_INFINITY in the effect's length
>  *  parameter.
>  *
>  *  \param haptic Haptic device to run the effect on.
>  *  \param effect Identifier of the haptic effect to run.
>  *  \param iterations Number of iterations to run the effect. Use
>  *         ::SDL_HAPTIC_INFINITY for infinity.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticStopEffect
>  *  \sa SDL_HapticDestroyEffect
>  *  \sa SDL_HapticGetEffectStatus
>  */
> extern DECLSPEC int SDLCALL SDL_HapticRunEffect(SDL_Haptic * haptic,
>                                                 int effect,
>                                                 Uint32 iterations);
> 
> /**
>  *  \brief Stops the haptic effect on its associated haptic device.
>  *
>  *  \param haptic Haptic device to stop the effect on.
>  *  \param effect Identifier of the effect to stop.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticRunEffect
>  *  \sa SDL_HapticDestroyEffect
>  */
> extern DECLSPEC int SDLCALL SDL_HapticStopEffect(SDL_Haptic * haptic,
>                                                  int effect);
> 
> /**
>  *  \brief Destroys a haptic effect on the device.
>  *
>  *  This will stop the effect if it's running.  Effects are automatically
>  *  destroyed when the device is closed.
>  *
>  *  \param haptic Device to destroy the effect on.
>  *  \param effect Identifier of the effect to destroy.
>  *
>  *  \sa SDL_HapticNewEffect
>  */
> extern DECLSPEC void SDLCALL SDL_HapticDestroyEffect(SDL_Haptic * haptic,
>                                                      int effect);
> 
> /**
>  *  \brief Gets the status of the current effect on the haptic device.
>  *
>  *  Device must support the ::SDL_HAPTIC_STATUS feature.
>  *
>  *  \param haptic Haptic device to query the effect status on.
>  *  \param effect Identifier of the effect to query its status.
>  *  \return 0 if it isn't playing, 1 if it is playing or -1 on error.
>  *
>  *  \sa SDL_HapticRunEffect
>  *  \sa SDL_HapticStopEffect
>  */
> extern DECLSPEC int SDLCALL SDL_HapticGetEffectStatus(SDL_Haptic * haptic,
>                                                       int effect);
> 
> /**
>  *  \brief Sets the global gain of the device.
>  *
>  *  Device must support the ::SDL_HAPTIC_GAIN feature.
>  *
>  *  The user may specify the maximum gain by setting the environment variable
>  *  SDL_HAPTIC_GAIN_MAX which should be between 0 and 100.  All calls to
>  *  SDL_HapticSetGain() will scale linearly using SDL_HAPTIC_GAIN_MAX as the
>  *  maximum.
>  *
>  *  \param haptic Haptic device to set the gain on.
>  *  \param gain Value to set the gain to, should be between 0 and 100.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticQuery
>  */
> extern DECLSPEC int SDLCALL SDL_HapticSetGain(SDL_Haptic * haptic, int gain);
> 
> /**
>  *  \brief Sets the global autocenter of the device.
>  *
>  *  Autocenter should be between 0 and 100.  Setting it to 0 will disable
>  *  autocentering.
>  *
>  *  Device must support the ::SDL_HAPTIC_AUTOCENTER feature.
>  *
>  *  \param haptic Haptic device to set autocentering on.
>  *  \param autocenter Value to set autocenter to, 0 disables autocentering.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticQuery
>  */
> extern DECLSPEC int SDLCALL SDL_HapticSetAutocenter(SDL_Haptic * haptic,
>                                                     int autocenter);
> 
> /**
>  *  \brief Pauses a haptic device.
>  *
>  *  Device must support the ::SDL_HAPTIC_PAUSE feature.  Call
>  *  SDL_HapticUnpause() to resume playback.
>  *
>  *  Do not modify the effects nor add new ones while the device is paused.
>  *  That can cause all sorts of weird errors.
>  *
>  *  \param haptic Haptic device to pause.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticUnpause
>  */
> extern DECLSPEC int SDLCALL SDL_HapticPause(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Unpauses a haptic device.
>  *
>  *  Call to unpause after SDL_HapticPause().
>  *
>  *  \param haptic Haptic device to pause.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticPause
>  */
> extern DECLSPEC int SDLCALL SDL_HapticUnpause(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Stops all the currently playing effects on a haptic device.
>  *
>  *  \param haptic Haptic device to stop.
>  *  \return 0 on success or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_HapticStopAll(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Checks to see if rumble is supported on a haptic device.
>  *
>  *  \param haptic Haptic device to check to see if it supports rumble.
>  *  \return SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1 on error.
>  *
>  *  \sa SDL_HapticRumbleInit
>  *  \sa SDL_HapticRumblePlay
>  *  \sa SDL_HapticRumbleStop
>  */
> extern DECLSPEC int SDLCALL SDL_HapticRumbleSupported(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Initializes the haptic device for simple rumble playback.
>  *
>  *  \param haptic Haptic device to initialize for simple rumble playback.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticOpen
>  *  \sa SDL_HapticRumbleSupported
>  *  \sa SDL_HapticRumblePlay
>  *  \sa SDL_HapticRumbleStop
>  */
> extern DECLSPEC int SDLCALL SDL_HapticRumbleInit(SDL_Haptic * haptic);
> 
> /**
>  *  \brief Runs simple rumble on a haptic device
>  *
>  *  \param haptic Haptic device to play rumble effect on.
>  *  \param strength Strength of the rumble to play as a 0-1 float value.
>  *  \param length Length of the rumble to play in milliseconds.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticRumbleSupported
>  *  \sa SDL_HapticRumbleInit
>  *  \sa SDL_HapticRumbleStop
>  */
> extern DECLSPEC int SDLCALL SDL_HapticRumblePlay(SDL_Haptic * haptic, float strength, Uint32 length );
> 
> /**
>  *  \brief Stops the simple rumble on a haptic device.
>  *
>  *  \param haptic Haptic to stop the rumble on.
>  *  \return 0 on success or -1 on error.
>  *
>  *  \sa SDL_HapticRumbleSupported
>  *  \sa SDL_HapticRumbleInit
>  *  \sa SDL_HapticRumblePlay
>  */
> extern DECLSPEC int SDLCALL SDL_HapticRumbleStop(SDL_Haptic * haptic);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_haptic_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_hints.h ../android-sdl/jni/SDL2/include/SDL_hints.h
1,355c1,339
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_hints.h
<  *
<  *  Official documentation for SDL configuration variables
<  *
<  *  This file contains functions to set and get configuration hints,
<  *  as well as listing each of them alphabetically.
<  *
<  *  The convention for naming hints is SDL_HINT_X, where "SDL_X" is
<  *  the environment variable that can be used to override the default.
<  *
<  *  In general these hints are just that - they may or may not be
<  *  supported or applicable on any given platform, but they provide
<  *  a way for an application or user to give the library a hint as
<  *  to how they would like the library to work.
<  */
< 
< #ifndef _SDL_hints_h
< #define _SDL_hints_h
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief  A variable controlling how 3D acceleration is used to accelerate the SDL screen surface.
<  *
<  *  SDL can try to accelerate the SDL screen surface by using streaming
<  *  textures with a 3D rendering engine.  This variable controls whether and
<  *  how this is done.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Disable 3D acceleration
<  *    "1"       - Enable 3D acceleration, using the default renderer.
<  *    "X"       - Enable 3D acceleration, using X where X is one of the valid rendering drivers.  (e.g. "direct3d", "opengl", etc.)
<  *
<  *  By default SDL tries to make a best guess for each platform whether
<  *  to use acceleration or not.
<  */
< #define SDL_HINT_FRAMEBUFFER_ACCELERATION   "SDL_FRAMEBUFFER_ACCELERATION"
< 
< /**
<  *  \brief  A variable specifying which render driver to use.
<  *
<  *  If the application doesn't pick a specific renderer to use, this variable
<  *  specifies the name of the preferred renderer.  If the preferred renderer
<  *  can't be initialized, the normal default renderer is used.
<  *
<  *  This variable is case insensitive and can be set to the following values:
<  *    "direct3d"
<  *    "opengl"
<  *    "opengles2"
<  *    "opengles"
<  *    "software"
<  *
<  *  The default varies by platform, but it's the first one in the list that
<  *  is available on the current platform.
<  */
< #define SDL_HINT_RENDER_DRIVER              "SDL_RENDER_DRIVER"
< 
< /**
<  *  \brief  A variable controlling whether the OpenGL render driver uses shaders if they are available.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Disable shaders
<  *    "1"       - Enable shaders
<  *
<  *  By default shaders are used if OpenGL supports them.
<  */
< #define SDL_HINT_RENDER_OPENGL_SHADERS      "SDL_RENDER_OPENGL_SHADERS"
< 
< /**
<  *  \brief  A variable controlling whether the Direct3D device is initialized for thread-safe operations.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Thread-safety is not enabled (faster)
<  *    "1"       - Thread-safety is enabled
<  *
<  *  By default the Direct3D device is created with thread-safety disabled.
<  */
< #define SDL_HINT_RENDER_DIRECT3D_THREADSAFE "SDL_RENDER_DIRECT3D_THREADSAFE"
< 
< /**
<  *  \brief  A variable controlling the scaling quality
<  *
<  *  This variable can be set to the following values:
<  *    "0" or "nearest" - Nearest pixel sampling
<  *    "1" or "linear"  - Linear filtering (supported by OpenGL and Direct3D)
<  *    "2" or "best"    - Currently this is the same as "linear"
<  *
<  *  By default nearest pixel sampling is used
<  */
< #define SDL_HINT_RENDER_SCALE_QUALITY       "SDL_RENDER_SCALE_QUALITY"
< 
< /**
<  *  \brief  A variable controlling whether updates to the SDL screen surface should be synchronized with the vertical refresh, to avoid tearing.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Disable vsync
<  *    "1"       - Enable vsync
<  *
<  *  By default SDL does not sync screen surface updates with vertical refresh.
<  */
< #define SDL_HINT_RENDER_VSYNC               "SDL_RENDER_VSYNC"
< 
< /**
<  *  \brief  A variable controlling whether the X11 VidMode extension should be used.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Disable XVidMode
<  *    "1"       - Enable XVidMode
<  *
<  *  By default SDL will use XVidMode if it is available.
<  */
< #define SDL_HINT_VIDEO_X11_XVIDMODE         "SDL_VIDEO_X11_XVIDMODE"
< 
< /**
<  *  \brief  A variable controlling whether the X11 Xinerama extension should be used.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Disable Xinerama
<  *    "1"       - Enable Xinerama
<  *
<  *  By default SDL will use Xinerama if it is available.
<  */
< #define SDL_HINT_VIDEO_X11_XINERAMA         "SDL_VIDEO_X11_XINERAMA"
< 
< /**
<  *  \brief  A variable controlling whether the X11 XRandR extension should be used.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Disable XRandR
<  *    "1"       - Enable XRandR
<  *
<  *  By default SDL will not use XRandR because of window manager issues.
<  */
< #define SDL_HINT_VIDEO_X11_XRANDR           "SDL_VIDEO_X11_XRANDR"
< 
< /**
<  *  \brief  A variable controlling whether grabbing input grabs the keyboard
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Grab will affect only the mouse
<  *    "1"       - Grab will affect mouse and keyboard
<  *
<  *  By default SDL will not grab the keyboard so system shortcuts still work.
<  */
< #define SDL_HINT_GRAB_KEYBOARD              "SDL_GRAB_KEYBOARD"
< 
< /**
<  *  \brief Minimize your SDL_Window if it loses key focus when in Fullscreen mode. Defaults to true.
<  *
<  */
< #define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS   "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
< 
< 
< /**
<  *  \brief  A variable controlling whether the idle timer is disabled on iOS.
<  *
<  *  When an iOS app does not receive touches for some time, the screen is
<  *  dimmed automatically. For games where the accelerometer is the only input
<  *  this is problematic. This functionality can be disabled by setting this
<  *  hint.
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - Enable idle timer
<  *    "1"       - Disable idle timer
<  */
< #define SDL_HINT_IDLE_TIMER_DISABLED "SDL_IOS_IDLE_TIMER_DISABLED"
< 
< /**
<  *  \brief  A variable controlling which orientations are allowed on iOS.
<  *
<  *  In some circumstances it is necessary to be able to explicitly control
<  *  which UI orientations are allowed.
<  *
<  *  This variable is a space delimited list of the following values:
<  *    "LandscapeLeft", "LandscapeRight", "Portrait" "PortraitUpsideDown"
<  */
< #define SDL_HINT_ORIENTATIONS "SDL_IOS_ORIENTATIONS"
< 
< 
< /**
<  *  \brief  A variable that lets you disable the detection and use of Xinput gamepad devices
<  *
<  *  The variable can be set to the following values:
<  *    "0"       - Disable XInput timer (only uses direct input)
<  *    "1"       - Enable XInput timer (the default)
<  */
< #define SDL_HINT_XINPUT_ENABLED "SDL_XINPUT_ENABLED"
< 
< 
< /**
<  *  \brief  A variable that lets you manually hint extra gamecontroller db entries
<  *
<  *  The variable should be newline delimited rows of gamecontroller config data, see SDL_gamecontroller.h
<  *
<  *  This hint must be set before calling SDL_Init(SDL_INIT_GAMECONTROLLER)
<  *  You can update mappings after the system is initialized with SDL_GameControllerMappingForGUID() and SDL_GameControllerAddMapping()
<  */
< #define SDL_HINT_GAMECONTROLLERCONFIG "SDL_GAMECONTROLLERCONFIG"
< 
< 
< /**
<  *  \brief  A variable that lets you enable joystick (and gamecontroller) events even when your app is in the background.
<  *
<  *  The variable can be set to the following values:
<  *    "0"       - Disable joystick & gamecontroller input events when the
<  *                application is in the background.
<  *    "1"       - Enable joystick & gamecontroller input events when the
<  *                application is in the backgroumd.
<  *
<  *  The default value is "0".  This hint may be set at any time.
<  */
< #define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
< 
< 
< /**
<  *  \brief If set to 0 then never set the top most bit on a SDL Window, even if the video mode expects it.
<  *      This is a debugging aid for developers and not expected to be used by end users. The default is "1"
<  *
<  *  This variable can be set to the following values:
<  *    "0"       - don't allow topmost
<  *    "1"       - allow topmost
<  */
< #define SDL_HINT_ALLOW_TOPMOST "SDL_ALLOW_TOPMOST"
< 
< 
< /**
<  *  \brief A variable that controls the timer resolution, in milliseconds.
<  *
<  *  The higher resolution the timer, the more frequently the CPU services
<  *  timer interrupts, and the more precise delays are, but this takes up
<  *  power and CPU time.  This hint is only used on Windows 7 and earlier.
<  *
<  *  See this blog post for more information:
<  *  http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
<  *
<  *  If this variable is set to "0", the system timer resolution is not set.
<  *
<  *  The default value is "1". This hint may be set at any time.
<  */
< #define SDL_HINT_TIMER_RESOLUTION "SDL_TIMER_RESOLUTION"
< 
< 
< /**
<  *  \brief If set to 1, then do not allow high-DPI windows. ("Retina" on Mac)
<  */
< #define SDL_HINT_VIDEO_HIGHDPI_DISABLED "SDL_VIDEO_HIGHDPI_DISABLED"
< 
< 
< /**
<  *  \brief  An enumeration of hint priorities
<  */
< typedef enum
< {
<     SDL_HINT_DEFAULT,
<     SDL_HINT_NORMAL,
<     SDL_HINT_OVERRIDE
< } SDL_HintPriority;
< 
< 
< /**
<  *  \brief Set a hint with a specific priority
<  *
<  *  The priority controls the behavior when setting a hint that already
<  *  has a value.  Hints will replace existing hints of their priority and
<  *  lower.  Environment variables are considered to have override priority.
<  *
<  *  \return SDL_TRUE if the hint was set, SDL_FALSE otherwise
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_SetHintWithPriority(const char *name,
<                                                          const char *value,
<                                                          SDL_HintPriority priority);
< 
< /**
<  *  \brief Set a hint with normal priority
<  *
<  *  \return SDL_TRUE if the hint was set, SDL_FALSE otherwise
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_SetHint(const char *name,
<                                              const char *value);
< 
< /**
<  *  \brief Get a hint
<  *
<  *  \return The string value of a hint variable.
<  */
< extern DECLSPEC const char * SDLCALL SDL_GetHint(const char *name);
< 
< /**
<  *  \brief Add a function to watch a particular hint
<  *
<  *  \param name The hint to watch
<  *  \param callback The function to call when the hint value changes
<  *  \param userdata A pointer to pass to the callback function
<  */
< typedef void (*SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);
< extern DECLSPEC void SDLCALL SDL_AddHintCallback(const char *name,
<                                                  SDL_HintCallback callback,
<                                                  void *userdata);
< 
< /**
<  *  \brief Remove a function watching a particular hint
<  *
<  *  \param name The hint being watched
<  *  \param callback The function being called when the hint value changes
<  *  \param userdata A pointer being passed to the callback function
<  */
< extern DECLSPEC void SDLCALL SDL_DelHintCallback(const char *name,
<                                                  SDL_HintCallback callback,
<                                                  void *userdata);
< 
< /**
<  *  \brief  Clear all hints
<  *
<  *  This function is called during SDL_Quit() to free stored hints.
<  */
< extern DECLSPEC void SDLCALL SDL_ClearHints(void);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_hints_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_hints.h
>  *
>  *  Official documentation for SDL configuration variables
>  *
>  *  This file contains functions to set and get configuration hints,
>  *  as well as listing each of them alphabetically.
>  *
>  *  The convention for naming hints is SDL_HINT_X, where "SDL_X" is
>  *  the environment variable that can be used to override the default.
>  *
>  *  In general these hints are just that - they may or may not be
>  *  supported or applicable on any given platform, but they provide
>  *  a way for an application or user to give the library a hint as
>  *  to how they would like the library to work.
>  */
> 
> #ifndef _SDL_hints_h
> #define _SDL_hints_h
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief  A variable controlling how 3D acceleration is used to accelerate the SDL screen surface.
>  *
>  *  SDL can try to accelerate the SDL screen surface by using streaming
>  *  textures with a 3D rendering engine.  This variable controls whether and
>  *  how this is done.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Disable 3D acceleration
>  *    "1"       - Enable 3D acceleration, using the default renderer.
>  *    "X"       - Enable 3D acceleration, using X where X is one of the valid rendering drivers.  (e.g. "direct3d", "opengl", etc.)
>  *
>  *  By default SDL tries to make a best guess for each platform whether
>  *  to use acceleration or not.
>  */
> #define SDL_HINT_FRAMEBUFFER_ACCELERATION   "SDL_FRAMEBUFFER_ACCELERATION"
> 
> /**
>  *  \brief  A variable specifying which render driver to use.
>  *
>  *  If the application doesn't pick a specific renderer to use, this variable
>  *  specifies the name of the preferred renderer.  If the preferred renderer
>  *  can't be initialized, the normal default renderer is used.
>  *
>  *  This variable is case insensitive and can be set to the following values:
>  *    "direct3d"
>  *    "opengl"
>  *    "opengles2"
>  *    "opengles"
>  *    "software"
>  *
>  *  The default varies by platform, but it's the first one in the list that
>  *  is available on the current platform.
>  */
> #define SDL_HINT_RENDER_DRIVER              "SDL_RENDER_DRIVER"
> 
> /**
>  *  \brief  A variable controlling whether the OpenGL render driver uses shaders if they are available.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Disable shaders
>  *    "1"       - Enable shaders
>  *
>  *  By default shaders are used if OpenGL supports them.
>  */
> #define SDL_HINT_RENDER_OPENGL_SHADERS      "SDL_RENDER_OPENGL_SHADERS"
> 
> /**
>  *  \brief  A variable controlling the scaling quality
>  *
>  *  This variable can be set to the following values:
>  *    "0" or "nearest" - Nearest pixel sampling
>  *    "1" or "linear"  - Linear filtering (supported by OpenGL and Direct3D)
>  *    "2" or "best"    - Currently this is the same as "linear"
>  *
>  *  By default nearest pixel sampling is used
>  */
> #define SDL_HINT_RENDER_SCALE_QUALITY       "SDL_RENDER_SCALE_QUALITY"
> 
> /**
>  *  \brief  A variable controlling whether updates to the SDL screen surface should be synchronized with the vertical refresh, to avoid tearing.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Disable vsync
>  *    "1"       - Enable vsync
>  *
>  *  By default SDL does not sync screen surface updates with vertical refresh.
>  */
> #define SDL_HINT_RENDER_VSYNC               "SDL_RENDER_VSYNC"
> 
> /**
>  *  \brief  A variable controlling whether the X11 VidMode extension should be used.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Disable XVidMode
>  *    "1"       - Enable XVidMode
>  *
>  *  By default SDL will use XVidMode if it is available.
>  */
> #define SDL_HINT_VIDEO_X11_XVIDMODE         "SDL_VIDEO_X11_XVIDMODE"
> 
> /**
>  *  \brief  A variable controlling whether the X11 Xinerama extension should be used.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Disable Xinerama
>  *    "1"       - Enable Xinerama
>  *
>  *  By default SDL will use Xinerama if it is available.
>  */
> #define SDL_HINT_VIDEO_X11_XINERAMA         "SDL_VIDEO_X11_XINERAMA"
> 
> /**
>  *  \brief  A variable controlling whether the X11 XRandR extension should be used.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Disable XRandR
>  *    "1"       - Enable XRandR
>  *
>  *  By default SDL will not use XRandR because of window manager issues.
>  */
> #define SDL_HINT_VIDEO_X11_XRANDR           "SDL_VIDEO_X11_XRANDR"
> 
> /**
>  *  \brief  A variable controlling whether grabbing input grabs the keyboard
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Grab will affect only the mouse
>  *    "1"       - Grab will affect mouse and keyboard
>  *
>  *  By default SDL will not grab the keyboard so system shortcuts still work.
>  */
> #define SDL_HINT_GRAB_KEYBOARD              "SDL_GRAB_KEYBOARD"
> 
> /**
>  *  \brief Minimize your SDL_Window if it loses key focus when in Fullscreen mode. Defaults to true.
>  *
>  */
> #define SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS   "SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS"
> 
> 
> /**
>  *  \brief  A variable controlling whether the idle timer is disabled on iOS.
>  *
>  *  When an iOS app does not receive touches for some time, the screen is
>  *  dimmed automatically. For games where the accelerometer is the only input
>  *  this is problematic. This functionality can be disabled by setting this
>  *  hint.
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - Enable idle timer
>  *    "1"       - Disable idle timer
>  */
> #define SDL_HINT_IDLE_TIMER_DISABLED "SDL_IOS_IDLE_TIMER_DISABLED"
> 
> /**
>  *  \brief  A variable controlling which orientations are allowed on iOS.
>  *
>  *  In some circumstances it is necessary to be able to explicitly control
>  *  which UI orientations are allowed.
>  *
>  *  This variable is a space delimited list of the following values:
>  *    "LandscapeLeft", "LandscapeRight", "Portrait" "PortraitUpsideDown"
>  */
> #define SDL_HINT_ORIENTATIONS "SDL_IOS_ORIENTATIONS"
> 
> 
> /**
>  *  \brief  A variable that lets you disable the detection and use of Xinput gamepad devices
>  *
>  *  The variable can be set to the following values:
>  *    "0"       - Disable XInput timer (only uses direct input)
>  *    "1"       - Enable XInput timer (the default)
>  */
> #define SDL_HINT_XINPUT_ENABLED "SDL_XINPUT_ENABLED"
> 
> 
> /**
>  *  \brief  A variable that lets you manually hint extra gamecontroller db entries
>  *
>  *  The variable should be newline delimited rows of gamecontroller config data, see SDL_gamecontroller.h
>  *
>  *  This hint must be set before calling SDL_Init(SDL_INIT_GAMECONTROLLER)
>  *  You can update mappings after the system is initialized with SDL_GameControllerMappingForGUID() and SDL_GameControllerAddMapping()
>  */
> #define SDL_HINT_GAMECONTROLLERCONFIG "SDL_GAMECONTROLLERCONFIG"
> 
> 
> /**
>  *  \brief  A variable that lets you enable joystick (and gamecontroller) events even when your app is in the background.
>  *
>  *  The variable can be set to the following values:
>  *    "0"       - Disable joystick & gamecontroller input events when the
>  *                application is in the background.
>  *    "1"       - Enable joystick & gamecontroller input events when the
>  *                application is in the backgroumd.
>  *
>  *  The default value is "0".  This hint may be set at any time.
>  */
> #define SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS "SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS"
> 
> 
> /**
>  *  \brief If set to 0 then never set the top most bit on a SDL Window, even if the video mode expects it.
>  *      This is a debugging aid for developers and not expected to be used by end users. The default is "1"
>  *
>  *  This variable can be set to the following values:
>  *    "0"       - don't allow topmost
>  *    "1"       - allow topmost
>  */
> #define SDL_HINT_ALLOW_TOPMOST "SDL_ALLOW_TOPMOST"
> 
> 
> /**
>  *  \brief A variable that controls the timer resolution, in milliseconds.
>  *
>  *  The higher resolution the timer, the more frequently the CPU services
>  *  timer interrupts, and the more precise delays are, but this takes up
>  *  power and CPU time.  This hint is only used on Windows 7 and earlier.
>  *
>  *  See this blog post for more information:
>  *  http://randomascii.wordpress.com/2013/07/08/windows-timer-resolution-megawatts-wasted/
>  *
>  *  If this variable is set to "0", the system timer resolution is not set.
>  *
>  *  The default value is "1". This hint may be set at any time.
>  */
> #define SDL_HINT_TIMER_RESOLUTION "SDL_TIMER_RESOLUTION"
> 
> 
> 
> /**
>  *  \brief  An enumeration of hint priorities
>  */
> typedef enum
> {
>     SDL_HINT_DEFAULT,
>     SDL_HINT_NORMAL,
>     SDL_HINT_OVERRIDE
> } SDL_HintPriority;
> 
> 
> /**
>  *  \brief Set a hint with a specific priority
>  *
>  *  The priority controls the behavior when setting a hint that already
>  *  has a value.  Hints will replace existing hints of their priority and
>  *  lower.  Environment variables are considered to have override priority.
>  *
>  *  \return SDL_TRUE if the hint was set, SDL_FALSE otherwise
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_SetHintWithPriority(const char *name,
>                                                          const char *value,
>                                                          SDL_HintPriority priority);
> 
> /**
>  *  \brief Set a hint with normal priority
>  *
>  *  \return SDL_TRUE if the hint was set, SDL_FALSE otherwise
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_SetHint(const char *name,
>                                              const char *value);
> 
> /**
>  *  \brief Get a hint
>  *
>  *  \return The string value of a hint variable.
>  */
> extern DECLSPEC const char * SDLCALL SDL_GetHint(const char *name);
> 
> /**
>  *  \brief Add a function to watch a particular hint
>  *
>  *  \param name The hint to watch
>  *  \param callback The function to call when the hint value changes
>  *  \param userdata A pointer to pass to the callback function
>  */
> typedef void (*SDL_HintCallback)(void *userdata, const char *name, const char *oldValue, const char *newValue);
> extern DECLSPEC void SDLCALL SDL_AddHintCallback(const char *name,
>                                                  SDL_HintCallback callback,
>                                                  void *userdata);
> 
> /**
>  *  \brief Remove a function watching a particular hint
>  *
>  *  \param name The hint being watched
>  *  \param callback The function being called when the hint value changes
>  *  \param userdata A pointer being passed to the callback function
>  */
> extern DECLSPEC void SDLCALL SDL_DelHintCallback(const char *name,
>                                                  SDL_HintCallback callback,
>                                                  void *userdata);
> 
> /**
>  *  \brief  Clear all hints
>  *
>  *  This function is called during SDL_Quit() to free stored hints.
>  */
> extern DECLSPEC void SDLCALL SDL_ClearHints(void);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_hints_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_joystick.h ../android-sdl/jni/SDL2/include/SDL_joystick.h
1,253c1,253
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_joystick.h
<  *
<  *  Include file for SDL joystick event handling
<  *
<  * The term "device_index" identifies currently plugged in joystick devices between 0 and SDL_NumJoysticks, with the exact joystick
<  *   behind a device_index changing as joysticks are plugged and unplugged.
<  *
<  * The term "instance_id" is the current instantiation of a joystick device in the system, if the joystick is removed and then re-inserted
<  *   then it will get a new instance_id, instance_id's are monotonically increasing identifiers of a joystick plugged in.
<  *
<  * The term JoystickGUID is a stable 128-bit identifier for a joystick device that does not change over time, it identifies class of
<  *   the device (a X360 wired controller for example). This identifier is platform dependent.
<  *
<  *
<  */
< 
< #ifndef _SDL_joystick_h
< #define _SDL_joystick_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \file SDL_joystick.h
<  *
<  *  In order to use these functions, SDL_Init() must have been called
<  *  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
<  *  for joysticks, and load appropriate drivers.
<  *
<  *  If you would like to receive joystick updates while the application
<  *  is in the background, you should set the following hint before calling
<  *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS
<  */
< 
< /* The joystick structure used to identify an SDL joystick */
< struct _SDL_Joystick;
< typedef struct _SDL_Joystick SDL_Joystick;
< 
< /* A structure that encodes the stable unique id for a joystick device */
< typedef struct {
<     Uint8 data[16];
< } SDL_JoystickGUID;
< 
< typedef Sint32 SDL_JoystickID;
< 
< 
< /* Function prototypes */
< /**
<  *  Count the number of joysticks attached to the system right now
<  */
< extern DECLSPEC int SDLCALL SDL_NumJoysticks(void);
< 
< /**
<  *  Get the implementation dependent name of a joystick.
<  *  This can be called before any joysticks are opened.
<  *  If no name can be found, this function returns NULL.
<  */
< extern DECLSPEC const char *SDLCALL SDL_JoystickNameForIndex(int device_index);
< 
< /**
<  *  Open a joystick for use.
<  *  The index passed as an argument refers tothe N'th joystick on the system.
<  *  This index is the value which will identify this joystick in future joystick
<  *  events.
<  *
<  *  \return A joystick identifier, or NULL if an error occurred.
<  */
< extern DECLSPEC SDL_Joystick *SDLCALL SDL_JoystickOpen(int device_index);
< 
< /**
<  *  Return the name for this currently opened joystick.
<  *  If no name can be found, this function returns NULL.
<  */
< extern DECLSPEC const char *SDLCALL SDL_JoystickName(SDL_Joystick * joystick);
< 
< /**
<  *  Return the GUID for the joystick at this index
<  */
< extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetDeviceGUID(int device_index);
< 
< /**
<  *  Return the GUID for this opened joystick
<  */
< extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetGUID(SDL_Joystick * joystick);
< 
< /**
<  *  Return a string representation for this guid. pszGUID must point to at least 33 bytes
<  *  (32 for the string plus a NULL terminator).
<  */
< extern DECLSPEC void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);
< 
< /**
<  *  convert a string into a joystick formatted guid
<  */
< extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetGUIDFromString(const char *pchGUID);
< 
< /**
<  *  Returns SDL_TRUE if the joystick has been opened and currently connected, or SDL_FALSE if it has not.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_JoystickGetAttached(SDL_Joystick * joystick);
< 
< /**
<  *  Get the instance ID of an opened joystick or -1 if the joystick is invalid.
<  */
< extern DECLSPEC SDL_JoystickID SDLCALL SDL_JoystickInstanceID(SDL_Joystick * joystick);
< 
< /**
<  *  Get the number of general axis controls on a joystick.
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickNumAxes(SDL_Joystick * joystick);
< 
< /**
<  *  Get the number of trackballs on a joystick.
<  *
<  *  Joystick trackballs have only relative motion events associated
<  *  with them and their state cannot be polled.
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickNumBalls(SDL_Joystick * joystick);
< 
< /**
<  *  Get the number of POV hats on a joystick.
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickNumHats(SDL_Joystick * joystick);
< 
< /**
<  *  Get the number of buttons on a joystick.
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickNumButtons(SDL_Joystick * joystick);
< 
< /**
<  *  Update the current state of the open joysticks.
<  *
<  *  This is called automatically by the event loop if any joystick
<  *  events are enabled.
<  */
< extern DECLSPEC void SDLCALL SDL_JoystickUpdate(void);
< 
< /**
<  *  Enable/disable joystick event polling.
<  *
<  *  If joystick events are disabled, you must call SDL_JoystickUpdate()
<  *  yourself and check the state of the joystick when you want joystick
<  *  information.
<  *
<  *  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickEventState(int state);
< 
< /**
<  *  Get the current state of an axis control on a joystick.
<  *
<  *  The state is a value ranging from -32768 to 32767.
<  *
<  *  The axis indices start at index 0.
<  */
< extern DECLSPEC Sint16 SDLCALL SDL_JoystickGetAxis(SDL_Joystick * joystick,
<                                                    int axis);
< 
< /**
<  *  \name Hat positions
<  */
< /* @{ */
< #define SDL_HAT_CENTERED    0x00
< #define SDL_HAT_UP      0x01
< #define SDL_HAT_RIGHT       0x02
< #define SDL_HAT_DOWN        0x04
< #define SDL_HAT_LEFT        0x08
< #define SDL_HAT_RIGHTUP     (SDL_HAT_RIGHT|SDL_HAT_UP)
< #define SDL_HAT_RIGHTDOWN   (SDL_HAT_RIGHT|SDL_HAT_DOWN)
< #define SDL_HAT_LEFTUP      (SDL_HAT_LEFT|SDL_HAT_UP)
< #define SDL_HAT_LEFTDOWN    (SDL_HAT_LEFT|SDL_HAT_DOWN)
< /* @} */
< 
< /**
<  *  Get the current state of a POV hat on a joystick.
<  *
<  *  The hat indices start at index 0.
<  *
<  *  \return The return value is one of the following positions:
<  *           - ::SDL_HAT_CENTERED
<  *           - ::SDL_HAT_UP
<  *           - ::SDL_HAT_RIGHT
<  *           - ::SDL_HAT_DOWN
<  *           - ::SDL_HAT_LEFT
<  *           - ::SDL_HAT_RIGHTUP
<  *           - ::SDL_HAT_RIGHTDOWN
<  *           - ::SDL_HAT_LEFTUP
<  *           - ::SDL_HAT_LEFTDOWN
<  */
< extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetHat(SDL_Joystick * joystick,
<                                                  int hat);
< 
< /**
<  *  Get the ball axis change since the last poll.
<  *
<  *  \return 0, or -1 if you passed it invalid parameters.
<  *
<  *  The ball indices start at index 0.
<  */
< extern DECLSPEC int SDLCALL SDL_JoystickGetBall(SDL_Joystick * joystick,
<                                                 int ball, int *dx, int *dy);
< 
< /**
<  *  Get the current state of a button on a joystick.
<  *
<  *  The button indices start at index 0.
<  */
< extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetButton(SDL_Joystick * joystick,
<                                                     int button);
< 
< /**
<  *  Close a joystick previously opened with SDL_JoystickOpen().
<  */
< extern DECLSPEC void SDLCALL SDL_JoystickClose(SDL_Joystick * joystick);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_joystick_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_joystick.h
>  *
>  *  Include file for SDL joystick event handling
>  *
>  * The term "device_index" identifies currently plugged in joystick devices between 0 and SDL_NumJoysticks, with the exact joystick
>  *   behind a device_index changing as joysticks are plugged and unplugged.
>  *
>  * The term "instance_id" is the current instantiation of a joystick device in the system, if the joystick is removed and then re-inserted
>  *   then it will get a new instance_id, instance_id's are monotonically increasing identifiers of a joystick plugged in.
>  *
>  * The term JoystickGUID is a stable 128-bit identifier for a joystick device that does not change over time, it identifies class of
>  *   the device (a X360 wired controller for example). This identifier is platform dependent.
>  *
>  *
>  */
> 
> #ifndef _SDL_joystick_h
> #define _SDL_joystick_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \file SDL_joystick.h
>  *
>  *  In order to use these functions, SDL_Init() must have been called
>  *  with the ::SDL_INIT_JOYSTICK flag.  This causes SDL to scan the system
>  *  for joysticks, and load appropriate drivers.
>  *
>  *  If you would like to receive joystick updates while the application
>  *  is in the background, you should set the following hint before calling
>  *  SDL_Init(): SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS
>  */
> 
> /* The joystick structure used to identify an SDL joystick */
> struct _SDL_Joystick;
> typedef struct _SDL_Joystick SDL_Joystick;
> 
> /* A structure that encodes the stable unique id for a joystick device */
> typedef struct {
>     Uint8 data[16];
> } SDL_JoystickGUID;
> 
> typedef Sint32 SDL_JoystickID;
> 
> 
> /* Function prototypes */
> /**
>  *  Count the number of joysticks attached to the system right now
>  */
> extern DECLSPEC int SDLCALL SDL_NumJoysticks(void);
> 
> /**
>  *  Get the implementation dependent name of a joystick.
>  *  This can be called before any joysticks are opened.
>  *  If no name can be found, this function returns NULL.
>  */
> extern DECLSPEC const char *SDLCALL SDL_JoystickNameForIndex(int device_index);
> 
> /**
>  *  Open a joystick for use.
>  *  The index passed as an argument refers tothe N'th joystick on the system.
>  *  This index is the value which will identify this joystick in future joystick
>  *  events.
>  *
>  *  \return A joystick identifier, or NULL if an error occurred.
>  */
> extern DECLSPEC SDL_Joystick *SDLCALL SDL_JoystickOpen(int device_index);
> 
> /**
>  *  Return the name for this currently opened joystick.
>  *  If no name can be found, this function returns NULL.
>  */
> extern DECLSPEC const char *SDLCALL SDL_JoystickName(SDL_Joystick * joystick);
> 
> /**
>  *  Return the GUID for the joystick at this index
>  */
> extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetDeviceGUID(int device_index);
> 
> /**
>  *  Return the GUID for this opened joystick
>  */
> extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetGUID(SDL_Joystick * joystick);
> 
> /**
>  *  Return a string representation for this guid. pszGUID must point to at least 33 bytes
>  *  (32 for the string plus a NULL terminator).
>  */
> extern DECLSPEC void SDL_JoystickGetGUIDString(SDL_JoystickGUID guid, char *pszGUID, int cbGUID);
> 
> /**
>  *  convert a string into a joystick formatted guid
>  */
> extern DECLSPEC SDL_JoystickGUID SDLCALL SDL_JoystickGetGUIDFromString(const char *pchGUID);
> 
> /**
>  *  Returns SDL_TRUE if the joystick has been opened and currently connected, or SDL_FALSE if it has not.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_JoystickGetAttached(SDL_Joystick * joystick);
> 
> /**
>  *  Get the instance ID of an opened joystick or -1 if the joystick is invalid.
>  */
> extern DECLSPEC SDL_JoystickID SDLCALL SDL_JoystickInstanceID(SDL_Joystick * joystick);
> 
> /**
>  *  Get the number of general axis controls on a joystick.
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickNumAxes(SDL_Joystick * joystick);
> 
> /**
>  *  Get the number of trackballs on a joystick.
>  *
>  *  Joystick trackballs have only relative motion events associated
>  *  with them and their state cannot be polled.
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickNumBalls(SDL_Joystick * joystick);
> 
> /**
>  *  Get the number of POV hats on a joystick.
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickNumHats(SDL_Joystick * joystick);
> 
> /**
>  *  Get the number of buttons on a joystick.
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickNumButtons(SDL_Joystick * joystick);
> 
> /**
>  *  Update the current state of the open joysticks.
>  *
>  *  This is called automatically by the event loop if any joystick
>  *  events are enabled.
>  */
> extern DECLSPEC void SDLCALL SDL_JoystickUpdate(void);
> 
> /**
>  *  Enable/disable joystick event polling.
>  *
>  *  If joystick events are disabled, you must call SDL_JoystickUpdate()
>  *  yourself and check the state of the joystick when you want joystick
>  *  information.
>  *
>  *  The state can be one of ::SDL_QUERY, ::SDL_ENABLE or ::SDL_IGNORE.
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickEventState(int state);
> 
> /**
>  *  Get the current state of an axis control on a joystick.
>  *
>  *  The state is a value ranging from -32768 to 32767.
>  *
>  *  The axis indices start at index 0.
>  */
> extern DECLSPEC Sint16 SDLCALL SDL_JoystickGetAxis(SDL_Joystick * joystick,
>                                                    int axis);
> 
> /**
>  *  \name Hat positions
>  */
> /*@{*/
> #define SDL_HAT_CENTERED    0x00
> #define SDL_HAT_UP      0x01
> #define SDL_HAT_RIGHT       0x02
> #define SDL_HAT_DOWN        0x04
> #define SDL_HAT_LEFT        0x08
> #define SDL_HAT_RIGHTUP     (SDL_HAT_RIGHT|SDL_HAT_UP)
> #define SDL_HAT_RIGHTDOWN   (SDL_HAT_RIGHT|SDL_HAT_DOWN)
> #define SDL_HAT_LEFTUP      (SDL_HAT_LEFT|SDL_HAT_UP)
> #define SDL_HAT_LEFTDOWN    (SDL_HAT_LEFT|SDL_HAT_DOWN)
> /*@}*/
> 
> /**
>  *  Get the current state of a POV hat on a joystick.
>  *
>  *  The hat indices start at index 0.
>  *
>  *  \return The return value is one of the following positions:
>  *           - ::SDL_HAT_CENTERED
>  *           - ::SDL_HAT_UP
>  *           - ::SDL_HAT_RIGHT
>  *           - ::SDL_HAT_DOWN
>  *           - ::SDL_HAT_LEFT
>  *           - ::SDL_HAT_RIGHTUP
>  *           - ::SDL_HAT_RIGHTDOWN
>  *           - ::SDL_HAT_LEFTUP
>  *           - ::SDL_HAT_LEFTDOWN
>  */
> extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetHat(SDL_Joystick * joystick,
>                                                  int hat);
> 
> /**
>  *  Get the ball axis change since the last poll.
>  *
>  *  \return 0, or -1 if you passed it invalid parameters.
>  *
>  *  The ball indices start at index 0.
>  */
> extern DECLSPEC int SDLCALL SDL_JoystickGetBall(SDL_Joystick * joystick,
>                                                 int ball, int *dx, int *dy);
> 
> /**
>  *  Get the current state of a button on a joystick.
>  *
>  *  The button indices start at index 0.
>  */
> extern DECLSPEC Uint8 SDLCALL SDL_JoystickGetButton(SDL_Joystick * joystick,
>                                                     int button);
> 
> /**
>  *  Close a joystick previously opened with SDL_JoystickOpen().
>  */
> extern DECLSPEC void SDLCALL SDL_JoystickClose(SDL_Joystick * joystick);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_joystick_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_keyboard.h ../android-sdl/jni/SDL2/include/SDL_keyboard.h
1,217c1,217
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_keyboard.h
<  *
<  *  Include file for SDL keyboard event handling
<  */
< 
< #ifndef _SDL_keyboard_h
< #define _SDL_keyboard_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_keycode.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief The SDL keysym structure, used in key events.
<  *
<  *  \note  If you are looking for translated character input, see the ::SDL_TEXTINPUT event.
<  */
< typedef struct SDL_Keysym
< {
<     SDL_Scancode scancode;      /**< SDL physical key code - see ::SDL_Scancode for details */
<     SDL_Keycode sym;            /**< SDL virtual key code - see ::SDL_Keycode for details */
<     Uint16 mod;                 /**< current key modifiers */
<     Uint32 unused;
< } SDL_Keysym;
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Get the window which currently has keyboard focus.
<  */
< extern DECLSPEC SDL_Window * SDLCALL SDL_GetKeyboardFocus(void);
< 
< /**
<  *  \brief Get a snapshot of the current state of the keyboard.
<  *
<  *  \param numkeys if non-NULL, receives the length of the returned array.
<  *
<  *  \return An array of key states. Indexes into this array are obtained by using ::SDL_Scancode values.
<  *
<  *  \b Example:
<  *  \code
<  *  const Uint8 *state = SDL_GetKeyboardState(NULL);
<  *  if ( state[SDL_SCANCODE_RETURN] )   {
<  *      printf("<RETURN> is pressed.\n");
<  *  }
<  *  \endcode
<  */
< extern DECLSPEC const Uint8 *SDLCALL SDL_GetKeyboardState(int *numkeys);
< 
< /**
<  *  \brief Get the current key modifier state for the keyboard.
<  */
< extern DECLSPEC SDL_Keymod SDLCALL SDL_GetModState(void);
< 
< /**
<  *  \brief Set the current key modifier state for the keyboard.
<  *
<  *  \note This does not change the keyboard state, only the key modifier flags.
<  */
< extern DECLSPEC void SDLCALL SDL_SetModState(SDL_Keymod modstate);
< 
< /**
<  *  \brief Get the key code corresponding to the given scancode according
<  *         to the current keyboard layout.
<  *
<  *  See ::SDL_Keycode for details.
<  *
<  *  \sa SDL_GetKeyName()
<  */
< extern DECLSPEC SDL_Keycode SDLCALL SDL_GetKeyFromScancode(SDL_Scancode scancode);
< 
< /**
<  *  \brief Get the scancode corresponding to the given key code according to the
<  *         current keyboard layout.
<  *
<  *  See ::SDL_Scancode for details.
<  *
<  *  \sa SDL_GetScancodeName()
<  */
< extern DECLSPEC SDL_Scancode SDLCALL SDL_GetScancodeFromKey(SDL_Keycode key);
< 
< /**
<  *  \brief Get a human-readable name for a scancode.
<  *
<  *  \return A pointer to the name for the scancode.
<  *          If the scancode doesn't have a name, this function returns
<  *          an empty string ("").
<  *
<  *  \sa SDL_Scancode
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetScancodeName(SDL_Scancode scancode);
< 
< /**
<  *  \brief Get a scancode from a human-readable name
<  *
<  *  \return scancode, or SDL_SCANCODE_UNKNOWN if the name wasn't recognized
<  *
<  *  \sa SDL_Scancode
<  */
< extern DECLSPEC SDL_Scancode SDLCALL SDL_GetScancodeFromName(const char *name);
< 
< /**
<  *  \brief Get a human-readable name for a key.
<  *
<  *  \return A pointer to a UTF-8 string that stays valid at least until the next
<  *          call to this function. If you need it around any longer, you must
<  *          copy it.  If the key doesn't have a name, this function returns an
<  *          empty string ("").
<  *
<  *  \sa SDL_Key
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetKeyName(SDL_Keycode key);
< 
< /**
<  *  \brief Get a key code from a human-readable name
<  *
<  *  \return key code, or SDLK_UNKNOWN if the name wasn't recognized
<  *
<  *  \sa SDL_Keycode
<  */
< extern DECLSPEC SDL_Keycode SDLCALL SDL_GetKeyFromName(const char *name);
< 
< /**
<  *  \brief Start accepting Unicode text input events.
<  *         This function will show the on-screen keyboard if supported.
<  *
<  *  \sa SDL_StopTextInput()
<  *  \sa SDL_SetTextInputRect()
<  *  \sa SDL_HasScreenKeyboardSupport()
<  */
< extern DECLSPEC void SDLCALL SDL_StartTextInput(void);
< 
< /**
<  *  \brief Return whether or not Unicode text input events are enabled.
<  *
<  *  \sa SDL_StartTextInput()
<  *  \sa SDL_StopTextInput()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IsTextInputActive(void);
< 
< /**
<  *  \brief Stop receiving any text input events.
<  *         This function will hide the on-screen keyboard if supported.
<  *
<  *  \sa SDL_StartTextInput()
<  *  \sa SDL_HasScreenKeyboardSupport()
<  */
< extern DECLSPEC void SDLCALL SDL_StopTextInput(void);
< 
< /**
<  *  \brief Set the rectangle used to type Unicode text inputs.
<  *         This is used as a hint for IME and on-screen keyboard placement.
<  *
<  *  \sa SDL_StartTextInput()
<  */
< extern DECLSPEC void SDLCALL SDL_SetTextInputRect(SDL_Rect *rect);
< 
< /**
<  *  \brief Returns whether the platform has some screen keyboard support.
<  *
<  *  \return SDL_TRUE if some keyboard support is available else SDL_FALSE.
<  *
<  *  \note Not all screen keyboard functions are supported on all platforms.
<  *
<  *  \sa SDL_IsScreenKeyboardShown()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasScreenKeyboardSupport(void);
< 
< /**
<  *  \brief Returns whether the screen keyboard is shown for given window.
<  *
<  *  \param window The window for which screen keyboard should be queried.
<  *
<  *  \return SDL_TRUE if screen keyboard is shown else SDL_FALSE.
<  *
<  *  \sa SDL_HasScreenKeyboardSupport()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IsScreenKeyboardShown(SDL_Window *window);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_keyboard_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_keyboard.h
>  *
>  *  Include file for SDL keyboard event handling
>  */
> 
> #ifndef _SDL_keyboard_h
> #define _SDL_keyboard_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_keycode.h"
> #include "SDL_video.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief The SDL keysym structure, used in key events.
>  *
>  *  \note  If you are looking for translated character input, see the ::SDL_TEXTINPUT event.
>  */
> typedef struct SDL_Keysym
> {
>     SDL_Scancode scancode;      /**< SDL physical key code - see ::SDL_Scancode for details */
>     SDL_Keycode sym;            /**< SDL virtual key code - see ::SDL_Keycode for details */
>     Uint16 mod;                 /**< current key modifiers */
>     Uint32 unused;
> } SDL_Keysym;
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Get the window which currently has keyboard focus.
>  */
> extern DECLSPEC SDL_Window * SDLCALL SDL_GetKeyboardFocus(void);
> 
> /**
>  *  \brief Get a snapshot of the current state of the keyboard.
>  *
>  *  \param numkeys if non-NULL, receives the length of the returned array.
>  *
>  *  \return An array of key states. Indexes into this array are obtained by using ::SDL_Scancode values.
>  *
>  *  \b Example:
>  *  \code
>  *  const Uint8 *state = SDL_GetKeyboardState(NULL);
>  *  if ( state[SDL_SCANCODE_RETURN] )   {
>  *      printf("<RETURN> is pressed.\n");
>  *  }
>  *  \endcode
>  */
> extern DECLSPEC const Uint8 *SDLCALL SDL_GetKeyboardState(int *numkeys);
> 
> /**
>  *  \brief Get the current key modifier state for the keyboard.
>  */
> extern DECLSPEC SDL_Keymod SDLCALL SDL_GetModState(void);
> 
> /**
>  *  \brief Set the current key modifier state for the keyboard.
>  *
>  *  \note This does not change the keyboard state, only the key modifier flags.
>  */
> extern DECLSPEC void SDLCALL SDL_SetModState(SDL_Keymod modstate);
> 
> /**
>  *  \brief Get the key code corresponding to the given scancode according
>  *         to the current keyboard layout.
>  *
>  *  See ::SDL_Keycode for details.
>  *
>  *  \sa SDL_GetKeyName()
>  */
> extern DECLSPEC SDL_Keycode SDLCALL SDL_GetKeyFromScancode(SDL_Scancode scancode);
> 
> /**
>  *  \brief Get the scancode corresponding to the given key code according to the
>  *         current keyboard layout.
>  *
>  *  See ::SDL_Scancode for details.
>  *
>  *  \sa SDL_GetScancodeName()
>  */
> extern DECLSPEC SDL_Scancode SDLCALL SDL_GetScancodeFromKey(SDL_Keycode key);
> 
> /**
>  *  \brief Get a human-readable name for a scancode.
>  *
>  *  \return A pointer to the name for the scancode.
>  *          If the scancode doesn't have a name, this function returns
>  *          an empty string ("").
>  *
>  *  \sa SDL_Scancode
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetScancodeName(SDL_Scancode scancode);
> 
> /**
>  *  \brief Get a scancode from a human-readable name
>  *
>  *  \return scancode, or SDL_SCANCODE_UNKNOWN if the name wasn't recognized
>  *
>  *  \sa SDL_Scancode
>  */
> extern DECLSPEC SDL_Scancode SDLCALL SDL_GetScancodeFromName(const char *name);
> 
> /**
>  *  \brief Get a human-readable name for a key.
>  *
>  *  \return A pointer to a UTF-8 string that stays valid at least until the next
>  *          call to this function. If you need it around any longer, you must
>  *          copy it.  If the key doesn't have a name, this function returns an
>  *          empty string ("").
>  *
>  *  \sa SDL_Key
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetKeyName(SDL_Keycode key);
> 
> /**
>  *  \brief Get a key code from a human-readable name
>  *
>  *  \return key code, or SDLK_UNKNOWN if the name wasn't recognized
>  *
>  *  \sa SDL_Keycode
>  */
> extern DECLSPEC SDL_Keycode SDLCALL SDL_GetKeyFromName(const char *name);
> 
> /**
>  *  \brief Start accepting Unicode text input events.
>  *         This function will show the on-screen keyboard if supported.
>  *
>  *  \sa SDL_StopTextInput()
>  *  \sa SDL_SetTextInputRect()
>  *  \sa SDL_HasScreenKeyboardSupport()
>  */
> extern DECLSPEC void SDLCALL SDL_StartTextInput(void);
> 
> /**
>  *  \brief Return whether or not Unicode text input events are enabled.
>  *
>  *  \sa SDL_StartTextInput()
>  *  \sa SDL_StopTextInput()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IsTextInputActive(void);
> 
> /**
>  *  \brief Stop receiving any text input events.
>  *         This function will hide the on-screen keyboard if supported.
>  *
>  *  \sa SDL_StartTextInput()
>  *  \sa SDL_HasScreenKeyboardSupport()
>  */
> extern DECLSPEC void SDLCALL SDL_StopTextInput(void);
> 
> /**
>  *  \brief Set the rectangle used to type Unicode text inputs.
>  *         This is used as a hint for IME and on-screen keyboard placement.
>  *
>  *  \sa SDL_StartTextInput()
>  */
> extern DECLSPEC void SDLCALL SDL_SetTextInputRect(SDL_Rect *rect);
> 
> /**
>  *  \brief Returns whether the platform has some screen keyboard support.
>  *
>  *  \return SDL_TRUE if some keyboard support is available else SDL_FALSE.
>  *
>  *  \note Not all screen keyboard functions are supported on all platforms.
>  *
>  *  \sa SDL_IsScreenKeyboardShown()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasScreenKeyboardSupport(void);
> 
> /**
>  *  \brief Returns whether the screen keyboard is shown for given window.
>  *
>  *  \param window The window for which screen keyboard should be queried.
>  *
>  *  \return SDL_TRUE if screen keyboard is shown else SDL_FALSE.
>  *
>  *  \sa SDL_HasScreenKeyboardSupport()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IsScreenKeyboardShown(SDL_Window *window);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_keyboard_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_keycode.h ../android-sdl/jni/SDL2/include/SDL_keycode.h
1,341c1,341
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_keycode.h
<  *
<  *  Defines constants which identify keyboard keys and modifiers.
<  */
< 
< #ifndef _SDL_keycode_h
< #define _SDL_keycode_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_scancode.h"
< 
< /**
<  *  \brief The SDL virtual key representation.
<  *
<  *  Values of this type are used to represent keyboard keys using the current
<  *  layout of the keyboard.  These values include Unicode values representing
<  *  the unmodified character that would be generated by pressing the key, or
<  *  an SDLK_* constant for those keys that do not generate characters.
<  */
< typedef Sint32 SDL_Keycode;
< 
< #define SDLK_SCANCODE_MASK (1<<30)
< #define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)
< 
< enum
< {
<     SDLK_UNKNOWN = 0,
< 
<     SDLK_RETURN = '\r',
<     SDLK_ESCAPE = '\033',
<     SDLK_BACKSPACE = '\b',
<     SDLK_TAB = '\t',
<     SDLK_SPACE = ' ',
<     SDLK_EXCLAIM = '!',
<     SDLK_QUOTEDBL = '"',
<     SDLK_HASH = '#',
<     SDLK_PERCENT = '%',
<     SDLK_DOLLAR = '$',
<     SDLK_AMPERSAND = '&',
<     SDLK_QUOTE = '\'',
<     SDLK_LEFTPAREN = '(',
<     SDLK_RIGHTPAREN = ')',
<     SDLK_ASTERISK = '*',
<     SDLK_PLUS = '+',
<     SDLK_COMMA = ',',
<     SDLK_MINUS = '-',
<     SDLK_PERIOD = '.',
<     SDLK_SLASH = '/',
<     SDLK_0 = '0',
<     SDLK_1 = '1',
<     SDLK_2 = '2',
<     SDLK_3 = '3',
<     SDLK_4 = '4',
<     SDLK_5 = '5',
<     SDLK_6 = '6',
<     SDLK_7 = '7',
<     SDLK_8 = '8',
<     SDLK_9 = '9',
<     SDLK_COLON = ':',
<     SDLK_SEMICOLON = ';',
<     SDLK_LESS = '<',
<     SDLK_EQUALS = '=',
<     SDLK_GREATER = '>',
<     SDLK_QUESTION = '?',
<     SDLK_AT = '@',
<     /*
<        Skip uppercase letters
<      */
<     SDLK_LEFTBRACKET = '[',
<     SDLK_BACKSLASH = '\\',
<     SDLK_RIGHTBRACKET = ']',
<     SDLK_CARET = '^',
<     SDLK_UNDERSCORE = '_',
<     SDLK_BACKQUOTE = '`',
<     SDLK_a = 'a',
<     SDLK_b = 'b',
<     SDLK_c = 'c',
<     SDLK_d = 'd',
<     SDLK_e = 'e',
<     SDLK_f = 'f',
<     SDLK_g = 'g',
<     SDLK_h = 'h',
<     SDLK_i = 'i',
<     SDLK_j = 'j',
<     SDLK_k = 'k',
<     SDLK_l = 'l',
<     SDLK_m = 'm',
<     SDLK_n = 'n',
<     SDLK_o = 'o',
<     SDLK_p = 'p',
<     SDLK_q = 'q',
<     SDLK_r = 'r',
<     SDLK_s = 's',
<     SDLK_t = 't',
<     SDLK_u = 'u',
<     SDLK_v = 'v',
<     SDLK_w = 'w',
<     SDLK_x = 'x',
<     SDLK_y = 'y',
<     SDLK_z = 'z',
< 
<     SDLK_CAPSLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK),
< 
<     SDLK_F1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1),
<     SDLK_F2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2),
<     SDLK_F3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3),
<     SDLK_F4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4),
<     SDLK_F5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5),
<     SDLK_F6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6),
<     SDLK_F7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7),
<     SDLK_F8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8),
<     SDLK_F9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9),
<     SDLK_F10 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10),
<     SDLK_F11 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11),
<     SDLK_F12 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12),
< 
<     SDLK_PRINTSCREEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN),
<     SDLK_SCROLLLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK),
<     SDLK_PAUSE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE),
<     SDLK_INSERT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT),
<     SDLK_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME),
<     SDLK_PAGEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP),
<     SDLK_DELETE = '\177',
<     SDLK_END = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END),
<     SDLK_PAGEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN),
<     SDLK_RIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT),
<     SDLK_LEFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT),
<     SDLK_DOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN),
<     SDLK_UP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP),
< 
<     SDLK_NUMLOCKCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR),
<     SDLK_KP_DIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE),
<     SDLK_KP_MULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY),
<     SDLK_KP_MINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS),
<     SDLK_KP_PLUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS),
<     SDLK_KP_ENTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER),
<     SDLK_KP_1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1),
<     SDLK_KP_2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2),
<     SDLK_KP_3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3),
<     SDLK_KP_4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4),
<     SDLK_KP_5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5),
<     SDLK_KP_6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6),
<     SDLK_KP_7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7),
<     SDLK_KP_8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8),
<     SDLK_KP_9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9),
<     SDLK_KP_0 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0),
<     SDLK_KP_PERIOD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD),
< 
<     SDLK_APPLICATION = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION),
<     SDLK_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER),
<     SDLK_KP_EQUALS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS),
<     SDLK_F13 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13),
<     SDLK_F14 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14),
<     SDLK_F15 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15),
<     SDLK_F16 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16),
<     SDLK_F17 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17),
<     SDLK_F18 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18),
<     SDLK_F19 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19),
<     SDLK_F20 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20),
<     SDLK_F21 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21),
<     SDLK_F22 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22),
<     SDLK_F23 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23),
<     SDLK_F24 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24),
<     SDLK_EXECUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE),
<     SDLK_HELP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP),
<     SDLK_MENU = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU),
<     SDLK_SELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT),
<     SDLK_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP),
<     SDLK_AGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN),
<     SDLK_UNDO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO),
<     SDLK_CUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT),
<     SDLK_COPY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY),
<     SDLK_PASTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE),
<     SDLK_FIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND),
<     SDLK_MUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE),
<     SDLK_VOLUMEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP),
<     SDLK_VOLUMEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN),
<     SDLK_KP_COMMA = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA),
<     SDLK_KP_EQUALSAS400 =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400),
< 
<     SDLK_ALTERASE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE),
<     SDLK_SYSREQ = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ),
<     SDLK_CANCEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL),
<     SDLK_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR),
<     SDLK_PRIOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR),
<     SDLK_RETURN2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2),
<     SDLK_SEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR),
<     SDLK_OUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT),
<     SDLK_OPER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER),
<     SDLK_CLEARAGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN),
<     SDLK_CRSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL),
<     SDLK_EXSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL),
< 
<     SDLK_KP_00 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00),
<     SDLK_KP_000 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000),
<     SDLK_THOUSANDSSEPARATOR =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR),
<     SDLK_DECIMALSEPARATOR =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR),
<     SDLK_CURRENCYUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT),
<     SDLK_CURRENCYSUBUNIT =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT),
<     SDLK_KP_LEFTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN),
<     SDLK_KP_RIGHTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN),
<     SDLK_KP_LEFTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE),
<     SDLK_KP_RIGHTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE),
<     SDLK_KP_TAB = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB),
<     SDLK_KP_BACKSPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE),
<     SDLK_KP_A = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A),
<     SDLK_KP_B = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B),
<     SDLK_KP_C = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C),
<     SDLK_KP_D = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D),
<     SDLK_KP_E = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E),
<     SDLK_KP_F = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F),
<     SDLK_KP_XOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR),
<     SDLK_KP_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER),
<     SDLK_KP_PERCENT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT),
<     SDLK_KP_LESS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS),
<     SDLK_KP_GREATER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER),
<     SDLK_KP_AMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND),
<     SDLK_KP_DBLAMPERSAND =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND),
<     SDLK_KP_VERTICALBAR =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR),
<     SDLK_KP_DBLVERTICALBAR =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR),
<     SDLK_KP_COLON = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON),
<     SDLK_KP_HASH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH),
<     SDLK_KP_SPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE),
<     SDLK_KP_AT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT),
<     SDLK_KP_EXCLAM = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM),
<     SDLK_KP_MEMSTORE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE),
<     SDLK_KP_MEMRECALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL),
<     SDLK_KP_MEMCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR),
<     SDLK_KP_MEMADD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD),
<     SDLK_KP_MEMSUBTRACT =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT),
<     SDLK_KP_MEMMULTIPLY =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY),
<     SDLK_KP_MEMDIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE),
<     SDLK_KP_PLUSMINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS),
<     SDLK_KP_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR),
<     SDLK_KP_CLEARENTRY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY),
<     SDLK_KP_BINARY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY),
<     SDLK_KP_OCTAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL),
<     SDLK_KP_DECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL),
<     SDLK_KP_HEXADECIMAL =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL),
< 
<     SDLK_LCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL),
<     SDLK_LSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT),
<     SDLK_LALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT),
<     SDLK_LGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI),
<     SDLK_RCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL),
<     SDLK_RSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT),
<     SDLK_RALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT),
<     SDLK_RGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI),
< 
<     SDLK_MODE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE),
< 
<     SDLK_AUDIONEXT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT),
<     SDLK_AUDIOPREV = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV),
<     SDLK_AUDIOSTOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP),
<     SDLK_AUDIOPLAY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY),
<     SDLK_AUDIOMUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE),
<     SDLK_MEDIASELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT),
<     SDLK_WWW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW),
<     SDLK_MAIL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL),
<     SDLK_CALCULATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR),
<     SDLK_COMPUTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER),
<     SDLK_AC_SEARCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH),
<     SDLK_AC_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME),
<     SDLK_AC_BACK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK),
<     SDLK_AC_FORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD),
<     SDLK_AC_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP),
<     SDLK_AC_REFRESH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH),
<     SDLK_AC_BOOKMARKS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS),
< 
<     SDLK_BRIGHTNESSDOWN =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN),
<     SDLK_BRIGHTNESSUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP),
<     SDLK_DISPLAYSWITCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH),
<     SDLK_KBDILLUMTOGGLE =
<         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE),
<     SDLK_KBDILLUMDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN),
<     SDLK_KBDILLUMUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP),
<     SDLK_EJECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT),
<     SDLK_SLEEP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP)
< };
< 
< /**
<  * \brief Enumeration of valid key mods (possibly OR'd together).
<  */
< typedef enum
< {
<     KMOD_NONE = 0x0000,
<     KMOD_LSHIFT = 0x0001,
<     KMOD_RSHIFT = 0x0002,
<     KMOD_LCTRL = 0x0040,
<     KMOD_RCTRL = 0x0080,
<     KMOD_LALT = 0x0100,
<     KMOD_RALT = 0x0200,
<     KMOD_LGUI = 0x0400,
<     KMOD_RGUI = 0x0800,
<     KMOD_NUM = 0x1000,
<     KMOD_CAPS = 0x2000,
<     KMOD_MODE = 0x4000,
<     KMOD_RESERVED = 0x8000
< } SDL_Keymod;
< 
< #define KMOD_CTRL   (KMOD_LCTRL|KMOD_RCTRL)
< #define KMOD_SHIFT  (KMOD_LSHIFT|KMOD_RSHIFT)
< #define KMOD_ALT    (KMOD_LALT|KMOD_RALT)
< #define KMOD_GUI    (KMOD_LGUI|KMOD_RGUI)
< 
< #endif /* _SDL_keycode_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_keycode.h
>  *
>  *  Defines constants which identify keyboard keys and modifiers.
>  */
> 
> #ifndef _SDL_keycode_h
> #define _SDL_keycode_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_scancode.h"
> 
> /**
>  *  \brief The SDL virtual key representation.
>  *
>  *  Values of this type are used to represent keyboard keys using the current
>  *  layout of the keyboard.  These values include Unicode values representing
>  *  the unmodified character that would be generated by pressing the key, or
>  *  an SDLK_* constant for those keys that do not generate characters.
>  */
> typedef Sint32 SDL_Keycode;
> 
> #define SDLK_SCANCODE_MASK (1<<30)
> #define SDL_SCANCODE_TO_KEYCODE(X)  (X | SDLK_SCANCODE_MASK)
> 
> enum
> {
>     SDLK_UNKNOWN = 0,
> 
>     SDLK_RETURN = '\r',
>     SDLK_ESCAPE = '\033',
>     SDLK_BACKSPACE = '\b',
>     SDLK_TAB = '\t',
>     SDLK_SPACE = ' ',
>     SDLK_EXCLAIM = '!',
>     SDLK_QUOTEDBL = '"',
>     SDLK_HASH = '#',
>     SDLK_PERCENT = '%',
>     SDLK_DOLLAR = '$',
>     SDLK_AMPERSAND = '&',
>     SDLK_QUOTE = '\'',
>     SDLK_LEFTPAREN = '(',
>     SDLK_RIGHTPAREN = ')',
>     SDLK_ASTERISK = '*',
>     SDLK_PLUS = '+',
>     SDLK_COMMA = ',',
>     SDLK_MINUS = '-',
>     SDLK_PERIOD = '.',
>     SDLK_SLASH = '/',
>     SDLK_0 = '0',
>     SDLK_1 = '1',
>     SDLK_2 = '2',
>     SDLK_3 = '3',
>     SDLK_4 = '4',
>     SDLK_5 = '5',
>     SDLK_6 = '6',
>     SDLK_7 = '7',
>     SDLK_8 = '8',
>     SDLK_9 = '9',
>     SDLK_COLON = ':',
>     SDLK_SEMICOLON = ';',
>     SDLK_LESS = '<',
>     SDLK_EQUALS = '=',
>     SDLK_GREATER = '>',
>     SDLK_QUESTION = '?',
>     SDLK_AT = '@',
>     /*
>        Skip uppercase letters
>      */
>     SDLK_LEFTBRACKET = '[',
>     SDLK_BACKSLASH = '\\',
>     SDLK_RIGHTBRACKET = ']',
>     SDLK_CARET = '^',
>     SDLK_UNDERSCORE = '_',
>     SDLK_BACKQUOTE = '`',
>     SDLK_a = 'a',
>     SDLK_b = 'b',
>     SDLK_c = 'c',
>     SDLK_d = 'd',
>     SDLK_e = 'e',
>     SDLK_f = 'f',
>     SDLK_g = 'g',
>     SDLK_h = 'h',
>     SDLK_i = 'i',
>     SDLK_j = 'j',
>     SDLK_k = 'k',
>     SDLK_l = 'l',
>     SDLK_m = 'm',
>     SDLK_n = 'n',
>     SDLK_o = 'o',
>     SDLK_p = 'p',
>     SDLK_q = 'q',
>     SDLK_r = 'r',
>     SDLK_s = 's',
>     SDLK_t = 't',
>     SDLK_u = 'u',
>     SDLK_v = 'v',
>     SDLK_w = 'w',
>     SDLK_x = 'x',
>     SDLK_y = 'y',
>     SDLK_z = 'z',
> 
>     SDLK_CAPSLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CAPSLOCK),
> 
>     SDLK_F1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1),
>     SDLK_F2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2),
>     SDLK_F3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3),
>     SDLK_F4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4),
>     SDLK_F5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5),
>     SDLK_F6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6),
>     SDLK_F7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7),
>     SDLK_F8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8),
>     SDLK_F9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9),
>     SDLK_F10 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10),
>     SDLK_F11 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11),
>     SDLK_F12 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12),
> 
>     SDLK_PRINTSCREEN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRINTSCREEN),
>     SDLK_SCROLLLOCK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SCROLLLOCK),
>     SDLK_PAUSE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAUSE),
>     SDLK_INSERT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT),
>     SDLK_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME),
>     SDLK_PAGEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP),
>     SDLK_DELETE = '\177',
>     SDLK_END = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END),
>     SDLK_PAGEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN),
>     SDLK_RIGHT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT),
>     SDLK_LEFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT),
>     SDLK_DOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN),
>     SDLK_UP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP),
> 
>     SDLK_NUMLOCKCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_NUMLOCKCLEAR),
>     SDLK_KP_DIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DIVIDE),
>     SDLK_KP_MULTIPLY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MULTIPLY),
>     SDLK_KP_MINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MINUS),
>     SDLK_KP_PLUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUS),
>     SDLK_KP_ENTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_ENTER),
>     SDLK_KP_1 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_1),
>     SDLK_KP_2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_2),
>     SDLK_KP_3 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_3),
>     SDLK_KP_4 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_4),
>     SDLK_KP_5 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_5),
>     SDLK_KP_6 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_6),
>     SDLK_KP_7 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_7),
>     SDLK_KP_8 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_8),
>     SDLK_KP_9 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_9),
>     SDLK_KP_0 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_0),
>     SDLK_KP_PERIOD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERIOD),
> 
>     SDLK_APPLICATION = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_APPLICATION),
>     SDLK_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_POWER),
>     SDLK_KP_EQUALS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALS),
>     SDLK_F13 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F13),
>     SDLK_F14 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F14),
>     SDLK_F15 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F15),
>     SDLK_F16 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F16),
>     SDLK_F17 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F17),
>     SDLK_F18 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F18),
>     SDLK_F19 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F19),
>     SDLK_F20 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F20),
>     SDLK_F21 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F21),
>     SDLK_F22 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F22),
>     SDLK_F23 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F23),
>     SDLK_F24 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F24),
>     SDLK_EXECUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXECUTE),
>     SDLK_HELP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HELP),
>     SDLK_MENU = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MENU),
>     SDLK_SELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SELECT),
>     SDLK_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_STOP),
>     SDLK_AGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AGAIN),
>     SDLK_UNDO = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UNDO),
>     SDLK_CUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CUT),
>     SDLK_COPY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COPY),
>     SDLK_PASTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PASTE),
>     SDLK_FIND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_FIND),
>     SDLK_MUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MUTE),
>     SDLK_VOLUMEUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEUP),
>     SDLK_VOLUMEDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_VOLUMEDOWN),
>     SDLK_KP_COMMA = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COMMA),
>     SDLK_KP_EQUALSAS400 =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EQUALSAS400),
> 
>     SDLK_ALTERASE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_ALTERASE),
>     SDLK_SYSREQ = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SYSREQ),
>     SDLK_CANCEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CANCEL),
>     SDLK_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEAR),
>     SDLK_PRIOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PRIOR),
>     SDLK_RETURN2 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RETURN2),
>     SDLK_SEPARATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SEPARATOR),
>     SDLK_OUT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OUT),
>     SDLK_OPER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_OPER),
>     SDLK_CLEARAGAIN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CLEARAGAIN),
>     SDLK_CRSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CRSEL),
>     SDLK_EXSEL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EXSEL),
> 
>     SDLK_KP_00 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_00),
>     SDLK_KP_000 = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_000),
>     SDLK_THOUSANDSSEPARATOR =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_THOUSANDSSEPARATOR),
>     SDLK_DECIMALSEPARATOR =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DECIMALSEPARATOR),
>     SDLK_CURRENCYUNIT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYUNIT),
>     SDLK_CURRENCYSUBUNIT =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CURRENCYSUBUNIT),
>     SDLK_KP_LEFTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTPAREN),
>     SDLK_KP_RIGHTPAREN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTPAREN),
>     SDLK_KP_LEFTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LEFTBRACE),
>     SDLK_KP_RIGHTBRACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_RIGHTBRACE),
>     SDLK_KP_TAB = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_TAB),
>     SDLK_KP_BACKSPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BACKSPACE),
>     SDLK_KP_A = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_A),
>     SDLK_KP_B = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_B),
>     SDLK_KP_C = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_C),
>     SDLK_KP_D = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_D),
>     SDLK_KP_E = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_E),
>     SDLK_KP_F = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_F),
>     SDLK_KP_XOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_XOR),
>     SDLK_KP_POWER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_POWER),
>     SDLK_KP_PERCENT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PERCENT),
>     SDLK_KP_LESS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_LESS),
>     SDLK_KP_GREATER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_GREATER),
>     SDLK_KP_AMPERSAND = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AMPERSAND),
>     SDLK_KP_DBLAMPERSAND =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLAMPERSAND),
>     SDLK_KP_VERTICALBAR =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_VERTICALBAR),
>     SDLK_KP_DBLVERTICALBAR =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DBLVERTICALBAR),
>     SDLK_KP_COLON = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_COLON),
>     SDLK_KP_HASH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HASH),
>     SDLK_KP_SPACE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_SPACE),
>     SDLK_KP_AT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_AT),
>     SDLK_KP_EXCLAM = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_EXCLAM),
>     SDLK_KP_MEMSTORE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSTORE),
>     SDLK_KP_MEMRECALL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMRECALL),
>     SDLK_KP_MEMCLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMCLEAR),
>     SDLK_KP_MEMADD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMADD),
>     SDLK_KP_MEMSUBTRACT =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMSUBTRACT),
>     SDLK_KP_MEMMULTIPLY =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMMULTIPLY),
>     SDLK_KP_MEMDIVIDE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_MEMDIVIDE),
>     SDLK_KP_PLUSMINUS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_PLUSMINUS),
>     SDLK_KP_CLEAR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEAR),
>     SDLK_KP_CLEARENTRY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_CLEARENTRY),
>     SDLK_KP_BINARY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_BINARY),
>     SDLK_KP_OCTAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_OCTAL),
>     SDLK_KP_DECIMAL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_DECIMAL),
>     SDLK_KP_HEXADECIMAL =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KP_HEXADECIMAL),
> 
>     SDLK_LCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LCTRL),
>     SDLK_LSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LSHIFT),
>     SDLK_LALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LALT),
>     SDLK_LGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LGUI),
>     SDLK_RCTRL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RCTRL),
>     SDLK_RSHIFT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RSHIFT),
>     SDLK_RALT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RALT),
>     SDLK_RGUI = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RGUI),
> 
>     SDLK_MODE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MODE),
> 
>     SDLK_AUDIONEXT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIONEXT),
>     SDLK_AUDIOPREV = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPREV),
>     SDLK_AUDIOSTOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOSTOP),
>     SDLK_AUDIOPLAY = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOPLAY),
>     SDLK_AUDIOMUTE = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AUDIOMUTE),
>     SDLK_MEDIASELECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MEDIASELECT),
>     SDLK_WWW = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_WWW),
>     SDLK_MAIL = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_MAIL),
>     SDLK_CALCULATOR = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_CALCULATOR),
>     SDLK_COMPUTER = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_COMPUTER),
>     SDLK_AC_SEARCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_SEARCH),
>     SDLK_AC_HOME = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_HOME),
>     SDLK_AC_BACK = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BACK),
>     SDLK_AC_FORWARD = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_FORWARD),
>     SDLK_AC_STOP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_STOP),
>     SDLK_AC_REFRESH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_REFRESH),
>     SDLK_AC_BOOKMARKS = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_AC_BOOKMARKS),
> 
>     SDLK_BRIGHTNESSDOWN =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSDOWN),
>     SDLK_BRIGHTNESSUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_BRIGHTNESSUP),
>     SDLK_DISPLAYSWITCH = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DISPLAYSWITCH),
>     SDLK_KBDILLUMTOGGLE =
>         SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMTOGGLE),
>     SDLK_KBDILLUMDOWN = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMDOWN),
>     SDLK_KBDILLUMUP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_KBDILLUMUP),
>     SDLK_EJECT = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_EJECT),
>     SDLK_SLEEP = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_SLEEP)
> };
> 
> /**
>  * \brief Enumeration of valid key mods (possibly OR'd together).
>  */
> typedef enum
> {
>     KMOD_NONE = 0x0000,
>     KMOD_LSHIFT = 0x0001,
>     KMOD_RSHIFT = 0x0002,
>     KMOD_LCTRL = 0x0040,
>     KMOD_RCTRL = 0x0080,
>     KMOD_LALT = 0x0100,
>     KMOD_RALT = 0x0200,
>     KMOD_LGUI = 0x0400,
>     KMOD_RGUI = 0x0800,
>     KMOD_NUM = 0x1000,
>     KMOD_CAPS = 0x2000,
>     KMOD_MODE = 0x4000,
>     KMOD_RESERVED = 0x8000
> } SDL_Keymod;
> 
> #define KMOD_CTRL   (KMOD_LCTRL|KMOD_RCTRL)
> #define KMOD_SHIFT  (KMOD_LSHIFT|KMOD_RSHIFT)
> #define KMOD_ALT    (KMOD_LALT|KMOD_RALT)
> #define KMOD_GUI    (KMOD_LGUI|KMOD_RGUI)
> 
> #endif /* _SDL_keycode_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_loadso.h ../android-sdl/jni/SDL2/include/SDL_loadso.h
1,81c1,81
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_loadso.h
<  *
<  *  System dependent library loading routines
<  *
<  *  Some things to keep in mind:
<  *  \li These functions only work on C function names.  Other languages may
<  *      have name mangling and intrinsic language support that varies from
<  *      compiler to compiler.
<  *  \li Make sure you declare your function pointers with the same calling
<  *      convention as the actual library function.  Your code will crash
<  *      mysteriously if you do not do this.
<  *  \li Avoid namespace collisions.  If you load a symbol from the library,
<  *      it is not defined whether or not it goes into the global symbol
<  *      namespace for the application.  If it does and it conflicts with
<  *      symbols in your code or other shared libraries, you will not get
<  *      the results you expect. :)
<  */
< 
< #ifndef _SDL_loadso_h
< #define _SDL_loadso_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  This function dynamically loads a shared object and returns a pointer
<  *  to the object handle (or NULL if there was an error).
<  *  The 'sofile' parameter is a system dependent name of the object file.
<  */
< extern DECLSPEC void *SDLCALL SDL_LoadObject(const char *sofile);
< 
< /**
<  *  Given an object handle, this function looks up the address of the
<  *  named function in the shared object and returns it.  This address
<  *  is no longer valid after calling SDL_UnloadObject().
<  */
< extern DECLSPEC void *SDLCALL SDL_LoadFunction(void *handle,
<                                                const char *name);
< 
< /**
<  *  Unload a shared object from memory.
<  */
< extern DECLSPEC void SDLCALL SDL_UnloadObject(void *handle);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_loadso_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_loadso.h
>  *
>  *  System dependent library loading routines
>  *
>  *  Some things to keep in mind:
>  *  \li These functions only work on C function names.  Other languages may
>  *      have name mangling and intrinsic language support that varies from
>  *      compiler to compiler.
>  *  \li Make sure you declare your function pointers with the same calling
>  *      convention as the actual library function.  Your code will crash
>  *      mysteriously if you do not do this.
>  *  \li Avoid namespace collisions.  If you load a symbol from the library,
>  *      it is not defined whether or not it goes into the global symbol
>  *      namespace for the application.  If it does and it conflicts with
>  *      symbols in your code or other shared libraries, you will not get
>  *      the results you expect. :)
>  */
> 
> #ifndef _SDL_loadso_h
> #define _SDL_loadso_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  This function dynamically loads a shared object and returns a pointer
>  *  to the object handle (or NULL if there was an error).
>  *  The 'sofile' parameter is a system dependent name of the object file.
>  */
> extern DECLSPEC void *SDLCALL SDL_LoadObject(const char *sofile);
> 
> /**
>  *  Given an object handle, this function looks up the address of the
>  *  named function in the shared object and returns it.  This address
>  *  is no longer valid after calling SDL_UnloadObject().
>  */
> extern DECLSPEC void *SDLCALL SDL_LoadFunction(void *handle,
>                                                const char *name);
> 
> /**
>  *  Unload a shared object from memory.
>  */
> extern DECLSPEC void SDLCALL SDL_UnloadObject(void *handle);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_loadso_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_log.h ../android-sdl/jni/SDL2/include/SDL_log.h
1,211c1,211
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_log.h
<  *
<  *  Simple log messages with categories and priorities.
<  *
<  *  By default logs are quiet, but if you're debugging SDL you might want:
<  *
<  *      SDL_LogSetAllPriority(SDL_LOG_PRIORITY_WARN);
<  *
<  *  Here's where the messages go on different platforms:
<  *      Windows: debug output stream
<  *      Android: log output
<  *      Others: standard error output (stderr)
<  */
< 
< #ifndef _SDL_log_h
< #define _SDL_log_h
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< 
< /**
<  *  \brief The maximum size of a log message
<  *
<  *  Messages longer than the maximum size will be truncated
<  */
< #define SDL_MAX_LOG_MESSAGE 4096
< 
< /**
<  *  \brief The predefined log categories
<  *
<  *  By default the application category is enabled at the INFO level,
<  *  the assert category is enabled at the WARN level, test is enabled
<  *  at the VERBOSE level and all other categories are enabled at the
<  *  CRITICAL level.
<  */
< enum
< {
<     SDL_LOG_CATEGORY_APPLICATION,
<     SDL_LOG_CATEGORY_ERROR,
<     SDL_LOG_CATEGORY_ASSERT,
<     SDL_LOG_CATEGORY_SYSTEM,
<     SDL_LOG_CATEGORY_AUDIO,
<     SDL_LOG_CATEGORY_VIDEO,
<     SDL_LOG_CATEGORY_RENDER,
<     SDL_LOG_CATEGORY_INPUT,
<     SDL_LOG_CATEGORY_TEST,
< 
<     /* Reserved for future SDL library use */
<     SDL_LOG_CATEGORY_RESERVED1,
<     SDL_LOG_CATEGORY_RESERVED2,
<     SDL_LOG_CATEGORY_RESERVED3,
<     SDL_LOG_CATEGORY_RESERVED4,
<     SDL_LOG_CATEGORY_RESERVED5,
<     SDL_LOG_CATEGORY_RESERVED6,
<     SDL_LOG_CATEGORY_RESERVED7,
<     SDL_LOG_CATEGORY_RESERVED8,
<     SDL_LOG_CATEGORY_RESERVED9,
<     SDL_LOG_CATEGORY_RESERVED10,
< 
<     /* Beyond this point is reserved for application use, e.g.
<        enum {
<            MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,
<            MYAPP_CATEGORY_AWESOME2,
<            MYAPP_CATEGORY_AWESOME3,
<            ...
<        };
<      */
<     SDL_LOG_CATEGORY_CUSTOM
< };
< 
< /**
<  *  \brief The predefined log priorities
<  */
< typedef enum
< {
<     SDL_LOG_PRIORITY_VERBOSE = 1,
<     SDL_LOG_PRIORITY_DEBUG,
<     SDL_LOG_PRIORITY_INFO,
<     SDL_LOG_PRIORITY_WARN,
<     SDL_LOG_PRIORITY_ERROR,
<     SDL_LOG_PRIORITY_CRITICAL,
<     SDL_NUM_LOG_PRIORITIES
< } SDL_LogPriority;
< 
< 
< /**
<  *  \brief Set the priority of all log categories
<  */
< extern DECLSPEC void SDLCALL SDL_LogSetAllPriority(SDL_LogPriority priority);
< 
< /**
<  *  \brief Set the priority of a particular log category
<  */
< extern DECLSPEC void SDLCALL SDL_LogSetPriority(int category,
<                                                 SDL_LogPriority priority);
< 
< /**
<  *  \brief Get the priority of a particular log category
<  */
< extern DECLSPEC SDL_LogPriority SDLCALL SDL_LogGetPriority(int category);
< 
< /**
<  *  \brief Reset all priorities to default.
<  *
<  *  \note This is called in SDL_Quit().
<  */
< extern DECLSPEC void SDLCALL SDL_LogResetPriorities(void);
< 
< /**
<  *  \brief Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO
<  */
< extern DECLSPEC void SDLCALL SDL_Log(const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with SDL_LOG_PRIORITY_VERBOSE
<  */
< extern DECLSPEC void SDLCALL SDL_LogVerbose(int category, const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with SDL_LOG_PRIORITY_DEBUG
<  */
< extern DECLSPEC void SDLCALL SDL_LogDebug(int category, const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with SDL_LOG_PRIORITY_INFO
<  */
< extern DECLSPEC void SDLCALL SDL_LogInfo(int category, const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with SDL_LOG_PRIORITY_WARN
<  */
< extern DECLSPEC void SDLCALL SDL_LogWarn(int category, const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with SDL_LOG_PRIORITY_ERROR
<  */
< extern DECLSPEC void SDLCALL SDL_LogError(int category, const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with SDL_LOG_PRIORITY_CRITICAL
<  */
< extern DECLSPEC void SDLCALL SDL_LogCritical(int category, const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with the specified category and priority.
<  */
< extern DECLSPEC void SDLCALL SDL_LogMessage(int category,
<                                             SDL_LogPriority priority,
<                                             const char *fmt, ...);
< 
< /**
<  *  \brief Log a message with the specified category and priority.
<  */
< extern DECLSPEC void SDLCALL SDL_LogMessageV(int category,
<                                              SDL_LogPriority priority,
<                                              const char *fmt, va_list ap);
< 
< /**
<  *  \brief The prototype for the log output function
<  */
< typedef void (*SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);
< 
< /**
<  *  \brief Get the current log output function.
<  */
< extern DECLSPEC void SDLCALL SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
< 
< /**
<  *  \brief This function allows you to replace the default log output
<  *         function with one of your own.
<  */
< extern DECLSPEC void SDLCALL SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_log_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_log.h
>  *
>  *  Simple log messages with categories and priorities.
>  *
>  *  By default logs are quiet, but if you're debugging SDL you might want:
>  *
>  *      SDL_LogSetAllPriority(SDL_LOG_PRIORITY_WARN);
>  *
>  *  Here's where the messages go on different platforms:
>  *      Windows: debug output stream
>  *      Android: log output
>  *      Others: standard error output (stderr)
>  */
> 
> #ifndef _SDL_log_h
> #define _SDL_log_h
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> 
> /**
>  *  \brief The maximum size of a log message
>  *
>  *  Messages longer than the maximum size will be truncated
>  */
> #define SDL_MAX_LOG_MESSAGE 4096
> 
> /**
>  *  \brief The predefined log categories
>  *
>  *  By default the application category is enabled at the INFO level,
>  *  the assert category is enabled at the WARN level, test is enabled
>  *  at the VERBOSE level and all other categories are enabled at the
>  *  CRITICAL level.
>  */
> enum
> {
>     SDL_LOG_CATEGORY_APPLICATION,
>     SDL_LOG_CATEGORY_ERROR,
>     SDL_LOG_CATEGORY_ASSERT,
>     SDL_LOG_CATEGORY_SYSTEM,
>     SDL_LOG_CATEGORY_AUDIO,
>     SDL_LOG_CATEGORY_VIDEO,
>     SDL_LOG_CATEGORY_RENDER,
>     SDL_LOG_CATEGORY_INPUT,
>     SDL_LOG_CATEGORY_TEST,
> 
>     /* Reserved for future SDL library use */
>     SDL_LOG_CATEGORY_RESERVED1,
>     SDL_LOG_CATEGORY_RESERVED2,
>     SDL_LOG_CATEGORY_RESERVED3,
>     SDL_LOG_CATEGORY_RESERVED4,
>     SDL_LOG_CATEGORY_RESERVED5,
>     SDL_LOG_CATEGORY_RESERVED6,
>     SDL_LOG_CATEGORY_RESERVED7,
>     SDL_LOG_CATEGORY_RESERVED8,
>     SDL_LOG_CATEGORY_RESERVED9,
>     SDL_LOG_CATEGORY_RESERVED10,
> 
>     /* Beyond this point is reserved for application use, e.g.
>        enum {
>            MYAPP_CATEGORY_AWESOME1 = SDL_LOG_CATEGORY_CUSTOM,
>            MYAPP_CATEGORY_AWESOME2,
>            MYAPP_CATEGORY_AWESOME3,
>            ...
>        };
>      */
>     SDL_LOG_CATEGORY_CUSTOM
> };
> 
> /**
>  *  \brief The predefined log priorities
>  */
> typedef enum
> {
>     SDL_LOG_PRIORITY_VERBOSE = 1,
>     SDL_LOG_PRIORITY_DEBUG,
>     SDL_LOG_PRIORITY_INFO,
>     SDL_LOG_PRIORITY_WARN,
>     SDL_LOG_PRIORITY_ERROR,
>     SDL_LOG_PRIORITY_CRITICAL,
>     SDL_NUM_LOG_PRIORITIES
> } SDL_LogPriority;
> 
> 
> /**
>  *  \brief Set the priority of all log categories
>  */
> extern DECLSPEC void SDLCALL SDL_LogSetAllPriority(SDL_LogPriority priority);
> 
> /**
>  *  \brief Set the priority of a particular log category
>  */
> extern DECLSPEC void SDLCALL SDL_LogSetPriority(int category,
>                                                 SDL_LogPriority priority);
> 
> /**
>  *  \brief Get the priority of a particular log category
>  */
> extern DECLSPEC SDL_LogPriority SDLCALL SDL_LogGetPriority(int category);
> 
> /**
>  *  \brief Reset all priorities to default.
>  *
>  *  \note This is called in SDL_Quit().
>  */
> extern DECLSPEC void SDLCALL SDL_LogResetPriorities(void);
> 
> /**
>  *  \brief Log a message with SDL_LOG_CATEGORY_APPLICATION and SDL_LOG_PRIORITY_INFO
>  */
> extern DECLSPEC void SDLCALL SDL_Log(const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with SDL_LOG_PRIORITY_VERBOSE
>  */
> extern DECLSPEC void SDLCALL SDL_LogVerbose(int category, const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with SDL_LOG_PRIORITY_DEBUG
>  */
> extern DECLSPEC void SDLCALL SDL_LogDebug(int category, const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with SDL_LOG_PRIORITY_INFO
>  */
> extern DECLSPEC void SDLCALL SDL_LogInfo(int category, const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with SDL_LOG_PRIORITY_WARN
>  */
> extern DECLSPEC void SDLCALL SDL_LogWarn(int category, const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with SDL_LOG_PRIORITY_ERROR
>  */
> extern DECLSPEC void SDLCALL SDL_LogError(int category, const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with SDL_LOG_PRIORITY_CRITICAL
>  */
> extern DECLSPEC void SDLCALL SDL_LogCritical(int category, const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with the specified category and priority.
>  */
> extern DECLSPEC void SDLCALL SDL_LogMessage(int category,
>                                             SDL_LogPriority priority,
>                                             const char *fmt, ...);
> 
> /**
>  *  \brief Log a message with the specified category and priority.
>  */
> extern DECLSPEC void SDLCALL SDL_LogMessageV(int category,
>                                              SDL_LogPriority priority,
>                                              const char *fmt, va_list ap);
> 
> /**
>  *  \brief The prototype for the log output function
>  */
> typedef void (*SDL_LogOutputFunction)(void *userdata, int category, SDL_LogPriority priority, const char *message);
> 
> /**
>  *  \brief Get the current log output function.
>  */
> extern DECLSPEC void SDLCALL SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback, void **userdata);
> 
> /**
>  *  \brief This function allows you to replace the default log output
>  *         function with one of your own.
>  */
> extern DECLSPEC void SDLCALL SDL_LogSetOutputFunction(SDL_LogOutputFunction callback, void *userdata);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_log_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_main.h ../android-sdl/jni/SDL2/include/SDL_main.h
1,125c1,125
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_main_h
< #define _SDL_main_h
< 
< #include "SDL_stdinc.h"
< 
< /**
<  *  \file SDL_main.h
<  *
<  *  Redefine main() on some platforms so that it is called by SDL.
<  */
< 
< #ifndef SDL_MAIN_HANDLED
< #if defined(__WIN32__)
< /* On Windows SDL provides WinMain(), which parses the command line and passes
<    the arguments to your main function.
< 
<    If you provide your own WinMain(), you may define SDL_MAIN_HANDLED
<  */
< #define SDL_MAIN_AVAILABLE
< 
< #elif defined(__IPHONEOS__)
< /* On iOS SDL provides a main function that creates an application delegate
<    and starts the iOS application run loop.
< 
<    See src/video/uikit/SDL_uikitappdelegate.m for more details.
<  */
< #define SDL_MAIN_NEEDED
< 
< #elif defined(__ANDROID__)
< /* On Android SDL provides a Java class in SDLActivity.java that is the
<    main activity entry point.
< 
<    See README-android.txt for more details on extending that class.
<  */
< #define SDL_MAIN_NEEDED
< 
< #endif
< #endif /* SDL_MAIN_HANDLED */
< 
< #ifdef __cplusplus
< #define C_LINKAGE   "C"
< #else
< #define C_LINKAGE
< #endif /* __cplusplus */
< 
< /**
<  *  \file SDL_main.h
<  *
<  *  The application's main() function must be called with C linkage,
<  *  and should be declared like this:
<  *  \code
<  *  #ifdef __cplusplus
<  *  extern "C"
<  *  #endif
<  *  int main(int argc, char *argv[])
<  *  {
<  *  }
<  *  \endcode
<  */
< 
< #if defined(SDL_MAIN_NEEDED) || defined(SDL_MAIN_AVAILABLE)
< #define main    SDL_main
< #endif
< 
< /**
<  *  The prototype for the application's main() function
<  */
< extern C_LINKAGE int SDL_main(int argc, char *argv[]);
< 
< 
< #include "begin_code.h"
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  This is called by the real SDL main function to let the rest of the
<  *  library know that initialization was done properly.
<  *
<  *  Calling this yourself without knowing what you're doing can cause
<  *  crashes and hard to diagnose problems with your application.
<  */
< extern DECLSPEC void SDL_SetMainReady(void);
< 
< #ifdef __WIN32__
< 
< /**
<  *  This can be called to set the application class at startup
<  */
< extern DECLSPEC int SDLCALL SDL_RegisterApp(char *name, Uint32 style,
<                                             void *hInst);
< extern DECLSPEC void SDLCALL SDL_UnregisterApp(void);
< 
< #endif /* __WIN32__ */
< 
< 
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_main_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_main_h
> #define _SDL_main_h
> 
> #include "SDL_stdinc.h"
> 
> /**
>  *  \file SDL_main.h
>  *
>  *  Redefine main() on some platforms so that it is called by SDL.
>  */
> 
> #ifndef SDL_MAIN_HANDLED
> #if defined(__WIN32__)
> /* On Windows SDL provides WinMain(), which parses the command line and passes
>    the arguments to your main function.
> 
>    If you provide your own WinMain(), you may define SDL_MAIN_HANDLED
>  */
> #define SDL_MAIN_AVAILABLE
> 
> #elif defined(__IPHONEOS__)
> /* On iOS SDL provides a main function that creates an application delegate
>    and starts the iOS application run loop.
> 
>    See src/video/uikit/SDL_uikitappdelegate.m for more details.
>  */
> #define SDL_MAIN_NEEDED
> 
> #elif defined(__ANDROID__)
> /* On Android SDL provides a Java class in SDLActivity.java that is the
>    main activity entry point.
> 
>    See README-android.txt for more details on extending that class.
>  */
> #define SDL_MAIN_NEEDED
> 
> #endif
> #endif /* SDL_MAIN_HANDLED */
> 
> #ifdef __cplusplus
> #define C_LINKAGE   "C"
> #else
> #define C_LINKAGE
> #endif /* __cplusplus */
> 
> /**
>  *  \file SDL_main.h
>  *
>  *  The application's main() function must be called with C linkage,
>  *  and should be declared like this:
>  *  \code
>  *  #ifdef __cplusplus
>  *  extern "C"
>  *  #endif
>  *  int main(int argc, char *argv[])
>  *  {
>  *  }
>  *  \endcode
>  */
> 
> #if defined(SDL_MAIN_NEEDED) || defined(SDL_MAIN_AVAILABLE)
> #define main    SDL_main
> #endif
> 
> /**
>  *  The prototype for the application's main() function
>  */
> extern C_LINKAGE int SDL_main(int argc, char *argv[]);
> 
> 
> #include "begin_code.h"
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /*
>  *  This is called by the real SDL main function to let the rest of the
>  *  library know that initialization was done properly.
>  *
>  *  Calling this yourself without knowing what you're doing can cause
>  *  crashes and hard to diagnose problems with your application.
>  */
> extern DECLSPEC void SDL_SetMainReady(void);
> 
> #ifdef __WIN32__
> 
> /**
>  *  This can be called to set the application class at startup
>  */
> extern DECLSPEC int SDLCALL SDL_RegisterApp(char *name, Uint32 style,
>                                             void *hInst);
> extern DECLSPEC void SDLCALL SDL_UnregisterApp(void);
> 
> #endif /* __WIN32__ */
> 
> 
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_main_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_messagebox.h ../android-sdl/jni/SDL2/include/SDL_messagebox.h
1,144c1,144
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_messagebox_h
< #define _SDL_messagebox_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_video.h"      /* For SDL_Window */
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  * \brief SDL_MessageBox flags. If supported will display warning icon, etc.
<  */
< typedef enum
< {
<     SDL_MESSAGEBOX_ERROR        = 0x00000010,   /**< error dialog */
<     SDL_MESSAGEBOX_WARNING      = 0x00000020,   /**< warning dialog */
<     SDL_MESSAGEBOX_INFORMATION  = 0x00000040    /**< informational dialog */
< } SDL_MessageBoxFlags;
< 
< /**
<  * \brief Flags for SDL_MessageBoxButtonData.
<  */
< typedef enum
< {
<     SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,  /**< Marks the default button when return is hit */
<     SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002   /**< Marks the default button when escape is hit */
< } SDL_MessageBoxButtonFlags;
< 
< /**
<  *  \brief Individual button data.
<  */
< typedef struct
< {
<     Uint32 flags;       /**< ::SDL_MessageBoxButtonFlags */
<     int buttonid;       /**< User defined button id (value returned via SDL_ShowMessageBox) */
<     const char * text;  /**< The UTF-8 button text */
< } SDL_MessageBoxButtonData;
< 
< /**
<  * \brief RGB value used in a message box color scheme
<  */
< typedef struct
< {
<     Uint8 r, g, b;
< } SDL_MessageBoxColor;
< 
< typedef enum
< {
<     SDL_MESSAGEBOX_COLOR_BACKGROUND,
<     SDL_MESSAGEBOX_COLOR_TEXT,
<     SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
<     SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
<     SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
<     SDL_MESSAGEBOX_COLOR_MAX
< } SDL_MessageBoxColorType;
< 
< /**
<  * \brief A set of colors to use for message box dialogs
<  */
< typedef struct
< {
<     SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];
< } SDL_MessageBoxColorScheme;
< 
< /**
<  *  \brief MessageBox structure containing title, text, window, etc.
<  */
< typedef struct
< {
<     Uint32 flags;                       /**< ::SDL_MessageBoxFlags */
<     SDL_Window *window;                 /**< Parent window, can be NULL */
<     const char *title;                  /**< UTF-8 title */
<     const char *message;                /**< UTF-8 message text */
< 
<     int numbuttons;
<     const SDL_MessageBoxButtonData *buttons;
< 
<     const SDL_MessageBoxColorScheme *colorScheme;   /**< ::SDL_MessageBoxColorScheme, can be NULL to use system settings */
< } SDL_MessageBoxData;
< 
< /**
<  *  \brief Create a modal message box.
<  *
<  *  \param messageboxdata The SDL_MessageBoxData structure with title, text, etc.
<  *  \param buttonid The pointer to which user id of hit button should be copied.
<  *
<  *  \return -1 on error, otherwise 0 and buttonid contains user id of button
<  *          hit or -1 if dialog was closed.
<  *
<  *  \note This function should be called on the thread that created the parent
<  *        window, or on the main thread if the messagebox has no parent.  It will
<  *        block execution of that thread until the user clicks a button or
<  *        closes the messagebox.
<  */
< extern DECLSPEC int SDLCALL SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
< 
< /**
<  *  \brief Create a simple modal message box
<  *
<  *  \param flags    ::SDL_MessageBoxFlags
<  *  \param title    UTF-8 title text
<  *  \param message  UTF-8 message text
<  *  \param window   The parent window, or NULL for no parent
<  *
<  *  \return 0 on success, -1 on error
<  *
<  *  \sa SDL_ShowMessageBox
<  */
< extern DECLSPEC int SDLCALL SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_messagebox_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_messagebox_h
> #define _SDL_messagebox_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_video.h"      /* For SDL_Window */
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  * \brief SDL_MessageBox flags. If supported will display warning icon, etc.
>  */
> typedef enum
> {
>     SDL_MESSAGEBOX_ERROR        = 0x00000010,   /**< error dialog */
>     SDL_MESSAGEBOX_WARNING      = 0x00000020,   /**< warning dialog */
>     SDL_MESSAGEBOX_INFORMATION  = 0x00000040    /**< informational dialog */
> } SDL_MessageBoxFlags;
> 
> /**
>  * \brief Flags for SDL_MessageBoxButtonData.
>  */
> typedef enum
> {
>     SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0x00000001,  /**< Marks the default button when return is hit */
>     SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 0x00000002   /**< Marks the default button when escape is hit */
> } SDL_MessageBoxButtonFlags;
> 
> /**
>  *  \brief Individual button data.
>  */
> typedef struct
> {
>     Uint32 flags;       /**< ::SDL_MessageBoxButtonFlags */
>     int buttonid;       /**< User defined button id (value returned via SDL_ShowMessageBox) */
>     const char * text;  /**< The UTF-8 button text */
> } SDL_MessageBoxButtonData;
> 
> /**
>  * \brief RGB value used in a message box color scheme
>  */
> typedef struct
> {
>     Uint8 r, g, b;
> } SDL_MessageBoxColor;
> 
> typedef enum
> {
>     SDL_MESSAGEBOX_COLOR_BACKGROUND,
>     SDL_MESSAGEBOX_COLOR_TEXT,
>     SDL_MESSAGEBOX_COLOR_BUTTON_BORDER,
>     SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND,
>     SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED,
>     SDL_MESSAGEBOX_COLOR_MAX
> } SDL_MessageBoxColorType;
> 
> /**
>  * \brief A set of colors to use for message box dialogs
>  */
> typedef struct
> {
>     SDL_MessageBoxColor colors[SDL_MESSAGEBOX_COLOR_MAX];
> } SDL_MessageBoxColorScheme;
> 
> /**
>  *  \brief MessageBox structure containing title, text, window, etc.
>  */
> typedef struct
> {
>     Uint32 flags;                       /**< ::SDL_MessageBoxFlags */
>     SDL_Window *window;                 /**< Parent window, can be NULL */
>     const char *title;                  /**< UTF-8 title */
>     const char *message;                /**< UTF-8 message text */
> 
>     int numbuttons;
>     const SDL_MessageBoxButtonData *buttons;
> 
>     const SDL_MessageBoxColorScheme *colorScheme;   /**< ::SDL_MessageBoxColorScheme, can be NULL to use system settings */
> } SDL_MessageBoxData;
> 
> /**
>  *  \brief Create a modal message box.
>  *
>  *  \param messageboxdata The SDL_MessageBoxData structure with title, text, etc.
>  *  \param buttonid The pointer to which user id of hit button should be copied.
>  *
>  *  \return -1 on error, otherwise 0 and buttonid contains user id of button
>  *          hit or -1 if dialog was closed.
>  *
>  *  \note This function should be called on the thread that created the parent
>  *        window, or on the main thread if the messagebox has no parent.  It will
>  *        block execution of that thread until the user clicks a button or
>  *        closes the messagebox.
>  */
> extern DECLSPEC int SDLCALL SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid);
> 
> /**
>  *  \brief Create a simple modal message box
>  *
>  *  \param flags    ::SDL_MessageBoxFlags
>  *  \param title    UTF-8 title text
>  *  \param message  UTF-8 message text
>  *  \param window   The parent window, or NULL for no parent
>  *
>  *  \return 0 on success, -1 on error
>  *
>  *  \sa SDL_ShowMessageBox
>  */
> extern DECLSPEC int SDLCALL SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *message, SDL_Window *window);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_messagebox_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_mouse.h ../android-sdl/jni/SDL2/include/SDL_mouse.h
1,224c1,224
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_mouse.h
<  *
<  *  Include file for SDL mouse event handling.
<  */
< 
< #ifndef _SDL_mouse_h
< #define _SDL_mouse_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< typedef struct SDL_Cursor SDL_Cursor;   /* Implementation dependent */
< 
< /**
<  * \brief Cursor types for SDL_CreateSystemCursor.
<  */
< typedef enum
< {
<     SDL_SYSTEM_CURSOR_ARROW,     /**< Arrow */
<     SDL_SYSTEM_CURSOR_IBEAM,     /**< I-beam */
<     SDL_SYSTEM_CURSOR_WAIT,      /**< Wait */
<     SDL_SYSTEM_CURSOR_CROSSHAIR, /**< Crosshair */
<     SDL_SYSTEM_CURSOR_WAITARROW, /**< Small wait cursor (or Wait if not available) */
<     SDL_SYSTEM_CURSOR_SIZENWSE,  /**< Double arrow pointing northwest and southeast */
<     SDL_SYSTEM_CURSOR_SIZENESW,  /**< Double arrow pointing northeast and southwest */
<     SDL_SYSTEM_CURSOR_SIZEWE,    /**< Double arrow pointing west and east */
<     SDL_SYSTEM_CURSOR_SIZENS,    /**< Double arrow pointing north and south */
<     SDL_SYSTEM_CURSOR_SIZEALL,   /**< Four pointed arrow pointing north, south, east, and west */
<     SDL_SYSTEM_CURSOR_NO,        /**< Slashed circle or crossbones */
<     SDL_SYSTEM_CURSOR_HAND,      /**< Hand */
<     SDL_NUM_SYSTEM_CURSORS
< } SDL_SystemCursor;
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Get the window which currently has mouse focus.
<  */
< extern DECLSPEC SDL_Window * SDLCALL SDL_GetMouseFocus(void);
< 
< /**
<  *  \brief Retrieve the current state of the mouse.
<  *
<  *  The current button state is returned as a button bitmask, which can
<  *  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
<  *  mouse cursor position relative to the focus window for the currently
<  *  selected mouse.  You can pass NULL for either x or y.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_GetMouseState(int *x, int *y);
< 
< /**
<  *  \brief Retrieve the relative state of the mouse.
<  *
<  *  The current button state is returned as a button bitmask, which can
<  *  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
<  *  mouse deltas since the last call to SDL_GetRelativeMouseState().
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_GetRelativeMouseState(int *x, int *y);
< 
< /**
<  *  \brief Moves the mouse to the given position within the window.
<  *
<  *  \param window The window to move the mouse into, or NULL for the current mouse focus
<  *  \param x The x coordinate within the window
<  *  \param y The y coordinate within the window
<  *
<  *  \note This function generates a mouse motion event
<  */
< extern DECLSPEC void SDLCALL SDL_WarpMouseInWindow(SDL_Window * window,
<                                                    int x, int y);
< 
< /**
<  *  \brief Set relative mouse mode.
<  *
<  *  \param enabled Whether or not to enable relative mode
<  *
<  *  \return 0 on success, or -1 if relative mode is not supported.
<  *
<  *  While the mouse is in relative mode, the cursor is hidden, and the
<  *  driver will try to report continuous motion in the current window.
<  *  Only relative motion events will be delivered, the mouse position
<  *  will not change.
<  *
<  *  \note This function will flush any pending mouse motion.
<  *
<  *  \sa SDL_GetRelativeMouseMode()
<  */
< extern DECLSPEC int SDLCALL SDL_SetRelativeMouseMode(SDL_bool enabled);
< 
< /**
<  *  \brief Query whether relative mouse mode is enabled.
<  *
<  *  \sa SDL_SetRelativeMouseMode()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_GetRelativeMouseMode(void);
< 
< /**
<  *  \brief Create a cursor, using the specified bitmap data and
<  *         mask (in MSB format).
<  *
<  *  The cursor width must be a multiple of 8 bits.
<  *
<  *  The cursor is created in black and white according to the following:
<  *  <table>
<  *  <tr><td> data </td><td> mask </td><td> resulting pixel on screen </td></tr>
<  *  <tr><td>  0   </td><td>  1   </td><td> White </td></tr>
<  *  <tr><td>  1   </td><td>  1   </td><td> Black </td></tr>
<  *  <tr><td>  0   </td><td>  0   </td><td> Transparent </td></tr>
<  *  <tr><td>  1   </td><td>  0   </td><td> Inverted color if possible, black
<  *                                         if not. </td></tr>
<  *  </table>
<  *
<  *  \sa SDL_FreeCursor()
<  */
< extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateCursor(const Uint8 * data,
<                                                      const Uint8 * mask,
<                                                      int w, int h, int hot_x,
<                                                      int hot_y);
< 
< /**
<  *  \brief Create a color cursor.
<  *
<  *  \sa SDL_FreeCursor()
<  */
< extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateColorCursor(SDL_Surface *surface,
<                                                           int hot_x,
<                                                           int hot_y);
< 
< /**
<  *  \brief Create a system cursor.
<  *
<  *  \sa SDL_FreeCursor()
<  */
< extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateSystemCursor(SDL_SystemCursor id);
< 
< /**
<  *  \brief Set the active cursor.
<  */
< extern DECLSPEC void SDLCALL SDL_SetCursor(SDL_Cursor * cursor);
< 
< /**
<  *  \brief Return the active cursor.
<  */
< extern DECLSPEC SDL_Cursor *SDLCALL SDL_GetCursor(void);
< 
< /**
<  *  \brief Return the default cursor.
<  */
< extern DECLSPEC SDL_Cursor *SDLCALL SDL_GetDefaultCursor(void);
< 
< /**
<  *  \brief Frees a cursor created with SDL_CreateCursor().
<  *
<  *  \sa SDL_CreateCursor()
<  */
< extern DECLSPEC void SDLCALL SDL_FreeCursor(SDL_Cursor * cursor);
< 
< /**
<  *  \brief Toggle whether or not the cursor is shown.
<  *
<  *  \param toggle 1 to show the cursor, 0 to hide it, -1 to query the current
<  *                state.
<  *
<  *  \return 1 if the cursor is shown, or 0 if the cursor is hidden.
<  */
< extern DECLSPEC int SDLCALL SDL_ShowCursor(int toggle);
< 
< /**
<  *  Used as a mask when testing buttons in buttonstate.
<  *   - Button 1:  Left mouse button
<  *   - Button 2:  Middle mouse button
<  *   - Button 3:  Right mouse button
<  */
< #define SDL_BUTTON(X)       (1 << ((X)-1))
< #define SDL_BUTTON_LEFT     1
< #define SDL_BUTTON_MIDDLE   2
< #define SDL_BUTTON_RIGHT    3
< #define SDL_BUTTON_X1       4
< #define SDL_BUTTON_X2       5
< #define SDL_BUTTON_LMASK    SDL_BUTTON(SDL_BUTTON_LEFT)
< #define SDL_BUTTON_MMASK    SDL_BUTTON(SDL_BUTTON_MIDDLE)
< #define SDL_BUTTON_RMASK    SDL_BUTTON(SDL_BUTTON_RIGHT)
< #define SDL_BUTTON_X1MASK   SDL_BUTTON(SDL_BUTTON_X1)
< #define SDL_BUTTON_X2MASK   SDL_BUTTON(SDL_BUTTON_X2)
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_mouse_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_mouse.h
>  *
>  *  Include file for SDL mouse event handling.
>  */
> 
> #ifndef _SDL_mouse_h
> #define _SDL_mouse_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_video.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> typedef struct SDL_Cursor SDL_Cursor;   /* Implementation dependent */
> 
> /**
>  * \brief Cursor types for SDL_CreateSystemCursor.
>  */
> typedef enum
> {
>     SDL_SYSTEM_CURSOR_ARROW,     /**< Arrow */
>     SDL_SYSTEM_CURSOR_IBEAM,     /**< I-beam */
>     SDL_SYSTEM_CURSOR_WAIT,      /**< Wait */
>     SDL_SYSTEM_CURSOR_CROSSHAIR, /**< Crosshair */
>     SDL_SYSTEM_CURSOR_WAITARROW, /**< Small wait cursor (or Wait if not available) */
>     SDL_SYSTEM_CURSOR_SIZENWSE,  /**< Double arrow pointing northwest and southeast */
>     SDL_SYSTEM_CURSOR_SIZENESW,  /**< Double arrow pointing northeast and southwest */
>     SDL_SYSTEM_CURSOR_SIZEWE,    /**< Double arrow pointing west and east */
>     SDL_SYSTEM_CURSOR_SIZENS,    /**< Double arrow pointing north and south */
>     SDL_SYSTEM_CURSOR_SIZEALL,   /**< Four pointed arrow pointing north, south, east, and west */
>     SDL_SYSTEM_CURSOR_NO,        /**< Slashed circle or crossbones */
>     SDL_SYSTEM_CURSOR_HAND,      /**< Hand */
>     SDL_NUM_SYSTEM_CURSORS
> } SDL_SystemCursor;
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Get the window which currently has mouse focus.
>  */
> extern DECLSPEC SDL_Window * SDLCALL SDL_GetMouseFocus(void);
> 
> /**
>  *  \brief Retrieve the current state of the mouse.
>  *
>  *  The current button state is returned as a button bitmask, which can
>  *  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
>  *  mouse cursor position relative to the focus window for the currently
>  *  selected mouse.  You can pass NULL for either x or y.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_GetMouseState(int *x, int *y);
> 
> /**
>  *  \brief Retrieve the relative state of the mouse.
>  *
>  *  The current button state is returned as a button bitmask, which can
>  *  be tested using the SDL_BUTTON(X) macros, and x and y are set to the
>  *  mouse deltas since the last call to SDL_GetRelativeMouseState().
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_GetRelativeMouseState(int *x, int *y);
> 
> /**
>  *  \brief Moves the mouse to the given position within the window.
>  *
>  *  \param window The window to move the mouse into, or NULL for the current mouse focus
>  *  \param x The x coordinate within the window
>  *  \param y The y coordinate within the window
>  *
>  *  \note This function generates a mouse motion event
>  */
> extern DECLSPEC void SDLCALL SDL_WarpMouseInWindow(SDL_Window * window,
>                                                    int x, int y);
> 
> /**
>  *  \brief Set relative mouse mode.
>  *
>  *  \param enabled Whether or not to enable relative mode
>  *
>  *  \return 0 on success, or -1 if relative mode is not supported.
>  *
>  *  While the mouse is in relative mode, the cursor is hidden, and the
>  *  driver will try to report continuous motion in the current window.
>  *  Only relative motion events will be delivered, the mouse position
>  *  will not change.
>  *
>  *  \note This function will flush any pending mouse motion.
>  *
>  *  \sa SDL_GetRelativeMouseMode()
>  */
> extern DECLSPEC int SDLCALL SDL_SetRelativeMouseMode(SDL_bool enabled);
> 
> /**
>  *  \brief Query whether relative mouse mode is enabled.
>  *
>  *  \sa SDL_SetRelativeMouseMode()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_GetRelativeMouseMode(void);
> 
> /**
>  *  \brief Create a cursor, using the specified bitmap data and
>  *         mask (in MSB format).
>  *
>  *  The cursor width must be a multiple of 8 bits.
>  *
>  *  The cursor is created in black and white according to the following:
>  *  <table>
>  *  <tr><td> data </td><td> mask </td><td> resulting pixel on screen </td></tr>
>  *  <tr><td>  0   </td><td>  1   </td><td> White </td></tr>
>  *  <tr><td>  1   </td><td>  1   </td><td> Black </td></tr>
>  *  <tr><td>  0   </td><td>  0   </td><td> Transparent </td></tr>
>  *  <tr><td>  1   </td><td>  0   </td><td> Inverted color if possible, black
>  *                                         if not. </td></tr>
>  *  </table>
>  *
>  *  \sa SDL_FreeCursor()
>  */
> extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateCursor(const Uint8 * data,
>                                                      const Uint8 * mask,
>                                                      int w, int h, int hot_x,
>                                                      int hot_y);
> 
> /**
>  *  \brief Create a color cursor.
>  *
>  *  \sa SDL_FreeCursor()
>  */
> extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateColorCursor(SDL_Surface *surface,
>                                                           int hot_x,
>                                                           int hot_y);
> 
> /**
>  *  \brief Create a system cursor.
>  *
>  *  \sa SDL_FreeCursor()
>  */
> extern DECLSPEC SDL_Cursor *SDLCALL SDL_CreateSystemCursor(SDL_SystemCursor id);
> 
> /**
>  *  \brief Set the active cursor.
>  */
> extern DECLSPEC void SDLCALL SDL_SetCursor(SDL_Cursor * cursor);
> 
> /**
>  *  \brief Return the active cursor.
>  */
> extern DECLSPEC SDL_Cursor *SDLCALL SDL_GetCursor(void);
> 
> /**
>  *  \brief Return the default cursor.
>  */
> extern DECLSPEC SDL_Cursor *SDLCALL SDL_GetDefaultCursor(void);
> 
> /**
>  *  \brief Frees a cursor created with SDL_CreateCursor().
>  *
>  *  \sa SDL_CreateCursor()
>  */
> extern DECLSPEC void SDLCALL SDL_FreeCursor(SDL_Cursor * cursor);
> 
> /**
>  *  \brief Toggle whether or not the cursor is shown.
>  *
>  *  \param toggle 1 to show the cursor, 0 to hide it, -1 to query the current
>  *                state.
>  *
>  *  \return 1 if the cursor is shown, or 0 if the cursor is hidden.
>  */
> extern DECLSPEC int SDLCALL SDL_ShowCursor(int toggle);
> 
> /**
>  *  Used as a mask when testing buttons in buttonstate.
>  *   - Button 1:  Left mouse button
>  *   - Button 2:  Middle mouse button
>  *   - Button 3:  Right mouse button
>  */
> #define SDL_BUTTON(X)       (1 << ((X)-1))
> #define SDL_BUTTON_LEFT     1
> #define SDL_BUTTON_MIDDLE   2
> #define SDL_BUTTON_RIGHT    3
> #define SDL_BUTTON_X1       4
> #define SDL_BUTTON_X2       5
> #define SDL_BUTTON_LMASK    SDL_BUTTON(SDL_BUTTON_LEFT)
> #define SDL_BUTTON_MMASK    SDL_BUTTON(SDL_BUTTON_MIDDLE)
> #define SDL_BUTTON_RMASK    SDL_BUTTON(SDL_BUTTON_RIGHT)
> #define SDL_BUTTON_X1MASK   SDL_BUTTON(SDL_BUTTON_X1)
> #define SDL_BUTTON_X2MASK   SDL_BUTTON(SDL_BUTTON_X2)
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_mouse_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_mutex.h ../android-sdl/jni/SDL2/include/SDL_mutex.h
1,251c1,251
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_mutex_h
< #define _SDL_mutex_h
< 
< /**
<  *  \file SDL_mutex.h
<  *
<  *  Functions to provide thread synchronization primitives.
<  */
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  Synchronization functions which can time out return this value
<  *  if they time out.
<  */
< #define SDL_MUTEX_TIMEDOUT  1
< 
< /**
<  *  This is the timeout value which corresponds to never time out.
<  */
< #define SDL_MUTEX_MAXWAIT   (~(Uint32)0)
< 
< 
< /**
<  *  \name Mutex functions
<  */
< /* @{ */
< 
< /* The SDL mutex structure, defined in SDL_sysmutex.c */
< struct SDL_mutex;
< typedef struct SDL_mutex SDL_mutex;
< 
< /**
<  *  Create a mutex, initialized unlocked.
<  */
< extern DECLSPEC SDL_mutex *SDLCALL SDL_CreateMutex(void);
< 
< /**
<  *  Lock the mutex.
<  *
<  *  \return 0, or -1 on error.
<  */
< #define SDL_mutexP(m)   SDL_LockMutex(m)
< extern DECLSPEC int SDLCALL SDL_LockMutex(SDL_mutex * mutex);
< 
< /**
<  *  Try to lock the mutex
<  *
<  *  \return 0, SDL_MUTEX_TIMEDOUT, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_TryLockMutex(SDL_mutex * mutex);
< 
< /**
<  *  Unlock the mutex.
<  *
<  *  \return 0, or -1 on error.
<  *
<  *  \warning It is an error to unlock a mutex that has not been locked by
<  *           the current thread, and doing so results in undefined behavior.
<  */
< #define SDL_mutexV(m)   SDL_UnlockMutex(m)
< extern DECLSPEC int SDLCALL SDL_UnlockMutex(SDL_mutex * mutex);
< 
< /**
<  *  Destroy a mutex.
<  */
< extern DECLSPEC void SDLCALL SDL_DestroyMutex(SDL_mutex * mutex);
< 
< /* @} *//* Mutex functions */
< 
< 
< /**
<  *  \name Semaphore functions
<  */
< /* @{ */
< 
< /* The SDL semaphore structure, defined in SDL_syssem.c */
< struct SDL_semaphore;
< typedef struct SDL_semaphore SDL_sem;
< 
< /**
<  *  Create a semaphore, initialized with value, returns NULL on failure.
<  */
< extern DECLSPEC SDL_sem *SDLCALL SDL_CreateSemaphore(Uint32 initial_value);
< 
< /**
<  *  Destroy a semaphore.
<  */
< extern DECLSPEC void SDLCALL SDL_DestroySemaphore(SDL_sem * sem);
< 
< /**
<  *  This function suspends the calling thread until the semaphore pointed
<  *  to by \c sem has a positive count. It then atomically decreases the
<  *  semaphore count.
<  */
< extern DECLSPEC int SDLCALL SDL_SemWait(SDL_sem * sem);
< 
< /**
<  *  Non-blocking variant of SDL_SemWait().
<  *
<  *  \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait would
<  *          block, and -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_SemTryWait(SDL_sem * sem);
< 
< /**
<  *  Variant of SDL_SemWait() with a timeout in milliseconds.
<  *
<  *  \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait does not
<  *          succeed in the allotted time, and -1 on error.
<  *
<  *  \warning On some platforms this function is implemented by looping with a
<  *           delay of 1 ms, and so should be avoided if possible.
<  */
< extern DECLSPEC int SDLCALL SDL_SemWaitTimeout(SDL_sem * sem, Uint32 ms);
< 
< /**
<  *  Atomically increases the semaphore's count (not blocking).
<  *
<  *  \return 0, or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_SemPost(SDL_sem * sem);
< 
< /**
<  *  Returns the current count of the semaphore.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_SemValue(SDL_sem * sem);
< 
< /* @} *//* Semaphore functions */
< 
< 
< /**
<  *  \name Condition variable functions
<  */
< /* @{ */
< 
< /* The SDL condition variable structure, defined in SDL_syscond.c */
< struct SDL_cond;
< typedef struct SDL_cond SDL_cond;
< 
< /**
<  *  Create a condition variable.
<  *
<  *  Typical use of condition variables:
<  *
<  *  Thread A:
<  *    SDL_LockMutex(lock);
<  *    while ( ! condition ) {
<  *        SDL_CondWait(cond, lock);
<  *    }
<  *    SDL_UnlockMutex(lock);
<  *
<  *  Thread B:
<  *    SDL_LockMutex(lock);
<  *    ...
<  *    condition = true;
<  *    ...
<  *    SDL_CondSignal(cond);
<  *    SDL_UnlockMutex(lock);
<  *
<  *  There is some discussion whether to signal the condition variable
<  *  with the mutex locked or not.  There is some potential performance
<  *  benefit to unlocking first on some platforms, but there are some
<  *  potential race conditions depending on how your code is structured.
<  *
<  *  In general it's safer to signal the condition variable while the
<  *  mutex is locked.
<  */
< extern DECLSPEC SDL_cond *SDLCALL SDL_CreateCond(void);
< 
< /**
<  *  Destroy a condition variable.
<  */
< extern DECLSPEC void SDLCALL SDL_DestroyCond(SDL_cond * cond);
< 
< /**
<  *  Restart one of the threads that are waiting on the condition variable.
<  *
<  *  \return 0 or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_CondSignal(SDL_cond * cond);
< 
< /**
<  *  Restart all threads that are waiting on the condition variable.
<  *
<  *  \return 0 or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_CondBroadcast(SDL_cond * cond);
< 
< /**
<  *  Wait on the condition variable, unlocking the provided mutex.
<  *
<  *  \warning The mutex must be locked before entering this function!
<  *
<  *  The mutex is re-locked once the condition variable is signaled.
<  *
<  *  \return 0 when it is signaled, or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex);
< 
< /**
<  *  Waits for at most \c ms milliseconds, and returns 0 if the condition
<  *  variable is signaled, ::SDL_MUTEX_TIMEDOUT if the condition is not
<  *  signaled in the allotted time, and -1 on error.
<  *
<  *  \warning On some platforms this function is implemented by looping with a
<  *           delay of 1 ms, and so should be avoided if possible.
<  */
< extern DECLSPEC int SDLCALL SDL_CondWaitTimeout(SDL_cond * cond,
<                                                 SDL_mutex * mutex, Uint32 ms);
< 
< /* @} *//* Condition variable functions */
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_mutex_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_mutex_h
> #define _SDL_mutex_h
> 
> /**
>  *  \file SDL_mutex.h
>  *
>  *  Functions to provide thread synchronization primitives.
>  */
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  Synchronization functions which can time out return this value
>  *  if they time out.
>  */
> #define SDL_MUTEX_TIMEDOUT  1
> 
> /**
>  *  This is the timeout value which corresponds to never time out.
>  */
> #define SDL_MUTEX_MAXWAIT   (~(Uint32)0)
> 
> 
> /**
>  *  \name Mutex functions
>  */
> /*@{*/
> 
> /* The SDL mutex structure, defined in SDL_mutex.c */
> struct SDL_mutex;
> typedef struct SDL_mutex SDL_mutex;
> 
> /**
>  *  Create a mutex, initialized unlocked.
>  */
> extern DECLSPEC SDL_mutex *SDLCALL SDL_CreateMutex(void);
> 
> /**
>  *  Lock the mutex.
>  *
>  *  \return 0, or -1 on error.
>  */
> #define SDL_mutexP(m)   SDL_LockMutex(m)
> extern DECLSPEC int SDLCALL SDL_LockMutex(SDL_mutex * mutex);
> 
> /**
>  *  Try to lock the mutex
>  *
>  *  \return 0, SDL_MUTEX_TIMEDOUT, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_TryLockMutex(SDL_mutex * mutex);
> 
> /**
>  *  Unlock the mutex.
>  *
>  *  \return 0, or -1 on error.
>  *
>  *  \warning It is an error to unlock a mutex that has not been locked by
>  *           the current thread, and doing so results in undefined behavior.
>  */
> #define SDL_mutexV(m)   SDL_UnlockMutex(m)
> extern DECLSPEC int SDLCALL SDL_UnlockMutex(SDL_mutex * mutex);
> 
> /**
>  *  Destroy a mutex.
>  */
> extern DECLSPEC void SDLCALL SDL_DestroyMutex(SDL_mutex * mutex);
> 
> /*@}*//*Mutex functions*/
> 
> 
> /**
>  *  \name Semaphore functions
>  */
> /*@{*/
> 
> /* The SDL semaphore structure, defined in SDL_sem.c */
> struct SDL_semaphore;
> typedef struct SDL_semaphore SDL_sem;
> 
> /**
>  *  Create a semaphore, initialized with value, returns NULL on failure.
>  */
> extern DECLSPEC SDL_sem *SDLCALL SDL_CreateSemaphore(Uint32 initial_value);
> 
> /**
>  *  Destroy a semaphore.
>  */
> extern DECLSPEC void SDLCALL SDL_DestroySemaphore(SDL_sem * sem);
> 
> /**
>  *  This function suspends the calling thread until the semaphore pointed
>  *  to by \c sem has a positive count. It then atomically decreases the
>  *  semaphore count.
>  */
> extern DECLSPEC int SDLCALL SDL_SemWait(SDL_sem * sem);
> 
> /**
>  *  Non-blocking variant of SDL_SemWait().
>  *
>  *  \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait would
>  *          block, and -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_SemTryWait(SDL_sem * sem);
> 
> /**
>  *  Variant of SDL_SemWait() with a timeout in milliseconds.
>  *
>  *  \return 0 if the wait succeeds, ::SDL_MUTEX_TIMEDOUT if the wait does not
>  *          succeed in the allotted time, and -1 on error.
>  *
>  *  \warning On some platforms this function is implemented by looping with a
>  *           delay of 1 ms, and so should be avoided if possible.
>  */
> extern DECLSPEC int SDLCALL SDL_SemWaitTimeout(SDL_sem * sem, Uint32 ms);
> 
> /**
>  *  Atomically increases the semaphore's count (not blocking).
>  *
>  *  \return 0, or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_SemPost(SDL_sem * sem);
> 
> /**
>  *  Returns the current count of the semaphore.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_SemValue(SDL_sem * sem);
> 
> /*@}*//*Semaphore functions*/
> 
> 
> /**
>  *  \name Condition variable functions
>  */
> /*@{*/
> 
> /* The SDL condition variable structure, defined in SDL_cond.c */
> struct SDL_cond;
> typedef struct SDL_cond SDL_cond;
> 
> /**
>  *  Create a condition variable.
>  *
>  *  Typical use of condition variables:
>  *
>  *  Thread A:
>  *    SDL_LockMutex(lock);
>  *    while ( ! condition ) {
>  *        SDL_CondWait(cond, lock);
>  *    }
>  *    SDL_UnlockMutex(lock);
>  *
>  *  Thread B:
>  *    SDL_LockMutex(lock);
>  *    ...
>  *    condition = true;
>  *    ...
>  *    SDL_CondSignal(cond);
>  *    SDL_UnlockMutex(lock);
>  *
>  *  There is some discussion whether to signal the condition variable
>  *  with the mutex locked or not.  There is some potential performance
>  *  benefit to unlocking first on some platforms, but there are some
>  *  potential race conditions depending on how your code is structured.
>  *
>  *  In general it's safer to signal the condition variable while the
>  *  mutex is locked.
>  */
> extern DECLSPEC SDL_cond *SDLCALL SDL_CreateCond(void);
> 
> /**
>  *  Destroy a condition variable.
>  */
> extern DECLSPEC void SDLCALL SDL_DestroyCond(SDL_cond * cond);
> 
> /**
>  *  Restart one of the threads that are waiting on the condition variable.
>  *
>  *  \return 0 or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_CondSignal(SDL_cond * cond);
> 
> /**
>  *  Restart all threads that are waiting on the condition variable.
>  *
>  *  \return 0 or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_CondBroadcast(SDL_cond * cond);
> 
> /**
>  *  Wait on the condition variable, unlocking the provided mutex.
>  *
>  *  \warning The mutex must be locked before entering this function!
>  *
>  *  The mutex is re-locked once the condition variable is signaled.
>  *
>  *  \return 0 when it is signaled, or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex);
> 
> /**
>  *  Waits for at most \c ms milliseconds, and returns 0 if the condition
>  *  variable is signaled, ::SDL_MUTEX_TIMEDOUT if the condition is not
>  *  signaled in the allotted time, and -1 on error.
>  *
>  *  \warning On some platforms this function is implemented by looping with a
>  *           delay of 1 ms, and so should be avoided if possible.
>  */
> extern DECLSPEC int SDLCALL SDL_CondWaitTimeout(SDL_cond * cond,
>                                                 SDL_mutex * mutex, Uint32 ms);
> 
> /*@}*//*Condition variable functions*/
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_mutex_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_name.h ../android-sdl/jni/SDL2/include/SDL_name.h
1,11c1,11
< 
< #ifndef _SDLname_h_
< #define _SDLname_h_
< 
< #if defined(__STDC__) || defined(__cplusplus)
< #define NeedFunctionPrototypes 1
< #endif
< 
< #define SDL_NAME(X) SDL_##X
< 
< #endif /* _SDLname_h_ */
---
> 
> #ifndef _SDLname_h_
> #define _SDLname_h_
> 
> #if defined(__STDC__) || defined(__cplusplus)
> #define NeedFunctionPrototypes 1
> #endif
> 
> #define SDL_NAME(X) SDL_##X
> 
> #endif /* _SDLname_h_ */
diff jni/SDL/include/SDL_opengl.h ../android-sdl/jni/SDL2/include/SDL_opengl.h
1,11126c1,11126
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_opengl.h
<  *
<  *  This is a simple file to encapsulate the OpenGL API headers.
<  */
< 
< #ifndef _SDL_opengl_h
< #define _SDL_opengl_h
< 
< #include "SDL_config.h"
< 
< #ifndef __IPHONEOS__
< 
< #ifdef __WIN32__
< #define WIN32_LEAN_AND_MEAN
< #ifndef NOMINMAX
< #define NOMINMAX                /* Don't defined min() and max() */
< #endif
< #include <windows.h>
< #endif
< 
< #ifdef __glext_h_
< /* Someone has already included glext.h */
< #define NO_SDL_GLEXT
< #endif
< #ifndef NO_SDL_GLEXT
< #define __glext_h_              /* Don't let gl.h include glext.h */
< #endif
< #if defined(__MACOSX__)
< #include <OpenGL/gl.h>          /* Header File For The OpenGL Library */
< #define __X_GL_H
< #else
< #include <GL/gl.h>              /* Header File For The OpenGL Library */
< #endif
< #ifndef NO_SDL_GLEXT
< #undef __glext_h_
< #endif
< 
< /**
<  *  \file SDL_opengl.h
<  *
<  *  This file is included because glext.h is not available on some systems.
<  *  If you don't want this version included, simply define ::NO_SDL_GLEXT.
<  *
<  *  The latest version is available from:
<  *      http://www.opengl.org/registry/
<  */
< 
< /**
<  *  \def NO_SDL_GLEXT
<  *
<  *  Define this if you have your own version of glext.h and want to disable the
<  *  version included in SDL_opengl.h.
<  */
< 
< #if !defined(NO_SDL_GLEXT) && !defined(GL_GLEXT_LEGACY)
< #ifndef __glext_h_
< #define __glext_h_
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /*
< ** Copyright (c) 2007-2010 The Khronos Group Inc.
< **
< ** Permission is hereby granted, free of charge, to any person obtaining a
< ** copy of this software and/or associated documentation files (the
< ** "Materials"), to deal in the Materials without restriction, including
< ** without limitation the rights to use, copy, modify, merge, publish,
< ** distribute, sublicense, and/or sell copies of the Materials, and to
< ** permit persons to whom the Materials are furnished to do so, subject to
< ** the following conditions:
< **
< ** The above copyright notice and this permission notice shall be included
< ** in all copies or substantial portions of the Materials.
< **
< ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
< ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
< ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
< ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
< ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
< ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
< ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
< */
< 
< /* Header file version number, required by OpenGL ABI for Linux */
< /* glext.h last updated $Date: 2010-08-03 01:30:25 -0700 (Tue, 03 Aug 2010) $ */
< /* Current version at http://www.opengl.org/registry/ */
< #define GL_GLEXT_VERSION 64
< /* Function declaration macros - to move into glplatform.h */
< 
< #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
< #define WIN32_LEAN_AND_MEAN 1
< #include <windows.h>
< #endif
< 
< #ifndef APIENTRY
< #define APIENTRY
< #endif
< #ifndef APIENTRYP
< #define APIENTRYP APIENTRY *
< #endif
< #ifndef GLAPI
< #define GLAPI extern
< #endif
< 
< /*************************************************************/
< 
< #ifndef GL_VERSION_1_2
< #define GL_UNSIGNED_BYTE_3_3_2            0x8032
< #define GL_UNSIGNED_SHORT_4_4_4_4         0x8033
< #define GL_UNSIGNED_SHORT_5_5_5_1         0x8034
< #define GL_UNSIGNED_INT_8_8_8_8           0x8035
< #define GL_UNSIGNED_INT_10_10_10_2        0x8036
< #define GL_TEXTURE_BINDING_3D             0x806A
< #define GL_PACK_SKIP_IMAGES               0x806B
< #define GL_PACK_IMAGE_HEIGHT              0x806C
< #define GL_UNPACK_SKIP_IMAGES             0x806D
< #define GL_UNPACK_IMAGE_HEIGHT            0x806E
< #define GL_TEXTURE_3D                     0x806F
< #define GL_PROXY_TEXTURE_3D               0x8070
< #define GL_TEXTURE_DEPTH                  0x8071
< #define GL_TEXTURE_WRAP_R                 0x8072
< #define GL_MAX_3D_TEXTURE_SIZE            0x8073
< #define GL_UNSIGNED_BYTE_2_3_3_REV        0x8362
< #define GL_UNSIGNED_SHORT_5_6_5           0x8363
< #define GL_UNSIGNED_SHORT_5_6_5_REV       0x8364
< #define GL_UNSIGNED_SHORT_4_4_4_4_REV     0x8365
< #define GL_UNSIGNED_SHORT_1_5_5_5_REV     0x8366
< #define GL_UNSIGNED_INT_8_8_8_8_REV       0x8367
< #define GL_UNSIGNED_INT_2_10_10_10_REV    0x8368
< #define GL_BGR                            0x80E0
< #define GL_BGRA                           0x80E1
< #define GL_MAX_ELEMENTS_VERTICES          0x80E8
< #define GL_MAX_ELEMENTS_INDICES           0x80E9
< #define GL_CLAMP_TO_EDGE                  0x812F
< #define GL_TEXTURE_MIN_LOD                0x813A
< #define GL_TEXTURE_MAX_LOD                0x813B
< #define GL_TEXTURE_BASE_LEVEL             0x813C
< #define GL_TEXTURE_MAX_LEVEL              0x813D
< #define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12
< #define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13
< #define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22
< #define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23
< #define GL_ALIASED_LINE_WIDTH_RANGE       0x846E
< #endif
< 
< #ifndef GL_VERSION_1_2_DEPRECATED
< #define GL_RESCALE_NORMAL                 0x803A
< #define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
< #define GL_SINGLE_COLOR                   0x81F9
< #define GL_SEPARATE_SPECULAR_COLOR        0x81FA
< #define GL_ALIASED_POINT_SIZE_RANGE       0x846D
< #endif
< 
< #ifndef GL_ARB_imaging
< #define GL_CONSTANT_COLOR                 0x8001
< #define GL_ONE_MINUS_CONSTANT_COLOR       0x8002
< #define GL_CONSTANT_ALPHA                 0x8003
< #define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004
< #define GL_BLEND_COLOR                    0x8005
< #define GL_FUNC_ADD                       0x8006
< #define GL_MIN                            0x8007
< #define GL_MAX                            0x8008
< #define GL_BLEND_EQUATION                 0x8009
< #define GL_FUNC_SUBTRACT                  0x800A
< #define GL_FUNC_REVERSE_SUBTRACT          0x800B
< #endif
< 
< #ifndef GL_ARB_imaging_DEPRECATED
< #define GL_CONVOLUTION_1D                 0x8010
< #define GL_CONVOLUTION_2D                 0x8011
< #define GL_SEPARABLE_2D                   0x8012
< #define GL_CONVOLUTION_BORDER_MODE        0x8013
< #define GL_CONVOLUTION_FILTER_SCALE       0x8014
< #define GL_CONVOLUTION_FILTER_BIAS        0x8015
< #define GL_REDUCE                         0x8016
< #define GL_CONVOLUTION_FORMAT             0x8017
< #define GL_CONVOLUTION_WIDTH              0x8018
< #define GL_CONVOLUTION_HEIGHT             0x8019
< #define GL_MAX_CONVOLUTION_WIDTH          0x801A
< #define GL_MAX_CONVOLUTION_HEIGHT         0x801B
< #define GL_POST_CONVOLUTION_RED_SCALE     0x801C
< #define GL_POST_CONVOLUTION_GREEN_SCALE   0x801D
< #define GL_POST_CONVOLUTION_BLUE_SCALE    0x801E
< #define GL_POST_CONVOLUTION_ALPHA_SCALE   0x801F
< #define GL_POST_CONVOLUTION_RED_BIAS      0x8020
< #define GL_POST_CONVOLUTION_GREEN_BIAS    0x8021
< #define GL_POST_CONVOLUTION_BLUE_BIAS     0x8022
< #define GL_POST_CONVOLUTION_ALPHA_BIAS    0x8023
< #define GL_HISTOGRAM                      0x8024
< #define GL_PROXY_HISTOGRAM                0x8025
< #define GL_HISTOGRAM_WIDTH                0x8026
< #define GL_HISTOGRAM_FORMAT               0x8027
< #define GL_HISTOGRAM_RED_SIZE             0x8028
< #define GL_HISTOGRAM_GREEN_SIZE           0x8029
< #define GL_HISTOGRAM_BLUE_SIZE            0x802A
< #define GL_HISTOGRAM_ALPHA_SIZE           0x802B
< #define GL_HISTOGRAM_LUMINANCE_SIZE       0x802C
< #define GL_HISTOGRAM_SINK                 0x802D
< #define GL_MINMAX                         0x802E
< #define GL_MINMAX_FORMAT                  0x802F
< #define GL_MINMAX_SINK                    0x8030
< #define GL_TABLE_TOO_LARGE                0x8031
< #define GL_COLOR_MATRIX                   0x80B1
< #define GL_COLOR_MATRIX_STACK_DEPTH       0x80B2
< #define GL_MAX_COLOR_MATRIX_STACK_DEPTH   0x80B3
< #define GL_POST_COLOR_MATRIX_RED_SCALE    0x80B4
< #define GL_POST_COLOR_MATRIX_GREEN_SCALE  0x80B5
< #define GL_POST_COLOR_MATRIX_BLUE_SCALE   0x80B6
< #define GL_POST_COLOR_MATRIX_ALPHA_SCALE  0x80B7
< #define GL_POST_COLOR_MATRIX_RED_BIAS     0x80B8
< #define GL_POST_COLOR_MATRIX_GREEN_BIAS   0x80B9
< #define GL_POST_COLOR_MATRIX_BLUE_BIAS    0x80BA
< #define GL_POST_COLOR_MATRIX_ALPHA_BIAS   0x80BB
< #define GL_COLOR_TABLE                    0x80D0
< #define GL_POST_CONVOLUTION_COLOR_TABLE   0x80D1
< #define GL_POST_COLOR_MATRIX_COLOR_TABLE  0x80D2
< #define GL_PROXY_COLOR_TABLE              0x80D3
< #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
< #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
< #define GL_COLOR_TABLE_SCALE              0x80D6
< #define GL_COLOR_TABLE_BIAS               0x80D7
< #define GL_COLOR_TABLE_FORMAT             0x80D8
< #define GL_COLOR_TABLE_WIDTH              0x80D9
< #define GL_COLOR_TABLE_RED_SIZE           0x80DA
< #define GL_COLOR_TABLE_GREEN_SIZE         0x80DB
< #define GL_COLOR_TABLE_BLUE_SIZE          0x80DC
< #define GL_COLOR_TABLE_ALPHA_SIZE         0x80DD
< #define GL_COLOR_TABLE_LUMINANCE_SIZE     0x80DE
< #define GL_COLOR_TABLE_INTENSITY_SIZE     0x80DF
< #define GL_CONSTANT_BORDER                0x8151
< #define GL_REPLICATE_BORDER               0x8153
< #define GL_CONVOLUTION_BORDER_COLOR       0x8154
< #endif
< 
< #ifndef GL_VERSION_1_3
< #define GL_TEXTURE0                       0x84C0
< #define GL_TEXTURE1                       0x84C1
< #define GL_TEXTURE2                       0x84C2
< #define GL_TEXTURE3                       0x84C3
< #define GL_TEXTURE4                       0x84C4
< #define GL_TEXTURE5                       0x84C5
< #define GL_TEXTURE6                       0x84C6
< #define GL_TEXTURE7                       0x84C7
< #define GL_TEXTURE8                       0x84C8
< #define GL_TEXTURE9                       0x84C9
< #define GL_TEXTURE10                      0x84CA
< #define GL_TEXTURE11                      0x84CB
< #define GL_TEXTURE12                      0x84CC
< #define GL_TEXTURE13                      0x84CD
< #define GL_TEXTURE14                      0x84CE
< #define GL_TEXTURE15                      0x84CF
< #define GL_TEXTURE16                      0x84D0
< #define GL_TEXTURE17                      0x84D1
< #define GL_TEXTURE18                      0x84D2
< #define GL_TEXTURE19                      0x84D3
< #define GL_TEXTURE20                      0x84D4
< #define GL_TEXTURE21                      0x84D5
< #define GL_TEXTURE22                      0x84D6
< #define GL_TEXTURE23                      0x84D7
< #define GL_TEXTURE24                      0x84D8
< #define GL_TEXTURE25                      0x84D9
< #define GL_TEXTURE26                      0x84DA
< #define GL_TEXTURE27                      0x84DB
< #define GL_TEXTURE28                      0x84DC
< #define GL_TEXTURE29                      0x84DD
< #define GL_TEXTURE30                      0x84DE
< #define GL_TEXTURE31                      0x84DF
< #define GL_ACTIVE_TEXTURE                 0x84E0
< #define GL_MULTISAMPLE                    0x809D
< #define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E
< #define GL_SAMPLE_ALPHA_TO_ONE            0x809F
< #define GL_SAMPLE_COVERAGE                0x80A0
< #define GL_SAMPLE_BUFFERS                 0x80A8
< #define GL_SAMPLES                        0x80A9
< #define GL_SAMPLE_COVERAGE_VALUE          0x80AA
< #define GL_SAMPLE_COVERAGE_INVERT         0x80AB
< #define GL_TEXTURE_CUBE_MAP               0x8513
< #define GL_TEXTURE_BINDING_CUBE_MAP       0x8514
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X    0x8516
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y    0x8517
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    0x8518
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z    0x8519
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A
< #define GL_PROXY_TEXTURE_CUBE_MAP         0x851B
< #define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C
< #define GL_COMPRESSED_RGB                 0x84ED
< #define GL_COMPRESSED_RGBA                0x84EE
< #define GL_TEXTURE_COMPRESSION_HINT       0x84EF
< #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE  0x86A0
< #define GL_TEXTURE_COMPRESSED             0x86A1
< #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
< #define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3
< #define GL_CLAMP_TO_BORDER                0x812D
< #endif
< 
< #ifndef GL_VERSION_1_3_DEPRECATED
< #define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
< #define GL_MAX_TEXTURE_UNITS              0x84E2
< #define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
< #define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
< #define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
< #define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
< #define GL_MULTISAMPLE_BIT                0x20000000
< #define GL_NORMAL_MAP                     0x8511
< #define GL_REFLECTION_MAP                 0x8512
< #define GL_COMPRESSED_ALPHA               0x84E9
< #define GL_COMPRESSED_LUMINANCE           0x84EA
< #define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
< #define GL_COMPRESSED_INTENSITY           0x84EC
< #define GL_COMBINE                        0x8570
< #define GL_COMBINE_RGB                    0x8571
< #define GL_COMBINE_ALPHA                  0x8572
< #define GL_SOURCE0_RGB                    0x8580
< #define GL_SOURCE1_RGB                    0x8581
< #define GL_SOURCE2_RGB                    0x8582
< #define GL_SOURCE0_ALPHA                  0x8588
< #define GL_SOURCE1_ALPHA                  0x8589
< #define GL_SOURCE2_ALPHA                  0x858A
< #define GL_OPERAND0_RGB                   0x8590
< #define GL_OPERAND1_RGB                   0x8591
< #define GL_OPERAND2_RGB                   0x8592
< #define GL_OPERAND0_ALPHA                 0x8598
< #define GL_OPERAND1_ALPHA                 0x8599
< #define GL_OPERAND2_ALPHA                 0x859A
< #define GL_RGB_SCALE                      0x8573
< #define GL_ADD_SIGNED                     0x8574
< #define GL_INTERPOLATE                    0x8575
< #define GL_SUBTRACT                       0x84E7
< #define GL_CONSTANT                       0x8576
< #define GL_PRIMARY_COLOR                  0x8577
< #define GL_PREVIOUS                       0x8578
< #define GL_DOT3_RGB                       0x86AE
< #define GL_DOT3_RGBA                      0x86AF
< #endif
< 
< #ifndef GL_VERSION_1_4
< #define GL_BLEND_DST_RGB                  0x80C8
< #define GL_BLEND_SRC_RGB                  0x80C9
< #define GL_BLEND_DST_ALPHA                0x80CA
< #define GL_BLEND_SRC_ALPHA                0x80CB
< #define GL_POINT_FADE_THRESHOLD_SIZE      0x8128
< #define GL_DEPTH_COMPONENT16              0x81A5
< #define GL_DEPTH_COMPONENT24              0x81A6
< #define GL_DEPTH_COMPONENT32              0x81A7
< #define GL_MIRRORED_REPEAT                0x8370
< #define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
< #define GL_TEXTURE_LOD_BIAS               0x8501
< #define GL_INCR_WRAP                      0x8507
< #define GL_DECR_WRAP                      0x8508
< #define GL_TEXTURE_DEPTH_SIZE             0x884A
< #define GL_TEXTURE_COMPARE_MODE           0x884C
< #define GL_TEXTURE_COMPARE_FUNC           0x884D
< #endif
< 
< #ifndef GL_VERSION_1_4_DEPRECATED
< #define GL_POINT_SIZE_MIN                 0x8126
< #define GL_POINT_SIZE_MAX                 0x8127
< #define GL_POINT_DISTANCE_ATTENUATION     0x8129
< #define GL_GENERATE_MIPMAP                0x8191
< #define GL_GENERATE_MIPMAP_HINT           0x8192
< #define GL_FOG_COORDINATE_SOURCE          0x8450
< #define GL_FOG_COORDINATE                 0x8451
< #define GL_FRAGMENT_DEPTH                 0x8452
< #define GL_CURRENT_FOG_COORDINATE         0x8453
< #define GL_FOG_COORDINATE_ARRAY_TYPE      0x8454
< #define GL_FOG_COORDINATE_ARRAY_STRIDE    0x8455
< #define GL_FOG_COORDINATE_ARRAY_POINTER   0x8456
< #define GL_FOG_COORDINATE_ARRAY           0x8457
< #define GL_COLOR_SUM                      0x8458
< #define GL_CURRENT_SECONDARY_COLOR        0x8459
< #define GL_SECONDARY_COLOR_ARRAY_SIZE     0x845A
< #define GL_SECONDARY_COLOR_ARRAY_TYPE     0x845B
< #define GL_SECONDARY_COLOR_ARRAY_STRIDE   0x845C
< #define GL_SECONDARY_COLOR_ARRAY_POINTER  0x845D
< #define GL_SECONDARY_COLOR_ARRAY          0x845E
< #define GL_TEXTURE_FILTER_CONTROL         0x8500
< #define GL_DEPTH_TEXTURE_MODE             0x884B
< #define GL_COMPARE_R_TO_TEXTURE           0x884E
< #endif
< 
< #ifndef GL_VERSION_1_5
< #define GL_BUFFER_SIZE                    0x8764
< #define GL_BUFFER_USAGE                   0x8765
< #define GL_QUERY_COUNTER_BITS             0x8864
< #define GL_CURRENT_QUERY                  0x8865
< #define GL_QUERY_RESULT                   0x8866
< #define GL_QUERY_RESULT_AVAILABLE         0x8867
< #define GL_ARRAY_BUFFER                   0x8892
< #define GL_ELEMENT_ARRAY_BUFFER           0x8893
< #define GL_ARRAY_BUFFER_BINDING           0x8894
< #define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
< #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
< #define GL_READ_ONLY                      0x88B8
< #define GL_WRITE_ONLY                     0x88B9
< #define GL_READ_WRITE                     0x88BA
< #define GL_BUFFER_ACCESS                  0x88BB
< #define GL_BUFFER_MAPPED                  0x88BC
< #define GL_BUFFER_MAP_POINTER             0x88BD
< #define GL_STREAM_DRAW                    0x88E0
< #define GL_STREAM_READ                    0x88E1
< #define GL_STREAM_COPY                    0x88E2
< #define GL_STATIC_DRAW                    0x88E4
< #define GL_STATIC_READ                    0x88E5
< #define GL_STATIC_COPY                    0x88E6
< #define GL_DYNAMIC_DRAW                   0x88E8
< #define GL_DYNAMIC_READ                   0x88E9
< #define GL_DYNAMIC_COPY                   0x88EA
< #define GL_SAMPLES_PASSED                 0x8914
< #endif
< 
< #ifndef GL_VERSION_1_5_DEPRECATED
< #define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896
< #define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897
< #define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898
< #define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899
< #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
< #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
< #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
< #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
< #define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E
< #define GL_FOG_COORD_SRC                  0x8450
< #define GL_FOG_COORD                      0x8451
< #define GL_CURRENT_FOG_COORD              0x8453
< #define GL_FOG_COORD_ARRAY_TYPE           0x8454
< #define GL_FOG_COORD_ARRAY_STRIDE         0x8455
< #define GL_FOG_COORD_ARRAY_POINTER        0x8456
< #define GL_FOG_COORD_ARRAY                0x8457
< #define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
< #define GL_SRC0_RGB                       0x8580
< #define GL_SRC1_RGB                       0x8581
< #define GL_SRC2_RGB                       0x8582
< #define GL_SRC0_ALPHA                     0x8588
< #define GL_SRC1_ALPHA                     0x8589
< #define GL_SRC2_ALPHA                     0x858A
< #endif
< 
< #ifndef GL_VERSION_2_0
< #define GL_BLEND_EQUATION_RGB             0x8009
< #define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622
< #define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623
< #define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624
< #define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625
< #define GL_CURRENT_VERTEX_ATTRIB          0x8626
< #define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642
< #define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645
< #define GL_STENCIL_BACK_FUNC              0x8800
< #define GL_STENCIL_BACK_FAIL              0x8801
< #define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802
< #define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803
< #define GL_MAX_DRAW_BUFFERS               0x8824
< #define GL_DRAW_BUFFER0                   0x8825
< #define GL_DRAW_BUFFER1                   0x8826
< #define GL_DRAW_BUFFER2                   0x8827
< #define GL_DRAW_BUFFER3                   0x8828
< #define GL_DRAW_BUFFER4                   0x8829
< #define GL_DRAW_BUFFER5                   0x882A
< #define GL_DRAW_BUFFER6                   0x882B
< #define GL_DRAW_BUFFER7                   0x882C
< #define GL_DRAW_BUFFER8                   0x882D
< #define GL_DRAW_BUFFER9                   0x882E
< #define GL_DRAW_BUFFER10                  0x882F
< #define GL_DRAW_BUFFER11                  0x8830
< #define GL_DRAW_BUFFER12                  0x8831
< #define GL_DRAW_BUFFER13                  0x8832
< #define GL_DRAW_BUFFER14                  0x8833
< #define GL_DRAW_BUFFER15                  0x8834
< #define GL_BLEND_EQUATION_ALPHA           0x883D
< #define GL_MAX_VERTEX_ATTRIBS             0x8869
< #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
< #define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872
< #define GL_FRAGMENT_SHADER                0x8B30
< #define GL_VERTEX_SHADER                  0x8B31
< #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
< #define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A
< #define GL_MAX_VARYING_FLOATS             0x8B4B
< #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
< #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
< #define GL_SHADER_TYPE                    0x8B4F
< #define GL_FLOAT_VEC2                     0x8B50
< #define GL_FLOAT_VEC3                     0x8B51
< #define GL_FLOAT_VEC4                     0x8B52
< #define GL_INT_VEC2                       0x8B53
< #define GL_INT_VEC3                       0x8B54
< #define GL_INT_VEC4                       0x8B55
< #define GL_BOOL                           0x8B56
< #define GL_BOOL_VEC2                      0x8B57
< #define GL_BOOL_VEC3                      0x8B58
< #define GL_BOOL_VEC4                      0x8B59
< #define GL_FLOAT_MAT2                     0x8B5A
< #define GL_FLOAT_MAT3                     0x8B5B
< #define GL_FLOAT_MAT4                     0x8B5C
< #define GL_SAMPLER_1D                     0x8B5D
< #define GL_SAMPLER_2D                     0x8B5E
< #define GL_SAMPLER_3D                     0x8B5F
< #define GL_SAMPLER_CUBE                   0x8B60
< #define GL_SAMPLER_1D_SHADOW              0x8B61
< #define GL_SAMPLER_2D_SHADOW              0x8B62
< #define GL_DELETE_STATUS                  0x8B80
< #define GL_COMPILE_STATUS                 0x8B81
< #define GL_LINK_STATUS                    0x8B82
< #define GL_VALIDATE_STATUS                0x8B83
< #define GL_INFO_LOG_LENGTH                0x8B84
< #define GL_ATTACHED_SHADERS               0x8B85
< #define GL_ACTIVE_UNIFORMS                0x8B86
< #define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87
< #define GL_SHADER_SOURCE_LENGTH           0x8B88
< #define GL_ACTIVE_ATTRIBUTES              0x8B89
< #define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A
< #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
< #define GL_SHADING_LANGUAGE_VERSION       0x8B8C
< #define GL_CURRENT_PROGRAM                0x8B8D
< #define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0
< #define GL_LOWER_LEFT                     0x8CA1
< #define GL_UPPER_LEFT                     0x8CA2
< #define GL_STENCIL_BACK_REF               0x8CA3
< #define GL_STENCIL_BACK_VALUE_MASK        0x8CA4
< #define GL_STENCIL_BACK_WRITEMASK         0x8CA5
< #endif
< 
< #ifndef GL_VERSION_2_0_DEPRECATED
< #define GL_VERTEX_PROGRAM_TWO_SIDE        0x8643
< #define GL_POINT_SPRITE                   0x8861
< #define GL_COORD_REPLACE                  0x8862
< #define GL_MAX_TEXTURE_COORDS             0x8871
< #endif
< 
< #ifndef GL_VERSION_2_1
< #define GL_PIXEL_PACK_BUFFER              0x88EB
< #define GL_PIXEL_UNPACK_BUFFER            0x88EC
< #define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED
< #define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF
< #define GL_FLOAT_MAT2x3                   0x8B65
< #define GL_FLOAT_MAT2x4                   0x8B66
< #define GL_FLOAT_MAT3x2                   0x8B67
< #define GL_FLOAT_MAT3x4                   0x8B68
< #define GL_FLOAT_MAT4x2                   0x8B69
< #define GL_FLOAT_MAT4x3                   0x8B6A
< #define GL_SRGB                           0x8C40
< #define GL_SRGB8                          0x8C41
< #define GL_SRGB_ALPHA                     0x8C42
< #define GL_SRGB8_ALPHA8                   0x8C43
< #define GL_COMPRESSED_SRGB                0x8C48
< #define GL_COMPRESSED_SRGB_ALPHA          0x8C49
< #endif
< 
< #ifndef GL_VERSION_2_1_DEPRECATED
< #define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
< #define GL_SLUMINANCE_ALPHA               0x8C44
< #define GL_SLUMINANCE8_ALPHA8             0x8C45
< #define GL_SLUMINANCE                     0x8C46
< #define GL_SLUMINANCE8                    0x8C47
< #define GL_COMPRESSED_SLUMINANCE          0x8C4A
< #define GL_COMPRESSED_SLUMINANCE_ALPHA    0x8C4B
< #endif
< 
< #ifndef GL_VERSION_3_0
< #define GL_COMPARE_REF_TO_TEXTURE         0x884E
< #define GL_CLIP_DISTANCE0                 0x3000
< #define GL_CLIP_DISTANCE1                 0x3001
< #define GL_CLIP_DISTANCE2                 0x3002
< #define GL_CLIP_DISTANCE3                 0x3003
< #define GL_CLIP_DISTANCE4                 0x3004
< #define GL_CLIP_DISTANCE5                 0x3005
< #define GL_CLIP_DISTANCE6                 0x3006
< #define GL_CLIP_DISTANCE7                 0x3007
< #define GL_MAX_CLIP_DISTANCES             0x0D32
< #define GL_MAJOR_VERSION                  0x821B
< #define GL_MINOR_VERSION                  0x821C
< #define GL_NUM_EXTENSIONS                 0x821D
< #define GL_CONTEXT_FLAGS                  0x821E
< #define GL_DEPTH_BUFFER                   0x8223
< #define GL_STENCIL_BUFFER                 0x8224
< #define GL_COMPRESSED_RED                 0x8225
< #define GL_COMPRESSED_RG                  0x8226
< #define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x0001
< #define GL_RGBA32F                        0x8814
< #define GL_RGB32F                         0x8815
< #define GL_RGBA16F                        0x881A
< #define GL_RGB16F                         0x881B
< #define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD
< #define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF
< #define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904
< #define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905
< #define GL_CLAMP_READ_COLOR               0x891C
< #define GL_FIXED_ONLY                     0x891D
< #define GL_MAX_VARYING_COMPONENTS         0x8B4B
< #define GL_TEXTURE_1D_ARRAY               0x8C18
< #define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19
< #define GL_TEXTURE_2D_ARRAY               0x8C1A
< #define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B
< #define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C
< #define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D
< #define GL_R11F_G11F_B10F                 0x8C3A
< #define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B
< #define GL_RGB9_E5                        0x8C3D
< #define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E
< #define GL_TEXTURE_SHARED_SIZE            0x8C3F
< #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
< #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
< #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
< #define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83
< #define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
< #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
< #define GL_PRIMITIVES_GENERATED           0x8C87
< #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
< #define GL_RASTERIZER_DISCARD             0x8C89
< #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
< #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
< #define GL_INTERLEAVED_ATTRIBS            0x8C8C
< #define GL_SEPARATE_ATTRIBS               0x8C8D
< #define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E
< #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
< #define GL_RGBA32UI                       0x8D70
< #define GL_RGB32UI                        0x8D71
< #define GL_RGBA16UI                       0x8D76
< #define GL_RGB16UI                        0x8D77
< #define GL_RGBA8UI                        0x8D7C
< #define GL_RGB8UI                         0x8D7D
< #define GL_RGBA32I                        0x8D82
< #define GL_RGB32I                         0x8D83
< #define GL_RGBA16I                        0x8D88
< #define GL_RGB16I                         0x8D89
< #define GL_RGBA8I                         0x8D8E
< #define GL_RGB8I                          0x8D8F
< #define GL_RED_INTEGER                    0x8D94
< #define GL_GREEN_INTEGER                  0x8D95
< #define GL_BLUE_INTEGER                   0x8D96
< #define GL_RGB_INTEGER                    0x8D98
< #define GL_RGBA_INTEGER                   0x8D99
< #define GL_BGR_INTEGER                    0x8D9A
< #define GL_BGRA_INTEGER                   0x8D9B
< #define GL_SAMPLER_1D_ARRAY               0x8DC0
< #define GL_SAMPLER_2D_ARRAY               0x8DC1
< #define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
< #define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
< #define GL_SAMPLER_CUBE_SHADOW            0x8DC5
< #define GL_UNSIGNED_INT_VEC2              0x8DC6
< #define GL_UNSIGNED_INT_VEC3              0x8DC7
< #define GL_UNSIGNED_INT_VEC4              0x8DC8
< #define GL_INT_SAMPLER_1D                 0x8DC9
< #define GL_INT_SAMPLER_2D                 0x8DCA
< #define GL_INT_SAMPLER_3D                 0x8DCB
< #define GL_INT_SAMPLER_CUBE               0x8DCC
< #define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
< #define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
< #define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
< #define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
< #define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
< #define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
< #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
< #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
< #define GL_QUERY_WAIT                     0x8E13
< #define GL_QUERY_NO_WAIT                  0x8E14
< #define GL_QUERY_BY_REGION_WAIT           0x8E15
< #define GL_QUERY_BY_REGION_NO_WAIT        0x8E16
< #define GL_BUFFER_ACCESS_FLAGS            0x911F
< #define GL_BUFFER_MAP_LENGTH              0x9120
< #define GL_BUFFER_MAP_OFFSET              0x9121
< /* Reuse tokens from ARB_depth_buffer_float */
< /* reuse GL_DEPTH_COMPONENT32F */
< /* reuse GL_DEPTH32F_STENCIL8 */
< /* reuse GL_FLOAT_32_UNSIGNED_INT_24_8_REV */
< /* Reuse tokens from ARB_framebuffer_object */
< /* reuse GL_INVALID_FRAMEBUFFER_OPERATION */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE */
< /* reuse GL_FRAMEBUFFER_DEFAULT */
< /* reuse GL_FRAMEBUFFER_UNDEFINED */
< /* reuse GL_DEPTH_STENCIL_ATTACHMENT */
< /* reuse GL_INDEX */
< /* reuse GL_MAX_RENDERBUFFER_SIZE */
< /* reuse GL_DEPTH_STENCIL */
< /* reuse GL_UNSIGNED_INT_24_8 */
< /* reuse GL_DEPTH24_STENCIL8 */
< /* reuse GL_TEXTURE_STENCIL_SIZE */
< /* reuse GL_TEXTURE_RED_TYPE */
< /* reuse GL_TEXTURE_GREEN_TYPE */
< /* reuse GL_TEXTURE_BLUE_TYPE */
< /* reuse GL_TEXTURE_ALPHA_TYPE */
< /* reuse GL_TEXTURE_DEPTH_TYPE */
< /* reuse GL_UNSIGNED_NORMALIZED */
< /* reuse GL_FRAMEBUFFER_BINDING */
< /* reuse GL_DRAW_FRAMEBUFFER_BINDING */
< /* reuse GL_RENDERBUFFER_BINDING */
< /* reuse GL_READ_FRAMEBUFFER */
< /* reuse GL_DRAW_FRAMEBUFFER */
< /* reuse GL_READ_FRAMEBUFFER_BINDING */
< /* reuse GL_RENDERBUFFER_SAMPLES */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
< /* reuse GL_FRAMEBUFFER_COMPLETE */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER */
< /* reuse GL_FRAMEBUFFER_UNSUPPORTED */
< /* reuse GL_MAX_COLOR_ATTACHMENTS */
< /* reuse GL_COLOR_ATTACHMENT0 */
< /* reuse GL_COLOR_ATTACHMENT1 */
< /* reuse GL_COLOR_ATTACHMENT2 */
< /* reuse GL_COLOR_ATTACHMENT3 */
< /* reuse GL_COLOR_ATTACHMENT4 */
< /* reuse GL_COLOR_ATTACHMENT5 */
< /* reuse GL_COLOR_ATTACHMENT6 */
< /* reuse GL_COLOR_ATTACHMENT7 */
< /* reuse GL_COLOR_ATTACHMENT8 */
< /* reuse GL_COLOR_ATTACHMENT9 */
< /* reuse GL_COLOR_ATTACHMENT10 */
< /* reuse GL_COLOR_ATTACHMENT11 */
< /* reuse GL_COLOR_ATTACHMENT12 */
< /* reuse GL_COLOR_ATTACHMENT13 */
< /* reuse GL_COLOR_ATTACHMENT14 */
< /* reuse GL_COLOR_ATTACHMENT15 */
< /* reuse GL_DEPTH_ATTACHMENT */
< /* reuse GL_STENCIL_ATTACHMENT */
< /* reuse GL_FRAMEBUFFER */
< /* reuse GL_RENDERBUFFER */
< /* reuse GL_RENDERBUFFER_WIDTH */
< /* reuse GL_RENDERBUFFER_HEIGHT */
< /* reuse GL_RENDERBUFFER_INTERNAL_FORMAT */
< /* reuse GL_STENCIL_INDEX1 */
< /* reuse GL_STENCIL_INDEX4 */
< /* reuse GL_STENCIL_INDEX8 */
< /* reuse GL_STENCIL_INDEX16 */
< /* reuse GL_RENDERBUFFER_RED_SIZE */
< /* reuse GL_RENDERBUFFER_GREEN_SIZE */
< /* reuse GL_RENDERBUFFER_BLUE_SIZE */
< /* reuse GL_RENDERBUFFER_ALPHA_SIZE */
< /* reuse GL_RENDERBUFFER_DEPTH_SIZE */
< /* reuse GL_RENDERBUFFER_STENCIL_SIZE */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE */
< /* reuse GL_MAX_SAMPLES */
< /* Reuse tokens from ARB_framebuffer_sRGB */
< /* reuse GL_FRAMEBUFFER_SRGB */
< /* Reuse tokens from ARB_half_float_vertex */
< /* reuse GL_HALF_FLOAT */
< /* Reuse tokens from ARB_map_buffer_range */
< /* reuse GL_MAP_READ_BIT */
< /* reuse GL_MAP_WRITE_BIT */
< /* reuse GL_MAP_INVALIDATE_RANGE_BIT */
< /* reuse GL_MAP_INVALIDATE_BUFFER_BIT */
< /* reuse GL_MAP_FLUSH_EXPLICIT_BIT */
< /* reuse GL_MAP_UNSYNCHRONIZED_BIT */
< /* Reuse tokens from ARB_texture_compression_rgtc */
< /* reuse GL_COMPRESSED_RED_RGTC1 */
< /* reuse GL_COMPRESSED_SIGNED_RED_RGTC1 */
< /* reuse GL_COMPRESSED_RG_RGTC2 */
< /* reuse GL_COMPRESSED_SIGNED_RG_RGTC2 */
< /* Reuse tokens from ARB_texture_rg */
< /* reuse GL_RG */
< /* reuse GL_RG_INTEGER */
< /* reuse GL_R8 */
< /* reuse GL_R16 */
< /* reuse GL_RG8 */
< /* reuse GL_RG16 */
< /* reuse GL_R16F */
< /* reuse GL_R32F */
< /* reuse GL_RG16F */
< /* reuse GL_RG32F */
< /* reuse GL_R8I */
< /* reuse GL_R8UI */
< /* reuse GL_R16I */
< /* reuse GL_R16UI */
< /* reuse GL_R32I */
< /* reuse GL_R32UI */
< /* reuse GL_RG8I */
< /* reuse GL_RG8UI */
< /* reuse GL_RG16I */
< /* reuse GL_RG16UI */
< /* reuse GL_RG32I */
< /* reuse GL_RG32UI */
< /* Reuse tokens from ARB_vertex_array_object */
< /* reuse GL_VERTEX_ARRAY_BINDING */
< #endif
< 
< #ifndef GL_VERSION_3_0_DEPRECATED
< #define GL_CLAMP_VERTEX_COLOR             0x891A
< #define GL_CLAMP_FRAGMENT_COLOR           0x891B
< #define GL_ALPHA_INTEGER                  0x8D97
< /* Reuse tokens from ARB_framebuffer_object */
< /* reuse GL_TEXTURE_LUMINANCE_TYPE */
< /* reuse GL_TEXTURE_INTENSITY_TYPE */
< #endif
< 
< #ifndef GL_VERSION_3_1
< #define GL_SAMPLER_2D_RECT                0x8B63
< #define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
< #define GL_SAMPLER_BUFFER                 0x8DC2
< #define GL_INT_SAMPLER_2D_RECT            0x8DCD
< #define GL_INT_SAMPLER_BUFFER             0x8DD0
< #define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
< #define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
< #define GL_TEXTURE_BUFFER                 0x8C2A
< #define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B
< #define GL_TEXTURE_BINDING_BUFFER         0x8C2C
< #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
< #define GL_TEXTURE_BUFFER_FORMAT          0x8C2E
< #define GL_TEXTURE_RECTANGLE              0x84F5
< #define GL_TEXTURE_BINDING_RECTANGLE      0x84F6
< #define GL_PROXY_TEXTURE_RECTANGLE        0x84F7
< #define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8
< #define GL_RED_SNORM                      0x8F90
< #define GL_RG_SNORM                       0x8F91
< #define GL_RGB_SNORM                      0x8F92
< #define GL_RGBA_SNORM                     0x8F93
< #define GL_R8_SNORM                       0x8F94
< #define GL_RG8_SNORM                      0x8F95
< #define GL_RGB8_SNORM                     0x8F96
< #define GL_RGBA8_SNORM                    0x8F97
< #define GL_R16_SNORM                      0x8F98
< #define GL_RG16_SNORM                     0x8F99
< #define GL_RGB16_SNORM                    0x8F9A
< #define GL_RGBA16_SNORM                   0x8F9B
< #define GL_SIGNED_NORMALIZED              0x8F9C
< #define GL_PRIMITIVE_RESTART              0x8F9D
< #define GL_PRIMITIVE_RESTART_INDEX        0x8F9E
< /* Reuse tokens from ARB_copy_buffer */
< /* reuse GL_COPY_READ_BUFFER */
< /* reuse GL_COPY_WRITE_BUFFER */
< /* Reuse tokens from ARB_draw_instanced (none) */
< /* Reuse tokens from ARB_uniform_buffer_object */
< /* reuse GL_UNIFORM_BUFFER */
< /* reuse GL_UNIFORM_BUFFER_BINDING */
< /* reuse GL_UNIFORM_BUFFER_START */
< /* reuse GL_UNIFORM_BUFFER_SIZE */
< /* reuse GL_MAX_VERTEX_UNIFORM_BLOCKS */
< /* reuse GL_MAX_FRAGMENT_UNIFORM_BLOCKS */
< /* reuse GL_MAX_COMBINED_UNIFORM_BLOCKS */
< /* reuse GL_MAX_UNIFORM_BUFFER_BINDINGS */
< /* reuse GL_MAX_UNIFORM_BLOCK_SIZE */
< /* reuse GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS */
< /* reuse GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS */
< /* reuse GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT */
< /* reuse GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */
< /* reuse GL_ACTIVE_UNIFORM_BLOCKS */
< /* reuse GL_UNIFORM_TYPE */
< /* reuse GL_UNIFORM_SIZE */
< /* reuse GL_UNIFORM_NAME_LENGTH */
< /* reuse GL_UNIFORM_BLOCK_INDEX */
< /* reuse GL_UNIFORM_OFFSET */
< /* reuse GL_UNIFORM_ARRAY_STRIDE */
< /* reuse GL_UNIFORM_MATRIX_STRIDE */
< /* reuse GL_UNIFORM_IS_ROW_MAJOR */
< /* reuse GL_UNIFORM_BLOCK_BINDING */
< /* reuse GL_UNIFORM_BLOCK_DATA_SIZE */
< /* reuse GL_UNIFORM_BLOCK_NAME_LENGTH */
< /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS */
< /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES */
< /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER */
< /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER */
< /* reuse GL_INVALID_INDEX */
< #endif
< 
< #ifndef GL_VERSION_3_2
< #define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001
< #define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
< #define GL_LINES_ADJACENCY                0x000A
< #define GL_LINE_STRIP_ADJACENCY           0x000B
< #define GL_TRIANGLES_ADJACENCY            0x000C
< #define GL_TRIANGLE_STRIP_ADJACENCY       0x000D
< #define GL_PROGRAM_POINT_SIZE             0x8642
< #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
< #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
< #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
< #define GL_GEOMETRY_SHADER                0x8DD9
< #define GL_GEOMETRY_VERTICES_OUT          0x8916
< #define GL_GEOMETRY_INPUT_TYPE            0x8917
< #define GL_GEOMETRY_OUTPUT_TYPE           0x8918
< #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
< #define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0
< #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
< #define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122
< #define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123
< #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
< #define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125
< #define GL_CONTEXT_PROFILE_MASK           0x9126
< /* reuse GL_MAX_VARYING_COMPONENTS */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
< /* Reuse tokens from ARB_depth_clamp */
< /* reuse GL_DEPTH_CLAMP */
< /* Reuse tokens from ARB_draw_elements_base_vertex (none) */
< /* Reuse tokens from ARB_fragment_coord_conventions (none) */
< /* Reuse tokens from ARB_provoking_vertex */
< /* reuse GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION */
< /* reuse GL_FIRST_VERTEX_CONVENTION */
< /* reuse GL_LAST_VERTEX_CONVENTION */
< /* reuse GL_PROVOKING_VERTEX */
< /* Reuse tokens from ARB_seamless_cube_map */
< /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS */
< /* Reuse tokens from ARB_sync */
< /* reuse GL_MAX_SERVER_WAIT_TIMEOUT */
< /* reuse GL_OBJECT_TYPE */
< /* reuse GL_SYNC_CONDITION */
< /* reuse GL_SYNC_STATUS */
< /* reuse GL_SYNC_FLAGS */
< /* reuse GL_SYNC_FENCE */
< /* reuse GL_SYNC_GPU_COMMANDS_COMPLETE */
< /* reuse GL_UNSIGNALED */
< /* reuse GL_SIGNALED */
< /* reuse GL_ALREADY_SIGNALED */
< /* reuse GL_TIMEOUT_EXPIRED */
< /* reuse GL_CONDITION_SATISFIED */
< /* reuse GL_WAIT_FAILED */
< /* reuse GL_TIMEOUT_IGNORED */
< /* reuse GL_SYNC_FLUSH_COMMANDS_BIT */
< /* reuse GL_TIMEOUT_IGNORED */
< /* Reuse tokens from ARB_texture_multisample */
< /* reuse GL_SAMPLE_POSITION */
< /* reuse GL_SAMPLE_MASK */
< /* reuse GL_SAMPLE_MASK_VALUE */
< /* reuse GL_MAX_SAMPLE_MASK_WORDS */
< /* reuse GL_TEXTURE_2D_MULTISAMPLE */
< /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE */
< /* reuse GL_TEXTURE_2D_MULTISAMPLE_ARRAY */
< /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY */
< /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE */
< /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY */
< /* reuse GL_TEXTURE_SAMPLES */
< /* reuse GL_TEXTURE_FIXED_SAMPLE_LOCATIONS */
< /* reuse GL_SAMPLER_2D_MULTISAMPLE */
< /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE */
< /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE */
< /* reuse GL_SAMPLER_2D_MULTISAMPLE_ARRAY */
< /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
< /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
< /* reuse GL_MAX_COLOR_TEXTURE_SAMPLES */
< /* reuse GL_MAX_DEPTH_TEXTURE_SAMPLES */
< /* reuse GL_MAX_INTEGER_SAMPLES */
< /* Don't need to reuse tokens from ARB_vertex_array_bgra since they're already in 1.2 core */
< #endif
< 
< #ifndef GL_VERSION_3_3
< #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR    0x88FE
< /* Reuse tokens from ARB_blend_func_extended */
< /* reuse GL_SRC1_COLOR */
< /* reuse GL_ONE_MINUS_SRC1_COLOR */
< /* reuse GL_ONE_MINUS_SRC1_ALPHA */
< /* reuse GL_MAX_DUAL_SOURCE_DRAW_BUFFERS */
< /* Reuse tokens from ARB_explicit_attrib_location (none) */
< /* Reuse tokens from ARB_occlusion_query2 */
< /* reuse GL_ANY_SAMPLES_PASSED */
< /* Reuse tokens from ARB_sampler_objects */
< /* reuse GL_SAMPLER_BINDING */
< /* Reuse tokens from ARB_shader_bit_encoding (none) */
< /* Reuse tokens from ARB_texture_rgb10_a2ui */
< /* reuse GL_RGB10_A2UI */
< /* Reuse tokens from ARB_texture_swizzle */
< /* reuse GL_TEXTURE_SWIZZLE_R */
< /* reuse GL_TEXTURE_SWIZZLE_G */
< /* reuse GL_TEXTURE_SWIZZLE_B */
< /* reuse GL_TEXTURE_SWIZZLE_A */
< /* reuse GL_TEXTURE_SWIZZLE_RGBA */
< /* Reuse tokens from ARB_timer_query */
< /* reuse GL_TIME_ELAPSED */
< /* reuse GL_TIMESTAMP */
< /* Reuse tokens from ARB_vertex_type_2_10_10_10_rev */
< /* reuse GL_INT_2_10_10_10_REV */
< #endif
< 
< #ifndef GL_VERSION_4_0
< #define GL_SAMPLE_SHADING                 0x8C36
< #define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37
< #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
< #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
< #define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009
< #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
< #define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B
< #define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
< #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
< #define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
< #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
< /* Reuse tokens from ARB_texture_query_lod (none) */
< /* Reuse tokens from ARB_draw_buffers_blend (none) */
< /* Reuse tokens from ARB_draw_indirect */
< /* reuse GL_DRAW_INDIRECT_BUFFER */
< /* reuse GL_DRAW_INDIRECT_BUFFER_BINDING */
< /* Reuse tokens from ARB_gpu_shader5 */
< /* reuse GL_GEOMETRY_SHADER_INVOCATIONS */
< /* reuse GL_MAX_GEOMETRY_SHADER_INVOCATIONS */
< /* reuse GL_MIN_FRAGMENT_INTERPOLATION_OFFSET */
< /* reuse GL_MAX_FRAGMENT_INTERPOLATION_OFFSET */
< /* reuse GL_FRAGMENT_INTERPOLATION_OFFSET_BITS */
< /* reuse GL_MAX_VERTEX_STREAMS */
< /* Reuse tokens from ARB_gpu_shader_fp64 */
< /* reuse GL_DOUBLE_VEC2 */
< /* reuse GL_DOUBLE_VEC3 */
< /* reuse GL_DOUBLE_VEC4 */
< /* reuse GL_DOUBLE_MAT2 */
< /* reuse GL_DOUBLE_MAT3 */
< /* reuse GL_DOUBLE_MAT4 */
< /* reuse GL_DOUBLE_MAT2x3 */
< /* reuse GL_DOUBLE_MAT2x4 */
< /* reuse GL_DOUBLE_MAT3x2 */
< /* reuse GL_DOUBLE_MAT3x4 */
< /* reuse GL_DOUBLE_MAT4x2 */
< /* reuse GL_DOUBLE_MAT4x3 */
< /* Reuse tokens from ARB_shader_subroutine */
< /* reuse GL_ACTIVE_SUBROUTINES */
< /* reuse GL_ACTIVE_SUBROUTINE_UNIFORMS */
< /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS */
< /* reuse GL_ACTIVE_SUBROUTINE_MAX_LENGTH */
< /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH */
< /* reuse GL_MAX_SUBROUTINES */
< /* reuse GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS */
< /* reuse GL_NUM_COMPATIBLE_SUBROUTINES */
< /* reuse GL_COMPATIBLE_SUBROUTINES */
< /* Reuse tokens from ARB_tessellation_shader */
< /* reuse GL_PATCHES */
< /* reuse GL_PATCH_VERTICES */
< /* reuse GL_PATCH_DEFAULT_INNER_LEVEL */
< /* reuse GL_PATCH_DEFAULT_OUTER_LEVEL */
< /* reuse GL_TESS_CONTROL_OUTPUT_VERTICES */
< /* reuse GL_TESS_GEN_MODE */
< /* reuse GL_TESS_GEN_SPACING */
< /* reuse GL_TESS_GEN_VERTEX_ORDER */
< /* reuse GL_TESS_GEN_POINT_MODE */
< /* reuse GL_ISOLINES */
< /* reuse GL_FRACTIONAL_ODD */
< /* reuse GL_FRACTIONAL_EVEN */
< /* reuse GL_MAX_PATCH_VERTICES */
< /* reuse GL_MAX_TESS_GEN_LEVEL */
< /* reuse GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS */
< /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS */
< /* reuse GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS */
< /* reuse GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS */
< /* reuse GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS */
< /* reuse GL_MAX_TESS_PATCH_COMPONENTS */
< /* reuse GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS */
< /* reuse GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS */
< /* reuse GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS */
< /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS */
< /* reuse GL_MAX_TESS_CONTROL_INPUT_COMPONENTS */
< /* reuse GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS */
< /* reuse GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS */
< /* reuse GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS */
< /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER */
< /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER */
< /* reuse GL_TESS_EVALUATION_SHADER */
< /* reuse GL_TESS_CONTROL_SHADER */
< /* Reuse tokens from ARB_texture_buffer_object_rgb32 (none) */
< /* Reuse tokens from ARB_transform_feedback2 */
< /* reuse GL_TRANSFORM_FEEDBACK */
< /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED */
< /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE */
< /* reuse GL_TRANSFORM_FEEDBACK_BINDING */
< /* Reuse tokens from ARB_transform_feedback3 */
< /* reuse GL_MAX_TRANSFORM_FEEDBACK_BUFFERS */
< /* reuse GL_MAX_VERTEX_STREAMS */
< #endif
< 
< #ifndef GL_VERSION_4_1
< /* Reuse tokens from ARB_ES2_compatibility */
< /* reuse GL_FIXED */
< /* reuse GL_IMPLEMENTATION_COLOR_READ_TYPE */
< /* reuse GL_IMPLEMENTATION_COLOR_READ_FORMAT */
< /* reuse GL_LOW_FLOAT */
< /* reuse GL_MEDIUM_FLOAT */
< /* reuse GL_HIGH_FLOAT */
< /* reuse GL_LOW_INT */
< /* reuse GL_MEDIUM_INT */
< /* reuse GL_HIGH_INT */
< /* reuse GL_SHADER_COMPILER */
< /* reuse GL_NUM_SHADER_BINARY_FORMATS */
< /* reuse GL_MAX_VERTEX_UNIFORM_VECTORS */
< /* reuse GL_MAX_VARYING_VECTORS */
< /* reuse GL_MAX_FRAGMENT_UNIFORM_VECTORS */
< /* Reuse tokens from ARB_get_program_binary */
< /* reuse GL_PROGRAM_BINARY_RETRIEVABLE_HINT */
< /* reuse GL_PROGRAM_BINARY_LENGTH */
< /* reuse GL_NUM_PROGRAM_BINARY_FORMATS */
< /* reuse GL_PROGRAM_BINARY_FORMATS */
< /* Reuse tokens from ARB_separate_shader_objects */
< /* reuse GL_VERTEX_SHADER_BIT */
< /* reuse GL_FRAGMENT_SHADER_BIT */
< /* reuse GL_GEOMETRY_SHADER_BIT */
< /* reuse GL_TESS_CONTROL_SHADER_BIT */
< /* reuse GL_TESS_EVALUATION_SHADER_BIT */
< /* reuse GL_ALL_SHADER_BITS */
< /* reuse GL_PROGRAM_SEPARABLE */
< /* reuse GL_ACTIVE_PROGRAM */
< /* reuse GL_PROGRAM_PIPELINE_BINDING */
< /* Reuse tokens from ARB_shader_precision (none) */
< /* Reuse tokens from ARB_vertex_attrib_64bit - all are in GL 3.0 and 4.0 already */
< /* Reuse tokens from ARB_viewport_array - some are in GL 1.1 and ARB_provoking_vertex already */
< /* reuse GL_MAX_VIEWPORTS */
< /* reuse GL_VIEWPORT_SUBPIXEL_BITS */
< /* reuse GL_VIEWPORT_BOUNDS_RANGE */
< /* reuse GL_LAYER_PROVOKING_VERTEX */
< /* reuse GL_VIEWPORT_INDEX_PROVOKING_VERTEX */
< /* reuse GL_UNDEFINED_VERTEX */
< #endif
< 
< #ifndef GL_ARB_multitexture
< #define GL_TEXTURE0_ARB                   0x84C0
< #define GL_TEXTURE1_ARB                   0x84C1
< #define GL_TEXTURE2_ARB                   0x84C2
< #define GL_TEXTURE3_ARB                   0x84C3
< #define GL_TEXTURE4_ARB                   0x84C4
< #define GL_TEXTURE5_ARB                   0x84C5
< #define GL_TEXTURE6_ARB                   0x84C6
< #define GL_TEXTURE7_ARB                   0x84C7
< #define GL_TEXTURE8_ARB                   0x84C8
< #define GL_TEXTURE9_ARB                   0x84C9
< #define GL_TEXTURE10_ARB                  0x84CA
< #define GL_TEXTURE11_ARB                  0x84CB
< #define GL_TEXTURE12_ARB                  0x84CC
< #define GL_TEXTURE13_ARB                  0x84CD
< #define GL_TEXTURE14_ARB                  0x84CE
< #define GL_TEXTURE15_ARB                  0x84CF
< #define GL_TEXTURE16_ARB                  0x84D0
< #define GL_TEXTURE17_ARB                  0x84D1
< #define GL_TEXTURE18_ARB                  0x84D2
< #define GL_TEXTURE19_ARB                  0x84D3
< #define GL_TEXTURE20_ARB                  0x84D4
< #define GL_TEXTURE21_ARB                  0x84D5
< #define GL_TEXTURE22_ARB                  0x84D6
< #define GL_TEXTURE23_ARB                  0x84D7
< #define GL_TEXTURE24_ARB                  0x84D8
< #define GL_TEXTURE25_ARB                  0x84D9
< #define GL_TEXTURE26_ARB                  0x84DA
< #define GL_TEXTURE27_ARB                  0x84DB
< #define GL_TEXTURE28_ARB                  0x84DC
< #define GL_TEXTURE29_ARB                  0x84DD
< #define GL_TEXTURE30_ARB                  0x84DE
< #define GL_TEXTURE31_ARB                  0x84DF
< #define GL_ACTIVE_TEXTURE_ARB             0x84E0
< #define GL_CLIENT_ACTIVE_TEXTURE_ARB      0x84E1
< #define GL_MAX_TEXTURE_UNITS_ARB          0x84E2
< #endif
< 
< #ifndef GL_ARB_transpose_matrix
< #define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
< #define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
< #define GL_TRANSPOSE_TEXTURE_MATRIX_ARB   0x84E5
< #define GL_TRANSPOSE_COLOR_MATRIX_ARB     0x84E6
< #endif
< 
< #ifndef GL_ARB_multisample
< #define GL_MULTISAMPLE_ARB                0x809D
< #define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB   0x809E
< #define GL_SAMPLE_ALPHA_TO_ONE_ARB        0x809F
< #define GL_SAMPLE_COVERAGE_ARB            0x80A0
< #define GL_SAMPLE_BUFFERS_ARB             0x80A8
< #define GL_SAMPLES_ARB                    0x80A9
< #define GL_SAMPLE_COVERAGE_VALUE_ARB      0x80AA
< #define GL_SAMPLE_COVERAGE_INVERT_ARB     0x80AB
< #define GL_MULTISAMPLE_BIT_ARB            0x20000000
< #endif
< 
< #ifndef GL_ARB_texture_env_add
< #endif
< 
< #ifndef GL_ARB_texture_cube_map
< #define GL_NORMAL_MAP_ARB                 0x8511
< #define GL_REFLECTION_MAP_ARB             0x8512
< #define GL_TEXTURE_CUBE_MAP_ARB           0x8513
< #define GL_TEXTURE_BINDING_CUBE_MAP_ARB   0x8514
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
< #define GL_PROXY_TEXTURE_CUBE_MAP_ARB     0x851B
< #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB  0x851C
< #endif
< 
< #ifndef GL_ARB_texture_compression
< #define GL_COMPRESSED_ALPHA_ARB           0x84E9
< #define GL_COMPRESSED_LUMINANCE_ARB       0x84EA
< #define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
< #define GL_COMPRESSED_INTENSITY_ARB       0x84EC
< #define GL_COMPRESSED_RGB_ARB             0x84ED
< #define GL_COMPRESSED_RGBA_ARB            0x84EE
< #define GL_TEXTURE_COMPRESSION_HINT_ARB   0x84EF
< #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
< #define GL_TEXTURE_COMPRESSED_ARB         0x86A1
< #define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
< #define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
< #endif
< 
< #ifndef GL_ARB_texture_border_clamp
< #define GL_CLAMP_TO_BORDER_ARB            0x812D
< #endif
< 
< #ifndef GL_ARB_point_parameters
< #define GL_POINT_SIZE_MIN_ARB             0x8126
< #define GL_POINT_SIZE_MAX_ARB             0x8127
< #define GL_POINT_FADE_THRESHOLD_SIZE_ARB  0x8128
< #define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
< #endif
< 
< #ifndef GL_ARB_vertex_blend
< #define GL_MAX_VERTEX_UNITS_ARB           0x86A4
< #define GL_ACTIVE_VERTEX_UNITS_ARB        0x86A5
< #define GL_WEIGHT_SUM_UNITY_ARB           0x86A6
< #define GL_VERTEX_BLEND_ARB               0x86A7
< #define GL_CURRENT_WEIGHT_ARB             0x86A8
< #define GL_WEIGHT_ARRAY_TYPE_ARB          0x86A9
< #define GL_WEIGHT_ARRAY_STRIDE_ARB        0x86AA
< #define GL_WEIGHT_ARRAY_SIZE_ARB          0x86AB
< #define GL_WEIGHT_ARRAY_POINTER_ARB       0x86AC
< #define GL_WEIGHT_ARRAY_ARB               0x86AD
< #define GL_MODELVIEW0_ARB                 0x1700
< #define GL_MODELVIEW1_ARB                 0x850A
< #define GL_MODELVIEW2_ARB                 0x8722
< #define GL_MODELVIEW3_ARB                 0x8723
< #define GL_MODELVIEW4_ARB                 0x8724
< #define GL_MODELVIEW5_ARB                 0x8725
< #define GL_MODELVIEW6_ARB                 0x8726
< #define GL_MODELVIEW7_ARB                 0x8727
< #define GL_MODELVIEW8_ARB                 0x8728
< #define GL_MODELVIEW9_ARB                 0x8729
< #define GL_MODELVIEW10_ARB                0x872A
< #define GL_MODELVIEW11_ARB                0x872B
< #define GL_MODELVIEW12_ARB                0x872C
< #define GL_MODELVIEW13_ARB                0x872D
< #define GL_MODELVIEW14_ARB                0x872E
< #define GL_MODELVIEW15_ARB                0x872F
< #define GL_MODELVIEW16_ARB                0x8730
< #define GL_MODELVIEW17_ARB                0x8731
< #define GL_MODELVIEW18_ARB                0x8732
< #define GL_MODELVIEW19_ARB                0x8733
< #define GL_MODELVIEW20_ARB                0x8734
< #define GL_MODELVIEW21_ARB                0x8735
< #define GL_MODELVIEW22_ARB                0x8736
< #define GL_MODELVIEW23_ARB                0x8737
< #define GL_MODELVIEW24_ARB                0x8738
< #define GL_MODELVIEW25_ARB                0x8739
< #define GL_MODELVIEW26_ARB                0x873A
< #define GL_MODELVIEW27_ARB                0x873B
< #define GL_MODELVIEW28_ARB                0x873C
< #define GL_MODELVIEW29_ARB                0x873D
< #define GL_MODELVIEW30_ARB                0x873E
< #define GL_MODELVIEW31_ARB                0x873F
< #endif
< 
< #ifndef GL_ARB_matrix_palette
< #define GL_MATRIX_PALETTE_ARB             0x8840
< #define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
< #define GL_MAX_PALETTE_MATRICES_ARB       0x8842
< #define GL_CURRENT_PALETTE_MATRIX_ARB     0x8843
< #define GL_MATRIX_INDEX_ARRAY_ARB         0x8844
< #define GL_CURRENT_MATRIX_INDEX_ARB       0x8845
< #define GL_MATRIX_INDEX_ARRAY_SIZE_ARB    0x8846
< #define GL_MATRIX_INDEX_ARRAY_TYPE_ARB    0x8847
< #define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB  0x8848
< #define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
< #endif
< 
< #ifndef GL_ARB_texture_env_combine
< #define GL_COMBINE_ARB                    0x8570
< #define GL_COMBINE_RGB_ARB                0x8571
< #define GL_COMBINE_ALPHA_ARB              0x8572
< #define GL_SOURCE0_RGB_ARB                0x8580
< #define GL_SOURCE1_RGB_ARB                0x8581
< #define GL_SOURCE2_RGB_ARB                0x8582
< #define GL_SOURCE0_ALPHA_ARB              0x8588
< #define GL_SOURCE1_ALPHA_ARB              0x8589
< #define GL_SOURCE2_ALPHA_ARB              0x858A
< #define GL_OPERAND0_RGB_ARB               0x8590
< #define GL_OPERAND1_RGB_ARB               0x8591
< #define GL_OPERAND2_RGB_ARB               0x8592
< #define GL_OPERAND0_ALPHA_ARB             0x8598
< #define GL_OPERAND1_ALPHA_ARB             0x8599
< #define GL_OPERAND2_ALPHA_ARB             0x859A
< #define GL_RGB_SCALE_ARB                  0x8573
< #define GL_ADD_SIGNED_ARB                 0x8574
< #define GL_INTERPOLATE_ARB                0x8575
< #define GL_SUBTRACT_ARB                   0x84E7
< #define GL_CONSTANT_ARB                   0x8576
< #define GL_PRIMARY_COLOR_ARB              0x8577
< #define GL_PREVIOUS_ARB                   0x8578
< #endif
< 
< #ifndef GL_ARB_texture_env_crossbar
< #endif
< 
< #ifndef GL_ARB_texture_env_dot3
< #define GL_DOT3_RGB_ARB                   0x86AE
< #define GL_DOT3_RGBA_ARB                  0x86AF
< #endif
< 
< #ifndef GL_ARB_texture_mirrored_repeat
< #define GL_MIRRORED_REPEAT_ARB            0x8370
< #endif
< 
< #ifndef GL_ARB_depth_texture
< #define GL_DEPTH_COMPONENT16_ARB          0x81A5
< #define GL_DEPTH_COMPONENT24_ARB          0x81A6
< #define GL_DEPTH_COMPONENT32_ARB          0x81A7
< #define GL_TEXTURE_DEPTH_SIZE_ARB         0x884A
< #define GL_DEPTH_TEXTURE_MODE_ARB         0x884B
< #endif
< 
< #ifndef GL_ARB_shadow
< #define GL_TEXTURE_COMPARE_MODE_ARB       0x884C
< #define GL_TEXTURE_COMPARE_FUNC_ARB       0x884D
< #define GL_COMPARE_R_TO_TEXTURE_ARB       0x884E
< #endif
< 
< #ifndef GL_ARB_shadow_ambient
< #define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
< #endif
< 
< #ifndef GL_ARB_window_pos
< #endif
< 
< #ifndef GL_ARB_vertex_program
< #define GL_COLOR_SUM_ARB                  0x8458
< #define GL_VERTEX_PROGRAM_ARB             0x8620
< #define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
< #define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB   0x8623
< #define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
< #define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB   0x8625
< #define GL_CURRENT_VERTEX_ATTRIB_ARB      0x8626
< #define GL_PROGRAM_LENGTH_ARB             0x8627
< #define GL_PROGRAM_STRING_ARB             0x8628
< #define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
< #define GL_MAX_PROGRAM_MATRICES_ARB       0x862F
< #define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
< #define GL_CURRENT_MATRIX_ARB             0x8641
< #define GL_VERTEX_PROGRAM_POINT_SIZE_ARB  0x8642
< #define GL_VERTEX_PROGRAM_TWO_SIDE_ARB    0x8643
< #define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
< #define GL_PROGRAM_ERROR_POSITION_ARB     0x864B
< #define GL_PROGRAM_BINDING_ARB            0x8677
< #define GL_MAX_VERTEX_ATTRIBS_ARB         0x8869
< #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
< #define GL_PROGRAM_ERROR_STRING_ARB       0x8874
< #define GL_PROGRAM_FORMAT_ASCII_ARB       0x8875
< #define GL_PROGRAM_FORMAT_ARB             0x8876
< #define GL_PROGRAM_INSTRUCTIONS_ARB       0x88A0
< #define GL_MAX_PROGRAM_INSTRUCTIONS_ARB   0x88A1
< #define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
< #define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
< #define GL_PROGRAM_TEMPORARIES_ARB        0x88A4
< #define GL_MAX_PROGRAM_TEMPORARIES_ARB    0x88A5
< #define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
< #define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
< #define GL_PROGRAM_PARAMETERS_ARB         0x88A8
< #define GL_MAX_PROGRAM_PARAMETERS_ARB     0x88A9
< #define GL_PROGRAM_NATIVE_PARAMETERS_ARB  0x88AA
< #define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
< #define GL_PROGRAM_ATTRIBS_ARB            0x88AC
< #define GL_MAX_PROGRAM_ATTRIBS_ARB        0x88AD
< #define GL_PROGRAM_NATIVE_ATTRIBS_ARB     0x88AE
< #define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
< #define GL_PROGRAM_ADDRESS_REGISTERS_ARB  0x88B0
< #define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
< #define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
< #define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
< #define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
< #define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
< #define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
< #define GL_TRANSPOSE_CURRENT_MATRIX_ARB   0x88B7
< #define GL_MATRIX0_ARB                    0x88C0
< #define GL_MATRIX1_ARB                    0x88C1
< #define GL_MATRIX2_ARB                    0x88C2
< #define GL_MATRIX3_ARB                    0x88C3
< #define GL_MATRIX4_ARB                    0x88C4
< #define GL_MATRIX5_ARB                    0x88C5
< #define GL_MATRIX6_ARB                    0x88C6
< #define GL_MATRIX7_ARB                    0x88C7
< #define GL_MATRIX8_ARB                    0x88C8
< #define GL_MATRIX9_ARB                    0x88C9
< #define GL_MATRIX10_ARB                   0x88CA
< #define GL_MATRIX11_ARB                   0x88CB
< #define GL_MATRIX12_ARB                   0x88CC
< #define GL_MATRIX13_ARB                   0x88CD
< #define GL_MATRIX14_ARB                   0x88CE
< #define GL_MATRIX15_ARB                   0x88CF
< #define GL_MATRIX16_ARB                   0x88D0
< #define GL_MATRIX17_ARB                   0x88D1
< #define GL_MATRIX18_ARB                   0x88D2
< #define GL_MATRIX19_ARB                   0x88D3
< #define GL_MATRIX20_ARB                   0x88D4
< #define GL_MATRIX21_ARB                   0x88D5
< #define GL_MATRIX22_ARB                   0x88D6
< #define GL_MATRIX23_ARB                   0x88D7
< #define GL_MATRIX24_ARB                   0x88D8
< #define GL_MATRIX25_ARB                   0x88D9
< #define GL_MATRIX26_ARB                   0x88DA
< #define GL_MATRIX27_ARB                   0x88DB
< #define GL_MATRIX28_ARB                   0x88DC
< #define GL_MATRIX29_ARB                   0x88DD
< #define GL_MATRIX30_ARB                   0x88DE
< #define GL_MATRIX31_ARB                   0x88DF
< #endif
< 
< #ifndef GL_ARB_fragment_program
< #define GL_FRAGMENT_PROGRAM_ARB           0x8804
< #define GL_PROGRAM_ALU_INSTRUCTIONS_ARB   0x8805
< #define GL_PROGRAM_TEX_INSTRUCTIONS_ARB   0x8806
< #define GL_PROGRAM_TEX_INDIRECTIONS_ARB   0x8807
< #define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
< #define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
< #define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
< #define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
< #define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
< #define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
< #define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
< #define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
< #define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
< #define GL_MAX_TEXTURE_COORDS_ARB         0x8871
< #define GL_MAX_TEXTURE_IMAGE_UNITS_ARB    0x8872
< #endif
< 
< #ifndef GL_ARB_vertex_buffer_object
< #define GL_BUFFER_SIZE_ARB                0x8764
< #define GL_BUFFER_USAGE_ARB               0x8765
< #define GL_ARRAY_BUFFER_ARB               0x8892
< #define GL_ELEMENT_ARRAY_BUFFER_ARB       0x8893
< #define GL_ARRAY_BUFFER_BINDING_ARB       0x8894
< #define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
< #define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
< #define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
< #define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
< #define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
< #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
< #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
< #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
< #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
< #define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
< #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
< #define GL_READ_ONLY_ARB                  0x88B8
< #define GL_WRITE_ONLY_ARB                 0x88B9
< #define GL_READ_WRITE_ARB                 0x88BA
< #define GL_BUFFER_ACCESS_ARB              0x88BB
< #define GL_BUFFER_MAPPED_ARB              0x88BC
< #define GL_BUFFER_MAP_POINTER_ARB         0x88BD
< #define GL_STREAM_DRAW_ARB                0x88E0
< #define GL_STREAM_READ_ARB                0x88E1
< #define GL_STREAM_COPY_ARB                0x88E2
< #define GL_STATIC_DRAW_ARB                0x88E4
< #define GL_STATIC_READ_ARB                0x88E5
< #define GL_STATIC_COPY_ARB                0x88E6
< #define GL_DYNAMIC_DRAW_ARB               0x88E8
< #define GL_DYNAMIC_READ_ARB               0x88E9
< #define GL_DYNAMIC_COPY_ARB               0x88EA
< #endif
< 
< #ifndef GL_ARB_occlusion_query
< #define GL_QUERY_COUNTER_BITS_ARB         0x8864
< #define GL_CURRENT_QUERY_ARB              0x8865
< #define GL_QUERY_RESULT_ARB               0x8866
< #define GL_QUERY_RESULT_AVAILABLE_ARB     0x8867
< #define GL_SAMPLES_PASSED_ARB             0x8914
< #endif
< 
< #ifndef GL_ARB_shader_objects
< #define GL_PROGRAM_OBJECT_ARB             0x8B40
< #define GL_SHADER_OBJECT_ARB              0x8B48
< #define GL_OBJECT_TYPE_ARB                0x8B4E
< #define GL_OBJECT_SUBTYPE_ARB             0x8B4F
< #define GL_FLOAT_VEC2_ARB                 0x8B50
< #define GL_FLOAT_VEC3_ARB                 0x8B51
< #define GL_FLOAT_VEC4_ARB                 0x8B52
< #define GL_INT_VEC2_ARB                   0x8B53
< #define GL_INT_VEC3_ARB                   0x8B54
< #define GL_INT_VEC4_ARB                   0x8B55
< #define GL_BOOL_ARB                       0x8B56
< #define GL_BOOL_VEC2_ARB                  0x8B57
< #define GL_BOOL_VEC3_ARB                  0x8B58
< #define GL_BOOL_VEC4_ARB                  0x8B59
< #define GL_FLOAT_MAT2_ARB                 0x8B5A
< #define GL_FLOAT_MAT3_ARB                 0x8B5B
< #define GL_FLOAT_MAT4_ARB                 0x8B5C
< #define GL_SAMPLER_1D_ARB                 0x8B5D
< #define GL_SAMPLER_2D_ARB                 0x8B5E
< #define GL_SAMPLER_3D_ARB                 0x8B5F
< #define GL_SAMPLER_CUBE_ARB               0x8B60
< #define GL_SAMPLER_1D_SHADOW_ARB          0x8B61
< #define GL_SAMPLER_2D_SHADOW_ARB          0x8B62
< #define GL_SAMPLER_2D_RECT_ARB            0x8B63
< #define GL_SAMPLER_2D_RECT_SHADOW_ARB     0x8B64
< #define GL_OBJECT_DELETE_STATUS_ARB       0x8B80
< #define GL_OBJECT_COMPILE_STATUS_ARB      0x8B81
< #define GL_OBJECT_LINK_STATUS_ARB         0x8B82
< #define GL_OBJECT_VALIDATE_STATUS_ARB     0x8B83
< #define GL_OBJECT_INFO_LOG_LENGTH_ARB     0x8B84
< #define GL_OBJECT_ATTACHED_OBJECTS_ARB    0x8B85
< #define GL_OBJECT_ACTIVE_UNIFORMS_ARB     0x8B86
< #define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
< #define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
< #endif
< 
< #ifndef GL_ARB_vertex_shader
< #define GL_VERTEX_SHADER_ARB              0x8B31
< #define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
< #define GL_MAX_VARYING_FLOATS_ARB         0x8B4B
< #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
< #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
< #define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB   0x8B89
< #define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
< #endif
< 
< #ifndef GL_ARB_fragment_shader
< #define GL_FRAGMENT_SHADER_ARB            0x8B30
< #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
< #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
< #endif
< 
< #ifndef GL_ARB_shading_language_100
< #define GL_SHADING_LANGUAGE_VERSION_ARB   0x8B8C
< #endif
< 
< #ifndef GL_ARB_texture_non_power_of_two
< #endif
< 
< #ifndef GL_ARB_point_sprite
< #define GL_POINT_SPRITE_ARB               0x8861
< #define GL_COORD_REPLACE_ARB              0x8862
< #endif
< 
< #ifndef GL_ARB_fragment_program_shadow
< #endif
< 
< #ifndef GL_ARB_draw_buffers
< #define GL_MAX_DRAW_BUFFERS_ARB           0x8824
< #define GL_DRAW_BUFFER0_ARB               0x8825
< #define GL_DRAW_BUFFER1_ARB               0x8826
< #define GL_DRAW_BUFFER2_ARB               0x8827
< #define GL_DRAW_BUFFER3_ARB               0x8828
< #define GL_DRAW_BUFFER4_ARB               0x8829
< #define GL_DRAW_BUFFER5_ARB               0x882A
< #define GL_DRAW_BUFFER6_ARB               0x882B
< #define GL_DRAW_BUFFER7_ARB               0x882C
< #define GL_DRAW_BUFFER8_ARB               0x882D
< #define GL_DRAW_BUFFER9_ARB               0x882E
< #define GL_DRAW_BUFFER10_ARB              0x882F
< #define GL_DRAW_BUFFER11_ARB              0x8830
< #define GL_DRAW_BUFFER12_ARB              0x8831
< #define GL_DRAW_BUFFER13_ARB              0x8832
< #define GL_DRAW_BUFFER14_ARB              0x8833
< #define GL_DRAW_BUFFER15_ARB              0x8834
< #endif
< 
< #ifndef GL_ARB_texture_rectangle
< #define GL_TEXTURE_RECTANGLE_ARB          0x84F5
< #define GL_TEXTURE_BINDING_RECTANGLE_ARB  0x84F6
< #define GL_PROXY_TEXTURE_RECTANGLE_ARB    0x84F7
< #define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
< #endif
< 
< #ifndef GL_ARB_color_buffer_float
< #define GL_RGBA_FLOAT_MODE_ARB            0x8820
< #define GL_CLAMP_VERTEX_COLOR_ARB         0x891A
< #define GL_CLAMP_FRAGMENT_COLOR_ARB       0x891B
< #define GL_CLAMP_READ_COLOR_ARB           0x891C
< #define GL_FIXED_ONLY_ARB                 0x891D
< #endif
< 
< #ifndef GL_ARB_half_float_pixel
< #define GL_HALF_FLOAT_ARB                 0x140B
< #endif
< 
< #ifndef GL_ARB_texture_float
< #define GL_TEXTURE_RED_TYPE_ARB           0x8C10
< #define GL_TEXTURE_GREEN_TYPE_ARB         0x8C11
< #define GL_TEXTURE_BLUE_TYPE_ARB          0x8C12
< #define GL_TEXTURE_ALPHA_TYPE_ARB         0x8C13
< #define GL_TEXTURE_LUMINANCE_TYPE_ARB     0x8C14
< #define GL_TEXTURE_INTENSITY_TYPE_ARB     0x8C15
< #define GL_TEXTURE_DEPTH_TYPE_ARB         0x8C16
< #define GL_UNSIGNED_NORMALIZED_ARB        0x8C17
< #define GL_RGBA32F_ARB                    0x8814
< #define GL_RGB32F_ARB                     0x8815
< #define GL_ALPHA32F_ARB                   0x8816
< #define GL_INTENSITY32F_ARB               0x8817
< #define GL_LUMINANCE32F_ARB               0x8818
< #define GL_LUMINANCE_ALPHA32F_ARB         0x8819
< #define GL_RGBA16F_ARB                    0x881A
< #define GL_RGB16F_ARB                     0x881B
< #define GL_ALPHA16F_ARB                   0x881C
< #define GL_INTENSITY16F_ARB               0x881D
< #define GL_LUMINANCE16F_ARB               0x881E
< #define GL_LUMINANCE_ALPHA16F_ARB         0x881F
< #endif
< 
< #ifndef GL_ARB_pixel_buffer_object
< #define GL_PIXEL_PACK_BUFFER_ARB          0x88EB
< #define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC
< #define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED
< #define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
< #endif
< 
< #ifndef GL_ARB_depth_buffer_float
< #define GL_DEPTH_COMPONENT32F             0x8CAC
< #define GL_DEPTH32F_STENCIL8              0x8CAD
< #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
< #endif
< 
< #ifndef GL_ARB_draw_instanced
< #endif
< 
< #ifndef GL_ARB_framebuffer_object
< #define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506
< #define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
< #define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
< #define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
< #define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
< #define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
< #define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
< #define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
< #define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
< #define GL_FRAMEBUFFER_DEFAULT            0x8218
< #define GL_FRAMEBUFFER_UNDEFINED          0x8219
< #define GL_DEPTH_STENCIL_ATTACHMENT       0x821A
< #define GL_MAX_RENDERBUFFER_SIZE          0x84E8
< #define GL_DEPTH_STENCIL                  0x84F9
< #define GL_UNSIGNED_INT_24_8              0x84FA
< #define GL_DEPTH24_STENCIL8               0x88F0
< #define GL_TEXTURE_STENCIL_SIZE           0x88F1
< #define GL_TEXTURE_RED_TYPE               0x8C10
< #define GL_TEXTURE_GREEN_TYPE             0x8C11
< #define GL_TEXTURE_BLUE_TYPE              0x8C12
< #define GL_TEXTURE_ALPHA_TYPE             0x8C13
< #define GL_TEXTURE_DEPTH_TYPE             0x8C16
< #define GL_UNSIGNED_NORMALIZED            0x8C17
< #define GL_FRAMEBUFFER_BINDING            0x8CA6
< #define GL_DRAW_FRAMEBUFFER_BINDING       GL_FRAMEBUFFER_BINDING
< #define GL_RENDERBUFFER_BINDING           0x8CA7
< #define GL_READ_FRAMEBUFFER               0x8CA8
< #define GL_DRAW_FRAMEBUFFER               0x8CA9
< #define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
< #define GL_RENDERBUFFER_SAMPLES           0x8CAB
< #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
< #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
< #define GL_FRAMEBUFFER_COMPLETE           0x8CD5
< #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
< #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
< #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
< #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
< #define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD
< #define GL_MAX_COLOR_ATTACHMENTS          0x8CDF
< #define GL_COLOR_ATTACHMENT0              0x8CE0
< #define GL_COLOR_ATTACHMENT1              0x8CE1
< #define GL_COLOR_ATTACHMENT2              0x8CE2
< #define GL_COLOR_ATTACHMENT3              0x8CE3
< #define GL_COLOR_ATTACHMENT4              0x8CE4
< #define GL_COLOR_ATTACHMENT5              0x8CE5
< #define GL_COLOR_ATTACHMENT6              0x8CE6
< #define GL_COLOR_ATTACHMENT7              0x8CE7
< #define GL_COLOR_ATTACHMENT8              0x8CE8
< #define GL_COLOR_ATTACHMENT9              0x8CE9
< #define GL_COLOR_ATTACHMENT10             0x8CEA
< #define GL_COLOR_ATTACHMENT11             0x8CEB
< #define GL_COLOR_ATTACHMENT12             0x8CEC
< #define GL_COLOR_ATTACHMENT13             0x8CED
< #define GL_COLOR_ATTACHMENT14             0x8CEE
< #define GL_COLOR_ATTACHMENT15             0x8CEF
< #define GL_DEPTH_ATTACHMENT               0x8D00
< #define GL_STENCIL_ATTACHMENT             0x8D20
< #define GL_FRAMEBUFFER                    0x8D40
< #define GL_RENDERBUFFER                   0x8D41
< #define GL_RENDERBUFFER_WIDTH             0x8D42
< #define GL_RENDERBUFFER_HEIGHT            0x8D43
< #define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44
< #define GL_STENCIL_INDEX1                 0x8D46
< #define GL_STENCIL_INDEX4                 0x8D47
< #define GL_STENCIL_INDEX8                 0x8D48
< #define GL_STENCIL_INDEX16                0x8D49
< #define GL_RENDERBUFFER_RED_SIZE          0x8D50
< #define GL_RENDERBUFFER_GREEN_SIZE        0x8D51
< #define GL_RENDERBUFFER_BLUE_SIZE         0x8D52
< #define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53
< #define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54
< #define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55
< #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
< #define GL_MAX_SAMPLES                    0x8D57
< #endif
< 
< #ifndef GL_ARB_framebuffer_object_DEPRECATED
< #define GL_INDEX                          0x8222
< #define GL_TEXTURE_LUMINANCE_TYPE         0x8C14
< #define GL_TEXTURE_INTENSITY_TYPE         0x8C15
< #endif
< 
< #ifndef GL_ARB_framebuffer_sRGB
< #define GL_FRAMEBUFFER_SRGB               0x8DB9
< #endif
< 
< #ifndef GL_ARB_geometry_shader4
< #define GL_LINES_ADJACENCY_ARB            0x000A
< #define GL_LINE_STRIP_ADJACENCY_ARB       0x000B
< #define GL_TRIANGLES_ADJACENCY_ARB        0x000C
< #define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D
< #define GL_PROGRAM_POINT_SIZE_ARB         0x8642
< #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
< #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
< #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
< #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
< #define GL_GEOMETRY_SHADER_ARB            0x8DD9
< #define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA
< #define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB
< #define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC
< #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
< #define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
< #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
< #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
< #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
< /* reuse GL_MAX_VARYING_COMPONENTS */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
< #endif
< 
< #ifndef GL_ARB_half_float_vertex
< #define GL_HALF_FLOAT                     0x140B
< #endif
< 
< #ifndef GL_ARB_instanced_arrays
< #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
< #endif
< 
< #ifndef GL_ARB_map_buffer_range
< #define GL_MAP_READ_BIT                   0x0001
< #define GL_MAP_WRITE_BIT                  0x0002
< #define GL_MAP_INVALIDATE_RANGE_BIT       0x0004
< #define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008
< #define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010
< #define GL_MAP_UNSYNCHRONIZED_BIT         0x0020
< #endif
< 
< #ifndef GL_ARB_texture_buffer_object
< #define GL_TEXTURE_BUFFER_ARB             0x8C2A
< #define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B
< #define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C
< #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
< #define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E
< #endif
< 
< #ifndef GL_ARB_texture_compression_rgtc
< #define GL_COMPRESSED_RED_RGTC1           0x8DBB
< #define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC
< #define GL_COMPRESSED_RG_RGTC2            0x8DBD
< #define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE
< #endif
< 
< #ifndef GL_ARB_texture_rg
< #define GL_RG                             0x8227
< #define GL_RG_INTEGER                     0x8228
< #define GL_R8                             0x8229
< #define GL_R16                            0x822A
< #define GL_RG8                            0x822B
< #define GL_RG16                           0x822C
< #define GL_R16F                           0x822D
< #define GL_R32F                           0x822E
< #define GL_RG16F                          0x822F
< #define GL_RG32F                          0x8230
< #define GL_R8I                            0x8231
< #define GL_R8UI                           0x8232
< #define GL_R16I                           0x8233
< #define GL_R16UI                          0x8234
< #define GL_R32I                           0x8235
< #define GL_R32UI                          0x8236
< #define GL_RG8I                           0x8237
< #define GL_RG8UI                          0x8238
< #define GL_RG16I                          0x8239
< #define GL_RG16UI                         0x823A
< #define GL_RG32I                          0x823B
< #define GL_RG32UI                         0x823C
< #endif
< 
< #ifndef GL_ARB_vertex_array_object
< #define GL_VERTEX_ARRAY_BINDING           0x85B5
< #endif
< 
< #ifndef GL_ARB_uniform_buffer_object
< #define GL_UNIFORM_BUFFER                 0x8A11
< #define GL_UNIFORM_BUFFER_BINDING         0x8A28
< #define GL_UNIFORM_BUFFER_START           0x8A29
< #define GL_UNIFORM_BUFFER_SIZE            0x8A2A
< #define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B
< #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C
< #define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D
< #define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E
< #define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F
< #define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30
< #define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
< #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
< #define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
< #define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
< #define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
< #define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36
< #define GL_UNIFORM_TYPE                   0x8A37
< #define GL_UNIFORM_SIZE                   0x8A38
< #define GL_UNIFORM_NAME_LENGTH            0x8A39
< #define GL_UNIFORM_BLOCK_INDEX            0x8A3A
< #define GL_UNIFORM_OFFSET                 0x8A3B
< #define GL_UNIFORM_ARRAY_STRIDE           0x8A3C
< #define GL_UNIFORM_MATRIX_STRIDE          0x8A3D
< #define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E
< #define GL_UNIFORM_BLOCK_BINDING          0x8A3F
< #define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40
< #define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41
< #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42
< #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
< #define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
< #define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
< #define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
< #define GL_INVALID_INDEX                  0xFFFFFFFFu
< #endif
< 
< #ifndef GL_ARB_compatibility
< /* ARB_compatibility just defines tokens from core 3.0 */
< #endif
< 
< #ifndef GL_ARB_copy_buffer
< #define GL_COPY_READ_BUFFER               0x8F36
< #define GL_COPY_WRITE_BUFFER              0x8F37
< #endif
< 
< #ifndef GL_ARB_shader_texture_lod
< #endif
< 
< #ifndef GL_ARB_depth_clamp
< #define GL_DEPTH_CLAMP                    0x864F
< #endif
< 
< #ifndef GL_ARB_draw_elements_base_vertex
< #endif
< 
< #ifndef GL_ARB_fragment_coord_conventions
< #endif
< 
< #ifndef GL_ARB_provoking_vertex
< #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
< #define GL_FIRST_VERTEX_CONVENTION        0x8E4D
< #define GL_LAST_VERTEX_CONVENTION         0x8E4E
< #define GL_PROVOKING_VERTEX               0x8E4F
< #endif
< 
< #ifndef GL_ARB_seamless_cube_map
< #define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F
< #endif
< 
< #ifndef GL_ARB_sync
< #define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111
< #define GL_OBJECT_TYPE                    0x9112
< #define GL_SYNC_CONDITION                 0x9113
< #define GL_SYNC_STATUS                    0x9114
< #define GL_SYNC_FLAGS                     0x9115
< #define GL_SYNC_FENCE                     0x9116
< #define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117
< #define GL_UNSIGNALED                     0x9118
< #define GL_SIGNALED                       0x9119
< #define GL_ALREADY_SIGNALED               0x911A
< #define GL_TIMEOUT_EXPIRED                0x911B
< #define GL_CONDITION_SATISFIED            0x911C
< #define GL_WAIT_FAILED                    0x911D
< #define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001
< #define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull
< #endif
< 
< #ifndef GL_ARB_texture_multisample
< #define GL_SAMPLE_POSITION                0x8E50
< #define GL_SAMPLE_MASK                    0x8E51
< #define GL_SAMPLE_MASK_VALUE              0x8E52
< #define GL_MAX_SAMPLE_MASK_WORDS          0x8E59
< #define GL_TEXTURE_2D_MULTISAMPLE         0x9100
< #define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101
< #define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102
< #define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
< #define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
< #define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
< #define GL_TEXTURE_SAMPLES                0x9106
< #define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
< #define GL_SAMPLER_2D_MULTISAMPLE         0x9108
< #define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
< #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
< #define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
< #define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
< #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
< #define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E
< #define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F
< #define GL_MAX_INTEGER_SAMPLES            0x9110
< #endif
< 
< #ifndef GL_ARB_vertex_array_bgra
< /* reuse GL_BGRA */
< #endif
< 
< #ifndef GL_ARB_draw_buffers_blend
< #endif
< 
< #ifndef GL_ARB_sample_shading
< #define GL_SAMPLE_SHADING_ARB             0x8C36
< #define GL_MIN_SAMPLE_SHADING_VALUE_ARB   0x8C37
< #endif
< 
< #ifndef GL_ARB_texture_cube_map_array
< #define GL_TEXTURE_CUBE_MAP_ARRAY_ARB     0x9009
< #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
< #define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
< #define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C
< #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
< #define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
< #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
< #endif
< 
< #ifndef GL_ARB_texture_gather
< #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
< #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
< #endif
< 
< #ifndef GL_ARB_texture_query_lod
< #endif
< 
< #ifndef GL_ARB_shading_language_include
< #define GL_SHADER_INCLUDE_ARB             0x8DAE
< #define GL_NAMED_STRING_LENGTH_ARB        0x8DE9
< #define GL_NAMED_STRING_TYPE_ARB          0x8DEA
< #endif
< 
< #ifndef GL_ARB_texture_compression_bptc
< #define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
< #define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
< #define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
< #define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
< #endif
< 
< #ifndef GL_ARB_blend_func_extended
< #define GL_SRC1_COLOR                     0x88F9
< /* reuse GL_SRC1_ALPHA */
< #define GL_ONE_MINUS_SRC1_COLOR           0x88FA
< #define GL_ONE_MINUS_SRC1_ALPHA           0x88FB
< #define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   0x88FC
< #endif
< 
< #ifndef GL_ARB_explicit_attrib_location
< #endif
< 
< #ifndef GL_ARB_occlusion_query2
< #define GL_ANY_SAMPLES_PASSED             0x8C2F
< #endif
< 
< #ifndef GL_ARB_sampler_objects
< #define GL_SAMPLER_BINDING                0x8919
< #endif
< 
< #ifndef GL_ARB_shader_bit_encoding
< #endif
< 
< #ifndef GL_ARB_texture_rgb10_a2ui
< #define GL_RGB10_A2UI                     0x906F
< #endif
< 
< #ifndef GL_ARB_texture_swizzle
< #define GL_TEXTURE_SWIZZLE_R              0x8E42
< #define GL_TEXTURE_SWIZZLE_G              0x8E43
< #define GL_TEXTURE_SWIZZLE_B              0x8E44
< #define GL_TEXTURE_SWIZZLE_A              0x8E45
< #define GL_TEXTURE_SWIZZLE_RGBA           0x8E46
< #endif
< 
< #ifndef GL_ARB_timer_query
< #define GL_TIME_ELAPSED                   0x88BF
< #define GL_TIMESTAMP                      0x8E28
< #endif
< 
< #ifndef GL_ARB_vertex_type_2_10_10_10_rev
< /* reuse GL_UNSIGNED_INT_2_10_10_10_REV */
< #define GL_INT_2_10_10_10_REV             0x8D9F
< #endif
< 
< #ifndef GL_ARB_draw_indirect
< #define GL_DRAW_INDIRECT_BUFFER           0x8F3F
< #define GL_DRAW_INDIRECT_BUFFER_BINDING   0x8F43
< #endif
< 
< #ifndef GL_ARB_gpu_shader5
< #define GL_GEOMETRY_SHADER_INVOCATIONS    0x887F
< #define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
< #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
< #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
< #define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
< /* reuse GL_MAX_VERTEX_STREAMS */
< #endif
< 
< #ifndef GL_ARB_gpu_shader_fp64
< /* reuse GL_DOUBLE */
< #define GL_DOUBLE_VEC2                    0x8FFC
< #define GL_DOUBLE_VEC3                    0x8FFD
< #define GL_DOUBLE_VEC4                    0x8FFE
< #define GL_DOUBLE_MAT2                    0x8F46
< #define GL_DOUBLE_MAT3                    0x8F47
< #define GL_DOUBLE_MAT4                    0x8F48
< #define GL_DOUBLE_MAT2x3                  0x8F49
< #define GL_DOUBLE_MAT2x4                  0x8F4A
< #define GL_DOUBLE_MAT3x2                  0x8F4B
< #define GL_DOUBLE_MAT3x4                  0x8F4C
< #define GL_DOUBLE_MAT4x2                  0x8F4D
< #define GL_DOUBLE_MAT4x3                  0x8F4E
< #endif
< 
< #ifndef GL_ARB_shader_subroutine
< #define GL_ACTIVE_SUBROUTINES             0x8DE5
< #define GL_ACTIVE_SUBROUTINE_UNIFORMS     0x8DE6
< #define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
< #define GL_ACTIVE_SUBROUTINE_MAX_LENGTH   0x8E48
< #define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
< #define GL_MAX_SUBROUTINES                0x8DE7
< #define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
< #define GL_NUM_COMPATIBLE_SUBROUTINES     0x8E4A
< #define GL_COMPATIBLE_SUBROUTINES         0x8E4B
< /* reuse GL_UNIFORM_SIZE */
< /* reuse GL_UNIFORM_NAME_LENGTH */
< #endif
< 
< #ifndef GL_ARB_tessellation_shader
< #define GL_PATCHES                        0x000E
< #define GL_PATCH_VERTICES                 0x8E72
< #define GL_PATCH_DEFAULT_INNER_LEVEL      0x8E73
< #define GL_PATCH_DEFAULT_OUTER_LEVEL      0x8E74
< #define GL_TESS_CONTROL_OUTPUT_VERTICES   0x8E75
< #define GL_TESS_GEN_MODE                  0x8E76
< #define GL_TESS_GEN_SPACING               0x8E77
< #define GL_TESS_GEN_VERTEX_ORDER          0x8E78
< #define GL_TESS_GEN_POINT_MODE            0x8E79
< /* reuse GL_TRIANGLES */
< /* reuse GL_QUADS */
< #define GL_ISOLINES                       0x8E7A
< /* reuse GL_EQUAL */
< #define GL_FRACTIONAL_ODD                 0x8E7B
< #define GL_FRACTIONAL_EVEN                0x8E7C
< /* reuse GL_CCW */
< /* reuse GL_CW */
< #define GL_MAX_PATCH_VERTICES             0x8E7D
< #define GL_MAX_TESS_GEN_LEVEL             0x8E7E
< #define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
< #define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
< #define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
< #define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
< #define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
< #define GL_MAX_TESS_PATCH_COMPONENTS      0x8E84
< #define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
< #define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
< #define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
< #define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
< #define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
< #define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
< #define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
< #define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
< #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
< #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
< #define GL_TESS_EVALUATION_SHADER         0x8E87
< #define GL_TESS_CONTROL_SHADER            0x8E88
< #endif
< 
< #ifndef GL_ARB_texture_buffer_object_rgb32
< /* reuse GL_RGB32F */
< /* reuse GL_RGB32UI */
< /* reuse GL_RGB32I */
< #endif
< 
< #ifndef GL_ARB_transform_feedback2
< #define GL_TRANSFORM_FEEDBACK             0x8E22
< #define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
< #define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
< #define GL_TRANSFORM_FEEDBACK_BINDING     0x8E25
< #endif
< 
< #ifndef GL_ARB_transform_feedback3
< #define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
< #define GL_MAX_VERTEX_STREAMS             0x8E71
< #endif
< 
< #ifndef GL_ARB_ES2_compatibility
< #define GL_FIXED                          0x140C
< #define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
< #define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
< #define GL_LOW_FLOAT                      0x8DF0
< #define GL_MEDIUM_FLOAT                   0x8DF1
< #define GL_HIGH_FLOAT                     0x8DF2
< #define GL_LOW_INT                        0x8DF3
< #define GL_MEDIUM_INT                     0x8DF4
< #define GL_HIGH_INT                       0x8DF5
< #define GL_SHADER_COMPILER                0x8DFA
< #define GL_NUM_SHADER_BINARY_FORMATS      0x8DF9
< #define GL_MAX_VERTEX_UNIFORM_VECTORS     0x8DFB
< #define GL_MAX_VARYING_VECTORS            0x8DFC
< #define GL_MAX_FRAGMENT_UNIFORM_VECTORS   0x8DFD
< #endif
< 
< #ifndef GL_ARB_get_program_binary
< #define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
< #define GL_PROGRAM_BINARY_LENGTH          0x8741
< #define GL_NUM_PROGRAM_BINARY_FORMATS     0x87FE
< #define GL_PROGRAM_BINARY_FORMATS         0x87FF
< #endif
< 
< #ifndef GL_ARB_separate_shader_objects
< #define GL_VERTEX_SHADER_BIT              0x00000001
< #define GL_FRAGMENT_SHADER_BIT            0x00000002
< #define GL_GEOMETRY_SHADER_BIT            0x00000004
< #define GL_TESS_CONTROL_SHADER_BIT        0x00000008
< #define GL_TESS_EVALUATION_SHADER_BIT     0x00000010
< #define GL_ALL_SHADER_BITS                0xFFFFFFFF
< #define GL_PROGRAM_SEPARABLE              0x8258
< #define GL_ACTIVE_PROGRAM                 0x8259
< #define GL_PROGRAM_PIPELINE_BINDING       0x825A
< #endif
< 
< #ifndef GL_ARB_shader_precision
< #endif
< 
< #ifndef GL_ARB_vertex_attrib_64bit
< /* reuse GL_RGB32I */
< /* reuse GL_DOUBLE_VEC2 */
< /* reuse GL_DOUBLE_VEC3 */
< /* reuse GL_DOUBLE_VEC4 */
< /* reuse GL_DOUBLE_MAT2 */
< /* reuse GL_DOUBLE_MAT3 */
< /* reuse GL_DOUBLE_MAT4 */
< /* reuse GL_DOUBLE_MAT2x3 */
< /* reuse GL_DOUBLE_MAT2x4 */
< /* reuse GL_DOUBLE_MAT3x2 */
< /* reuse GL_DOUBLE_MAT3x4 */
< /* reuse GL_DOUBLE_MAT4x2 */
< /* reuse GL_DOUBLE_MAT4x3 */
< #endif
< 
< #ifndef GL_ARB_viewport_array
< /* reuse GL_SCISSOR_BOX */
< /* reuse GL_VIEWPORT */
< /* reuse GL_DEPTH_RANGE */
< /* reuse GL_SCISSOR_TEST */
< #define GL_MAX_VIEWPORTS                  0x825B
< #define GL_VIEWPORT_SUBPIXEL_BITS         0x825C
< #define GL_VIEWPORT_BOUNDS_RANGE          0x825D
< #define GL_LAYER_PROVOKING_VERTEX         0x825E
< #define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
< #define GL_UNDEFINED_VERTEX               0x8260
< /* reuse GL_FIRST_VERTEX_CONVENTION */
< /* reuse GL_LAST_VERTEX_CONVENTION */
< /* reuse GL_PROVOKING_VERTEX */
< #endif
< 
< #ifndef GL_ARB_cl_event
< #define GL_SYNC_CL_EVENT_ARB              0x8240
< #define GL_SYNC_CL_EVENT_COMPLETE_ARB     0x8241
< #endif
< 
< #ifndef GL_ARB_debug_output
< #define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   0x8242
< #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
< #define GL_DEBUG_CALLBACK_FUNCTION_ARB    0x8244
< #define GL_DEBUG_CALLBACK_USER_PARAM_ARB  0x8245
< #define GL_DEBUG_SOURCE_API_ARB           0x8246
< #define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
< #define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
< #define GL_DEBUG_SOURCE_THIRD_PARTY_ARB   0x8249
< #define GL_DEBUG_SOURCE_APPLICATION_ARB   0x824A
< #define GL_DEBUG_SOURCE_OTHER_ARB         0x824B
< #define GL_DEBUG_TYPE_ERROR_ARB           0x824C
< #define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
< #define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
< #define GL_DEBUG_TYPE_PORTABILITY_ARB     0x824F
< #define GL_DEBUG_TYPE_PERFORMANCE_ARB     0x8250
< #define GL_DEBUG_TYPE_OTHER_ARB           0x8251
< #define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   0x9143
< #define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  0x9144
< #define GL_DEBUG_LOGGED_MESSAGES_ARB      0x9145
< #define GL_DEBUG_SEVERITY_HIGH_ARB        0x9146
< #define GL_DEBUG_SEVERITY_MEDIUM_ARB      0x9147
< #define GL_DEBUG_SEVERITY_LOW_ARB         0x9148
< #endif
< 
< #ifndef GL_ARB_robustness
< /* reuse GL_NO_ERROR */
< #define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
< #define GL_LOSE_CONTEXT_ON_RESET_ARB      0x8252
< #define GL_GUILTY_CONTEXT_RESET_ARB       0x8253
< #define GL_INNOCENT_CONTEXT_RESET_ARB     0x8254
< #define GL_UNKNOWN_CONTEXT_RESET_ARB      0x8255
< #define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
< #define GL_NO_RESET_NOTIFICATION_ARB      0x8261
< #endif
< 
< #ifndef GL_ARB_shader_stencil_export
< #endif
< 
< #ifndef GL_EXT_abgr
< #define GL_ABGR_EXT                       0x8000
< #endif
< 
< #ifndef GL_EXT_blend_color
< #define GL_CONSTANT_COLOR_EXT             0x8001
< #define GL_ONE_MINUS_CONSTANT_COLOR_EXT   0x8002
< #define GL_CONSTANT_ALPHA_EXT             0x8003
< #define GL_ONE_MINUS_CONSTANT_ALPHA_EXT   0x8004
< #define GL_BLEND_COLOR_EXT                0x8005
< #endif
< 
< #ifndef GL_EXT_polygon_offset
< #define GL_POLYGON_OFFSET_EXT             0x8037
< #define GL_POLYGON_OFFSET_FACTOR_EXT      0x8038
< #define GL_POLYGON_OFFSET_BIAS_EXT        0x8039
< #endif
< 
< #ifndef GL_EXT_texture
< #define GL_ALPHA4_EXT                     0x803B
< #define GL_ALPHA8_EXT                     0x803C
< #define GL_ALPHA12_EXT                    0x803D
< #define GL_ALPHA16_EXT                    0x803E
< #define GL_LUMINANCE4_EXT                 0x803F
< #define GL_LUMINANCE8_EXT                 0x8040
< #define GL_LUMINANCE12_EXT                0x8041
< #define GL_LUMINANCE16_EXT                0x8042
< #define GL_LUMINANCE4_ALPHA4_EXT          0x8043
< #define GL_LUMINANCE6_ALPHA2_EXT          0x8044
< #define GL_LUMINANCE8_ALPHA8_EXT          0x8045
< #define GL_LUMINANCE12_ALPHA4_EXT         0x8046
< #define GL_LUMINANCE12_ALPHA12_EXT        0x8047
< #define GL_LUMINANCE16_ALPHA16_EXT        0x8048
< #define GL_INTENSITY_EXT                  0x8049
< #define GL_INTENSITY4_EXT                 0x804A
< #define GL_INTENSITY8_EXT                 0x804B
< #define GL_INTENSITY12_EXT                0x804C
< #define GL_INTENSITY16_EXT                0x804D
< #define GL_RGB2_EXT                       0x804E
< #define GL_RGB4_EXT                       0x804F
< #define GL_RGB5_EXT                       0x8050
< #define GL_RGB8_EXT                       0x8051
< #define GL_RGB10_EXT                      0x8052
< #define GL_RGB12_EXT                      0x8053
< #define GL_RGB16_EXT                      0x8054
< #define GL_RGBA2_EXT                      0x8055
< #define GL_RGBA4_EXT                      0x8056
< #define GL_RGB5_A1_EXT                    0x8057
< #define GL_RGBA8_EXT                      0x8058
< #define GL_RGB10_A2_EXT                   0x8059
< #define GL_RGBA12_EXT                     0x805A
< #define GL_RGBA16_EXT                     0x805B
< #define GL_TEXTURE_RED_SIZE_EXT           0x805C
< #define GL_TEXTURE_GREEN_SIZE_EXT         0x805D
< #define GL_TEXTURE_BLUE_SIZE_EXT          0x805E
< #define GL_TEXTURE_ALPHA_SIZE_EXT         0x805F
< #define GL_TEXTURE_LUMINANCE_SIZE_EXT     0x8060
< #define GL_TEXTURE_INTENSITY_SIZE_EXT     0x8061
< #define GL_REPLACE_EXT                    0x8062
< #define GL_PROXY_TEXTURE_1D_EXT           0x8063
< #define GL_PROXY_TEXTURE_2D_EXT           0x8064
< #define GL_TEXTURE_TOO_LARGE_EXT          0x8065
< #endif
< 
< #ifndef GL_EXT_texture3D
< #define GL_PACK_SKIP_IMAGES_EXT           0x806B
< #define GL_PACK_IMAGE_HEIGHT_EXT          0x806C
< #define GL_UNPACK_SKIP_IMAGES_EXT         0x806D
< #define GL_UNPACK_IMAGE_HEIGHT_EXT        0x806E
< #define GL_TEXTURE_3D_EXT                 0x806F
< #define GL_PROXY_TEXTURE_3D_EXT           0x8070
< #define GL_TEXTURE_DEPTH_EXT              0x8071
< #define GL_TEXTURE_WRAP_R_EXT             0x8072
< #define GL_MAX_3D_TEXTURE_SIZE_EXT        0x8073
< #endif
< 
< #ifndef GL_SGIS_texture_filter4
< #define GL_FILTER4_SGIS                   0x8146
< #define GL_TEXTURE_FILTER4_SIZE_SGIS      0x8147
< #endif
< 
< #ifndef GL_EXT_subtexture
< #endif
< 
< #ifndef GL_EXT_copy_texture
< #endif
< 
< #ifndef GL_EXT_histogram
< #define GL_HISTOGRAM_EXT                  0x8024
< #define GL_PROXY_HISTOGRAM_EXT            0x8025
< #define GL_HISTOGRAM_WIDTH_EXT            0x8026
< #define GL_HISTOGRAM_FORMAT_EXT           0x8027
< #define GL_HISTOGRAM_RED_SIZE_EXT         0x8028
< #define GL_HISTOGRAM_GREEN_SIZE_EXT       0x8029
< #define GL_HISTOGRAM_BLUE_SIZE_EXT        0x802A
< #define GL_HISTOGRAM_ALPHA_SIZE_EXT       0x802B
< #define GL_HISTOGRAM_LUMINANCE_SIZE_EXT   0x802C
< #define GL_HISTOGRAM_SINK_EXT             0x802D
< #define GL_MINMAX_EXT                     0x802E
< #define GL_MINMAX_FORMAT_EXT              0x802F
< #define GL_MINMAX_SINK_EXT                0x8030
< #define GL_TABLE_TOO_LARGE_EXT            0x8031
< #endif
< 
< #ifndef GL_EXT_convolution
< #define GL_CONVOLUTION_1D_EXT             0x8010
< #define GL_CONVOLUTION_2D_EXT             0x8011
< #define GL_SEPARABLE_2D_EXT               0x8012
< #define GL_CONVOLUTION_BORDER_MODE_EXT    0x8013
< #define GL_CONVOLUTION_FILTER_SCALE_EXT   0x8014
< #define GL_CONVOLUTION_FILTER_BIAS_EXT    0x8015
< #define GL_REDUCE_EXT                     0x8016
< #define GL_CONVOLUTION_FORMAT_EXT         0x8017
< #define GL_CONVOLUTION_WIDTH_EXT          0x8018
< #define GL_CONVOLUTION_HEIGHT_EXT         0x8019
< #define GL_MAX_CONVOLUTION_WIDTH_EXT      0x801A
< #define GL_MAX_CONVOLUTION_HEIGHT_EXT     0x801B
< #define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
< #define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
< #define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
< #define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
< #define GL_POST_CONVOLUTION_RED_BIAS_EXT  0x8020
< #define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
< #define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
< #define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
< #endif
< 
< #ifndef GL_SGI_color_matrix
< #define GL_COLOR_MATRIX_SGI               0x80B1
< #define GL_COLOR_MATRIX_STACK_DEPTH_SGI   0x80B2
< #define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
< #define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
< #define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
< #define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
< #define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
< #define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
< #define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
< #define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
< #define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
< #endif
< 
< #ifndef GL_SGI_color_table
< #define GL_COLOR_TABLE_SGI                0x80D0
< #define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
< #define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
< #define GL_PROXY_COLOR_TABLE_SGI          0x80D3
< #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
< #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
< #define GL_COLOR_TABLE_SCALE_SGI          0x80D6
< #define GL_COLOR_TABLE_BIAS_SGI           0x80D7
< #define GL_COLOR_TABLE_FORMAT_SGI         0x80D8
< #define GL_COLOR_TABLE_WIDTH_SGI          0x80D9
< #define GL_COLOR_TABLE_RED_SIZE_SGI       0x80DA
< #define GL_COLOR_TABLE_GREEN_SIZE_SGI     0x80DB
< #define GL_COLOR_TABLE_BLUE_SIZE_SGI      0x80DC
< #define GL_COLOR_TABLE_ALPHA_SIZE_SGI     0x80DD
< #define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
< #define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
< #endif
< 
< #ifndef GL_SGIS_pixel_texture
< #define GL_PIXEL_TEXTURE_SGIS             0x8353
< #define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
< #define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
< #define GL_PIXEL_GROUP_COLOR_SGIS         0x8356
< #endif
< 
< #ifndef GL_SGIX_pixel_texture
< #define GL_PIXEL_TEX_GEN_SGIX             0x8139
< #define GL_PIXEL_TEX_GEN_MODE_SGIX        0x832B
< #endif
< 
< #ifndef GL_SGIS_texture4D
< #define GL_PACK_SKIP_VOLUMES_SGIS         0x8130
< #define GL_PACK_IMAGE_DEPTH_SGIS          0x8131
< #define GL_UNPACK_SKIP_VOLUMES_SGIS       0x8132
< #define GL_UNPACK_IMAGE_DEPTH_SGIS        0x8133
< #define GL_TEXTURE_4D_SGIS                0x8134
< #define GL_PROXY_TEXTURE_4D_SGIS          0x8135
< #define GL_TEXTURE_4DSIZE_SGIS            0x8136
< #define GL_TEXTURE_WRAP_Q_SGIS            0x8137
< #define GL_MAX_4D_TEXTURE_SIZE_SGIS       0x8138
< #define GL_TEXTURE_4D_BINDING_SGIS        0x814F
< #endif
< 
< #ifndef GL_SGI_texture_color_table
< #define GL_TEXTURE_COLOR_TABLE_SGI        0x80BC
< #define GL_PROXY_TEXTURE_COLOR_TABLE_SGI  0x80BD
< #endif
< 
< #ifndef GL_EXT_cmyka
< #define GL_CMYK_EXT                       0x800C
< #define GL_CMYKA_EXT                      0x800D
< #define GL_PACK_CMYK_HINT_EXT             0x800E
< #define GL_UNPACK_CMYK_HINT_EXT           0x800F
< #endif
< 
< #ifndef GL_EXT_texture_object
< #define GL_TEXTURE_PRIORITY_EXT           0x8066
< #define GL_TEXTURE_RESIDENT_EXT           0x8067
< #define GL_TEXTURE_1D_BINDING_EXT         0x8068
< #define GL_TEXTURE_2D_BINDING_EXT         0x8069
< #define GL_TEXTURE_3D_BINDING_EXT         0x806A
< #endif
< 
< #ifndef GL_SGIS_detail_texture
< #define GL_DETAIL_TEXTURE_2D_SGIS         0x8095
< #define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
< #define GL_LINEAR_DETAIL_SGIS             0x8097
< #define GL_LINEAR_DETAIL_ALPHA_SGIS       0x8098
< #define GL_LINEAR_DETAIL_COLOR_SGIS       0x8099
< #define GL_DETAIL_TEXTURE_LEVEL_SGIS      0x809A
< #define GL_DETAIL_TEXTURE_MODE_SGIS       0x809B
< #define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
< #endif
< 
< #ifndef GL_SGIS_sharpen_texture
< #define GL_LINEAR_SHARPEN_SGIS            0x80AD
< #define GL_LINEAR_SHARPEN_ALPHA_SGIS      0x80AE
< #define GL_LINEAR_SHARPEN_COLOR_SGIS      0x80AF
< #define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
< #endif
< 
< #ifndef GL_EXT_packed_pixels
< #define GL_UNSIGNED_BYTE_3_3_2_EXT        0x8032
< #define GL_UNSIGNED_SHORT_4_4_4_4_EXT     0x8033
< #define GL_UNSIGNED_SHORT_5_5_5_1_EXT     0x8034
< #define GL_UNSIGNED_INT_8_8_8_8_EXT       0x8035
< #define GL_UNSIGNED_INT_10_10_10_2_EXT    0x8036
< #endif
< 
< #ifndef GL_SGIS_texture_lod
< #define GL_TEXTURE_MIN_LOD_SGIS           0x813A
< #define GL_TEXTURE_MAX_LOD_SGIS           0x813B
< #define GL_TEXTURE_BASE_LEVEL_SGIS        0x813C
< #define GL_TEXTURE_MAX_LEVEL_SGIS         0x813D
< #endif
< 
< #ifndef GL_SGIS_multisample
< #define GL_MULTISAMPLE_SGIS               0x809D
< #define GL_SAMPLE_ALPHA_TO_MASK_SGIS      0x809E
< #define GL_SAMPLE_ALPHA_TO_ONE_SGIS       0x809F
< #define GL_SAMPLE_MASK_SGIS               0x80A0
< #define GL_1PASS_SGIS                     0x80A1
< #define GL_2PASS_0_SGIS                   0x80A2
< #define GL_2PASS_1_SGIS                   0x80A3
< #define GL_4PASS_0_SGIS                   0x80A4
< #define GL_4PASS_1_SGIS                   0x80A5
< #define GL_4PASS_2_SGIS                   0x80A6
< #define GL_4PASS_3_SGIS                   0x80A7
< #define GL_SAMPLE_BUFFERS_SGIS            0x80A8
< #define GL_SAMPLES_SGIS                   0x80A9
< #define GL_SAMPLE_MASK_VALUE_SGIS         0x80AA
< #define GL_SAMPLE_MASK_INVERT_SGIS        0x80AB
< #define GL_SAMPLE_PATTERN_SGIS            0x80AC
< #endif
< 
< #ifndef GL_EXT_rescale_normal
< #define GL_RESCALE_NORMAL_EXT             0x803A
< #endif
< 
< #ifndef GL_EXT_vertex_array
< #define GL_VERTEX_ARRAY_EXT               0x8074
< #define GL_NORMAL_ARRAY_EXT               0x8075
< #define GL_COLOR_ARRAY_EXT                0x8076
< #define GL_INDEX_ARRAY_EXT                0x8077
< #define GL_TEXTURE_COORD_ARRAY_EXT        0x8078
< #define GL_EDGE_FLAG_ARRAY_EXT            0x8079
< #define GL_VERTEX_ARRAY_SIZE_EXT          0x807A
< #define GL_VERTEX_ARRAY_TYPE_EXT          0x807B
< #define GL_VERTEX_ARRAY_STRIDE_EXT        0x807C
< #define GL_VERTEX_ARRAY_COUNT_EXT         0x807D
< #define GL_NORMAL_ARRAY_TYPE_EXT          0x807E
< #define GL_NORMAL_ARRAY_STRIDE_EXT        0x807F
< #define GL_NORMAL_ARRAY_COUNT_EXT         0x8080
< #define GL_COLOR_ARRAY_SIZE_EXT           0x8081
< #define GL_COLOR_ARRAY_TYPE_EXT           0x8082
< #define GL_COLOR_ARRAY_STRIDE_EXT         0x8083
< #define GL_COLOR_ARRAY_COUNT_EXT          0x8084
< #define GL_INDEX_ARRAY_TYPE_EXT           0x8085
< #define GL_INDEX_ARRAY_STRIDE_EXT         0x8086
< #define GL_INDEX_ARRAY_COUNT_EXT          0x8087
< #define GL_TEXTURE_COORD_ARRAY_SIZE_EXT   0x8088
< #define GL_TEXTURE_COORD_ARRAY_TYPE_EXT   0x8089
< #define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
< #define GL_TEXTURE_COORD_ARRAY_COUNT_EXT  0x808B
< #define GL_EDGE_FLAG_ARRAY_STRIDE_EXT     0x808C
< #define GL_EDGE_FLAG_ARRAY_COUNT_EXT      0x808D
< #define GL_VERTEX_ARRAY_POINTER_EXT       0x808E
< #define GL_NORMAL_ARRAY_POINTER_EXT       0x808F
< #define GL_COLOR_ARRAY_POINTER_EXT        0x8090
< #define GL_INDEX_ARRAY_POINTER_EXT        0x8091
< #define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
< #define GL_EDGE_FLAG_ARRAY_POINTER_EXT    0x8093
< #endif
< 
< #ifndef GL_EXT_misc_attribute
< #endif
< 
< #ifndef GL_SGIS_generate_mipmap
< #define GL_GENERATE_MIPMAP_SGIS           0x8191
< #define GL_GENERATE_MIPMAP_HINT_SGIS      0x8192
< #endif
< 
< #ifndef GL_SGIX_clipmap
< #define GL_LINEAR_CLIPMAP_LINEAR_SGIX     0x8170
< #define GL_TEXTURE_CLIPMAP_CENTER_SGIX    0x8171
< #define GL_TEXTURE_CLIPMAP_FRAME_SGIX     0x8172
< #define GL_TEXTURE_CLIPMAP_OFFSET_SGIX    0x8173
< #define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
< #define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
< #define GL_TEXTURE_CLIPMAP_DEPTH_SGIX     0x8176
< #define GL_MAX_CLIPMAP_DEPTH_SGIX         0x8177
< #define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
< #define GL_NEAREST_CLIPMAP_NEAREST_SGIX   0x844D
< #define GL_NEAREST_CLIPMAP_LINEAR_SGIX    0x844E
< #define GL_LINEAR_CLIPMAP_NEAREST_SGIX    0x844F
< #endif
< 
< #ifndef GL_SGIX_shadow
< #define GL_TEXTURE_COMPARE_SGIX           0x819A
< #define GL_TEXTURE_COMPARE_OPERATOR_SGIX  0x819B
< #define GL_TEXTURE_LEQUAL_R_SGIX          0x819C
< #define GL_TEXTURE_GEQUAL_R_SGIX          0x819D
< #endif
< 
< #ifndef GL_SGIS_texture_edge_clamp
< #define GL_CLAMP_TO_EDGE_SGIS             0x812F
< #endif
< 
< #ifndef GL_SGIS_texture_border_clamp
< #define GL_CLAMP_TO_BORDER_SGIS           0x812D
< #endif
< 
< #ifndef GL_EXT_blend_minmax
< #define GL_FUNC_ADD_EXT                   0x8006
< #define GL_MIN_EXT                        0x8007
< #define GL_MAX_EXT                        0x8008
< #define GL_BLEND_EQUATION_EXT             0x8009
< #endif
< 
< #ifndef GL_EXT_blend_subtract
< #define GL_FUNC_SUBTRACT_EXT              0x800A
< #define GL_FUNC_REVERSE_SUBTRACT_EXT      0x800B
< #endif
< 
< #ifndef GL_EXT_blend_logic_op
< #endif
< 
< #ifndef GL_SGIX_interlace
< #define GL_INTERLACE_SGIX                 0x8094
< #endif
< 
< #ifndef GL_SGIX_pixel_tiles
< #define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
< #define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
< #define GL_PIXEL_TILE_WIDTH_SGIX          0x8140
< #define GL_PIXEL_TILE_HEIGHT_SGIX         0x8141
< #define GL_PIXEL_TILE_GRID_WIDTH_SGIX     0x8142
< #define GL_PIXEL_TILE_GRID_HEIGHT_SGIX    0x8143
< #define GL_PIXEL_TILE_GRID_DEPTH_SGIX     0x8144
< #define GL_PIXEL_TILE_CACHE_SIZE_SGIX     0x8145
< #endif
< 
< #ifndef GL_SGIS_texture_select
< #define GL_DUAL_ALPHA4_SGIS               0x8110
< #define GL_DUAL_ALPHA8_SGIS               0x8111
< #define GL_DUAL_ALPHA12_SGIS              0x8112
< #define GL_DUAL_ALPHA16_SGIS              0x8113
< #define GL_DUAL_LUMINANCE4_SGIS           0x8114
< #define GL_DUAL_LUMINANCE8_SGIS           0x8115
< #define GL_DUAL_LUMINANCE12_SGIS          0x8116
< #define GL_DUAL_LUMINANCE16_SGIS          0x8117
< #define GL_DUAL_INTENSITY4_SGIS           0x8118
< #define GL_DUAL_INTENSITY8_SGIS           0x8119
< #define GL_DUAL_INTENSITY12_SGIS          0x811A
< #define GL_DUAL_INTENSITY16_SGIS          0x811B
< #define GL_DUAL_LUMINANCE_ALPHA4_SGIS     0x811C
< #define GL_DUAL_LUMINANCE_ALPHA8_SGIS     0x811D
< #define GL_QUAD_ALPHA4_SGIS               0x811E
< #define GL_QUAD_ALPHA8_SGIS               0x811F
< #define GL_QUAD_LUMINANCE4_SGIS           0x8120
< #define GL_QUAD_LUMINANCE8_SGIS           0x8121
< #define GL_QUAD_INTENSITY4_SGIS           0x8122
< #define GL_QUAD_INTENSITY8_SGIS           0x8123
< #define GL_DUAL_TEXTURE_SELECT_SGIS       0x8124
< #define GL_QUAD_TEXTURE_SELECT_SGIS       0x8125
< #endif
< 
< #ifndef GL_SGIX_sprite
< #define GL_SPRITE_SGIX                    0x8148
< #define GL_SPRITE_MODE_SGIX               0x8149
< #define GL_SPRITE_AXIS_SGIX               0x814A
< #define GL_SPRITE_TRANSLATION_SGIX        0x814B
< #define GL_SPRITE_AXIAL_SGIX              0x814C
< #define GL_SPRITE_OBJECT_ALIGNED_SGIX     0x814D
< #define GL_SPRITE_EYE_ALIGNED_SGIX        0x814E
< #endif
< 
< #ifndef GL_SGIX_texture_multi_buffer
< #define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
< #endif
< 
< #ifndef GL_EXT_point_parameters
< #define GL_POINT_SIZE_MIN_EXT             0x8126
< #define GL_POINT_SIZE_MAX_EXT             0x8127
< #define GL_POINT_FADE_THRESHOLD_SIZE_EXT  0x8128
< #define GL_DISTANCE_ATTENUATION_EXT       0x8129
< #endif
< 
< #ifndef GL_SGIS_point_parameters
< #define GL_POINT_SIZE_MIN_SGIS            0x8126
< #define GL_POINT_SIZE_MAX_SGIS            0x8127
< #define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
< #define GL_DISTANCE_ATTENUATION_SGIS      0x8129
< #endif
< 
< #ifndef GL_SGIX_instruments
< #define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
< #define GL_INSTRUMENT_MEASUREMENTS_SGIX   0x8181
< #endif
< 
< #ifndef GL_SGIX_texture_scale_bias
< #define GL_POST_TEXTURE_FILTER_BIAS_SGIX  0x8179
< #define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
< #define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
< #define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
< #endif
< 
< #ifndef GL_SGIX_framezoom
< #define GL_FRAMEZOOM_SGIX                 0x818B
< #define GL_FRAMEZOOM_FACTOR_SGIX          0x818C
< #define GL_MAX_FRAMEZOOM_FACTOR_SGIX      0x818D
< #endif
< 
< #ifndef GL_SGIX_tag_sample_buffer
< #endif
< 
< #ifndef GL_FfdMaskSGIX
< #define GL_TEXTURE_DEFORMATION_BIT_SGIX   0x00000001
< #define GL_GEOMETRY_DEFORMATION_BIT_SGIX  0x00000002
< #endif
< 
< #ifndef GL_SGIX_polynomial_ffd
< #define GL_GEOMETRY_DEFORMATION_SGIX      0x8194
< #define GL_TEXTURE_DEFORMATION_SGIX       0x8195
< #define GL_DEFORMATIONS_MASK_SGIX         0x8196
< #define GL_MAX_DEFORMATION_ORDER_SGIX     0x8197
< #endif
< 
< #ifndef GL_SGIX_reference_plane
< #define GL_REFERENCE_PLANE_SGIX           0x817D
< #define GL_REFERENCE_PLANE_EQUATION_SGIX  0x817E
< #endif
< 
< #ifndef GL_SGIX_flush_raster
< #endif
< 
< #ifndef GL_SGIX_depth_texture
< #define GL_DEPTH_COMPONENT16_SGIX         0x81A5
< #define GL_DEPTH_COMPONENT24_SGIX         0x81A6
< #define GL_DEPTH_COMPONENT32_SGIX         0x81A7
< #endif
< 
< #ifndef GL_SGIS_fog_function
< #define GL_FOG_FUNC_SGIS                  0x812A
< #define GL_FOG_FUNC_POINTS_SGIS           0x812B
< #define GL_MAX_FOG_FUNC_POINTS_SGIS       0x812C
< #endif
< 
< #ifndef GL_SGIX_fog_offset
< #define GL_FOG_OFFSET_SGIX                0x8198
< #define GL_FOG_OFFSET_VALUE_SGIX          0x8199
< #endif
< 
< #ifndef GL_HP_image_transform
< #define GL_IMAGE_SCALE_X_HP               0x8155
< #define GL_IMAGE_SCALE_Y_HP               0x8156
< #define GL_IMAGE_TRANSLATE_X_HP           0x8157
< #define GL_IMAGE_TRANSLATE_Y_HP           0x8158
< #define GL_IMAGE_ROTATE_ANGLE_HP          0x8159
< #define GL_IMAGE_ROTATE_ORIGIN_X_HP       0x815A
< #define GL_IMAGE_ROTATE_ORIGIN_Y_HP       0x815B
< #define GL_IMAGE_MAG_FILTER_HP            0x815C
< #define GL_IMAGE_MIN_FILTER_HP            0x815D
< #define GL_IMAGE_CUBIC_WEIGHT_HP          0x815E
< #define GL_CUBIC_HP                       0x815F
< #define GL_AVERAGE_HP                     0x8160
< #define GL_IMAGE_TRANSFORM_2D_HP          0x8161
< #define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
< #define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
< #endif
< 
< #ifndef GL_HP_convolution_border_modes
< #define GL_IGNORE_BORDER_HP               0x8150
< #define GL_CONSTANT_BORDER_HP             0x8151
< #define GL_REPLICATE_BORDER_HP            0x8153
< #define GL_CONVOLUTION_BORDER_COLOR_HP    0x8154
< #endif
< 
< #ifndef GL_INGR_palette_buffer
< #endif
< 
< #ifndef GL_SGIX_texture_add_env
< #define GL_TEXTURE_ENV_BIAS_SGIX          0x80BE
< #endif
< 
< #ifndef GL_EXT_color_subtable
< #endif
< 
< #ifndef GL_PGI_vertex_hints
< #define GL_VERTEX_DATA_HINT_PGI           0x1A22A
< #define GL_VERTEX_CONSISTENT_HINT_PGI     0x1A22B
< #define GL_MATERIAL_SIDE_HINT_PGI         0x1A22C
< #define GL_MAX_VERTEX_HINT_PGI            0x1A22D
< #define GL_COLOR3_BIT_PGI                 0x00010000
< #define GL_COLOR4_BIT_PGI                 0x00020000
< #define GL_EDGEFLAG_BIT_PGI               0x00040000
< #define GL_INDEX_BIT_PGI                  0x00080000
< #define GL_MAT_AMBIENT_BIT_PGI            0x00100000
< #define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
< #define GL_MAT_DIFFUSE_BIT_PGI            0x00400000
< #define GL_MAT_EMISSION_BIT_PGI           0x00800000
< #define GL_MAT_COLOR_INDEXES_BIT_PGI      0x01000000
< #define GL_MAT_SHININESS_BIT_PGI          0x02000000
< #define GL_MAT_SPECULAR_BIT_PGI           0x04000000
< #define GL_NORMAL_BIT_PGI                 0x08000000
< #define GL_TEXCOORD1_BIT_PGI              0x10000000
< #define GL_TEXCOORD2_BIT_PGI              0x20000000
< #define GL_TEXCOORD3_BIT_PGI              0x40000000
< #define GL_TEXCOORD4_BIT_PGI              0x80000000
< #define GL_VERTEX23_BIT_PGI               0x00000004
< #define GL_VERTEX4_BIT_PGI                0x00000008
< #endif
< 
< #ifndef GL_PGI_misc_hints
< #define GL_PREFER_DOUBLEBUFFER_HINT_PGI   0x1A1F8
< #define GL_CONSERVE_MEMORY_HINT_PGI       0x1A1FD
< #define GL_RECLAIM_MEMORY_HINT_PGI        0x1A1FE
< #define GL_NATIVE_GRAPHICS_HANDLE_PGI     0x1A202
< #define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
< #define GL_NATIVE_GRAPHICS_END_HINT_PGI   0x1A204
< #define GL_ALWAYS_FAST_HINT_PGI           0x1A20C
< #define GL_ALWAYS_SOFT_HINT_PGI           0x1A20D
< #define GL_ALLOW_DRAW_OBJ_HINT_PGI        0x1A20E
< #define GL_ALLOW_DRAW_WIN_HINT_PGI        0x1A20F
< #define GL_ALLOW_DRAW_FRG_HINT_PGI        0x1A210
< #define GL_ALLOW_DRAW_MEM_HINT_PGI        0x1A211
< #define GL_STRICT_DEPTHFUNC_HINT_PGI      0x1A216
< #define GL_STRICT_LIGHTING_HINT_PGI       0x1A217
< #define GL_STRICT_SCISSOR_HINT_PGI        0x1A218
< #define GL_FULL_STIPPLE_HINT_PGI          0x1A219
< #define GL_CLIP_NEAR_HINT_PGI             0x1A220
< #define GL_CLIP_FAR_HINT_PGI              0x1A221
< #define GL_WIDE_LINE_HINT_PGI             0x1A222
< #define GL_BACK_NORMALS_HINT_PGI          0x1A223
< #endif
< 
< #ifndef GL_EXT_paletted_texture
< #define GL_COLOR_INDEX1_EXT               0x80E2
< #define GL_COLOR_INDEX2_EXT               0x80E3
< #define GL_COLOR_INDEX4_EXT               0x80E4
< #define GL_COLOR_INDEX8_EXT               0x80E5
< #define GL_COLOR_INDEX12_EXT              0x80E6
< #define GL_COLOR_INDEX16_EXT              0x80E7
< #define GL_TEXTURE_INDEX_SIZE_EXT         0x80ED
< #endif
< 
< #ifndef GL_EXT_clip_volume_hint
< #define GL_CLIP_VOLUME_CLIPPING_HINT_EXT  0x80F0
< #endif
< 
< #ifndef GL_SGIX_list_priority
< #define GL_LIST_PRIORITY_SGIX             0x8182
< #endif
< 
< #ifndef GL_SGIX_ir_instrument1
< #define GL_IR_INSTRUMENT1_SGIX            0x817F
< #endif
< 
< #ifndef GL_SGIX_calligraphic_fragment
< #define GL_CALLIGRAPHIC_FRAGMENT_SGIX     0x8183
< #endif
< 
< #ifndef GL_SGIX_texture_lod_bias
< #define GL_TEXTURE_LOD_BIAS_S_SGIX        0x818E
< #define GL_TEXTURE_LOD_BIAS_T_SGIX        0x818F
< #define GL_TEXTURE_LOD_BIAS_R_SGIX        0x8190
< #endif
< 
< #ifndef GL_SGIX_shadow_ambient
< #define GL_SHADOW_AMBIENT_SGIX            0x80BF
< #endif
< 
< #ifndef GL_EXT_index_texture
< #endif
< 
< #ifndef GL_EXT_index_material
< #define GL_INDEX_MATERIAL_EXT             0x81B8
< #define GL_INDEX_MATERIAL_PARAMETER_EXT   0x81B9
< #define GL_INDEX_MATERIAL_FACE_EXT        0x81BA
< #endif
< 
< #ifndef GL_EXT_index_func
< #define GL_INDEX_TEST_EXT                 0x81B5
< #define GL_INDEX_TEST_FUNC_EXT            0x81B6
< #define GL_INDEX_TEST_REF_EXT             0x81B7
< #endif
< 
< #ifndef GL_EXT_index_array_formats
< #define GL_IUI_V2F_EXT                    0x81AD
< #define GL_IUI_V3F_EXT                    0x81AE
< #define GL_IUI_N3F_V2F_EXT                0x81AF
< #define GL_IUI_N3F_V3F_EXT                0x81B0
< #define GL_T2F_IUI_V2F_EXT                0x81B1
< #define GL_T2F_IUI_V3F_EXT                0x81B2
< #define GL_T2F_IUI_N3F_V2F_EXT            0x81B3
< #define GL_T2F_IUI_N3F_V3F_EXT            0x81B4
< #endif
< 
< #ifndef GL_EXT_compiled_vertex_array
< #define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT   0x81A8
< #define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT   0x81A9
< #endif
< 
< #ifndef GL_EXT_cull_vertex
< #define GL_CULL_VERTEX_EXT                0x81AA
< #define GL_CULL_VERTEX_EYE_POSITION_EXT   0x81AB
< #define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
< #endif
< 
< #ifndef GL_SGIX_ycrcb
< #define GL_YCRCB_422_SGIX                 0x81BB
< #define GL_YCRCB_444_SGIX                 0x81BC
< #endif
< 
< #ifndef GL_SGIX_fragment_lighting
< #define GL_FRAGMENT_LIGHTING_SGIX         0x8400
< #define GL_FRAGMENT_COLOR_MATERIAL_SGIX   0x8401
< #define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
< #define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
< #define GL_MAX_FRAGMENT_LIGHTS_SGIX       0x8404
< #define GL_MAX_ACTIVE_LIGHTS_SGIX         0x8405
< #define GL_CURRENT_RASTER_NORMAL_SGIX     0x8406
< #define GL_LIGHT_ENV_MODE_SGIX            0x8407
< #define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
< #define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
< #define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
< #define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
< #define GL_FRAGMENT_LIGHT0_SGIX           0x840C
< #define GL_FRAGMENT_LIGHT1_SGIX           0x840D
< #define GL_FRAGMENT_LIGHT2_SGIX           0x840E
< #define GL_FRAGMENT_LIGHT3_SGIX           0x840F
< #define GL_FRAGMENT_LIGHT4_SGIX           0x8410
< #define GL_FRAGMENT_LIGHT5_SGIX           0x8411
< #define GL_FRAGMENT_LIGHT6_SGIX           0x8412
< #define GL_FRAGMENT_LIGHT7_SGIX           0x8413
< #endif
< 
< #ifndef GL_IBM_rasterpos_clip
< #define GL_RASTER_POSITION_UNCLIPPED_IBM  0x19262
< #endif
< 
< #ifndef GL_HP_texture_lighting
< #define GL_TEXTURE_LIGHTING_MODE_HP       0x8167
< #define GL_TEXTURE_POST_SPECULAR_HP       0x8168
< #define GL_TEXTURE_PRE_SPECULAR_HP        0x8169
< #endif
< 
< #ifndef GL_EXT_draw_range_elements
< #define GL_MAX_ELEMENTS_VERTICES_EXT      0x80E8
< #define GL_MAX_ELEMENTS_INDICES_EXT       0x80E9
< #endif
< 
< #ifndef GL_WIN_phong_shading
< #define GL_PHONG_WIN                      0x80EA
< #define GL_PHONG_HINT_WIN                 0x80EB
< #endif
< 
< #ifndef GL_WIN_specular_fog
< #define GL_FOG_SPECULAR_TEXTURE_WIN       0x80EC
< #endif
< 
< #ifndef GL_EXT_light_texture
< #define GL_FRAGMENT_MATERIAL_EXT          0x8349
< #define GL_FRAGMENT_NORMAL_EXT            0x834A
< #define GL_FRAGMENT_COLOR_EXT             0x834C
< #define GL_ATTENUATION_EXT                0x834D
< #define GL_SHADOW_ATTENUATION_EXT         0x834E
< #define GL_TEXTURE_APPLICATION_MODE_EXT   0x834F
< #define GL_TEXTURE_LIGHT_EXT              0x8350
< #define GL_TEXTURE_MATERIAL_FACE_EXT      0x8351
< #define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
< /* reuse GL_FRAGMENT_DEPTH_EXT */
< #endif
< 
< #ifndef GL_SGIX_blend_alpha_minmax
< #define GL_ALPHA_MIN_SGIX                 0x8320
< #define GL_ALPHA_MAX_SGIX                 0x8321
< #endif
< 
< #ifndef GL_SGIX_impact_pixel_texture
< #define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX   0x8184
< #define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX     0x8185
< #define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX     0x8186
< #define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
< #define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
< #define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX    0x8189
< #define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX    0x818A
< #endif
< 
< #ifndef GL_EXT_bgra
< #define GL_BGR_EXT                        0x80E0
< #define GL_BGRA_EXT                       0x80E1
< #endif
< 
< #ifndef GL_SGIX_async
< #define GL_ASYNC_MARKER_SGIX              0x8329
< #endif
< 
< #ifndef GL_SGIX_async_pixel
< #define GL_ASYNC_TEX_IMAGE_SGIX           0x835C
< #define GL_ASYNC_DRAW_PIXELS_SGIX         0x835D
< #define GL_ASYNC_READ_PIXELS_SGIX         0x835E
< #define GL_MAX_ASYNC_TEX_IMAGE_SGIX       0x835F
< #define GL_MAX_ASYNC_DRAW_PIXELS_SGIX     0x8360
< #define GL_MAX_ASYNC_READ_PIXELS_SGIX     0x8361
< #endif
< 
< #ifndef GL_SGIX_async_histogram
< #define GL_ASYNC_HISTOGRAM_SGIX           0x832C
< #define GL_MAX_ASYNC_HISTOGRAM_SGIX       0x832D
< #endif
< 
< #ifndef GL_INTEL_texture_scissor
< #endif
< 
< #ifndef GL_INTEL_parallel_arrays
< #define GL_PARALLEL_ARRAYS_INTEL          0x83F4
< #define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
< #define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
< #define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
< #define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
< #endif
< 
< #ifndef GL_HP_occlusion_test
< #define GL_OCCLUSION_TEST_HP              0x8165
< #define GL_OCCLUSION_TEST_RESULT_HP       0x8166
< #endif
< 
< #ifndef GL_EXT_pixel_transform
< #define GL_PIXEL_TRANSFORM_2D_EXT         0x8330
< #define GL_PIXEL_MAG_FILTER_EXT           0x8331
< #define GL_PIXEL_MIN_FILTER_EXT           0x8332
< #define GL_PIXEL_CUBIC_WEIGHT_EXT         0x8333
< #define GL_CUBIC_EXT                      0x8334
< #define GL_AVERAGE_EXT                    0x8335
< #define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
< #define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
< #define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT  0x8338
< #endif
< 
< #ifndef GL_EXT_pixel_transform_color_table
< #endif
< 
< #ifndef GL_EXT_shared_texture_palette
< #define GL_SHARED_TEXTURE_PALETTE_EXT     0x81FB
< #endif
< 
< #ifndef GL_EXT_separate_specular_color
< #define GL_LIGHT_MODEL_COLOR_CONTROL_EXT  0x81F8
< #define GL_SINGLE_COLOR_EXT               0x81F9
< #define GL_SEPARATE_SPECULAR_COLOR_EXT    0x81FA
< #endif
< 
< #ifndef GL_EXT_secondary_color
< #define GL_COLOR_SUM_EXT                  0x8458
< #define GL_CURRENT_SECONDARY_COLOR_EXT    0x8459
< #define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
< #define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
< #define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
< #define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
< #define GL_SECONDARY_COLOR_ARRAY_EXT      0x845E
< #endif
< 
< #ifndef GL_EXT_texture_perturb_normal
< #define GL_PERTURB_EXT                    0x85AE
< #define GL_TEXTURE_NORMAL_EXT             0x85AF
< #endif
< 
< #ifndef GL_EXT_multi_draw_arrays
< #endif
< 
< #ifndef GL_EXT_fog_coord
< #define GL_FOG_COORDINATE_SOURCE_EXT      0x8450
< #define GL_FOG_COORDINATE_EXT             0x8451
< #define GL_FRAGMENT_DEPTH_EXT             0x8452
< #define GL_CURRENT_FOG_COORDINATE_EXT     0x8453
< #define GL_FOG_COORDINATE_ARRAY_TYPE_EXT  0x8454
< #define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
< #define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
< #define GL_FOG_COORDINATE_ARRAY_EXT       0x8457
< #endif
< 
< #ifndef GL_REND_screen_coordinates
< #define GL_SCREEN_COORDINATES_REND        0x8490
< #define GL_INVERTED_SCREEN_W_REND         0x8491
< #endif
< 
< #ifndef GL_EXT_coordinate_frame
< #define GL_TANGENT_ARRAY_EXT              0x8439
< #define GL_BINORMAL_ARRAY_EXT             0x843A
< #define GL_CURRENT_TANGENT_EXT            0x843B
< #define GL_CURRENT_BINORMAL_EXT           0x843C
< #define GL_TANGENT_ARRAY_TYPE_EXT         0x843E
< #define GL_TANGENT_ARRAY_STRIDE_EXT       0x843F
< #define GL_BINORMAL_ARRAY_TYPE_EXT        0x8440
< #define GL_BINORMAL_ARRAY_STRIDE_EXT      0x8441
< #define GL_TANGENT_ARRAY_POINTER_EXT      0x8442
< #define GL_BINORMAL_ARRAY_POINTER_EXT     0x8443
< #define GL_MAP1_TANGENT_EXT               0x8444
< #define GL_MAP2_TANGENT_EXT               0x8445
< #define GL_MAP1_BINORMAL_EXT              0x8446
< #define GL_MAP2_BINORMAL_EXT              0x8447
< #endif
< 
< #ifndef GL_EXT_texture_env_combine
< #define GL_COMBINE_EXT                    0x8570
< #define GL_COMBINE_RGB_EXT                0x8571
< #define GL_COMBINE_ALPHA_EXT              0x8572
< #define GL_RGB_SCALE_EXT                  0x8573
< #define GL_ADD_SIGNED_EXT                 0x8574
< #define GL_INTERPOLATE_EXT                0x8575
< #define GL_CONSTANT_EXT                   0x8576
< #define GL_PRIMARY_COLOR_EXT              0x8577
< #define GL_PREVIOUS_EXT                   0x8578
< #define GL_SOURCE0_RGB_EXT                0x8580
< #define GL_SOURCE1_RGB_EXT                0x8581
< #define GL_SOURCE2_RGB_EXT                0x8582
< #define GL_SOURCE0_ALPHA_EXT              0x8588
< #define GL_SOURCE1_ALPHA_EXT              0x8589
< #define GL_SOURCE2_ALPHA_EXT              0x858A
< #define GL_OPERAND0_RGB_EXT               0x8590
< #define GL_OPERAND1_RGB_EXT               0x8591
< #define GL_OPERAND2_RGB_EXT               0x8592
< #define GL_OPERAND0_ALPHA_EXT             0x8598
< #define GL_OPERAND1_ALPHA_EXT             0x8599
< #define GL_OPERAND2_ALPHA_EXT             0x859A
< #endif
< 
< #ifndef GL_APPLE_specular_vector
< #define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
< #endif
< 
< #ifndef GL_APPLE_transform_hint
< #define GL_TRANSFORM_HINT_APPLE           0x85B1
< #endif
< 
< #ifndef GL_SGIX_fog_scale
< #define GL_FOG_SCALE_SGIX                 0x81FC
< #define GL_FOG_SCALE_VALUE_SGIX           0x81FD
< #endif
< 
< #ifndef GL_SUNX_constant_data
< #define GL_UNPACK_CONSTANT_DATA_SUNX      0x81D5
< #define GL_TEXTURE_CONSTANT_DATA_SUNX     0x81D6
< #endif
< 
< #ifndef GL_SUN_global_alpha
< #define GL_GLOBAL_ALPHA_SUN               0x81D9
< #define GL_GLOBAL_ALPHA_FACTOR_SUN        0x81DA
< #endif
< 
< #ifndef GL_SUN_triangle_list
< #define GL_RESTART_SUN                    0x0001
< #define GL_REPLACE_MIDDLE_SUN             0x0002
< #define GL_REPLACE_OLDEST_SUN             0x0003
< #define GL_TRIANGLE_LIST_SUN              0x81D7
< #define GL_REPLACEMENT_CODE_SUN           0x81D8
< #define GL_REPLACEMENT_CODE_ARRAY_SUN     0x85C0
< #define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
< #define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
< #define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
< #define GL_R1UI_V3F_SUN                   0x85C4
< #define GL_R1UI_C4UB_V3F_SUN              0x85C5
< #define GL_R1UI_C3F_V3F_SUN               0x85C6
< #define GL_R1UI_N3F_V3F_SUN               0x85C7
< #define GL_R1UI_C4F_N3F_V3F_SUN           0x85C8
< #define GL_R1UI_T2F_V3F_SUN               0x85C9
< #define GL_R1UI_T2F_N3F_V3F_SUN           0x85CA
< #define GL_R1UI_T2F_C4F_N3F_V3F_SUN       0x85CB
< #endif
< 
< #ifndef GL_SUN_vertex
< #endif
< 
< #ifndef GL_EXT_blend_func_separate
< #define GL_BLEND_DST_RGB_EXT              0x80C8
< #define GL_BLEND_SRC_RGB_EXT              0x80C9
< #define GL_BLEND_DST_ALPHA_EXT            0x80CA
< #define GL_BLEND_SRC_ALPHA_EXT            0x80CB
< #endif
< 
< #ifndef GL_INGR_color_clamp
< #define GL_RED_MIN_CLAMP_INGR             0x8560
< #define GL_GREEN_MIN_CLAMP_INGR           0x8561
< #define GL_BLUE_MIN_CLAMP_INGR            0x8562
< #define GL_ALPHA_MIN_CLAMP_INGR           0x8563
< #define GL_RED_MAX_CLAMP_INGR             0x8564
< #define GL_GREEN_MAX_CLAMP_INGR           0x8565
< #define GL_BLUE_MAX_CLAMP_INGR            0x8566
< #define GL_ALPHA_MAX_CLAMP_INGR           0x8567
< #endif
< 
< #ifndef GL_INGR_interlace_read
< #define GL_INTERLACE_READ_INGR            0x8568
< #endif
< 
< #ifndef GL_EXT_stencil_wrap
< #define GL_INCR_WRAP_EXT                  0x8507
< #define GL_DECR_WRAP_EXT                  0x8508
< #endif
< 
< #ifndef GL_EXT_422_pixels
< #define GL_422_EXT                        0x80CC
< #define GL_422_REV_EXT                    0x80CD
< #define GL_422_AVERAGE_EXT                0x80CE
< #define GL_422_REV_AVERAGE_EXT            0x80CF
< #endif
< 
< #ifndef GL_NV_texgen_reflection
< #define GL_NORMAL_MAP_NV                  0x8511
< #define GL_REFLECTION_MAP_NV              0x8512
< #endif
< 
< #ifndef GL_EXT_texture_cube_map
< #define GL_NORMAL_MAP_EXT                 0x8511
< #define GL_REFLECTION_MAP_EXT             0x8512
< #define GL_TEXTURE_CUBE_MAP_EXT           0x8513
< #define GL_TEXTURE_BINDING_CUBE_MAP_EXT   0x8514
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
< #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
< #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
< #define GL_PROXY_TEXTURE_CUBE_MAP_EXT     0x851B
< #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT  0x851C
< #endif
< 
< #ifndef GL_SUN_convolution_border_modes
< #define GL_WRAP_BORDER_SUN                0x81D4
< #endif
< 
< #ifndef GL_EXT_texture_env_add
< #endif
< 
< #ifndef GL_EXT_texture_lod_bias
< #define GL_MAX_TEXTURE_LOD_BIAS_EXT       0x84FD
< #define GL_TEXTURE_FILTER_CONTROL_EXT     0x8500
< #define GL_TEXTURE_LOD_BIAS_EXT           0x8501
< #endif
< 
< #ifndef GL_EXT_texture_filter_anisotropic
< #define GL_TEXTURE_MAX_ANISOTROPY_EXT     0x84FE
< #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
< #endif
< 
< #ifndef GL_EXT_vertex_weighting
< #define GL_MODELVIEW0_STACK_DEPTH_EXT     GL_MODELVIEW_STACK_DEPTH
< #define GL_MODELVIEW1_STACK_DEPTH_EXT     0x8502
< #define GL_MODELVIEW0_MATRIX_EXT          GL_MODELVIEW_MATRIX
< #define GL_MODELVIEW1_MATRIX_EXT          0x8506
< #define GL_VERTEX_WEIGHTING_EXT           0x8509
< #define GL_MODELVIEW0_EXT                 GL_MODELVIEW
< #define GL_MODELVIEW1_EXT                 0x850A
< #define GL_CURRENT_VERTEX_WEIGHT_EXT      0x850B
< #define GL_VERTEX_WEIGHT_ARRAY_EXT        0x850C
< #define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT   0x850D
< #define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT   0x850E
< #define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
< #define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
< #endif
< 
< #ifndef GL_NV_light_max_exponent
< #define GL_MAX_SHININESS_NV               0x8504
< #define GL_MAX_SPOT_EXPONENT_NV           0x8505
< #endif
< 
< #ifndef GL_NV_vertex_array_range
< #define GL_VERTEX_ARRAY_RANGE_NV          0x851D
< #define GL_VERTEX_ARRAY_RANGE_LENGTH_NV   0x851E
< #define GL_VERTEX_ARRAY_RANGE_VALID_NV    0x851F
< #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
< #define GL_VERTEX_ARRAY_RANGE_POINTER_NV  0x8521
< #endif
< 
< #ifndef GL_NV_register_combiners
< #define GL_REGISTER_COMBINERS_NV          0x8522
< #define GL_VARIABLE_A_NV                  0x8523
< #define GL_VARIABLE_B_NV                  0x8524
< #define GL_VARIABLE_C_NV                  0x8525
< #define GL_VARIABLE_D_NV                  0x8526
< #define GL_VARIABLE_E_NV                  0x8527
< #define GL_VARIABLE_F_NV                  0x8528
< #define GL_VARIABLE_G_NV                  0x8529
< #define GL_CONSTANT_COLOR0_NV             0x852A
< #define GL_CONSTANT_COLOR1_NV             0x852B
< #define GL_PRIMARY_COLOR_NV               0x852C
< #define GL_SECONDARY_COLOR_NV             0x852D
< #define GL_SPARE0_NV                      0x852E
< #define GL_SPARE1_NV                      0x852F
< #define GL_DISCARD_NV                     0x8530
< #define GL_E_TIMES_F_NV                   0x8531
< #define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
< #define GL_UNSIGNED_IDENTITY_NV           0x8536
< #define GL_UNSIGNED_INVERT_NV             0x8537
< #define GL_EXPAND_NORMAL_NV               0x8538
< #define GL_EXPAND_NEGATE_NV               0x8539
< #define GL_HALF_BIAS_NORMAL_NV            0x853A
< #define GL_HALF_BIAS_NEGATE_NV            0x853B
< #define GL_SIGNED_IDENTITY_NV             0x853C
< #define GL_SIGNED_NEGATE_NV               0x853D
< #define GL_SCALE_BY_TWO_NV                0x853E
< #define GL_SCALE_BY_FOUR_NV               0x853F
< #define GL_SCALE_BY_ONE_HALF_NV           0x8540
< #define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV   0x8541
< #define GL_COMBINER_INPUT_NV              0x8542
< #define GL_COMBINER_MAPPING_NV            0x8543
< #define GL_COMBINER_COMPONENT_USAGE_NV    0x8544
< #define GL_COMBINER_AB_DOT_PRODUCT_NV     0x8545
< #define GL_COMBINER_CD_DOT_PRODUCT_NV     0x8546
< #define GL_COMBINER_MUX_SUM_NV            0x8547
< #define GL_COMBINER_SCALE_NV              0x8548
< #define GL_COMBINER_BIAS_NV               0x8549
< #define GL_COMBINER_AB_OUTPUT_NV          0x854A
< #define GL_COMBINER_CD_OUTPUT_NV          0x854B
< #define GL_COMBINER_SUM_OUTPUT_NV         0x854C
< #define GL_MAX_GENERAL_COMBINERS_NV       0x854D
< #define GL_NUM_GENERAL_COMBINERS_NV       0x854E
< #define GL_COLOR_SUM_CLAMP_NV             0x854F
< #define GL_COMBINER0_NV                   0x8550
< #define GL_COMBINER1_NV                   0x8551
< #define GL_COMBINER2_NV                   0x8552
< #define GL_COMBINER3_NV                   0x8553
< #define GL_COMBINER4_NV                   0x8554
< #define GL_COMBINER5_NV                   0x8555
< #define GL_COMBINER6_NV                   0x8556
< #define GL_COMBINER7_NV                   0x8557
< /* reuse GL_TEXTURE0_ARB */
< /* reuse GL_TEXTURE1_ARB */
< /* reuse GL_ZERO */
< /* reuse GL_NONE */
< /* reuse GL_FOG */
< #endif
< 
< #ifndef GL_NV_fog_distance
< #define GL_FOG_DISTANCE_MODE_NV           0x855A
< #define GL_EYE_RADIAL_NV                  0x855B
< #define GL_EYE_PLANE_ABSOLUTE_NV          0x855C
< /* reuse GL_EYE_PLANE */
< #endif
< 
< #ifndef GL_NV_texgen_emboss
< #define GL_EMBOSS_LIGHT_NV                0x855D
< #define GL_EMBOSS_CONSTANT_NV             0x855E
< #define GL_EMBOSS_MAP_NV                  0x855F
< #endif
< 
< #ifndef GL_NV_blend_square
< #endif
< 
< #ifndef GL_NV_texture_env_combine4
< #define GL_COMBINE4_NV                    0x8503
< #define GL_SOURCE3_RGB_NV                 0x8583
< #define GL_SOURCE3_ALPHA_NV               0x858B
< #define GL_OPERAND3_RGB_NV                0x8593
< #define GL_OPERAND3_ALPHA_NV              0x859B
< #endif
< 
< #ifndef GL_MESA_resize_buffers
< #endif
< 
< #ifndef GL_MESA_window_pos
< #endif
< 
< #ifndef GL_EXT_texture_compression_s3tc
< #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT   0x83F0
< #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT  0x83F1
< #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT  0x83F2
< #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT  0x83F3
< #endif
< 
< #ifndef GL_IBM_cull_vertex
< #define GL_CULL_VERTEX_IBM                103050
< #endif
< 
< #ifndef GL_IBM_multimode_draw_arrays
< #endif
< 
< #ifndef GL_IBM_vertex_array_lists
< #define GL_VERTEX_ARRAY_LIST_IBM          103070
< #define GL_NORMAL_ARRAY_LIST_IBM          103071
< #define GL_COLOR_ARRAY_LIST_IBM           103072
< #define GL_INDEX_ARRAY_LIST_IBM           103073
< #define GL_TEXTURE_COORD_ARRAY_LIST_IBM   103074
< #define GL_EDGE_FLAG_ARRAY_LIST_IBM       103075
< #define GL_FOG_COORDINATE_ARRAY_LIST_IBM  103076
< #define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
< #define GL_VERTEX_ARRAY_LIST_STRIDE_IBM   103080
< #define GL_NORMAL_ARRAY_LIST_STRIDE_IBM   103081
< #define GL_COLOR_ARRAY_LIST_STRIDE_IBM    103082
< #define GL_INDEX_ARRAY_LIST_STRIDE_IBM    103083
< #define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
< #define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
< #define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
< #define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
< #endif
< 
< #ifndef GL_SGIX_subsample
< #define GL_PACK_SUBSAMPLE_RATE_SGIX       0x85A0
< #define GL_UNPACK_SUBSAMPLE_RATE_SGIX     0x85A1
< #define GL_PIXEL_SUBSAMPLE_4444_SGIX      0x85A2
< #define GL_PIXEL_SUBSAMPLE_2424_SGIX      0x85A3
< #define GL_PIXEL_SUBSAMPLE_4242_SGIX      0x85A4
< #endif
< 
< #ifndef GL_SGIX_ycrcb_subsample
< #endif
< 
< #ifndef GL_SGIX_ycrcba
< #define GL_YCRCB_SGIX                     0x8318
< #define GL_YCRCBA_SGIX                    0x8319
< #endif
< 
< #ifndef GL_SGI_depth_pass_instrument
< #define GL_DEPTH_PASS_INSTRUMENT_SGIX     0x8310
< #define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
< #define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
< #endif
< 
< #ifndef GL_3DFX_texture_compression_FXT1
< #define GL_COMPRESSED_RGB_FXT1_3DFX       0x86B0
< #define GL_COMPRESSED_RGBA_FXT1_3DFX      0x86B1
< #endif
< 
< #ifndef GL_3DFX_multisample
< #define GL_MULTISAMPLE_3DFX               0x86B2
< #define GL_SAMPLE_BUFFERS_3DFX            0x86B3
< #define GL_SAMPLES_3DFX                   0x86B4
< #define GL_MULTISAMPLE_BIT_3DFX           0x20000000
< #endif
< 
< #ifndef GL_3DFX_tbuffer
< #endif
< 
< #ifndef GL_EXT_multisample
< #define GL_MULTISAMPLE_EXT                0x809D
< #define GL_SAMPLE_ALPHA_TO_MASK_EXT       0x809E
< #define GL_SAMPLE_ALPHA_TO_ONE_EXT        0x809F
< #define GL_SAMPLE_MASK_EXT                0x80A0
< #define GL_1PASS_EXT                      0x80A1
< #define GL_2PASS_0_EXT                    0x80A2
< #define GL_2PASS_1_EXT                    0x80A3
< #define GL_4PASS_0_EXT                    0x80A4
< #define GL_4PASS_1_EXT                    0x80A5
< #define GL_4PASS_2_EXT                    0x80A6
< #define GL_4PASS_3_EXT                    0x80A7
< #define GL_SAMPLE_BUFFERS_EXT             0x80A8
< #define GL_SAMPLES_EXT                    0x80A9
< #define GL_SAMPLE_MASK_VALUE_EXT          0x80AA
< #define GL_SAMPLE_MASK_INVERT_EXT         0x80AB
< #define GL_SAMPLE_PATTERN_EXT             0x80AC
< #define GL_MULTISAMPLE_BIT_EXT            0x20000000
< #endif
< 
< #ifndef GL_SGIX_vertex_preclip
< #define GL_VERTEX_PRECLIP_SGIX            0x83EE
< #define GL_VERTEX_PRECLIP_HINT_SGIX       0x83EF
< #endif
< 
< #ifndef GL_SGIX_convolution_accuracy
< #define GL_CONVOLUTION_HINT_SGIX          0x8316
< #endif
< 
< #ifndef GL_SGIX_resample
< #define GL_PACK_RESAMPLE_SGIX             0x842C
< #define GL_UNPACK_RESAMPLE_SGIX           0x842D
< #define GL_RESAMPLE_REPLICATE_SGIX        0x842E
< #define GL_RESAMPLE_ZERO_FILL_SGIX        0x842F
< #define GL_RESAMPLE_DECIMATE_SGIX         0x8430
< #endif
< 
< #ifndef GL_SGIS_point_line_texgen
< #define GL_EYE_DISTANCE_TO_POINT_SGIS     0x81F0
< #define GL_OBJECT_DISTANCE_TO_POINT_SGIS  0x81F1
< #define GL_EYE_DISTANCE_TO_LINE_SGIS      0x81F2
< #define GL_OBJECT_DISTANCE_TO_LINE_SGIS   0x81F3
< #define GL_EYE_POINT_SGIS                 0x81F4
< #define GL_OBJECT_POINT_SGIS              0x81F5
< #define GL_EYE_LINE_SGIS                  0x81F6
< #define GL_OBJECT_LINE_SGIS               0x81F7
< #endif
< 
< #ifndef GL_SGIS_texture_color_mask
< #define GL_TEXTURE_COLOR_WRITEMASK_SGIS   0x81EF
< #endif
< 
< #ifndef GL_EXT_texture_env_dot3
< #define GL_DOT3_RGB_EXT                   0x8740
< #define GL_DOT3_RGBA_EXT                  0x8741
< #endif
< 
< #ifndef GL_ATI_texture_mirror_once
< #define GL_MIRROR_CLAMP_ATI               0x8742
< #define GL_MIRROR_CLAMP_TO_EDGE_ATI       0x8743
< #endif
< 
< #ifndef GL_NV_fence
< #define GL_ALL_COMPLETED_NV               0x84F2
< #define GL_FENCE_STATUS_NV                0x84F3
< #define GL_FENCE_CONDITION_NV             0x84F4
< #endif
< 
< #ifndef GL_IBM_texture_mirrored_repeat
< #define GL_MIRRORED_REPEAT_IBM            0x8370
< #endif
< 
< #ifndef GL_NV_evaluators
< #define GL_EVAL_2D_NV                     0x86C0
< #define GL_EVAL_TRIANGULAR_2D_NV          0x86C1
< #define GL_MAP_TESSELLATION_NV            0x86C2
< #define GL_MAP_ATTRIB_U_ORDER_NV          0x86C3
< #define GL_MAP_ATTRIB_V_ORDER_NV          0x86C4
< #define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
< #define GL_EVAL_VERTEX_ATTRIB0_NV         0x86C6
< #define GL_EVAL_VERTEX_ATTRIB1_NV         0x86C7
< #define GL_EVAL_VERTEX_ATTRIB2_NV         0x86C8
< #define GL_EVAL_VERTEX_ATTRIB3_NV         0x86C9
< #define GL_EVAL_VERTEX_ATTRIB4_NV         0x86CA
< #define GL_EVAL_VERTEX_ATTRIB5_NV         0x86CB
< #define GL_EVAL_VERTEX_ATTRIB6_NV         0x86CC
< #define GL_EVAL_VERTEX_ATTRIB7_NV         0x86CD
< #define GL_EVAL_VERTEX_ATTRIB8_NV         0x86CE
< #define GL_EVAL_VERTEX_ATTRIB9_NV         0x86CF
< #define GL_EVAL_VERTEX_ATTRIB10_NV        0x86D0
< #define GL_EVAL_VERTEX_ATTRIB11_NV        0x86D1
< #define GL_EVAL_VERTEX_ATTRIB12_NV        0x86D2
< #define GL_EVAL_VERTEX_ATTRIB13_NV        0x86D3
< #define GL_EVAL_VERTEX_ATTRIB14_NV        0x86D4
< #define GL_EVAL_VERTEX_ATTRIB15_NV        0x86D5
< #define GL_MAX_MAP_TESSELLATION_NV        0x86D6
< #define GL_MAX_RATIONAL_EVAL_ORDER_NV     0x86D7
< #endif
< 
< #ifndef GL_NV_packed_depth_stencil
< #define GL_DEPTH_STENCIL_NV               0x84F9
< #define GL_UNSIGNED_INT_24_8_NV           0x84FA
< #endif
< 
< #ifndef GL_NV_register_combiners2
< #define GL_PER_STAGE_CONSTANTS_NV         0x8535
< #endif
< 
< #ifndef GL_NV_texture_compression_vtc
< #endif
< 
< #ifndef GL_NV_texture_rectangle
< #define GL_TEXTURE_RECTANGLE_NV           0x84F5
< #define GL_TEXTURE_BINDING_RECTANGLE_NV   0x84F6
< #define GL_PROXY_TEXTURE_RECTANGLE_NV     0x84F7
< #define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV  0x84F8
< #endif
< 
< #ifndef GL_NV_texture_shader
< #define GL_OFFSET_TEXTURE_RECTANGLE_NV    0x864C
< #define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
< #define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
< #define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
< #define GL_UNSIGNED_INT_S8_S8_8_8_NV      0x86DA
< #define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV  0x86DB
< #define GL_DSDT_MAG_INTENSITY_NV          0x86DC
< #define GL_SHADER_CONSISTENT_NV           0x86DD
< #define GL_TEXTURE_SHADER_NV              0x86DE
< #define GL_SHADER_OPERATION_NV            0x86DF
< #define GL_CULL_MODES_NV                  0x86E0
< #define GL_OFFSET_TEXTURE_MATRIX_NV       0x86E1
< #define GL_OFFSET_TEXTURE_SCALE_NV        0x86E2
< #define GL_OFFSET_TEXTURE_BIAS_NV         0x86E3
< #define GL_OFFSET_TEXTURE_2D_MATRIX_NV    GL_OFFSET_TEXTURE_MATRIX_NV
< #define GL_OFFSET_TEXTURE_2D_SCALE_NV     GL_OFFSET_TEXTURE_SCALE_NV
< #define GL_OFFSET_TEXTURE_2D_BIAS_NV      GL_OFFSET_TEXTURE_BIAS_NV
< #define GL_PREVIOUS_TEXTURE_INPUT_NV      0x86E4
< #define GL_CONST_EYE_NV                   0x86E5
< #define GL_PASS_THROUGH_NV                0x86E6
< #define GL_CULL_FRAGMENT_NV               0x86E7
< #define GL_OFFSET_TEXTURE_2D_NV           0x86E8
< #define GL_DEPENDENT_AR_TEXTURE_2D_NV     0x86E9
< #define GL_DEPENDENT_GB_TEXTURE_2D_NV     0x86EA
< #define GL_DOT_PRODUCT_NV                 0x86EC
< #define GL_DOT_PRODUCT_DEPTH_REPLACE_NV   0x86ED
< #define GL_DOT_PRODUCT_TEXTURE_2D_NV      0x86EE
< #define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
< #define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
< #define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
< #define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
< #define GL_HILO_NV                        0x86F4
< #define GL_DSDT_NV                        0x86F5
< #define GL_DSDT_MAG_NV                    0x86F6
< #define GL_DSDT_MAG_VIB_NV                0x86F7
< #define GL_HILO16_NV                      0x86F8
< #define GL_SIGNED_HILO_NV                 0x86F9
< #define GL_SIGNED_HILO16_NV               0x86FA
< #define GL_SIGNED_RGBA_NV                 0x86FB
< #define GL_SIGNED_RGBA8_NV                0x86FC
< #define GL_SIGNED_RGB_NV                  0x86FE
< #define GL_SIGNED_RGB8_NV                 0x86FF
< #define GL_SIGNED_LUMINANCE_NV            0x8701
< #define GL_SIGNED_LUMINANCE8_NV           0x8702
< #define GL_SIGNED_LUMINANCE_ALPHA_NV      0x8703
< #define GL_SIGNED_LUMINANCE8_ALPHA8_NV    0x8704
< #define GL_SIGNED_ALPHA_NV                0x8705
< #define GL_SIGNED_ALPHA8_NV               0x8706
< #define GL_SIGNED_INTENSITY_NV            0x8707
< #define GL_SIGNED_INTENSITY8_NV           0x8708
< #define GL_DSDT8_NV                       0x8709
< #define GL_DSDT8_MAG8_NV                  0x870A
< #define GL_DSDT8_MAG8_INTENSITY8_NV       0x870B
< #define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV   0x870C
< #define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
< #define GL_HI_SCALE_NV                    0x870E
< #define GL_LO_SCALE_NV                    0x870F
< #define GL_DS_SCALE_NV                    0x8710
< #define GL_DT_SCALE_NV                    0x8711
< #define GL_MAGNITUDE_SCALE_NV             0x8712
< #define GL_VIBRANCE_SCALE_NV              0x8713
< #define GL_HI_BIAS_NV                     0x8714
< #define GL_LO_BIAS_NV                     0x8715
< #define GL_DS_BIAS_NV                     0x8716
< #define GL_DT_BIAS_NV                     0x8717
< #define GL_MAGNITUDE_BIAS_NV              0x8718
< #define GL_VIBRANCE_BIAS_NV               0x8719
< #define GL_TEXTURE_BORDER_VALUES_NV       0x871A
< #define GL_TEXTURE_HI_SIZE_NV             0x871B
< #define GL_TEXTURE_LO_SIZE_NV             0x871C
< #define GL_TEXTURE_DS_SIZE_NV             0x871D
< #define GL_TEXTURE_DT_SIZE_NV             0x871E
< #define GL_TEXTURE_MAG_SIZE_NV            0x871F
< #endif
< 
< #ifndef GL_NV_texture_shader2
< #define GL_DOT_PRODUCT_TEXTURE_3D_NV      0x86EF
< #endif
< 
< #ifndef GL_NV_vertex_array_range2
< #define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
< #endif
< 
< #ifndef GL_NV_vertex_program
< #define GL_VERTEX_PROGRAM_NV              0x8620
< #define GL_VERTEX_STATE_PROGRAM_NV        0x8621
< #define GL_ATTRIB_ARRAY_SIZE_NV           0x8623
< #define GL_ATTRIB_ARRAY_STRIDE_NV         0x8624
< #define GL_ATTRIB_ARRAY_TYPE_NV           0x8625
< #define GL_CURRENT_ATTRIB_NV              0x8626
< #define GL_PROGRAM_LENGTH_NV              0x8627
< #define GL_PROGRAM_STRING_NV              0x8628
< #define GL_MODELVIEW_PROJECTION_NV        0x8629
< #define GL_IDENTITY_NV                    0x862A
< #define GL_INVERSE_NV                     0x862B
< #define GL_TRANSPOSE_NV                   0x862C
< #define GL_INVERSE_TRANSPOSE_NV           0x862D
< #define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
< #define GL_MAX_TRACK_MATRICES_NV          0x862F
< #define GL_MATRIX0_NV                     0x8630
< #define GL_MATRIX1_NV                     0x8631
< #define GL_MATRIX2_NV                     0x8632
< #define GL_MATRIX3_NV                     0x8633
< #define GL_MATRIX4_NV                     0x8634
< #define GL_MATRIX5_NV                     0x8635
< #define GL_MATRIX6_NV                     0x8636
< #define GL_MATRIX7_NV                     0x8637
< #define GL_CURRENT_MATRIX_STACK_DEPTH_NV  0x8640
< #define GL_CURRENT_MATRIX_NV              0x8641
< #define GL_VERTEX_PROGRAM_POINT_SIZE_NV   0x8642
< #define GL_VERTEX_PROGRAM_TWO_SIDE_NV     0x8643
< #define GL_PROGRAM_PARAMETER_NV           0x8644
< #define GL_ATTRIB_ARRAY_POINTER_NV        0x8645
< #define GL_PROGRAM_TARGET_NV              0x8646
< #define GL_PROGRAM_RESIDENT_NV            0x8647
< #define GL_TRACK_MATRIX_NV                0x8648
< #define GL_TRACK_MATRIX_TRANSFORM_NV      0x8649
< #define GL_VERTEX_PROGRAM_BINDING_NV      0x864A
< #define GL_PROGRAM_ERROR_POSITION_NV      0x864B
< #define GL_VERTEX_ATTRIB_ARRAY0_NV        0x8650
< #define GL_VERTEX_ATTRIB_ARRAY1_NV        0x8651
< #define GL_VERTEX_ATTRIB_ARRAY2_NV        0x8652
< #define GL_VERTEX_ATTRIB_ARRAY3_NV        0x8653
< #define GL_VERTEX_ATTRIB_ARRAY4_NV        0x8654
< #define GL_VERTEX_ATTRIB_ARRAY5_NV        0x8655
< #define GL_VERTEX_ATTRIB_ARRAY6_NV        0x8656
< #define GL_VERTEX_ATTRIB_ARRAY7_NV        0x8657
< #define GL_VERTEX_ATTRIB_ARRAY8_NV        0x8658
< #define GL_VERTEX_ATTRIB_ARRAY9_NV        0x8659
< #define GL_VERTEX_ATTRIB_ARRAY10_NV       0x865A
< #define GL_VERTEX_ATTRIB_ARRAY11_NV       0x865B
< #define GL_VERTEX_ATTRIB_ARRAY12_NV       0x865C
< #define GL_VERTEX_ATTRIB_ARRAY13_NV       0x865D
< #define GL_VERTEX_ATTRIB_ARRAY14_NV       0x865E
< #define GL_VERTEX_ATTRIB_ARRAY15_NV       0x865F
< #define GL_MAP1_VERTEX_ATTRIB0_4_NV       0x8660
< #define GL_MAP1_VERTEX_ATTRIB1_4_NV       0x8661
< #define GL_MAP1_VERTEX_ATTRIB2_4_NV       0x8662
< #define GL_MAP1_VERTEX_ATTRIB3_4_NV       0x8663
< #define GL_MAP1_VERTEX_ATTRIB4_4_NV       0x8664
< #define GL_MAP1_VERTEX_ATTRIB5_4_NV       0x8665
< #define GL_MAP1_VERTEX_ATTRIB6_4_NV       0x8666
< #define GL_MAP1_VERTEX_ATTRIB7_4_NV       0x8667
< #define GL_MAP1_VERTEX_ATTRIB8_4_NV       0x8668
< #define GL_MAP1_VERTEX_ATTRIB9_4_NV       0x8669
< #define GL_MAP1_VERTEX_ATTRIB10_4_NV      0x866A
< #define GL_MAP1_VERTEX_ATTRIB11_4_NV      0x866B
< #define GL_MAP1_VERTEX_ATTRIB12_4_NV      0x866C
< #define GL_MAP1_VERTEX_ATTRIB13_4_NV      0x866D
< #define GL_MAP1_VERTEX_ATTRIB14_4_NV      0x866E
< #define GL_MAP1_VERTEX_ATTRIB15_4_NV      0x866F
< #define GL_MAP2_VERTEX_ATTRIB0_4_NV       0x8670
< #define GL_MAP2_VERTEX_ATTRIB1_4_NV       0x8671
< #define GL_MAP2_VERTEX_ATTRIB2_4_NV       0x8672
< #define GL_MAP2_VERTEX_ATTRIB3_4_NV       0x8673
< #define GL_MAP2_VERTEX_ATTRIB4_4_NV       0x8674
< #define GL_MAP2_VERTEX_ATTRIB5_4_NV       0x8675
< #define GL_MAP2_VERTEX_ATTRIB6_4_NV       0x8676
< #define GL_MAP2_VERTEX_ATTRIB7_4_NV       0x8677
< #define GL_MAP2_VERTEX_ATTRIB8_4_NV       0x8678
< #define GL_MAP2_VERTEX_ATTRIB9_4_NV       0x8679
< #define GL_MAP2_VERTEX_ATTRIB10_4_NV      0x867A
< #define GL_MAP2_VERTEX_ATTRIB11_4_NV      0x867B
< #define GL_MAP2_VERTEX_ATTRIB12_4_NV      0x867C
< #define GL_MAP2_VERTEX_ATTRIB13_4_NV      0x867D
< #define GL_MAP2_VERTEX_ATTRIB14_4_NV      0x867E
< #define GL_MAP2_VERTEX_ATTRIB15_4_NV      0x867F
< #endif
< 
< #ifndef GL_SGIX_texture_coordinate_clamp
< #define GL_TEXTURE_MAX_CLAMP_S_SGIX       0x8369
< #define GL_TEXTURE_MAX_CLAMP_T_SGIX       0x836A
< #define GL_TEXTURE_MAX_CLAMP_R_SGIX       0x836B
< #endif
< 
< #ifndef GL_SGIX_scalebias_hint
< #define GL_SCALEBIAS_HINT_SGIX            0x8322
< #endif
< 
< #ifndef GL_OML_interlace
< #define GL_INTERLACE_OML                  0x8980
< #define GL_INTERLACE_READ_OML             0x8981
< #endif
< 
< #ifndef GL_OML_subsample
< #define GL_FORMAT_SUBSAMPLE_24_24_OML     0x8982
< #define GL_FORMAT_SUBSAMPLE_244_244_OML   0x8983
< #endif
< 
< #ifndef GL_OML_resample
< #define GL_PACK_RESAMPLE_OML              0x8984
< #define GL_UNPACK_RESAMPLE_OML            0x8985
< #define GL_RESAMPLE_REPLICATE_OML         0x8986
< #define GL_RESAMPLE_ZERO_FILL_OML         0x8987
< #define GL_RESAMPLE_AVERAGE_OML           0x8988
< #define GL_RESAMPLE_DECIMATE_OML          0x8989
< #endif
< 
< #ifndef GL_NV_copy_depth_to_color
< #define GL_DEPTH_STENCIL_TO_RGBA_NV       0x886E
< #define GL_DEPTH_STENCIL_TO_BGRA_NV       0x886F
< #endif
< 
< #ifndef GL_ATI_envmap_bumpmap
< #define GL_BUMP_ROT_MATRIX_ATI            0x8775
< #define GL_BUMP_ROT_MATRIX_SIZE_ATI       0x8776
< #define GL_BUMP_NUM_TEX_UNITS_ATI         0x8777
< #define GL_BUMP_TEX_UNITS_ATI             0x8778
< #define GL_DUDV_ATI                       0x8779
< #define GL_DU8DV8_ATI                     0x877A
< #define GL_BUMP_ENVMAP_ATI                0x877B
< #define GL_BUMP_TARGET_ATI                0x877C
< #endif
< 
< #ifndef GL_ATI_fragment_shader
< #define GL_FRAGMENT_SHADER_ATI            0x8920
< #define GL_REG_0_ATI                      0x8921
< #define GL_REG_1_ATI                      0x8922
< #define GL_REG_2_ATI                      0x8923
< #define GL_REG_3_ATI                      0x8924
< #define GL_REG_4_ATI                      0x8925
< #define GL_REG_5_ATI                      0x8926
< #define GL_REG_6_ATI                      0x8927
< #define GL_REG_7_ATI                      0x8928
< #define GL_REG_8_ATI                      0x8929
< #define GL_REG_9_ATI                      0x892A
< #define GL_REG_10_ATI                     0x892B
< #define GL_REG_11_ATI                     0x892C
< #define GL_REG_12_ATI                     0x892D
< #define GL_REG_13_ATI                     0x892E
< #define GL_REG_14_ATI                     0x892F
< #define GL_REG_15_ATI                     0x8930
< #define GL_REG_16_ATI                     0x8931
< #define GL_REG_17_ATI                     0x8932
< #define GL_REG_18_ATI                     0x8933
< #define GL_REG_19_ATI                     0x8934
< #define GL_REG_20_ATI                     0x8935
< #define GL_REG_21_ATI                     0x8936
< #define GL_REG_22_ATI                     0x8937
< #define GL_REG_23_ATI                     0x8938
< #define GL_REG_24_ATI                     0x8939
< #define GL_REG_25_ATI                     0x893A
< #define GL_REG_26_ATI                     0x893B
< #define GL_REG_27_ATI                     0x893C
< #define GL_REG_28_ATI                     0x893D
< #define GL_REG_29_ATI                     0x893E
< #define GL_REG_30_ATI                     0x893F
< #define GL_REG_31_ATI                     0x8940
< #define GL_CON_0_ATI                      0x8941
< #define GL_CON_1_ATI                      0x8942
< #define GL_CON_2_ATI                      0x8943
< #define GL_CON_3_ATI                      0x8944
< #define GL_CON_4_ATI                      0x8945
< #define GL_CON_5_ATI                      0x8946
< #define GL_CON_6_ATI                      0x8947
< #define GL_CON_7_ATI                      0x8948
< #define GL_CON_8_ATI                      0x8949
< #define GL_CON_9_ATI                      0x894A
< #define GL_CON_10_ATI                     0x894B
< #define GL_CON_11_ATI                     0x894C
< #define GL_CON_12_ATI                     0x894D
< #define GL_CON_13_ATI                     0x894E
< #define GL_CON_14_ATI                     0x894F
< #define GL_CON_15_ATI                     0x8950
< #define GL_CON_16_ATI                     0x8951
< #define GL_CON_17_ATI                     0x8952
< #define GL_CON_18_ATI                     0x8953
< #define GL_CON_19_ATI                     0x8954
< #define GL_CON_20_ATI                     0x8955
< #define GL_CON_21_ATI                     0x8956
< #define GL_CON_22_ATI                     0x8957
< #define GL_CON_23_ATI                     0x8958
< #define GL_CON_24_ATI                     0x8959
< #define GL_CON_25_ATI                     0x895A
< #define GL_CON_26_ATI                     0x895B
< #define GL_CON_27_ATI                     0x895C
< #define GL_CON_28_ATI                     0x895D
< #define GL_CON_29_ATI                     0x895E
< #define GL_CON_30_ATI                     0x895F
< #define GL_CON_31_ATI                     0x8960
< #define GL_MOV_ATI                        0x8961
< #define GL_ADD_ATI                        0x8963
< #define GL_MUL_ATI                        0x8964
< #define GL_SUB_ATI                        0x8965
< #define GL_DOT3_ATI                       0x8966
< #define GL_DOT4_ATI                       0x8967
< #define GL_MAD_ATI                        0x8968
< #define GL_LERP_ATI                       0x8969
< #define GL_CND_ATI                        0x896A
< #define GL_CND0_ATI                       0x896B
< #define GL_DOT2_ADD_ATI                   0x896C
< #define GL_SECONDARY_INTERPOLATOR_ATI     0x896D
< #define GL_NUM_FRAGMENT_REGISTERS_ATI     0x896E
< #define GL_NUM_FRAGMENT_CONSTANTS_ATI     0x896F
< #define GL_NUM_PASSES_ATI                 0x8970
< #define GL_NUM_INSTRUCTIONS_PER_PASS_ATI  0x8971
< #define GL_NUM_INSTRUCTIONS_TOTAL_ATI     0x8972
< #define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
< #define GL_NUM_LOOPBACK_COMPONENTS_ATI    0x8974
< #define GL_COLOR_ALPHA_PAIRING_ATI        0x8975
< #define GL_SWIZZLE_STR_ATI                0x8976
< #define GL_SWIZZLE_STQ_ATI                0x8977
< #define GL_SWIZZLE_STR_DR_ATI             0x8978
< #define GL_SWIZZLE_STQ_DQ_ATI             0x8979
< #define GL_SWIZZLE_STRQ_ATI               0x897A
< #define GL_SWIZZLE_STRQ_DQ_ATI            0x897B
< #define GL_RED_BIT_ATI                    0x00000001
< #define GL_GREEN_BIT_ATI                  0x00000002
< #define GL_BLUE_BIT_ATI                   0x00000004
< #define GL_2X_BIT_ATI                     0x00000001
< #define GL_4X_BIT_ATI                     0x00000002
< #define GL_8X_BIT_ATI                     0x00000004
< #define GL_HALF_BIT_ATI                   0x00000008
< #define GL_QUARTER_BIT_ATI                0x00000010
< #define GL_EIGHTH_BIT_ATI                 0x00000020
< #define GL_SATURATE_BIT_ATI               0x00000040
< #define GL_COMP_BIT_ATI                   0x00000002
< #define GL_NEGATE_BIT_ATI                 0x00000004
< #define GL_BIAS_BIT_ATI                   0x00000008
< #endif
< 
< #ifndef GL_ATI_pn_triangles
< #define GL_PN_TRIANGLES_ATI               0x87F0
< #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
< #define GL_PN_TRIANGLES_POINT_MODE_ATI    0x87F2
< #define GL_PN_TRIANGLES_NORMAL_MODE_ATI   0x87F3
< #define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
< #define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
< #define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
< #define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
< #define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
< #endif
< 
< #ifndef GL_ATI_vertex_array_object
< #define GL_STATIC_ATI                     0x8760
< #define GL_DYNAMIC_ATI                    0x8761
< #define GL_PRESERVE_ATI                   0x8762
< #define GL_DISCARD_ATI                    0x8763
< #define GL_OBJECT_BUFFER_SIZE_ATI         0x8764
< #define GL_OBJECT_BUFFER_USAGE_ATI        0x8765
< #define GL_ARRAY_OBJECT_BUFFER_ATI        0x8766
< #define GL_ARRAY_OBJECT_OFFSET_ATI        0x8767
< #endif
< 
< #ifndef GL_EXT_vertex_shader
< #define GL_VERTEX_SHADER_EXT              0x8780
< #define GL_VERTEX_SHADER_BINDING_EXT      0x8781
< #define GL_OP_INDEX_EXT                   0x8782
< #define GL_OP_NEGATE_EXT                  0x8783
< #define GL_OP_DOT3_EXT                    0x8784
< #define GL_OP_DOT4_EXT                    0x8785
< #define GL_OP_MUL_EXT                     0x8786
< #define GL_OP_ADD_EXT                     0x8787
< #define GL_OP_MADD_EXT                    0x8788
< #define GL_OP_FRAC_EXT                    0x8789
< #define GL_OP_MAX_EXT                     0x878A
< #define GL_OP_MIN_EXT                     0x878B
< #define GL_OP_SET_GE_EXT                  0x878C
< #define GL_OP_SET_LT_EXT                  0x878D
< #define GL_OP_CLAMP_EXT                   0x878E
< #define GL_OP_FLOOR_EXT                   0x878F
< #define GL_OP_ROUND_EXT                   0x8790
< #define GL_OP_EXP_BASE_2_EXT              0x8791
< #define GL_OP_LOG_BASE_2_EXT              0x8792
< #define GL_OP_POWER_EXT                   0x8793
< #define GL_OP_RECIP_EXT                   0x8794
< #define GL_OP_RECIP_SQRT_EXT              0x8795
< #define GL_OP_SUB_EXT                     0x8796
< #define GL_OP_CROSS_PRODUCT_EXT           0x8797
< #define GL_OP_MULTIPLY_MATRIX_EXT         0x8798
< #define GL_OP_MOV_EXT                     0x8799
< #define GL_OUTPUT_VERTEX_EXT              0x879A
< #define GL_OUTPUT_COLOR0_EXT              0x879B
< #define GL_OUTPUT_COLOR1_EXT              0x879C
< #define GL_OUTPUT_TEXTURE_COORD0_EXT      0x879D
< #define GL_OUTPUT_TEXTURE_COORD1_EXT      0x879E
< #define GL_OUTPUT_TEXTURE_COORD2_EXT      0x879F
< #define GL_OUTPUT_TEXTURE_COORD3_EXT      0x87A0
< #define GL_OUTPUT_TEXTURE_COORD4_EXT      0x87A1
< #define GL_OUTPUT_TEXTURE_COORD5_EXT      0x87A2
< #define GL_OUTPUT_TEXTURE_COORD6_EXT      0x87A3
< #define GL_OUTPUT_TEXTURE_COORD7_EXT      0x87A4
< #define GL_OUTPUT_TEXTURE_COORD8_EXT      0x87A5
< #define GL_OUTPUT_TEXTURE_COORD9_EXT      0x87A6
< #define GL_OUTPUT_TEXTURE_COORD10_EXT     0x87A7
< #define GL_OUTPUT_TEXTURE_COORD11_EXT     0x87A8
< #define GL_OUTPUT_TEXTURE_COORD12_EXT     0x87A9
< #define GL_OUTPUT_TEXTURE_COORD13_EXT     0x87AA
< #define GL_OUTPUT_TEXTURE_COORD14_EXT     0x87AB
< #define GL_OUTPUT_TEXTURE_COORD15_EXT     0x87AC
< #define GL_OUTPUT_TEXTURE_COORD16_EXT     0x87AD
< #define GL_OUTPUT_TEXTURE_COORD17_EXT     0x87AE
< #define GL_OUTPUT_TEXTURE_COORD18_EXT     0x87AF
< #define GL_OUTPUT_TEXTURE_COORD19_EXT     0x87B0
< #define GL_OUTPUT_TEXTURE_COORD20_EXT     0x87B1
< #define GL_OUTPUT_TEXTURE_COORD21_EXT     0x87B2
< #define GL_OUTPUT_TEXTURE_COORD22_EXT     0x87B3
< #define GL_OUTPUT_TEXTURE_COORD23_EXT     0x87B4
< #define GL_OUTPUT_TEXTURE_COORD24_EXT     0x87B5
< #define GL_OUTPUT_TEXTURE_COORD25_EXT     0x87B6
< #define GL_OUTPUT_TEXTURE_COORD26_EXT     0x87B7
< #define GL_OUTPUT_TEXTURE_COORD27_EXT     0x87B8
< #define GL_OUTPUT_TEXTURE_COORD28_EXT     0x87B9
< #define GL_OUTPUT_TEXTURE_COORD29_EXT     0x87BA
< #define GL_OUTPUT_TEXTURE_COORD30_EXT     0x87BB
< #define GL_OUTPUT_TEXTURE_COORD31_EXT     0x87BC
< #define GL_OUTPUT_FOG_EXT                 0x87BD
< #define GL_SCALAR_EXT                     0x87BE
< #define GL_VECTOR_EXT                     0x87BF
< #define GL_MATRIX_EXT                     0x87C0
< #define GL_VARIANT_EXT                    0x87C1
< #define GL_INVARIANT_EXT                  0x87C2
< #define GL_LOCAL_CONSTANT_EXT             0x87C3
< #define GL_LOCAL_EXT                      0x87C4
< #define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
< #define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
< #define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
< #define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
< #define GL_MAX_VERTEX_SHADER_LOCALS_EXT   0x87C9
< #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
< #define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
< #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
< #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
< #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
< #define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
< #define GL_VERTEX_SHADER_VARIANTS_EXT     0x87D0
< #define GL_VERTEX_SHADER_INVARIANTS_EXT   0x87D1
< #define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
< #define GL_VERTEX_SHADER_LOCALS_EXT       0x87D3
< #define GL_VERTEX_SHADER_OPTIMIZED_EXT    0x87D4
< #define GL_X_EXT                          0x87D5
< #define GL_Y_EXT                          0x87D6
< #define GL_Z_EXT                          0x87D7
< #define GL_W_EXT                          0x87D8
< #define GL_NEGATIVE_X_EXT                 0x87D9
< #define GL_NEGATIVE_Y_EXT                 0x87DA
< #define GL_NEGATIVE_Z_EXT                 0x87DB
< #define GL_NEGATIVE_W_EXT                 0x87DC
< #define GL_ZERO_EXT                       0x87DD
< #define GL_ONE_EXT                        0x87DE
< #define GL_NEGATIVE_ONE_EXT               0x87DF
< #define GL_NORMALIZED_RANGE_EXT           0x87E0
< #define GL_FULL_RANGE_EXT                 0x87E1
< #define GL_CURRENT_VERTEX_EXT             0x87E2
< #define GL_MVP_MATRIX_EXT                 0x87E3
< #define GL_VARIANT_VALUE_EXT              0x87E4
< #define GL_VARIANT_DATATYPE_EXT           0x87E5
< #define GL_VARIANT_ARRAY_STRIDE_EXT       0x87E6
< #define GL_VARIANT_ARRAY_TYPE_EXT         0x87E7
< #define GL_VARIANT_ARRAY_EXT              0x87E8
< #define GL_VARIANT_ARRAY_POINTER_EXT      0x87E9
< #define GL_INVARIANT_VALUE_EXT            0x87EA
< #define GL_INVARIANT_DATATYPE_EXT         0x87EB
< #define GL_LOCAL_CONSTANT_VALUE_EXT       0x87EC
< #define GL_LOCAL_CONSTANT_DATATYPE_EXT    0x87ED
< #endif
< 
< #ifndef GL_ATI_vertex_streams
< #define GL_MAX_VERTEX_STREAMS_ATI         0x876B
< #define GL_VERTEX_STREAM0_ATI             0x876C
< #define GL_VERTEX_STREAM1_ATI             0x876D
< #define GL_VERTEX_STREAM2_ATI             0x876E
< #define GL_VERTEX_STREAM3_ATI             0x876F
< #define GL_VERTEX_STREAM4_ATI             0x8770
< #define GL_VERTEX_STREAM5_ATI             0x8771
< #define GL_VERTEX_STREAM6_ATI             0x8772
< #define GL_VERTEX_STREAM7_ATI             0x8773
< #define GL_VERTEX_SOURCE_ATI              0x8774
< #endif
< 
< #ifndef GL_ATI_element_array
< #define GL_ELEMENT_ARRAY_ATI              0x8768
< #define GL_ELEMENT_ARRAY_TYPE_ATI         0x8769
< #define GL_ELEMENT_ARRAY_POINTER_ATI      0x876A
< #endif
< 
< #ifndef GL_SUN_mesh_array
< #define GL_QUAD_MESH_SUN                  0x8614
< #define GL_TRIANGLE_MESH_SUN              0x8615
< #endif
< 
< #ifndef GL_SUN_slice_accum
< #define GL_SLICE_ACCUM_SUN                0x85CC
< #endif
< 
< #ifndef GL_NV_multisample_filter_hint
< #define GL_MULTISAMPLE_FILTER_HINT_NV     0x8534
< #endif
< 
< #ifndef GL_NV_depth_clamp
< #define GL_DEPTH_CLAMP_NV                 0x864F
< #endif
< 
< #ifndef GL_NV_occlusion_query
< #define GL_PIXEL_COUNTER_BITS_NV          0x8864
< #define GL_CURRENT_OCCLUSION_QUERY_ID_NV  0x8865
< #define GL_PIXEL_COUNT_NV                 0x8866
< #define GL_PIXEL_COUNT_AVAILABLE_NV       0x8867
< #endif
< 
< #ifndef GL_NV_point_sprite
< #define GL_POINT_SPRITE_NV                0x8861
< #define GL_COORD_REPLACE_NV               0x8862
< #define GL_POINT_SPRITE_R_MODE_NV         0x8863
< #endif
< 
< #ifndef GL_NV_texture_shader3
< #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
< #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
< #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
< #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
< #define GL_OFFSET_HILO_TEXTURE_2D_NV      0x8854
< #define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
< #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
< #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
< #define GL_DEPENDENT_HILO_TEXTURE_2D_NV   0x8858
< #define GL_DEPENDENT_RGB_TEXTURE_3D_NV    0x8859
< #define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
< #define GL_DOT_PRODUCT_PASS_THROUGH_NV    0x885B
< #define GL_DOT_PRODUCT_TEXTURE_1D_NV      0x885C
< #define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
< #define GL_HILO8_NV                       0x885E
< #define GL_SIGNED_HILO8_NV                0x885F
< #define GL_FORCE_BLUE_TO_ONE_NV           0x8860
< #endif
< 
< #ifndef GL_NV_vertex_program1_1
< #endif
< 
< #ifndef GL_EXT_shadow_funcs
< #endif
< 
< #ifndef GL_EXT_stencil_two_side
< #define GL_STENCIL_TEST_TWO_SIDE_EXT      0x8910
< #define GL_ACTIVE_STENCIL_FACE_EXT        0x8911
< #endif
< 
< #ifndef GL_ATI_text_fragment_shader
< #define GL_TEXT_FRAGMENT_SHADER_ATI       0x8200
< #endif
< 
< #ifndef GL_APPLE_client_storage
< #define GL_UNPACK_CLIENT_STORAGE_APPLE    0x85B2
< #endif
< 
< #ifndef GL_APPLE_element_array
< #define GL_ELEMENT_ARRAY_APPLE            0x8A0C
< #define GL_ELEMENT_ARRAY_TYPE_APPLE       0x8A0D
< #define GL_ELEMENT_ARRAY_POINTER_APPLE    0x8A0E
< #endif
< 
< #ifndef GL_APPLE_fence
< #define GL_DRAW_PIXELS_APPLE              0x8A0A
< #define GL_FENCE_APPLE                    0x8A0B
< #endif
< 
< #ifndef GL_APPLE_vertex_array_object
< #define GL_VERTEX_ARRAY_BINDING_APPLE     0x85B5
< #endif
< 
< #ifndef GL_APPLE_vertex_array_range
< #define GL_VERTEX_ARRAY_RANGE_APPLE       0x851D
< #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
< #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
< #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
< #define GL_STORAGE_CLIENT_APPLE           0x85B4
< #define GL_STORAGE_CACHED_APPLE           0x85BE
< #define GL_STORAGE_SHARED_APPLE           0x85BF
< #endif
< 
< #ifndef GL_APPLE_ycbcr_422
< #define GL_YCBCR_422_APPLE                0x85B9
< #define GL_UNSIGNED_SHORT_8_8_APPLE       0x85BA
< #define GL_UNSIGNED_SHORT_8_8_REV_APPLE   0x85BB
< #endif
< 
< #ifndef GL_S3_s3tc
< #define GL_RGB_S3TC                       0x83A0
< #define GL_RGB4_S3TC                      0x83A1
< #define GL_RGBA_S3TC                      0x83A2
< #define GL_RGBA4_S3TC                     0x83A3
< #endif
< 
< #ifndef GL_ATI_draw_buffers
< #define GL_MAX_DRAW_BUFFERS_ATI           0x8824
< #define GL_DRAW_BUFFER0_ATI               0x8825
< #define GL_DRAW_BUFFER1_ATI               0x8826
< #define GL_DRAW_BUFFER2_ATI               0x8827
< #define GL_DRAW_BUFFER3_ATI               0x8828
< #define GL_DRAW_BUFFER4_ATI               0x8829
< #define GL_DRAW_BUFFER5_ATI               0x882A
< #define GL_DRAW_BUFFER6_ATI               0x882B
< #define GL_DRAW_BUFFER7_ATI               0x882C
< #define GL_DRAW_BUFFER8_ATI               0x882D
< #define GL_DRAW_BUFFER9_ATI               0x882E
< #define GL_DRAW_BUFFER10_ATI              0x882F
< #define GL_DRAW_BUFFER11_ATI              0x8830
< #define GL_DRAW_BUFFER12_ATI              0x8831
< #define GL_DRAW_BUFFER13_ATI              0x8832
< #define GL_DRAW_BUFFER14_ATI              0x8833
< #define GL_DRAW_BUFFER15_ATI              0x8834
< #endif
< 
< #ifndef GL_ATI_pixel_format_float
< #define GL_TYPE_RGBA_FLOAT_ATI            0x8820
< #define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
< #endif
< 
< #ifndef GL_ATI_texture_env_combine3
< #define GL_MODULATE_ADD_ATI               0x8744
< #define GL_MODULATE_SIGNED_ADD_ATI        0x8745
< #define GL_MODULATE_SUBTRACT_ATI          0x8746
< #endif
< 
< #ifndef GL_ATI_texture_float
< #define GL_RGBA_FLOAT32_ATI               0x8814
< #define GL_RGB_FLOAT32_ATI                0x8815
< #define GL_ALPHA_FLOAT32_ATI              0x8816
< #define GL_INTENSITY_FLOAT32_ATI          0x8817
< #define GL_LUMINANCE_FLOAT32_ATI          0x8818
< #define GL_LUMINANCE_ALPHA_FLOAT32_ATI    0x8819
< #define GL_RGBA_FLOAT16_ATI               0x881A
< #define GL_RGB_FLOAT16_ATI                0x881B
< #define GL_ALPHA_FLOAT16_ATI              0x881C
< #define GL_INTENSITY_FLOAT16_ATI          0x881D
< #define GL_LUMINANCE_FLOAT16_ATI          0x881E
< #define GL_LUMINANCE_ALPHA_FLOAT16_ATI    0x881F
< #endif
< 
< #ifndef GL_NV_float_buffer
< #define GL_FLOAT_R_NV                     0x8880
< #define GL_FLOAT_RG_NV                    0x8881
< #define GL_FLOAT_RGB_NV                   0x8882
< #define GL_FLOAT_RGBA_NV                  0x8883
< #define GL_FLOAT_R16_NV                   0x8884
< #define GL_FLOAT_R32_NV                   0x8885
< #define GL_FLOAT_RG16_NV                  0x8886
< #define GL_FLOAT_RG32_NV                  0x8887
< #define GL_FLOAT_RGB16_NV                 0x8888
< #define GL_FLOAT_RGB32_NV                 0x8889
< #define GL_FLOAT_RGBA16_NV                0x888A
< #define GL_FLOAT_RGBA32_NV                0x888B
< #define GL_TEXTURE_FLOAT_COMPONENTS_NV    0x888C
< #define GL_FLOAT_CLEAR_COLOR_VALUE_NV     0x888D
< #define GL_FLOAT_RGBA_MODE_NV             0x888E
< #endif
< 
< #ifndef GL_NV_fragment_program
< #define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
< #define GL_FRAGMENT_PROGRAM_NV            0x8870
< #define GL_MAX_TEXTURE_COORDS_NV          0x8871
< #define GL_MAX_TEXTURE_IMAGE_UNITS_NV     0x8872
< #define GL_FRAGMENT_PROGRAM_BINDING_NV    0x8873
< #define GL_PROGRAM_ERROR_STRING_NV        0x8874
< #endif
< 
< #ifndef GL_NV_half_float
< #define GL_HALF_FLOAT_NV                  0x140B
< #endif
< 
< #ifndef GL_NV_pixel_data_range
< #define GL_WRITE_PIXEL_DATA_RANGE_NV      0x8878
< #define GL_READ_PIXEL_DATA_RANGE_NV       0x8879
< #define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
< #define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
< #define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
< #define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
< #endif
< 
< #ifndef GL_NV_primitive_restart
< #define GL_PRIMITIVE_RESTART_NV           0x8558
< #define GL_PRIMITIVE_RESTART_INDEX_NV     0x8559
< #endif
< 
< #ifndef GL_NV_texture_expand_normal
< #define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
< #endif
< 
< #ifndef GL_NV_vertex_program2
< #endif
< 
< #ifndef GL_ATI_map_object_buffer
< #endif
< 
< #ifndef GL_ATI_separate_stencil
< #define GL_STENCIL_BACK_FUNC_ATI          0x8800
< #define GL_STENCIL_BACK_FAIL_ATI          0x8801
< #define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
< #define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
< #endif
< 
< #ifndef GL_ATI_vertex_attrib_array_object
< #endif
< 
< #ifndef GL_OES_read_format
< #define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
< #define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
< #endif
< 
< #ifndef GL_EXT_depth_bounds_test
< #define GL_DEPTH_BOUNDS_TEST_EXT          0x8890
< #define GL_DEPTH_BOUNDS_EXT               0x8891
< #endif
< 
< #ifndef GL_EXT_texture_mirror_clamp
< #define GL_MIRROR_CLAMP_EXT               0x8742
< #define GL_MIRROR_CLAMP_TO_EDGE_EXT       0x8743
< #define GL_MIRROR_CLAMP_TO_BORDER_EXT     0x8912
< #endif
< 
< #ifndef GL_EXT_blend_equation_separate
< #define GL_BLEND_EQUATION_RGB_EXT         0x8009
< #define GL_BLEND_EQUATION_ALPHA_EXT       0x883D
< #endif
< 
< #ifndef GL_MESA_pack_invert
< #define GL_PACK_INVERT_MESA               0x8758
< #endif
< 
< #ifndef GL_MESA_ycbcr_texture
< #define GL_UNSIGNED_SHORT_8_8_MESA        0x85BA
< #define GL_UNSIGNED_SHORT_8_8_REV_MESA    0x85BB
< #define GL_YCBCR_MESA                     0x8757
< #endif
< 
< #ifndef GL_EXT_pixel_buffer_object
< #define GL_PIXEL_PACK_BUFFER_EXT          0x88EB
< #define GL_PIXEL_UNPACK_BUFFER_EXT        0x88EC
< #define GL_PIXEL_PACK_BUFFER_BINDING_EXT  0x88ED
< #define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
< #endif
< 
< #ifndef GL_NV_fragment_program_option
< #endif
< 
< #ifndef GL_NV_fragment_program2
< #define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
< #define GL_MAX_PROGRAM_CALL_DEPTH_NV      0x88F5
< #define GL_MAX_PROGRAM_IF_DEPTH_NV        0x88F6
< #define GL_MAX_PROGRAM_LOOP_DEPTH_NV      0x88F7
< #define GL_MAX_PROGRAM_LOOP_COUNT_NV      0x88F8
< #endif
< 
< #ifndef GL_NV_vertex_program2_option
< /* reuse GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV */
< /* reuse GL_MAX_PROGRAM_CALL_DEPTH_NV */
< #endif
< 
< #ifndef GL_NV_vertex_program3
< /* reuse GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB */
< #endif
< 
< #ifndef GL_EXT_framebuffer_object
< #define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
< #define GL_MAX_RENDERBUFFER_SIZE_EXT      0x84E8
< #define GL_FRAMEBUFFER_BINDING_EXT        0x8CA6
< #define GL_RENDERBUFFER_BINDING_EXT       0x8CA7
< #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
< #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
< #define GL_FRAMEBUFFER_COMPLETE_EXT       0x8CD5
< #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
< #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
< #define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
< #define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
< #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
< #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
< #define GL_FRAMEBUFFER_UNSUPPORTED_EXT    0x8CDD
< #define GL_MAX_COLOR_ATTACHMENTS_EXT      0x8CDF
< #define GL_COLOR_ATTACHMENT0_EXT          0x8CE0
< #define GL_COLOR_ATTACHMENT1_EXT          0x8CE1
< #define GL_COLOR_ATTACHMENT2_EXT          0x8CE2
< #define GL_COLOR_ATTACHMENT3_EXT          0x8CE3
< #define GL_COLOR_ATTACHMENT4_EXT          0x8CE4
< #define GL_COLOR_ATTACHMENT5_EXT          0x8CE5
< #define GL_COLOR_ATTACHMENT6_EXT          0x8CE6
< #define GL_COLOR_ATTACHMENT7_EXT          0x8CE7
< #define GL_COLOR_ATTACHMENT8_EXT          0x8CE8
< #define GL_COLOR_ATTACHMENT9_EXT          0x8CE9
< #define GL_COLOR_ATTACHMENT10_EXT         0x8CEA
< #define GL_COLOR_ATTACHMENT11_EXT         0x8CEB
< #define GL_COLOR_ATTACHMENT12_EXT         0x8CEC
< #define GL_COLOR_ATTACHMENT13_EXT         0x8CED
< #define GL_COLOR_ATTACHMENT14_EXT         0x8CEE
< #define GL_COLOR_ATTACHMENT15_EXT         0x8CEF
< #define GL_DEPTH_ATTACHMENT_EXT           0x8D00
< #define GL_STENCIL_ATTACHMENT_EXT         0x8D20
< #define GL_FRAMEBUFFER_EXT                0x8D40
< #define GL_RENDERBUFFER_EXT               0x8D41
< #define GL_RENDERBUFFER_WIDTH_EXT         0x8D42
< #define GL_RENDERBUFFER_HEIGHT_EXT        0x8D43
< #define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
< #define GL_STENCIL_INDEX1_EXT             0x8D46
< #define GL_STENCIL_INDEX4_EXT             0x8D47
< #define GL_STENCIL_INDEX8_EXT             0x8D48
< #define GL_STENCIL_INDEX16_EXT            0x8D49
< #define GL_RENDERBUFFER_RED_SIZE_EXT      0x8D50
< #define GL_RENDERBUFFER_GREEN_SIZE_EXT    0x8D51
< #define GL_RENDERBUFFER_BLUE_SIZE_EXT     0x8D52
< #define GL_RENDERBUFFER_ALPHA_SIZE_EXT    0x8D53
< #define GL_RENDERBUFFER_DEPTH_SIZE_EXT    0x8D54
< #define GL_RENDERBUFFER_STENCIL_SIZE_EXT  0x8D55
< #endif
< 
< #ifndef GL_GREMEDY_string_marker
< #endif
< 
< #ifndef GL_EXT_packed_depth_stencil
< #define GL_DEPTH_STENCIL_EXT              0x84F9
< #define GL_UNSIGNED_INT_24_8_EXT          0x84FA
< #define GL_DEPTH24_STENCIL8_EXT           0x88F0
< #define GL_TEXTURE_STENCIL_SIZE_EXT       0x88F1
< #endif
< 
< #ifndef GL_EXT_stencil_clear_tag
< #define GL_STENCIL_TAG_BITS_EXT           0x88F2
< #define GL_STENCIL_CLEAR_TAG_VALUE_EXT    0x88F3
< #endif
< 
< #ifndef GL_EXT_texture_sRGB
< #define GL_SRGB_EXT                       0x8C40
< #define GL_SRGB8_EXT                      0x8C41
< #define GL_SRGB_ALPHA_EXT                 0x8C42
< #define GL_SRGB8_ALPHA8_EXT               0x8C43
< #define GL_SLUMINANCE_ALPHA_EXT           0x8C44
< #define GL_SLUMINANCE8_ALPHA8_EXT         0x8C45
< #define GL_SLUMINANCE_EXT                 0x8C46
< #define GL_SLUMINANCE8_EXT                0x8C47
< #define GL_COMPRESSED_SRGB_EXT            0x8C48
< #define GL_COMPRESSED_SRGB_ALPHA_EXT      0x8C49
< #define GL_COMPRESSED_SLUMINANCE_EXT      0x8C4A
< #define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
< #define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT  0x8C4C
< #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
< #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
< #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
< #endif
< 
< #ifndef GL_EXT_framebuffer_blit
< #define GL_READ_FRAMEBUFFER_EXT           0x8CA8
< #define GL_DRAW_FRAMEBUFFER_EXT           0x8CA9
< #define GL_DRAW_FRAMEBUFFER_BINDING_EXT   GL_FRAMEBUFFER_BINDING_EXT
< #define GL_READ_FRAMEBUFFER_BINDING_EXT   0x8CAA
< #endif
< 
< #ifndef GL_EXT_framebuffer_multisample
< #define GL_RENDERBUFFER_SAMPLES_EXT       0x8CAB
< #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
< #define GL_MAX_SAMPLES_EXT                0x8D57
< #endif
< 
< #ifndef GL_MESAX_texture_stack
< #define GL_TEXTURE_1D_STACK_MESAX         0x8759
< #define GL_TEXTURE_2D_STACK_MESAX         0x875A
< #define GL_PROXY_TEXTURE_1D_STACK_MESAX   0x875B
< #define GL_PROXY_TEXTURE_2D_STACK_MESAX   0x875C
< #define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
< #define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
< #endif
< 
< #ifndef GL_EXT_timer_query
< #define GL_TIME_ELAPSED_EXT               0x88BF
< #endif
< 
< #ifndef GL_EXT_gpu_program_parameters
< #endif
< 
< #ifndef GL_APPLE_flush_buffer_range
< #define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
< #define GL_BUFFER_FLUSHING_UNMAP_APPLE    0x8A13
< #endif
< 
< #ifndef GL_NV_gpu_program4
< #define GL_MIN_PROGRAM_TEXEL_OFFSET_NV    0x8904
< #define GL_MAX_PROGRAM_TEXEL_OFFSET_NV    0x8905
< #define GL_PROGRAM_ATTRIB_COMPONENTS_NV   0x8906
< #define GL_PROGRAM_RESULT_COMPONENTS_NV   0x8907
< #define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
< #define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
< #define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
< #define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
< #endif
< 
< #ifndef GL_NV_geometry_program4
< #define GL_LINES_ADJACENCY_EXT            0x000A
< #define GL_LINE_STRIP_ADJACENCY_EXT       0x000B
< #define GL_TRIANGLES_ADJACENCY_EXT        0x000C
< #define GL_TRIANGLE_STRIP_ADJACENCY_EXT   0x000D
< #define GL_GEOMETRY_PROGRAM_NV            0x8C26
< #define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
< #define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
< #define GL_GEOMETRY_VERTICES_OUT_EXT      0x8DDA
< #define GL_GEOMETRY_INPUT_TYPE_EXT        0x8DDB
< #define GL_GEOMETRY_OUTPUT_TYPE_EXT       0x8DDC
< #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
< #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
< #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
< #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
< #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
< #define GL_PROGRAM_POINT_SIZE_EXT         0x8642
< #endif
< 
< #ifndef GL_EXT_geometry_shader4
< #define GL_GEOMETRY_SHADER_EXT            0x8DD9
< /* reuse GL_GEOMETRY_VERTICES_OUT_EXT */
< /* reuse GL_GEOMETRY_INPUT_TYPE_EXT */
< /* reuse GL_GEOMETRY_OUTPUT_TYPE_EXT */
< /* reuse GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT */
< #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
< #define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
< #define GL_MAX_VARYING_COMPONENTS_EXT     0x8B4B
< #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
< #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
< #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
< /* reuse GL_LINES_ADJACENCY_EXT */
< /* reuse GL_LINE_STRIP_ADJACENCY_EXT */
< /* reuse GL_TRIANGLES_ADJACENCY_EXT */
< /* reuse GL_TRIANGLE_STRIP_ADJACENCY_EXT */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT */
< /* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT */
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
< /* reuse GL_PROGRAM_POINT_SIZE_EXT */
< #endif
< 
< #ifndef GL_NV_vertex_program4
< #define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
< #endif
< 
< #ifndef GL_EXT_gpu_shader4
< #define GL_SAMPLER_1D_ARRAY_EXT           0x8DC0
< #define GL_SAMPLER_2D_ARRAY_EXT           0x8DC1
< #define GL_SAMPLER_BUFFER_EXT             0x8DC2
< #define GL_SAMPLER_1D_ARRAY_SHADOW_EXT    0x8DC3
< #define GL_SAMPLER_2D_ARRAY_SHADOW_EXT    0x8DC4
< #define GL_SAMPLER_CUBE_SHADOW_EXT        0x8DC5
< #define GL_UNSIGNED_INT_VEC2_EXT          0x8DC6
< #define GL_UNSIGNED_INT_VEC3_EXT          0x8DC7
< #define GL_UNSIGNED_INT_VEC4_EXT          0x8DC8
< #define GL_INT_SAMPLER_1D_EXT             0x8DC9
< #define GL_INT_SAMPLER_2D_EXT             0x8DCA
< #define GL_INT_SAMPLER_3D_EXT             0x8DCB
< #define GL_INT_SAMPLER_CUBE_EXT           0x8DCC
< #define GL_INT_SAMPLER_2D_RECT_EXT        0x8DCD
< #define GL_INT_SAMPLER_1D_ARRAY_EXT       0x8DCE
< #define GL_INT_SAMPLER_2D_ARRAY_EXT       0x8DCF
< #define GL_INT_SAMPLER_BUFFER_EXT         0x8DD0
< #define GL_UNSIGNED_INT_SAMPLER_1D_EXT    0x8DD1
< #define GL_UNSIGNED_INT_SAMPLER_2D_EXT    0x8DD2
< #define GL_UNSIGNED_INT_SAMPLER_3D_EXT    0x8DD3
< #define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT  0x8DD4
< #define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
< #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
< #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
< #define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
< #endif
< 
< #ifndef GL_EXT_draw_instanced
< #endif
< 
< #ifndef GL_EXT_packed_float
< #define GL_R11F_G11F_B10F_EXT             0x8C3A
< #define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
< #define GL_RGBA_SIGNED_COMPONENTS_EXT     0x8C3C
< #endif
< 
< #ifndef GL_EXT_texture_array
< #define GL_TEXTURE_1D_ARRAY_EXT           0x8C18
< #define GL_PROXY_TEXTURE_1D_ARRAY_EXT     0x8C19
< #define GL_TEXTURE_2D_ARRAY_EXT           0x8C1A
< #define GL_PROXY_TEXTURE_2D_ARRAY_EXT     0x8C1B
< #define GL_TEXTURE_BINDING_1D_ARRAY_EXT   0x8C1C
< #define GL_TEXTURE_BINDING_2D_ARRAY_EXT   0x8C1D
< #define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT   0x88FF
< #define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
< /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
< #endif
< 
< #ifndef GL_EXT_texture_buffer_object
< #define GL_TEXTURE_BUFFER_EXT             0x8C2A
< #define GL_MAX_TEXTURE_BUFFER_SIZE_EXT    0x8C2B
< #define GL_TEXTURE_BINDING_BUFFER_EXT     0x8C2C
< #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
< #define GL_TEXTURE_BUFFER_FORMAT_EXT      0x8C2E
< #endif
< 
< #ifndef GL_EXT_texture_compression_latc
< #define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
< #define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
< #define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
< #define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
< #endif
< 
< #ifndef GL_EXT_texture_compression_rgtc
< #define GL_COMPRESSED_RED_RGTC1_EXT       0x8DBB
< #define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
< #define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
< #define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
< #endif
< 
< #ifndef GL_EXT_texture_shared_exponent
< #define GL_RGB9_E5_EXT                    0x8C3D
< #define GL_UNSIGNED_INT_5_9_9_9_REV_EXT   0x8C3E
< #define GL_TEXTURE_SHARED_SIZE_EXT        0x8C3F
< #endif
< 
< #ifndef GL_NV_depth_buffer_float
< #define GL_DEPTH_COMPONENT32F_NV          0x8DAB
< #define GL_DEPTH32F_STENCIL8_NV           0x8DAC
< #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
< #define GL_DEPTH_BUFFER_FLOAT_MODE_NV     0x8DAF
< #endif
< 
< #ifndef GL_NV_fragment_program4
< #endif
< 
< #ifndef GL_NV_framebuffer_multisample_coverage
< #define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
< #define GL_RENDERBUFFER_COLOR_SAMPLES_NV  0x8E10
< #define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
< #define GL_MULTISAMPLE_COVERAGE_MODES_NV  0x8E12
< #endif
< 
< #ifndef GL_EXT_framebuffer_sRGB
< #define GL_FRAMEBUFFER_SRGB_EXT           0x8DB9
< #define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x8DBA
< #endif
< 
< #ifndef GL_NV_geometry_shader4
< #endif
< 
< #ifndef GL_NV_parameter_buffer_object
< #define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
< #define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
< #define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
< #define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
< #define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
< #endif
< 
< #ifndef GL_EXT_draw_buffers2
< #endif
< 
< #ifndef GL_NV_transform_feedback
< #define GL_BACK_PRIMARY_COLOR_NV          0x8C77
< #define GL_BACK_SECONDARY_COLOR_NV        0x8C78
< #define GL_TEXTURE_COORD_NV               0x8C79
< #define GL_CLIP_DISTANCE_NV               0x8C7A
< #define GL_VERTEX_ID_NV                   0x8C7B
< #define GL_PRIMITIVE_ID_NV                0x8C7C
< #define GL_GENERIC_ATTRIB_NV              0x8C7D
< #define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV  0x8C7E
< #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
< #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
< #define GL_ACTIVE_VARYINGS_NV             0x8C81
< #define GL_ACTIVE_VARYING_MAX_LENGTH_NV   0x8C82
< #define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
< #define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
< #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
< #define GL_TRANSFORM_FEEDBACK_RECORD_NV   0x8C86
< #define GL_PRIMITIVES_GENERATED_NV        0x8C87
< #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
< #define GL_RASTERIZER_DISCARD_NV          0x8C89
< #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV 0x8C8A
< #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
< #define GL_INTERLEAVED_ATTRIBS_NV         0x8C8C
< #define GL_SEPARATE_ATTRIBS_NV            0x8C8D
< #define GL_TRANSFORM_FEEDBACK_BUFFER_NV   0x8C8E
< #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
< #define GL_LAYER_NV                       0x8DAA
< #define GL_NEXT_BUFFER_NV                 -2
< #define GL_SKIP_COMPONENTS4_NV            -3
< #define GL_SKIP_COMPONENTS3_NV            -4
< #define GL_SKIP_COMPONENTS2_NV            -5
< #define GL_SKIP_COMPONENTS1_NV            -6
< #endif
< 
< #ifndef GL_EXT_bindable_uniform
< #define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
< #define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
< #define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
< #define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT  0x8DED
< #define GL_UNIFORM_BUFFER_EXT             0x8DEE
< #define GL_UNIFORM_BUFFER_BINDING_EXT     0x8DEF
< #endif
< 
< #ifndef GL_EXT_texture_integer
< #define GL_RGBA32UI_EXT                   0x8D70
< #define GL_RGB32UI_EXT                    0x8D71
< #define GL_ALPHA32UI_EXT                  0x8D72
< #define GL_INTENSITY32UI_EXT              0x8D73
< #define GL_LUMINANCE32UI_EXT              0x8D74
< #define GL_LUMINANCE_ALPHA32UI_EXT        0x8D75
< #define GL_RGBA16UI_EXT                   0x8D76
< #define GL_RGB16UI_EXT                    0x8D77
< #define GL_ALPHA16UI_EXT                  0x8D78
< #define GL_INTENSITY16UI_EXT              0x8D79
< #define GL_LUMINANCE16UI_EXT              0x8D7A
< #define GL_LUMINANCE_ALPHA16UI_EXT        0x8D7B
< #define GL_RGBA8UI_EXT                    0x8D7C
< #define GL_RGB8UI_EXT                     0x8D7D
< #define GL_ALPHA8UI_EXT                   0x8D7E
< #define GL_INTENSITY8UI_EXT               0x8D7F
< #define GL_LUMINANCE8UI_EXT               0x8D80
< #define GL_LUMINANCE_ALPHA8UI_EXT         0x8D81
< #define GL_RGBA32I_EXT                    0x8D82
< #define GL_RGB32I_EXT                     0x8D83
< #define GL_ALPHA32I_EXT                   0x8D84
< #define GL_INTENSITY32I_EXT               0x8D85
< #define GL_LUMINANCE32I_EXT               0x8D86
< #define GL_LUMINANCE_ALPHA32I_EXT         0x8D87
< #define GL_RGBA16I_EXT                    0x8D88
< #define GL_RGB16I_EXT                     0x8D89
< #define GL_ALPHA16I_EXT                   0x8D8A
< #define GL_INTENSITY16I_EXT               0x8D8B
< #define GL_LUMINANCE16I_EXT               0x8D8C
< #define GL_LUMINANCE_ALPHA16I_EXT         0x8D8D
< #define GL_RGBA8I_EXT                     0x8D8E
< #define GL_RGB8I_EXT                      0x8D8F
< #define GL_ALPHA8I_EXT                    0x8D90
< #define GL_INTENSITY8I_EXT                0x8D91
< #define GL_LUMINANCE8I_EXT                0x8D92
< #define GL_LUMINANCE_ALPHA8I_EXT          0x8D93
< #define GL_RED_INTEGER_EXT                0x8D94
< #define GL_GREEN_INTEGER_EXT              0x8D95
< #define GL_BLUE_INTEGER_EXT               0x8D96
< #define GL_ALPHA_INTEGER_EXT              0x8D97
< #define GL_RGB_INTEGER_EXT                0x8D98
< #define GL_RGBA_INTEGER_EXT               0x8D99
< #define GL_BGR_INTEGER_EXT                0x8D9A
< #define GL_BGRA_INTEGER_EXT               0x8D9B
< #define GL_LUMINANCE_INTEGER_EXT          0x8D9C
< #define GL_LUMINANCE_ALPHA_INTEGER_EXT    0x8D9D
< #define GL_RGBA_INTEGER_MODE_EXT          0x8D9E
< #endif
< 
< #ifndef GL_GREMEDY_frame_terminator
< #endif
< 
< #ifndef GL_NV_conditional_render
< #define GL_QUERY_WAIT_NV                  0x8E13
< #define GL_QUERY_NO_WAIT_NV               0x8E14
< #define GL_QUERY_BY_REGION_WAIT_NV        0x8E15
< #define GL_QUERY_BY_REGION_NO_WAIT_NV     0x8E16
< #endif
< 
< #ifndef GL_NV_present_video
< #define GL_FRAME_NV                       0x8E26
< #define GL_FIELDS_NV                      0x8E27
< #define GL_CURRENT_TIME_NV                0x8E28
< #define GL_NUM_FILL_STREAMS_NV            0x8E29
< #define GL_PRESENT_TIME_NV                0x8E2A
< #define GL_PRESENT_DURATION_NV            0x8E2B
< #endif
< 
< #ifndef GL_EXT_transform_feedback
< #define GL_TRANSFORM_FEEDBACK_BUFFER_EXT  0x8C8E
< #define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
< #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
< #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
< #define GL_INTERLEAVED_ATTRIBS_EXT        0x8C8C
< #define GL_SEPARATE_ATTRIBS_EXT           0x8C8D
< #define GL_PRIMITIVES_GENERATED_EXT       0x8C87
< #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
< #define GL_RASTERIZER_DISCARD_EXT         0x8C89
< #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
< #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
< #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
< #define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
< #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
< #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
< #endif
< 
< #ifndef GL_EXT_direct_state_access
< #define GL_PROGRAM_MATRIX_EXT             0x8E2D
< #define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E
< #define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
< #endif
< 
< #ifndef GL_EXT_vertex_array_bgra
< /* reuse GL_BGRA */
< #endif
< 
< #ifndef GL_EXT_texture_swizzle
< #define GL_TEXTURE_SWIZZLE_R_EXT          0x8E42
< #define GL_TEXTURE_SWIZZLE_G_EXT          0x8E43
< #define GL_TEXTURE_SWIZZLE_B_EXT          0x8E44
< #define GL_TEXTURE_SWIZZLE_A_EXT          0x8E45
< #define GL_TEXTURE_SWIZZLE_RGBA_EXT       0x8E46
< #endif
< 
< #ifndef GL_NV_explicit_multisample
< #define GL_SAMPLE_POSITION_NV             0x8E50
< #define GL_SAMPLE_MASK_NV                 0x8E51
< #define GL_SAMPLE_MASK_VALUE_NV           0x8E52
< #define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
< #define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
< #define GL_TEXTURE_RENDERBUFFER_NV        0x8E55
< #define GL_SAMPLER_RENDERBUFFER_NV        0x8E56
< #define GL_INT_SAMPLER_RENDERBUFFER_NV    0x8E57
< #define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
< #define GL_MAX_SAMPLE_MASK_WORDS_NV       0x8E59
< #endif
< 
< #ifndef GL_NV_transform_feedback2
< #define GL_TRANSFORM_FEEDBACK_NV          0x8E22
< #define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
< #define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
< #define GL_TRANSFORM_FEEDBACK_BINDING_NV  0x8E25
< #endif
< 
< #ifndef GL_ATI_meminfo
< #define GL_VBO_FREE_MEMORY_ATI            0x87FB
< #define GL_TEXTURE_FREE_MEMORY_ATI        0x87FC
< #define GL_RENDERBUFFER_FREE_MEMORY_ATI   0x87FD
< #endif
< 
< #ifndef GL_AMD_performance_monitor
< #define GL_COUNTER_TYPE_AMD               0x8BC0
< #define GL_COUNTER_RANGE_AMD              0x8BC1
< #define GL_UNSIGNED_INT64_AMD             0x8BC2
< #define GL_PERCENTAGE_AMD                 0x8BC3
< #define GL_PERFMON_RESULT_AVAILABLE_AMD   0x8BC4
< #define GL_PERFMON_RESULT_SIZE_AMD        0x8BC5
< #define GL_PERFMON_RESULT_AMD             0x8BC6
< #endif
< 
< #ifndef GL_AMD_texture_texture4
< #endif
< 
< #ifndef GL_AMD_vertex_shader_tesselator
< #define GL_SAMPLER_BUFFER_AMD             0x9001
< #define GL_INT_SAMPLER_BUFFER_AMD         0x9002
< #define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
< #define GL_TESSELLATION_MODE_AMD          0x9004
< #define GL_TESSELLATION_FACTOR_AMD        0x9005
< #define GL_DISCRETE_AMD                   0x9006
< #define GL_CONTINUOUS_AMD                 0x9007
< #endif
< 
< #ifndef GL_EXT_provoking_vertex
< #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
< #define GL_FIRST_VERTEX_CONVENTION_EXT    0x8E4D
< #define GL_LAST_VERTEX_CONVENTION_EXT     0x8E4E
< #define GL_PROVOKING_VERTEX_EXT           0x8E4F
< #endif
< 
< #ifndef GL_EXT_texture_snorm
< #define GL_ALPHA_SNORM                    0x9010
< #define GL_LUMINANCE_SNORM                0x9011
< #define GL_LUMINANCE_ALPHA_SNORM          0x9012
< #define GL_INTENSITY_SNORM                0x9013
< #define GL_ALPHA8_SNORM                   0x9014
< #define GL_LUMINANCE8_SNORM               0x9015
< #define GL_LUMINANCE8_ALPHA8_SNORM        0x9016
< #define GL_INTENSITY8_SNORM               0x9017
< #define GL_ALPHA16_SNORM                  0x9018
< #define GL_LUMINANCE16_SNORM              0x9019
< #define GL_LUMINANCE16_ALPHA16_SNORM      0x901A
< #define GL_INTENSITY16_SNORM              0x901B
< /* reuse GL_RED_SNORM */
< /* reuse GL_RG_SNORM */
< /* reuse GL_RGB_SNORM */
< /* reuse GL_RGBA_SNORM */
< /* reuse GL_R8_SNORM */
< /* reuse GL_RG8_SNORM */
< /* reuse GL_RGB8_SNORM */
< /* reuse GL_RGBA8_SNORM */
< /* reuse GL_R16_SNORM */
< /* reuse GL_RG16_SNORM */
< /* reuse GL_RGB16_SNORM */
< /* reuse GL_RGBA16_SNORM */
< /* reuse GL_SIGNED_NORMALIZED */
< #endif
< 
< #ifndef GL_AMD_draw_buffers_blend
< #endif
< 
< #ifndef GL_APPLE_texture_range
< #define GL_TEXTURE_RANGE_LENGTH_APPLE     0x85B7
< #define GL_TEXTURE_RANGE_POINTER_APPLE    0x85B8
< #define GL_TEXTURE_STORAGE_HINT_APPLE     0x85BC
< #define GL_STORAGE_PRIVATE_APPLE          0x85BD
< /* reuse GL_STORAGE_CACHED_APPLE */
< /* reuse GL_STORAGE_SHARED_APPLE */
< #endif
< 
< #ifndef GL_APPLE_float_pixels
< #define GL_HALF_APPLE                     0x140B
< #define GL_RGBA_FLOAT32_APPLE             0x8814
< #define GL_RGB_FLOAT32_APPLE              0x8815
< #define GL_ALPHA_FLOAT32_APPLE            0x8816
< #define GL_INTENSITY_FLOAT32_APPLE        0x8817
< #define GL_LUMINANCE_FLOAT32_APPLE        0x8818
< #define GL_LUMINANCE_ALPHA_FLOAT32_APPLE  0x8819
< #define GL_RGBA_FLOAT16_APPLE             0x881A
< #define GL_RGB_FLOAT16_APPLE              0x881B
< #define GL_ALPHA_FLOAT16_APPLE            0x881C
< #define GL_INTENSITY_FLOAT16_APPLE        0x881D
< #define GL_LUMINANCE_FLOAT16_APPLE        0x881E
< #define GL_LUMINANCE_ALPHA_FLOAT16_APPLE  0x881F
< #define GL_COLOR_FLOAT_APPLE              0x8A0F
< #endif
< 
< #ifndef GL_APPLE_vertex_program_evaluators
< #define GL_VERTEX_ATTRIB_MAP1_APPLE       0x8A00
< #define GL_VERTEX_ATTRIB_MAP2_APPLE       0x8A01
< #define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE  0x8A02
< #define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
< #define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
< #define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
< #define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE  0x8A06
< #define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
< #define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
< #define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
< #endif
< 
< #ifndef GL_APPLE_aux_depth_stencil
< #define GL_AUX_DEPTH_STENCIL_APPLE        0x8A14
< #endif
< 
< #ifndef GL_APPLE_object_purgeable
< #define GL_BUFFER_OBJECT_APPLE            0x85B3
< #define GL_RELEASED_APPLE                 0x8A19
< #define GL_VOLATILE_APPLE                 0x8A1A
< #define GL_RETAINED_APPLE                 0x8A1B
< #define GL_UNDEFINED_APPLE                0x8A1C
< #define GL_PURGEABLE_APPLE                0x8A1D
< #endif
< 
< #ifndef GL_APPLE_row_bytes
< #define GL_PACK_ROW_BYTES_APPLE           0x8A15
< #define GL_UNPACK_ROW_BYTES_APPLE         0x8A16
< #endif
< 
< #ifndef GL_APPLE_rgb_422
< #define GL_RGB_422_APPLE                  0x8A1F
< /* reuse GL_UNSIGNED_SHORT_8_8_APPLE */
< /* reuse GL_UNSIGNED_SHORT_8_8_REV_APPLE */
< #endif
< 
< #ifndef GL_NV_video_capture
< #define GL_VIDEO_BUFFER_NV                0x9020
< #define GL_VIDEO_BUFFER_BINDING_NV        0x9021
< #define GL_FIELD_UPPER_NV                 0x9022
< #define GL_FIELD_LOWER_NV                 0x9023
< #define GL_NUM_VIDEO_CAPTURE_STREAMS_NV   0x9024
< #define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
< #define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
< #define GL_LAST_VIDEO_CAPTURE_STATUS_NV   0x9027
< #define GL_VIDEO_BUFFER_PITCH_NV          0x9028
< #define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
< #define GL_VIDEO_COLOR_CONVERSION_MAX_NV  0x902A
< #define GL_VIDEO_COLOR_CONVERSION_MIN_NV  0x902B
< #define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
< #define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
< #define GL_PARTIAL_SUCCESS_NV             0x902E
< #define GL_SUCCESS_NV                     0x902F
< #define GL_FAILURE_NV                     0x9030
< #define GL_YCBYCR8_422_NV                 0x9031
< #define GL_YCBAYCR8A_4224_NV              0x9032
< #define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV  0x9033
< #define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
< #define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV  0x9035
< #define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
< #define GL_Z4Y12Z4CB12Z4CR12_444_NV       0x9037
< #define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV   0x9038
< #define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV  0x9039
< #define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
< #define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
< #define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
< #endif
< 
< #ifndef GL_NV_copy_image
< #endif
< 
< #ifndef GL_EXT_separate_shader_objects
< #define GL_ACTIVE_PROGRAM_EXT             0x8B8D
< #endif
< 
< #ifndef GL_NV_parameter_buffer_object2
< #endif
< 
< #ifndef GL_NV_shader_buffer_load
< #define GL_BUFFER_GPU_ADDRESS_NV          0x8F1D
< #define GL_GPU_ADDRESS_NV                 0x8F34
< #define GL_MAX_SHADER_BUFFER_ADDRESS_NV   0x8F35
< #endif
< 
< #ifndef GL_NV_vertex_buffer_unified_memory
< #define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
< #define GL_ELEMENT_ARRAY_UNIFIED_NV       0x8F1F
< #define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
< #define GL_VERTEX_ARRAY_ADDRESS_NV        0x8F21
< #define GL_NORMAL_ARRAY_ADDRESS_NV        0x8F22
< #define GL_COLOR_ARRAY_ADDRESS_NV         0x8F23
< #define GL_INDEX_ARRAY_ADDRESS_NV         0x8F24
< #define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
< #define GL_EDGE_FLAG_ARRAY_ADDRESS_NV     0x8F26
< #define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
< #define GL_FOG_COORD_ARRAY_ADDRESS_NV     0x8F28
< #define GL_ELEMENT_ARRAY_ADDRESS_NV       0x8F29
< #define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV  0x8F2A
< #define GL_VERTEX_ARRAY_LENGTH_NV         0x8F2B
< #define GL_NORMAL_ARRAY_LENGTH_NV         0x8F2C
< #define GL_COLOR_ARRAY_LENGTH_NV          0x8F2D
< #define GL_INDEX_ARRAY_LENGTH_NV          0x8F2E
< #define GL_TEXTURE_COORD_ARRAY_LENGTH_NV  0x8F2F
< #define GL_EDGE_FLAG_ARRAY_LENGTH_NV      0x8F30
< #define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
< #define GL_FOG_COORD_ARRAY_LENGTH_NV      0x8F32
< #define GL_ELEMENT_ARRAY_LENGTH_NV        0x8F33
< #define GL_DRAW_INDIRECT_UNIFIED_NV       0x8F40
< #define GL_DRAW_INDIRECT_ADDRESS_NV       0x8F41
< #define GL_DRAW_INDIRECT_LENGTH_NV        0x8F42
< #endif
< 
< #ifndef GL_NV_texture_barrier
< #endif
< 
< #ifndef GL_AMD_shader_stencil_export
< #endif
< 
< #ifndef GL_AMD_seamless_cubemap_per_texture
< /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB */
< #endif
< 
< #ifndef GL_AMD_conservative_depth
< #endif
< 
< #ifndef GL_EXT_shader_image_load_store
< #define GL_MAX_IMAGE_UNITS_EXT            0x8F38
< #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
< #define GL_IMAGE_BINDING_NAME_EXT         0x8F3A
< #define GL_IMAGE_BINDING_LEVEL_EXT        0x8F3B
< #define GL_IMAGE_BINDING_LAYERED_EXT      0x8F3C
< #define GL_IMAGE_BINDING_LAYER_EXT        0x8F3D
< #define GL_IMAGE_BINDING_ACCESS_EXT       0x8F3E
< #define GL_IMAGE_1D_EXT                   0x904C
< #define GL_IMAGE_2D_EXT                   0x904D
< #define GL_IMAGE_3D_EXT                   0x904E
< #define GL_IMAGE_2D_RECT_EXT              0x904F
< #define GL_IMAGE_CUBE_EXT                 0x9050
< #define GL_IMAGE_BUFFER_EXT               0x9051
< #define GL_IMAGE_1D_ARRAY_EXT             0x9052
< #define GL_IMAGE_2D_ARRAY_EXT             0x9053
< #define GL_IMAGE_CUBE_MAP_ARRAY_EXT       0x9054
< #define GL_IMAGE_2D_MULTISAMPLE_EXT       0x9055
< #define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
< #define GL_INT_IMAGE_1D_EXT               0x9057
< #define GL_INT_IMAGE_2D_EXT               0x9058
< #define GL_INT_IMAGE_3D_EXT               0x9059
< #define GL_INT_IMAGE_2D_RECT_EXT          0x905A
< #define GL_INT_IMAGE_CUBE_EXT             0x905B
< #define GL_INT_IMAGE_BUFFER_EXT           0x905C
< #define GL_INT_IMAGE_1D_ARRAY_EXT         0x905D
< #define GL_INT_IMAGE_2D_ARRAY_EXT         0x905E
< #define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT   0x905F
< #define GL_INT_IMAGE_2D_MULTISAMPLE_EXT   0x9060
< #define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
< #define GL_UNSIGNED_INT_IMAGE_1D_EXT      0x9062
< #define GL_UNSIGNED_INT_IMAGE_2D_EXT      0x9063
< #define GL_UNSIGNED_INT_IMAGE_3D_EXT      0x9064
< #define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
< #define GL_UNSIGNED_INT_IMAGE_CUBE_EXT    0x9066
< #define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT  0x9067
< #define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
< #define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
< #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
< #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
< #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
< #define GL_MAX_IMAGE_SAMPLES_EXT          0x906D
< #define GL_IMAGE_BINDING_FORMAT_EXT       0x906E
< #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
< #define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002
< #define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004
< #define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008
< #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
< #define GL_COMMAND_BARRIER_BIT_EXT        0x00000040
< #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080
< #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
< #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200
< #define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400
< #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
< #define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
< #define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF
< #endif
< 
< #ifndef GL_EXT_vertex_attrib_64bit
< /* reuse GL_DOUBLE */
< #define GL_DOUBLE_VEC2_EXT                0x8FFC
< #define GL_DOUBLE_VEC3_EXT                0x8FFD
< #define GL_DOUBLE_VEC4_EXT                0x8FFE
< #define GL_DOUBLE_MAT2_EXT                0x8F46
< #define GL_DOUBLE_MAT3_EXT                0x8F47
< #define GL_DOUBLE_MAT4_EXT                0x8F48
< #define GL_DOUBLE_MAT2x3_EXT              0x8F49
< #define GL_DOUBLE_MAT2x4_EXT              0x8F4A
< #define GL_DOUBLE_MAT3x2_EXT              0x8F4B
< #define GL_DOUBLE_MAT3x4_EXT              0x8F4C
< #define GL_DOUBLE_MAT4x2_EXT              0x8F4D
< #define GL_DOUBLE_MAT4x3_EXT              0x8F4E
< #endif
< 
< #ifndef GL_NV_gpu_program5
< #define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
< #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
< #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
< #define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
< #define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
< #define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV  0x8F45
< #endif
< 
< #ifndef GL_NV_gpu_shader5
< #define GL_INT64_NV                       0x140E
< #define GL_UNSIGNED_INT64_NV              0x140F
< #define GL_INT8_NV                        0x8FE0
< #define GL_INT8_VEC2_NV                   0x8FE1
< #define GL_INT8_VEC3_NV                   0x8FE2
< #define GL_INT8_VEC4_NV                   0x8FE3
< #define GL_INT16_NV                       0x8FE4
< #define GL_INT16_VEC2_NV                  0x8FE5
< #define GL_INT16_VEC3_NV                  0x8FE6
< #define GL_INT16_VEC4_NV                  0x8FE7
< #define GL_INT64_VEC2_NV                  0x8FE9
< #define GL_INT64_VEC3_NV                  0x8FEA
< #define GL_INT64_VEC4_NV                  0x8FEB
< #define GL_UNSIGNED_INT8_NV               0x8FEC
< #define GL_UNSIGNED_INT8_VEC2_NV          0x8FED
< #define GL_UNSIGNED_INT8_VEC3_NV          0x8FEE
< #define GL_UNSIGNED_INT8_VEC4_NV          0x8FEF
< #define GL_UNSIGNED_INT16_NV              0x8FF0
< #define GL_UNSIGNED_INT16_VEC2_NV         0x8FF1
< #define GL_UNSIGNED_INT16_VEC3_NV         0x8FF2
< #define GL_UNSIGNED_INT16_VEC4_NV         0x8FF3
< #define GL_UNSIGNED_INT64_VEC2_NV         0x8FF5
< #define GL_UNSIGNED_INT64_VEC3_NV         0x8FF6
< #define GL_UNSIGNED_INT64_VEC4_NV         0x8FF7
< #define GL_FLOAT16_NV                     0x8FF8
< #define GL_FLOAT16_VEC2_NV                0x8FF9
< #define GL_FLOAT16_VEC3_NV                0x8FFA
< #define GL_FLOAT16_VEC4_NV                0x8FFB
< /* reuse GL_PATCHES */
< #endif
< 
< #ifndef GL_NV_shader_buffer_store
< #define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
< /* reuse GL_READ_WRITE */
< /* reuse GL_WRITE_ONLY */
< #endif
< 
< #ifndef GL_NV_tessellation_program5
< #define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV   0x86D8
< #define GL_TESS_CONTROL_PROGRAM_NV        0x891E
< #define GL_TESS_EVALUATION_PROGRAM_NV     0x891F
< #define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
< #define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
< #endif
< 
< #ifndef GL_NV_vertex_attrib_integer_64bit
< /* reuse GL_INT64_NV */
< /* reuse GL_UNSIGNED_INT64_NV */
< #endif
< 
< #ifndef GL_NV_multisample_coverage
< #define GL_COVERAGE_SAMPLES_NV            0x80A9
< #define GL_COLOR_SAMPLES_NV               0x8E20
< #endif
< 
< #ifndef GL_AMD_name_gen_delete
< #define GL_DATA_BUFFER_AMD                0x9151
< #define GL_PERFORMANCE_MONITOR_AMD        0x9152
< #define GL_QUERY_OBJECT_AMD               0x9153
< #define GL_VERTEX_ARRAY_OBJECT_AMD        0x9154
< #define GL_SAMPLER_OBJECT_AMD             0x9155
< #endif
< 
< #ifndef GL_AMD_debug_output
< #define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD  0x9144
< #define GL_DEBUG_LOGGED_MESSAGES_AMD      0x9145
< #define GL_DEBUG_SEVERITY_HIGH_AMD        0x9146
< #define GL_DEBUG_SEVERITY_MEDIUM_AMD      0x9147
< #define GL_DEBUG_SEVERITY_LOW_AMD         0x9148
< #define GL_DEBUG_CATEGORY_API_ERROR_AMD   0x9149
< #define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
< #define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
< #define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
< #define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
< #define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
< #define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
< #define GL_DEBUG_CATEGORY_OTHER_AMD       0x9150
< #endif
< 
< #ifndef GL_NV_vdpau_interop
< #define GL_SURFACE_STATE_NV               0x86EB
< #define GL_SURFACE_REGISTERED_NV          0x86FD
< #define GL_SURFACE_MAPPED_NV              0x8700
< #define GL_WRITE_DISCARD_NV               0x88BE
< #endif
< 
< #ifndef GL_AMD_transform_feedback3_lines_triangles
< #endif
< 
< 
< /*************************************************************/
< 
< #include <stddef.h>
< #ifndef GL_VERSION_2_0
< /* GL type for program/shader text */
< typedef char GLchar;
< #endif
< 
< #ifndef GL_VERSION_1_5
< /* GL types for handling large vertex buffer objects */
< #if defined(__APPLE__)
< typedef long GLintptr;
< typedef long GLsizeiptr;
< #else
< typedef ptrdiff_t GLintptr;
< typedef ptrdiff_t GLsizeiptr;
< #endif
< #endif
< 
< #ifndef GL_ARB_vertex_buffer_object
< /* GL types for handling large vertex buffer objects */
< #if defined(__APPLE__)
< typedef long GLintptrARB;
< typedef long GLsizeiptrARB;
< #else
< typedef ptrdiff_t GLintptrARB;
< typedef ptrdiff_t GLsizeiptrARB;
< #endif
< #endif
< 
< #ifndef GL_ARB_shader_objects
< /* GL types for program/shader text and shader object handles */
< typedef char GLcharARB;
< #if defined(__APPLE__)
< typedef void *GLhandleARB;
< #else
< typedef unsigned int GLhandleARB;
< #endif
< #endif
< 
< /* GL type for "half" precision (s10e5) float data in host memory */
< #ifndef GL_ARB_half_float_pixel
< typedef unsigned short GLhalfARB;
< #endif
< 
< #ifndef GL_NV_half_float
< typedef unsigned short GLhalfNV;
< #endif
< 
< #ifndef GLEXT_64_TYPES_DEFINED
< /* This code block is duplicated in glxext.h, so must be protected */
< #define GLEXT_64_TYPES_DEFINED
< /* Define int32_t, int64_t, and uint64_t types for UST/MSC */
< /* (as used in the GL_EXT_timer_query extension). */
< #if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
< #include <inttypes.h>
< #elif defined(__sun__) || defined(__digital__)
< #include <inttypes.h>
< #if defined(__STDC__)
< #if defined(__arch64__) || defined(_LP64)
< typedef long int int64_t;
< typedef unsigned long int uint64_t;
< #else
< typedef long long int int64_t;
< typedef unsigned long long int uint64_t;
< #endif /* __arch64__ */
< #endif /* __STDC__ */
< #elif defined( __VMS ) || defined(__sgi)
< #include <inttypes.h>
< #elif defined(__SCO__) || defined(__USLC__)
< #include <stdint.h>
< #elif defined(__UNIXOS2__) || defined(__SOL64__)
< typedef long int int32_t;
< typedef long long int int64_t;
< typedef unsigned long long int uint64_t;
< #elif defined(_WIN32) && defined(__GNUC__)
< #include <stdint.h>
< #elif defined(_WIN32)
< typedef __int32 int32_t;
< typedef __int64 int64_t;
< typedef unsigned __int64 uint64_t;
< #else
< /* Fallback if nothing above works */
< #include <inttypes.h>
< #endif
< #endif
< 
< #ifndef GL_EXT_timer_query
< typedef int64_t GLint64EXT;
< typedef uint64_t GLuint64EXT;
< #endif
< 
< #ifndef GL_ARB_sync
< typedef int64_t GLint64;
< typedef uint64_t GLuint64;
< typedef struct __GLsync *GLsync;
< #endif
< 
< #ifndef GL_ARB_cl_event
< /* These incomplete types let us declare types compatible with OpenCL's cl_context and cl_event */
< struct _cl_context;
< struct _cl_event;
< #endif
< 
< #ifndef GL_ARB_debug_output
< typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
< #endif
< 
< #ifndef GL_AMD_debug_output
< typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
< #endif
< 
< #ifndef GL_NV_vdpau_interop
< typedef GLintptr GLvdpauSurfaceNV;
< #endif
< 
< #ifndef GL_VERSION_1_2
< #define GL_VERSION_1_2 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
< GLAPI void APIENTRY glBlendEquation (GLenum mode);
< GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
< GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
< typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
< typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
< typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< #endif
< 
< #ifndef GL_VERSION_1_2_DEPRECATED
< #define GL_VERSION_1_2_DEPRECATED 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
< GLAPI void APIENTRY glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glColorTableParameteriv (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glGetColorTable (GLenum target, GLenum format, GLenum type, GLvoid *table);
< GLAPI void APIENTRY glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetColorTableParameteriv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
< GLAPI void APIENTRY glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
< GLAPI void APIENTRY glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
< GLAPI void APIENTRY glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params);
< GLAPI void APIENTRY glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glConvolutionParameteri (GLenum target, GLenum pname, GLint params);
< GLAPI void APIENTRY glConvolutionParameteriv (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, GLvoid *image);
< GLAPI void APIENTRY glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetSeparableFilter (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
< GLAPI void APIENTRY glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
< GLAPI void APIENTRY glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< GLAPI void APIENTRY glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetHistogramParameteriv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< GLAPI void APIENTRY glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
< GLAPI void APIENTRY glMinmax (GLenum target, GLenum internalformat, GLboolean sink);
< GLAPI void APIENTRY glResetHistogram (GLenum target);
< GLAPI void APIENTRY glResetMinmax (GLenum target);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
< typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
< typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
< typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
< typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
< typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
< typedef void (APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
< typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target);
< #endif
< 
< #ifndef GL_VERSION_1_3
< #define GL_VERSION_1_3 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glActiveTexture (GLenum texture);
< GLAPI void APIENTRY glSampleCoverage (GLclampf value, GLboolean invert);
< GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, GLvoid *img);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
< typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
< #endif
< 
< #ifndef GL_VERSION_1_3_DEPRECATED
< #define GL_VERSION_1_3_DEPRECATED 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glClientActiveTexture (GLenum texture);
< GLAPI void APIENTRY glMultiTexCoord1d (GLenum target, GLdouble s);
< GLAPI void APIENTRY glMultiTexCoord1dv (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord1f (GLenum target, GLfloat s);
< GLAPI void APIENTRY glMultiTexCoord1fv (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord1i (GLenum target, GLint s);
< GLAPI void APIENTRY glMultiTexCoord1iv (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord1s (GLenum target, GLshort s);
< GLAPI void APIENTRY glMultiTexCoord1sv (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t);
< GLAPI void APIENTRY glMultiTexCoord2dv (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t);
< GLAPI void APIENTRY glMultiTexCoord2fv (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord2i (GLenum target, GLint s, GLint t);
< GLAPI void APIENTRY glMultiTexCoord2iv (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord2s (GLenum target, GLshort s, GLshort t);
< GLAPI void APIENTRY glMultiTexCoord2sv (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r);
< GLAPI void APIENTRY glMultiTexCoord3dv (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r);
< GLAPI void APIENTRY glMultiTexCoord3fv (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r);
< GLAPI void APIENTRY glMultiTexCoord3iv (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r);
< GLAPI void APIENTRY glMultiTexCoord3sv (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
< GLAPI void APIENTRY glMultiTexCoord4dv (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
< GLAPI void APIENTRY glMultiTexCoord4fv (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q);
< GLAPI void APIENTRY glMultiTexCoord4iv (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
< GLAPI void APIENTRY glMultiTexCoord4sv (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glLoadTransposeMatrixf (const GLfloat *m);
< GLAPI void APIENTRY glLoadTransposeMatrixd (const GLdouble *m);
< GLAPI void APIENTRY glMultTransposeMatrixf (const GLfloat *m);
< GLAPI void APIENTRY glMultTransposeMatrixd (const GLdouble *m);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
< typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
< typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
< typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);
< #endif
< 
< #ifndef GL_VERSION_1_4
< #define GL_VERSION_1_4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
< GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
< GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
< GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
< GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
< typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
< typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
< #endif
< 
< #ifndef GL_VERSION_1_4_DEPRECATED
< #define GL_VERSION_1_4_DEPRECATED 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFogCoordf (GLfloat coord);
< GLAPI void APIENTRY glFogCoordfv (const GLfloat *coord);
< GLAPI void APIENTRY glFogCoordd (GLdouble coord);
< GLAPI void APIENTRY glFogCoorddv (const GLdouble *coord);
< GLAPI void APIENTRY glFogCoordPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue);
< GLAPI void APIENTRY glSecondaryColor3bv (const GLbyte *v);
< GLAPI void APIENTRY glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue);
< GLAPI void APIENTRY glSecondaryColor3dv (const GLdouble *v);
< GLAPI void APIENTRY glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue);
< GLAPI void APIENTRY glSecondaryColor3fv (const GLfloat *v);
< GLAPI void APIENTRY glSecondaryColor3i (GLint red, GLint green, GLint blue);
< GLAPI void APIENTRY glSecondaryColor3iv (const GLint *v);
< GLAPI void APIENTRY glSecondaryColor3s (GLshort red, GLshort green, GLshort blue);
< GLAPI void APIENTRY glSecondaryColor3sv (const GLshort *v);
< GLAPI void APIENTRY glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue);
< GLAPI void APIENTRY glSecondaryColor3ubv (const GLubyte *v);
< GLAPI void APIENTRY glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue);
< GLAPI void APIENTRY glSecondaryColor3uiv (const GLuint *v);
< GLAPI void APIENTRY glSecondaryColor3us (GLushort red, GLushort green, GLushort blue);
< GLAPI void APIENTRY glSecondaryColor3usv (const GLushort *v);
< GLAPI void APIENTRY glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glWindowPos2d (GLdouble x, GLdouble y);
< GLAPI void APIENTRY glWindowPos2dv (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos2f (GLfloat x, GLfloat y);
< GLAPI void APIENTRY glWindowPos2fv (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos2i (GLint x, GLint y);
< GLAPI void APIENTRY glWindowPos2iv (const GLint *v);
< GLAPI void APIENTRY glWindowPos2s (GLshort x, GLshort y);
< GLAPI void APIENTRY glWindowPos2sv (const GLshort *v);
< GLAPI void APIENTRY glWindowPos3d (GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glWindowPos3dv (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos3f (GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glWindowPos3fv (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos3i (GLint x, GLint y, GLint z);
< GLAPI void APIENTRY glWindowPos3iv (const GLint *v);
< GLAPI void APIENTRY glWindowPos3s (GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glWindowPos3sv (const GLshort *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord);
< typedef void (APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
< typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord);
< typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
< typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
< #endif
< 
< #ifndef GL_VERSION_1_5
< #define GL_VERSION_1_5 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
< GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
< GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
< GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
< GLAPI void APIENTRY glEndQuery (GLenum target);
< GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
< GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
< GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
< GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
< GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
< GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
< GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
< GLAPI GLvoid* APIENTRY glMapBuffer (GLenum target, GLenum access);
< GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
< GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, GLvoid* *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
< typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
< typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
< typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
< typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
< typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
< typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);
< typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
< typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
< typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
< typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
< typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);
< #endif
< 
< #ifndef GL_VERSION_2_0
< #define GL_VERSION_2_0 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
< GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
< GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
< GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
< GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
< GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
< GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
< GLAPI void APIENTRY glCompileShader (GLuint shader);
< GLAPI GLuint APIENTRY glCreateProgram (void);
< GLAPI GLuint APIENTRY glCreateShader (GLenum type);
< GLAPI void APIENTRY glDeleteProgram (GLuint program);
< GLAPI void APIENTRY glDeleteShader (GLuint shader);
< GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
< GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
< GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
< GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
< GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
< GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
< GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);
< GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
< GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
< GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
< GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);
< GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);
< GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, GLvoid* *pointer);
< GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
< GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
< GLAPI void APIENTRY glLinkProgram (GLuint program);
< GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
< GLAPI void APIENTRY glUseProgram (GLuint program);
< GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
< GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
< GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
< GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
< GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
< GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glValidateProgram (GLuint program);
< GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
< GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
< GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
< GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
< GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
< GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
< GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
< GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
< GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
< GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
< GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
< GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
< typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
< typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
< typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
< typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
< typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
< typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
< typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
< typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);
< typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
< typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
< typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
< typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
< typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
< typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
< typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
< typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
< typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
< typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
< typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
< typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
< typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
< typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
< typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
< typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);
< typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
< typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
< typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
< typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
< typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
< typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
< typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
< typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
< typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
< typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_VERSION_2_1
< #define GL_VERSION_2_1 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< #endif
< 
< #ifndef GL_VERSION_3_0
< #define GL_VERSION_3_0 1
< /* OpenGL 3.0 also reuses entry points from these extensions: */
< /* ARB_framebuffer_object */
< /* ARB_map_buffer_range */
< /* ARB_vertex_array_object */
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
< GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
< GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
< GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
< GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
< GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
< GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
< GLAPI void APIENTRY glEndTransformFeedback (void);
< GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
< GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
< GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
< GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
< GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
< GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
< GLAPI void APIENTRY glEndConditionalRender (void);
< GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
< GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
< GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
< GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
< GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
< GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
< GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
< GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
< GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);
< GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
< GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);
< GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
< GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
< GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
< GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
< GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);
< GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);
< GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);
< GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
< GLAPI const GLubyte * APIENTRY glGetStringi (GLenum name, GLuint index);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
< typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
< typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
< typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);
< typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);
< typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
< typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
< typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);
< typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
< typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
< typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
< typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
< typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
< typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
< typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
< typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
< typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
< typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
< typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
< typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
< typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
< typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
< typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
< typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
< typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
< typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
< #endif
< 
< #ifndef GL_VERSION_3_1
< #define GL_VERSION_3_1 1
< /* OpenGL 3.1 also reuses entry points from these extensions: */
< /* ARB_copy_buffer */
< /* ARB_uniform_buffer_object */
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
< GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
< GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);
< GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
< typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
< typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
< typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);
< #endif
< 
< #ifndef GL_VERSION_3_2
< #define GL_VERSION_3_2 1
< /* OpenGL 3.2 also reuses entry points from these extensions: */
< /* ARB_draw_elements_base_vertex */
< /* ARB_provoking_vertex */
< /* ARB_sync */
< /* ARB_texture_multisample */
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);
< GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);
< GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
< typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
< #endif
< 
< #ifndef GL_VERSION_3_3
< #define GL_VERSION_3_3 1
< /* OpenGL 3.3 also reuses entry points from these extensions: */
< /* ARB_blend_func_extended */
< /* ARB_sampler_objects */
< /* ARB_explicit_attrib_location, but it has none */
< /* ARB_occlusion_query2 (no entry points) */
< /* ARB_shader_bit_encoding (no entry points) */
< /* ARB_texture_rgb10_a2ui (no entry points) */
< /* ARB_texture_swizzle (no entry points) */
< /* ARB_timer_query */
< /* ARB_vertex_type_2_10_10_10_rev */
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
< #endif
< 
< #ifndef GL_VERSION_4_0
< #define GL_VERSION_4_0 1
< /* OpenGL 4.0 also reuses entry points from these extensions: */
< /* ARB_texture_query_lod (no entry points) */
< /* ARB_draw_indirect */
< /* ARB_gpu_shader5 (no entry points) */
< /* ARB_gpu_shader_fp64 */
< /* ARB_shader_subroutine */
< /* ARB_tessellation_shader */
< /* ARB_texture_buffer_object_rgb32 (no entry points) */
< /* ARB_texture_cube_map_array (no entry points) */
< /* ARB_texture_gather (no entry points) */
< /* ARB_transform_feedback2 */
< /* ARB_transform_feedback3 */
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glMinSampleShading (GLclampf value);
< GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
< GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
< GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
< GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLclampf value);
< typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
< typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
< typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
< typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
< #endif
< 
< #ifndef GL_VERSION_4_1
< #define GL_VERSION_4_1 1
< /* OpenGL 4.1 also reuses entry points from these extensions: */
< /* ARB_ES2_compatibility */
< /* ARB_get_program_binary */
< /* ARB_separate_shader_objects */
< /* ARB_shader_precision (no entry points) */
< /* ARB_vertex_attrib_64bit */
< /* ARB_viewport_array */
< #endif
< 
< #ifndef GL_ARB_multitexture
< #define GL_ARB_multitexture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glActiveTextureARB (GLenum texture);
< GLAPI void APIENTRY glClientActiveTextureARB (GLenum texture);
< GLAPI void APIENTRY glMultiTexCoord1dARB (GLenum target, GLdouble s);
< GLAPI void APIENTRY glMultiTexCoord1dvARB (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord1fARB (GLenum target, GLfloat s);
< GLAPI void APIENTRY glMultiTexCoord1fvARB (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord1iARB (GLenum target, GLint s);
< GLAPI void APIENTRY glMultiTexCoord1ivARB (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord1sARB (GLenum target, GLshort s);
< GLAPI void APIENTRY glMultiTexCoord1svARB (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t);
< GLAPI void APIENTRY glMultiTexCoord2dvARB (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t);
< GLAPI void APIENTRY glMultiTexCoord2fvARB (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord2iARB (GLenum target, GLint s, GLint t);
< GLAPI void APIENTRY glMultiTexCoord2ivARB (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t);
< GLAPI void APIENTRY glMultiTexCoord2svARB (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r);
< GLAPI void APIENTRY glMultiTexCoord3dvARB (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r);
< GLAPI void APIENTRY glMultiTexCoord3fvARB (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r);
< GLAPI void APIENTRY glMultiTexCoord3ivARB (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r);
< GLAPI void APIENTRY glMultiTexCoord3svARB (GLenum target, const GLshort *v);
< GLAPI void APIENTRY glMultiTexCoord4dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
< GLAPI void APIENTRY glMultiTexCoord4dvARB (GLenum target, const GLdouble *v);
< GLAPI void APIENTRY glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
< GLAPI void APIENTRY glMultiTexCoord4fvARB (GLenum target, const GLfloat *v);
< GLAPI void APIENTRY glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q);
< GLAPI void APIENTRY glMultiTexCoord4ivARB (GLenum target, const GLint *v);
< GLAPI void APIENTRY glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
< GLAPI void APIENTRY glMultiTexCoord4svARB (GLenum target, const GLshort *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
< typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
< #endif
< 
< #ifndef GL_ARB_transpose_matrix
< #define GL_ARB_transpose_matrix 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glLoadTransposeMatrixfARB (const GLfloat *m);
< GLAPI void APIENTRY glLoadTransposeMatrixdARB (const GLdouble *m);
< GLAPI void APIENTRY glMultTransposeMatrixfARB (const GLfloat *m);
< GLAPI void APIENTRY glMultTransposeMatrixdARB (const GLdouble *m);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
< typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
< typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
< typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
< #endif
< 
< #ifndef GL_ARB_multisample
< #define GL_ARB_multisample 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glSampleCoverageARB (GLclampf value, GLboolean invert);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
< #endif
< 
< #ifndef GL_ARB_texture_env_add
< #define GL_ARB_texture_env_add 1
< #endif
< 
< #ifndef GL_ARB_texture_cube_map
< #define GL_ARB_texture_cube_map 1
< #endif
< 
< #ifndef GL_ARB_texture_compression
< #define GL_ARB_texture_compression 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
< GLAPI void APIENTRY glGetCompressedTexImageARB (GLenum target, GLint level, GLvoid *img);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
< typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);
< #endif
< 
< #ifndef GL_ARB_texture_border_clamp
< #define GL_ARB_texture_border_clamp 1
< #endif
< 
< #ifndef GL_ARB_point_parameters
< #define GL_ARB_point_parameters 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPointParameterfARB (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glPointParameterfvARB (GLenum pname, const GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
< #endif
< 
< #ifndef GL_ARB_vertex_blend
< #define GL_ARB_vertex_blend 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glWeightbvARB (GLint size, const GLbyte *weights);
< GLAPI void APIENTRY glWeightsvARB (GLint size, const GLshort *weights);
< GLAPI void APIENTRY glWeightivARB (GLint size, const GLint *weights);
< GLAPI void APIENTRY glWeightfvARB (GLint size, const GLfloat *weights);
< GLAPI void APIENTRY glWeightdvARB (GLint size, const GLdouble *weights);
< GLAPI void APIENTRY glWeightubvARB (GLint size, const GLubyte *weights);
< GLAPI void APIENTRY glWeightusvARB (GLint size, const GLushort *weights);
< GLAPI void APIENTRY glWeightuivARB (GLint size, const GLuint *weights);
< GLAPI void APIENTRY glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glVertexBlendARB (GLint count);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
< typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
< typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
< typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
< typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
< typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
< typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
< typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
< typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count);
< #endif
< 
< #ifndef GL_ARB_matrix_palette
< #define GL_ARB_matrix_palette 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCurrentPaletteMatrixARB (GLint index);
< GLAPI void APIENTRY glMatrixIndexubvARB (GLint size, const GLubyte *indices);
< GLAPI void APIENTRY glMatrixIndexusvARB (GLint size, const GLushort *indices);
< GLAPI void APIENTRY glMatrixIndexuivARB (GLint size, const GLuint *indices);
< GLAPI void APIENTRY glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
< typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
< typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
< typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
< typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_ARB_texture_env_combine
< #define GL_ARB_texture_env_combine 1
< #endif
< 
< #ifndef GL_ARB_texture_env_crossbar
< #define GL_ARB_texture_env_crossbar 1
< #endif
< 
< #ifndef GL_ARB_texture_env_dot3
< #define GL_ARB_texture_env_dot3 1
< #endif
< 
< #ifndef GL_ARB_texture_mirrored_repeat
< #define GL_ARB_texture_mirrored_repeat 1
< #endif
< 
< #ifndef GL_ARB_depth_texture
< #define GL_ARB_depth_texture 1
< #endif
< 
< #ifndef GL_ARB_shadow
< #define GL_ARB_shadow 1
< #endif
< 
< #ifndef GL_ARB_shadow_ambient
< #define GL_ARB_shadow_ambient 1
< #endif
< 
< #ifndef GL_ARB_window_pos
< #define GL_ARB_window_pos 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glWindowPos2dARB (GLdouble x, GLdouble y);
< GLAPI void APIENTRY glWindowPos2dvARB (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos2fARB (GLfloat x, GLfloat y);
< GLAPI void APIENTRY glWindowPos2fvARB (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos2iARB (GLint x, GLint y);
< GLAPI void APIENTRY glWindowPos2ivARB (const GLint *v);
< GLAPI void APIENTRY glWindowPos2sARB (GLshort x, GLshort y);
< GLAPI void APIENTRY glWindowPos2svARB (const GLshort *v);
< GLAPI void APIENTRY glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glWindowPos3dvARB (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glWindowPos3fvARB (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos3iARB (GLint x, GLint y, GLint z);
< GLAPI void APIENTRY glWindowPos3ivARB (const GLint *v);
< GLAPI void APIENTRY glWindowPos3sARB (GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glWindowPos3svARB (const GLshort *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
< #endif
< 
< #ifndef GL_ARB_vertex_program
< #define GL_ARB_vertex_program 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttrib1dARB (GLuint index, GLdouble x);
< GLAPI void APIENTRY glVertexAttrib1dvARB (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib1fARB (GLuint index, GLfloat x);
< GLAPI void APIENTRY glVertexAttrib1fvARB (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib1sARB (GLuint index, GLshort x);
< GLAPI void APIENTRY glVertexAttrib1svARB (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glVertexAttrib2dvARB (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y);
< GLAPI void APIENTRY glVertexAttrib2fvARB (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y);
< GLAPI void APIENTRY glVertexAttrib2svARB (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glVertexAttrib3dvARB (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glVertexAttrib3fvARB (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glVertexAttrib3svARB (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4NbvARB (GLuint index, const GLbyte *v);
< GLAPI void APIENTRY glVertexAttrib4NivARB (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttrib4NsvARB (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
< GLAPI void APIENTRY glVertexAttrib4NubvARB (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttrib4NuivARB (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttrib4NusvARB (GLuint index, const GLushort *v);
< GLAPI void APIENTRY glVertexAttrib4bvARB (GLuint index, const GLbyte *v);
< GLAPI void APIENTRY glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glVertexAttrib4dvARB (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glVertexAttrib4fvARB (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib4ivARB (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
< GLAPI void APIENTRY glVertexAttrib4svARB (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4ubvARB (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttrib4uivARB (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttrib4usvARB (GLuint index, const GLushort *v);
< GLAPI void APIENTRY glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glEnableVertexAttribArrayARB (GLuint index);
< GLAPI void APIENTRY glDisableVertexAttribArrayARB (GLuint index);
< GLAPI void APIENTRY glProgramStringARB (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
< GLAPI void APIENTRY glBindProgramARB (GLenum target, GLuint program);
< GLAPI void APIENTRY glDeleteProgramsARB (GLsizei n, const GLuint *programs);
< GLAPI void APIENTRY glGenProgramsARB (GLsizei n, GLuint *programs);
< GLAPI void APIENTRY glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);
< GLAPI void APIENTRY glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);
< GLAPI void APIENTRY glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);
< GLAPI void APIENTRY glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);
< GLAPI void APIENTRY glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble *params);
< GLAPI void APIENTRY glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat *params);
< GLAPI void APIENTRY glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble *params);
< GLAPI void APIENTRY glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat *params);
< GLAPI void APIENTRY glGetProgramivARB (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetProgramStringARB (GLenum target, GLenum pname, GLvoid *string);
< GLAPI void APIENTRY glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetVertexAttribivARB (GLuint index, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribPointervARB (GLuint index, GLenum pname, GLvoid* *pointer);
< GLAPI GLboolean APIENTRY glIsProgramARB (GLuint program);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
< typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
< typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
< typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
< typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
< typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
< typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program);
< #endif
< 
< #ifndef GL_ARB_fragment_program
< #define GL_ARB_fragment_program 1
< /* All ARB_fragment_program entry points are shared with ARB_vertex_program. */
< #endif
< 
< #ifndef GL_ARB_vertex_buffer_object
< #define GL_ARB_vertex_buffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindBufferARB (GLenum target, GLuint buffer);
< GLAPI void APIENTRY glDeleteBuffersARB (GLsizei n, const GLuint *buffers);
< GLAPI void APIENTRY glGenBuffersARB (GLsizei n, GLuint *buffers);
< GLAPI GLboolean APIENTRY glIsBufferARB (GLuint buffer);
< GLAPI void APIENTRY glBufferDataARB (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
< GLAPI void APIENTRY glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
< GLAPI void APIENTRY glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
< GLAPI GLvoid* APIENTRY glMapBufferARB (GLenum target, GLenum access);
< GLAPI GLboolean APIENTRY glUnmapBufferARB (GLenum target);
< GLAPI void APIENTRY glGetBufferParameterivARB (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetBufferPointervARB (GLenum target, GLenum pname, GLvoid* *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
< typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
< typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
< typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);
< typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
< typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
< typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
< typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
< typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);
< #endif
< 
< #ifndef GL_ARB_occlusion_query
< #define GL_ARB_occlusion_query 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGenQueriesARB (GLsizei n, GLuint *ids);
< GLAPI void APIENTRY glDeleteQueriesARB (GLsizei n, const GLuint *ids);
< GLAPI GLboolean APIENTRY glIsQueryARB (GLuint id);
< GLAPI void APIENTRY glBeginQueryARB (GLenum target, GLuint id);
< GLAPI void APIENTRY glEndQueryARB (GLenum target);
< GLAPI void APIENTRY glGetQueryivARB (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetQueryObjectivARB (GLuint id, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
< typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
< typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
< typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);
< #endif
< 
< #ifndef GL_ARB_shader_objects
< #define GL_ARB_shader_objects 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDeleteObjectARB (GLhandleARB obj);
< GLAPI GLhandleARB APIENTRY glGetHandleARB (GLenum pname);
< GLAPI void APIENTRY glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj);
< GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum shaderType);
< GLAPI void APIENTRY glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
< GLAPI void APIENTRY glCompileShaderARB (GLhandleARB shaderObj);
< GLAPI GLhandleARB APIENTRY glCreateProgramObjectARB (void);
< GLAPI void APIENTRY glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj);
< GLAPI void APIENTRY glLinkProgramARB (GLhandleARB programObj);
< GLAPI void APIENTRY glUseProgramObjectARB (GLhandleARB programObj);
< GLAPI void APIENTRY glValidateProgramARB (GLhandleARB programObj);
< GLAPI void APIENTRY glUniform1fARB (GLint location, GLfloat v0);
< GLAPI void APIENTRY glUniform2fARB (GLint location, GLfloat v0, GLfloat v1);
< GLAPI void APIENTRY glUniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< GLAPI void APIENTRY glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< GLAPI void APIENTRY glUniform1iARB (GLint location, GLint v0);
< GLAPI void APIENTRY glUniform2iARB (GLint location, GLint v0, GLint v1);
< GLAPI void APIENTRY glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2);
< GLAPI void APIENTRY glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< GLAPI void APIENTRY glUniform1fvARB (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform2fvARB (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform3fvARB (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform4fvARB (GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glUniform1ivARB (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniform2ivARB (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniform3ivARB (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniform4ivARB (GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
< GLAPI void APIENTRY glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
< GLAPI GLint APIENTRY glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name);
< GLAPI void APIENTRY glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
< GLAPI void APIENTRY glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params);
< GLAPI void APIENTRY glGetUniformivARB (GLhandleARB programObj, GLint location, GLint *params);
< GLAPI void APIENTRY glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
< typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname);
< typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
< typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
< typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
< typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
< typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
< typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
< typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
< typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
< typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
< typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
< typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
< typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
< typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
< typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
< typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
< typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
< typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
< typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
< typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
< typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
< #endif
< 
< #ifndef GL_ARB_vertex_shader
< #define GL_ARB_vertex_shader 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name);
< GLAPI void APIENTRY glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
< GLAPI GLint APIENTRY glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
< typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
< typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
< #endif
< 
< #ifndef GL_ARB_fragment_shader
< #define GL_ARB_fragment_shader 1
< #endif
< 
< #ifndef GL_ARB_shading_language_100
< #define GL_ARB_shading_language_100 1
< #endif
< 
< #ifndef GL_ARB_texture_non_power_of_two
< #define GL_ARB_texture_non_power_of_two 1
< #endif
< 
< #ifndef GL_ARB_point_sprite
< #define GL_ARB_point_sprite 1
< #endif
< 
< #ifndef GL_ARB_fragment_program_shadow
< #define GL_ARB_fragment_program_shadow 1
< #endif
< 
< #ifndef GL_ARB_draw_buffers
< #define GL_ARB_draw_buffers 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawBuffersARB (GLsizei n, const GLenum *bufs);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);
< #endif
< 
< #ifndef GL_ARB_texture_rectangle
< #define GL_ARB_texture_rectangle 1
< #endif
< 
< #ifndef GL_ARB_color_buffer_float
< #define GL_ARB_color_buffer_float 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glClampColorARB (GLenum target, GLenum clamp);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
< #endif
< 
< #ifndef GL_ARB_half_float_pixel
< #define GL_ARB_half_float_pixel 1
< #endif
< 
< #ifndef GL_ARB_texture_float
< #define GL_ARB_texture_float 1
< #endif
< 
< #ifndef GL_ARB_pixel_buffer_object
< #define GL_ARB_pixel_buffer_object 1
< #endif
< 
< #ifndef GL_ARB_depth_buffer_float
< #define GL_ARB_depth_buffer_float 1
< #endif
< 
< #ifndef GL_ARB_draw_instanced
< #define GL_ARB_draw_instanced 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
< GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
< typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
< #endif
< 
< #ifndef GL_ARB_framebuffer_object
< #define GL_ARB_framebuffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
< GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);
< GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
< GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
< GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
< GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
< GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
< GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
< GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
< GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
< GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
< GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
< GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGenerateMipmap (GLenum target);
< GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
< GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
< typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
< typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
< typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
< typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
< typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
< typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
< typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
< #endif
< 
< #ifndef GL_ARB_framebuffer_sRGB
< #define GL_ARB_framebuffer_sRGB 1
< #endif
< 
< #ifndef GL_ARB_geometry_shader4
< #define GL_ARB_geometry_shader4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value);
< GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level);
< GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
< GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
< #endif
< 
< #ifndef GL_ARB_half_float_vertex
< #define GL_ARB_half_float_vertex 1
< #endif
< 
< #ifndef GL_ARB_instanced_arrays
< #define GL_ARB_instanced_arrays 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint divisor);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
< #endif
< 
< #ifndef GL_ARB_map_buffer_range
< #define GL_ARB_map_buffer_range 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLvoid* APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
< GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
< typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
< #endif
< 
< #ifndef GL_ARB_texture_buffer_object
< #define GL_ARB_texture_buffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
< #endif
< 
< #ifndef GL_ARB_texture_compression_rgtc
< #define GL_ARB_texture_compression_rgtc 1
< #endif
< 
< #ifndef GL_ARB_texture_rg
< #define GL_ARB_texture_rg 1
< #endif
< 
< #ifndef GL_ARB_vertex_array_object
< #define GL_ARB_vertex_array_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindVertexArray (GLuint array);
< GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
< GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
< GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);
< typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
< typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
< typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);
< #endif
< 
< #ifndef GL_ARB_uniform_buffer_object
< #define GL_ARB_uniform_buffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
< GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
< GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);
< GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
< GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
< typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
< typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
< typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
< typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
< #endif
< 
< #ifndef GL_ARB_compatibility
< #define GL_ARB_compatibility 1
< #endif
< 
< #ifndef GL_ARB_copy_buffer
< #define GL_ARB_copy_buffer 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
< #endif
< 
< #ifndef GL_ARB_shader_texture_lod
< #define GL_ARB_shader_texture_lod 1
< #endif
< 
< #ifndef GL_ARB_depth_clamp
< #define GL_ARB_depth_clamp 1
< #endif
< 
< #ifndef GL_ARB_draw_elements_base_vertex
< #define GL_ARB_draw_elements_base_vertex 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
< GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
< GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
< GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
< typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
< typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
< typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
< #endif
< 
< #ifndef GL_ARB_fragment_coord_conventions
< #define GL_ARB_fragment_coord_conventions 1
< #endif
< 
< #ifndef GL_ARB_provoking_vertex
< #define GL_ARB_provoking_vertex 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProvokingVertex (GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
< #endif
< 
< #ifndef GL_ARB_seamless_cube_map
< #define GL_ARB_seamless_cube_map 1
< #endif
< 
< #ifndef GL_ARB_sync
< #define GL_ARB_sync 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
< GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
< GLAPI void APIENTRY glDeleteSync (GLsync sync);
< GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
< GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
< GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *params);
< GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
< typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);
< typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);
< typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
< typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
< typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);
< typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
< #endif
< 
< #ifndef GL_ARB_texture_multisample
< #define GL_ARB_texture_multisample 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
< GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
< GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);
< GLAPI void APIENTRY glSampleMaski (GLuint index, GLbitfield mask);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
< typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
< typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
< typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);
< #endif
< 
< #ifndef GL_ARB_vertex_array_bgra
< #define GL_ARB_vertex_array_bgra 1
< #endif
< 
< #ifndef GL_ARB_draw_buffers_blend
< #define GL_ARB_draw_buffers_blend 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);
< GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
< GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);
< GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
< typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
< typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
< typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
< #endif
< 
< #ifndef GL_ARB_sample_shading
< #define GL_ARB_sample_shading 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glMinSampleShadingARB (GLclampf value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLclampf value);
< #endif
< 
< #ifndef GL_ARB_texture_cube_map_array
< #define GL_ARB_texture_cube_map_array 1
< #endif
< 
< #ifndef GL_ARB_texture_gather
< #define GL_ARB_texture_gather 1
< #endif
< 
< #ifndef GL_ARB_texture_query_lod
< #define GL_ARB_texture_query_lod 1
< #endif
< 
< #ifndef GL_ARB_shading_language_include
< #define GL_ARB_shading_language_include 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
< GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);
< GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
< GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);
< GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
< GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
< typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
< typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
< typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
< typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
< typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_ARB_texture_compression_bptc
< #define GL_ARB_texture_compression_bptc 1
< #endif
< 
< #ifndef GL_ARB_blend_func_extended
< #define GL_ARB_blend_func_extended 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
< GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
< typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);
< #endif
< 
< #ifndef GL_ARB_explicit_attrib_location
< #define GL_ARB_explicit_attrib_location 1
< #endif
< 
< #ifndef GL_ARB_occlusion_query2
< #define GL_ARB_occlusion_query2 1
< #endif
< 
< #ifndef GL_ARB_sampler_objects
< #define GL_ARB_sampler_objects 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
< GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);
< GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
< GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
< GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
< GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);
< GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);
< GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);
< GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);
< GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);
< typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);
< typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);
< typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
< typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
< typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);
< typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
< typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);
< typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);
< #endif
< 
< #ifndef GL_ARB_texture_rgb10_a2ui
< #define GL_ARB_texture_rgb10_a2ui 1
< #endif
< 
< #ifndef GL_ARB_texture_swizzle
< #define GL_ARB_texture_swizzle 1
< #endif
< 
< #ifndef GL_ARB_timer_query
< #define GL_ARB_timer_query 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
< GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);
< GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);
< #endif
< 
< #ifndef GL_ARB_vertex_type_2_10_10_10_rev
< #define GL_ARB_vertex_type_2_10_10_10_rev 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexP2ui (GLenum type, GLuint value);
< GLAPI void APIENTRY glVertexP2uiv (GLenum type, const GLuint *value);
< GLAPI void APIENTRY glVertexP3ui (GLenum type, GLuint value);
< GLAPI void APIENTRY glVertexP3uiv (GLenum type, const GLuint *value);
< GLAPI void APIENTRY glVertexP4ui (GLenum type, GLuint value);
< GLAPI void APIENTRY glVertexP4uiv (GLenum type, const GLuint *value);
< GLAPI void APIENTRY glTexCoordP1ui (GLenum type, GLuint coords);
< GLAPI void APIENTRY glTexCoordP1uiv (GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glTexCoordP2ui (GLenum type, GLuint coords);
< GLAPI void APIENTRY glTexCoordP2uiv (GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glTexCoordP3ui (GLenum type, GLuint coords);
< GLAPI void APIENTRY glTexCoordP3uiv (GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glTexCoordP4ui (GLenum type, GLuint coords);
< GLAPI void APIENTRY glTexCoordP4uiv (GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords);
< GLAPI void APIENTRY glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords);
< GLAPI void APIENTRY glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords);
< GLAPI void APIENTRY glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords);
< GLAPI void APIENTRY glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glNormalP3ui (GLenum type, GLuint coords);
< GLAPI void APIENTRY glNormalP3uiv (GLenum type, const GLuint *coords);
< GLAPI void APIENTRY glColorP3ui (GLenum type, GLuint color);
< GLAPI void APIENTRY glColorP3uiv (GLenum type, const GLuint *color);
< GLAPI void APIENTRY glColorP4ui (GLenum type, GLuint color);
< GLAPI void APIENTRY glColorP4uiv (GLenum type, const GLuint *color);
< GLAPI void APIENTRY glSecondaryColorP3ui (GLenum type, GLuint color);
< GLAPI void APIENTRY glSecondaryColorP3uiv (GLenum type, const GLuint *color);
< GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);
< typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);
< typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);
< typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
< typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);
< typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
< typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);
< typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
< typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);
< typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
< typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
< #endif
< 
< #ifndef GL_ARB_draw_indirect
< #define GL_ARB_draw_indirect 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const GLvoid *indirect);
< GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const GLvoid *indirect);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const GLvoid *indirect);
< typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const GLvoid *indirect);
< #endif
< 
< #ifndef GL_ARB_gpu_shader5
< #define GL_ARB_gpu_shader5 1
< #endif
< 
< #ifndef GL_ARB_gpu_shader_fp64
< #define GL_ARB_gpu_shader_fp64 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
< GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
< typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);
< #endif
< 
< #ifndef GL_ARB_shader_subroutine
< #define GL_ARB_shader_subroutine 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);
< GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);
< GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
< GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
< GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
< GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);
< GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);
< GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
< typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
< typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
< typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
< typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
< typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
< typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
< #endif
< 
< #ifndef GL_ARB_tessellation_shader
< #define GL_ARB_tessellation_shader 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
< GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
< typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);
< #endif
< 
< #ifndef GL_ARB_texture_buffer_object_rgb32
< #define GL_ARB_texture_buffer_object_rgb32 1
< #endif
< 
< #ifndef GL_ARB_transform_feedback2
< #define GL_ARB_transform_feedback2 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
< GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);
< GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
< GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
< GLAPI void APIENTRY glPauseTransformFeedback (void);
< GLAPI void APIENTRY glResumeTransformFeedback (void);
< GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
< typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
< typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
< typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
< typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
< typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
< #endif
< 
< #ifndef GL_ARB_transform_feedback3
< #define GL_ARB_transform_feedback3 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);
< GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);
< GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
< GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
< typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
< typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
< typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_ARB_ES2_compatibility
< #define GL_ARB_ES2_compatibility 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glReleaseShaderCompiler (void);
< GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
< GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
< GLAPI void APIENTRY glDepthRangef (GLclampf n, GLclampf f);
< GLAPI void APIENTRY glClearDepthf (GLclampf d);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);
< typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
< typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
< typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f);
< typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLclampf d);
< #endif
< 
< #ifndef GL_ARB_get_program_binary
< #define GL_ARB_get_program_binary 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
< GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
< GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
< typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
< #endif
< 
< #ifndef GL_ARB_separate_shader_objects
< #define GL_ARB_separate_shader_objects 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
< GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);
< GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar* *strings);
< GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
< GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);
< GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
< GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
< GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);
< GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);
< GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
< GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);
< GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
< GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
< GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
< GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);
< GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
< GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
< GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
< GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
< GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
< GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
< GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
< typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
< typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar* *strings);
< typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
< typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);
< typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
< typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
< typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
< typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
< #endif
< 
< #ifndef GL_ARB_vertex_attrib_64bit
< #define GL_ARB_vertex_attrib_64bit 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
< GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);
< #endif
< 
< #ifndef GL_ARB_viewport_array
< #define GL_ARB_viewport_array 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);
< GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
< GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);
< GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
< GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLclampd *v);
< GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLclampd n, GLclampd f);
< GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);
< GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
< typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);
< typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLclampd *v);
< typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLclampd n, GLclampd f);
< typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
< typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);
< #endif
< 
< #ifndef GL_ARB_cl_event
< #define GL_ARB_cl_event 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
< #endif
< 
< #ifndef GL_ARB_debug_output
< #define GL_ARB_debug_output 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
< GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
< GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const GLvoid *userParam);
< GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
< typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
< typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const GLvoid *userParam);
< typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
< #endif
< 
< #ifndef GL_ARB_robustness
< #define GL_ARB_robustness 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);
< GLAPI void APIENTRY glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
< GLAPI void APIENTRY glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
< GLAPI void APIENTRY glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
< GLAPI void APIENTRY glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat *values);
< GLAPI void APIENTRY glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint *values);
< GLAPI void APIENTRY glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort *values);
< GLAPI void APIENTRY glGetnPolygonStippleARB (GLsizei bufSize, GLubyte *pattern);
< GLAPI void APIENTRY glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
< GLAPI void APIENTRY glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
< GLAPI void APIENTRY glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
< GLAPI void APIENTRY glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
< GLAPI void APIENTRY glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
< GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
< GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
< GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
< GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
< GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);
< GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
< GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
< typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
< typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
< typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
< typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);
< typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);
< typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);
< typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);
< typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
< typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
< typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
< typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
< typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
< typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
< typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
< typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
< typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
< typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
< typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
< #endif
< 
< #ifndef GL_ARB_shader_stencil_export
< #define GL_ARB_shader_stencil_export 1
< #endif
< 
< #ifndef GL_EXT_abgr
< #define GL_EXT_abgr 1
< #endif
< 
< #ifndef GL_EXT_blend_color
< #define GL_EXT_blend_color 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendColorEXT (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
< #endif
< 
< #ifndef GL_EXT_polygon_offset
< #define GL_EXT_polygon_offset 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPolygonOffsetEXT (GLfloat factor, GLfloat bias);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
< #endif
< 
< #ifndef GL_EXT_texture
< #define GL_EXT_texture 1
< #endif
< 
< #ifndef GL_EXT_texture3D
< #define GL_EXT_texture3D 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< #endif
< 
< #ifndef GL_SGIS_texture_filter4
< #define GL_SGIS_texture_filter4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat *weights);
< GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
< typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
< #endif
< 
< #ifndef GL_EXT_subtexture
< #define GL_EXT_subtexture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
< #endif
< 
< #ifndef GL_EXT_copy_texture
< #define GL_EXT_copy_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
< GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
< GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
< typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
< typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< #endif
< 
< #ifndef GL_EXT_histogram
< #define GL_EXT_histogram 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
< GLAPI void APIENTRY glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink);
< GLAPI void APIENTRY glResetHistogramEXT (GLenum target);
< GLAPI void APIENTRY glResetMinmaxEXT (GLenum target);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
< typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
< typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
< typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target);
< #endif
< 
< #ifndef GL_EXT_convolution
< #define GL_EXT_convolution 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
< GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
< GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params);
< GLAPI void APIENTRY glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params);
< GLAPI void APIENTRY glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *image);
< GLAPI void APIENTRY glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
< GLAPI void APIENTRY glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
< typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
< typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
< typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
< typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
< #endif
< 
< #ifndef GL_SGI_color_matrix
< #define GL_SGI_color_matrix 1
< #endif
< 
< #ifndef GL_SGI_color_table
< #define GL_SGI_color_table 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
< GLAPI void APIENTRY glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glGetColorTableSGI (GLenum target, GLenum format, GLenum type, GLvoid *table);
< GLAPI void APIENTRY glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
< typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_SGIX_pixel_texture
< #define GL_SGIX_pixel_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPixelTexGenSGIX (GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
< #endif
< 
< #ifndef GL_SGIS_pixel_texture
< #define GL_SGIS_pixel_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPixelTexGenParameteriSGIS (GLenum pname, GLint param);
< GLAPI void APIENTRY glPixelTexGenParameterivSGIS (GLenum pname, const GLint *params);
< GLAPI void APIENTRY glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
< #endif
< 
< #ifndef GL_SGIS_texture4D
< #define GL_SGIS_texture4D 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
< #endif
< 
< #ifndef GL_SGI_texture_color_table
< #define GL_SGI_texture_color_table 1
< #endif
< 
< #ifndef GL_EXT_cmyka
< #define GL_EXT_cmyka 1
< #endif
< 
< #ifndef GL_EXT_texture_object
< #define GL_EXT_texture_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLboolean APIENTRY glAreTexturesResidentEXT (GLsizei n, const GLuint *textures, GLboolean *residences);
< GLAPI void APIENTRY glBindTextureEXT (GLenum target, GLuint texture);
< GLAPI void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint *textures);
< GLAPI void APIENTRY glGenTexturesEXT (GLsizei n, GLuint *textures);
< GLAPI GLboolean APIENTRY glIsTextureEXT (GLuint texture);
< GLAPI void APIENTRY glPrioritizeTexturesEXT (GLsizei n, const GLuint *textures, const GLclampf *priorities);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
< typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
< typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
< typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
< typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture);
< typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
< #endif
< 
< #ifndef GL_SGIS_detail_texture
< #define GL_SGIS_detail_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);
< GLAPI void APIENTRY glGetDetailTexFuncSGIS (GLenum target, GLfloat *points);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
< typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
< #endif
< 
< #ifndef GL_SGIS_sharpen_texture
< #define GL_SGIS_sharpen_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);
< GLAPI void APIENTRY glGetSharpenTexFuncSGIS (GLenum target, GLfloat *points);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
< typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
< #endif
< 
< #ifndef GL_EXT_packed_pixels
< #define GL_EXT_packed_pixels 1
< #endif
< 
< #ifndef GL_SGIS_texture_lod
< #define GL_SGIS_texture_lod 1
< #endif
< 
< #ifndef GL_SGIS_multisample
< #define GL_SGIS_multisample 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glSampleMaskSGIS (GLclampf value, GLboolean invert);
< GLAPI void APIENTRY glSamplePatternSGIS (GLenum pattern);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
< typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
< #endif
< 
< #ifndef GL_EXT_rescale_normal
< #define GL_EXT_rescale_normal 1
< #endif
< 
< #ifndef GL_EXT_vertex_array
< #define GL_EXT_vertex_array 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glArrayElementEXT (GLint i);
< GLAPI void APIENTRY glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< GLAPI void APIENTRY glDrawArraysEXT (GLenum mode, GLint first, GLsizei count);
< GLAPI void APIENTRY glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean *pointer);
< GLAPI void APIENTRY glGetPointervEXT (GLenum pname, GLvoid* *params);
< GLAPI void APIENTRY glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< GLAPI void APIENTRY glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< GLAPI void APIENTRY glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< GLAPI void APIENTRY glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i);
< typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
< typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
< typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
< typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_EXT_misc_attribute
< #define GL_EXT_misc_attribute 1
< #endif
< 
< #ifndef GL_SGIS_generate_mipmap
< #define GL_SGIS_generate_mipmap 1
< #endif
< 
< #ifndef GL_SGIX_clipmap
< #define GL_SGIX_clipmap 1
< #endif
< 
< #ifndef GL_SGIX_shadow
< #define GL_SGIX_shadow 1
< #endif
< 
< #ifndef GL_SGIS_texture_edge_clamp
< #define GL_SGIS_texture_edge_clamp 1
< #endif
< 
< #ifndef GL_SGIS_texture_border_clamp
< #define GL_SGIS_texture_border_clamp 1
< #endif
< 
< #ifndef GL_EXT_blend_minmax
< #define GL_EXT_blend_minmax 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendEquationEXT (GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
< #endif
< 
< #ifndef GL_EXT_blend_subtract
< #define GL_EXT_blend_subtract 1
< #endif
< 
< #ifndef GL_EXT_blend_logic_op
< #define GL_EXT_blend_logic_op 1
< #endif
< 
< #ifndef GL_SGIX_interlace
< #define GL_SGIX_interlace 1
< #endif
< 
< #ifndef GL_SGIX_pixel_tiles
< #define GL_SGIX_pixel_tiles 1
< #endif
< 
< #ifndef GL_SGIX_texture_select
< #define GL_SGIX_texture_select 1
< #endif
< 
< #ifndef GL_SGIX_sprite
< #define GL_SGIX_sprite 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glSpriteParameterfSGIX (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glSpriteParameterfvSGIX (GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glSpriteParameteriSGIX (GLenum pname, GLint param);
< GLAPI void APIENTRY glSpriteParameterivSGIX (GLenum pname, const GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
< #endif
< 
< #ifndef GL_SGIX_texture_multi_buffer
< #define GL_SGIX_texture_multi_buffer 1
< #endif
< 
< #ifndef GL_EXT_point_parameters
< #define GL_EXT_point_parameters 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPointParameterfEXT (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glPointParameterfvEXT (GLenum pname, const GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
< #endif
< 
< #ifndef GL_SGIS_point_parameters
< #define GL_SGIS_point_parameters 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPointParameterfSGIS (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glPointParameterfvSGIS (GLenum pname, const GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
< #endif
< 
< #ifndef GL_SGIX_instruments
< #define GL_SGIX_instruments 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLint APIENTRY glGetInstrumentsSGIX (void);
< GLAPI void APIENTRY glInstrumentsBufferSGIX (GLsizei size, GLint *buffer);
< GLAPI GLint APIENTRY glPollInstrumentsSGIX (GLint *marker_p);
< GLAPI void APIENTRY glReadInstrumentsSGIX (GLint marker);
< GLAPI void APIENTRY glStartInstrumentsSGIX (void);
< GLAPI void APIENTRY glStopInstrumentsSGIX (GLint marker);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) (void);
< typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
< typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
< typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
< typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
< typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
< #endif
< 
< #ifndef GL_SGIX_texture_scale_bias
< #define GL_SGIX_texture_scale_bias 1
< #endif
< 
< #ifndef GL_SGIX_framezoom
< #define GL_SGIX_framezoom 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFrameZoomSGIX (GLint factor);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
< #endif
< 
< #ifndef GL_SGIX_tag_sample_buffer
< #define GL_SGIX_tag_sample_buffer 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTagSampleBufferSGIX (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
< #endif
< 
< #ifndef GL_SGIX_polynomial_ffd
< #define GL_SGIX_polynomial_ffd 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
< GLAPI void APIENTRY glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
< GLAPI void APIENTRY glDeformSGIX (GLbitfield mask);
< GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield mask);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
< typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
< typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask);
< typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
< #endif
< 
< #ifndef GL_SGIX_reference_plane
< #define GL_SGIX_reference_plane 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glReferencePlaneSGIX (const GLdouble *equation);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
< #endif
< 
< #ifndef GL_SGIX_flush_raster
< #define GL_SGIX_flush_raster 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFlushRasterSGIX (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC) (void);
< #endif
< 
< #ifndef GL_SGIX_depth_texture
< #define GL_SGIX_depth_texture 1
< #endif
< 
< #ifndef GL_SGIS_fog_function
< #define GL_SGIS_fog_function 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFogFuncSGIS (GLsizei n, const GLfloat *points);
< GLAPI void APIENTRY glGetFogFuncSGIS (GLfloat *points);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
< typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
< #endif
< 
< #ifndef GL_SGIX_fog_offset
< #define GL_SGIX_fog_offset 1
< #endif
< 
< #ifndef GL_HP_image_transform
< #define GL_HP_image_transform 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param);
< GLAPI void APIENTRY glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
< #endif
< 
< #ifndef GL_HP_convolution_border_modes
< #define GL_HP_convolution_border_modes 1
< #endif
< 
< #ifndef GL_SGIX_texture_add_env
< #define GL_SGIX_texture_add_env 1
< #endif
< 
< #ifndef GL_EXT_color_subtable
< #define GL_EXT_color_subtable 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
< GLAPI void APIENTRY glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
< typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
< #endif
< 
< #ifndef GL_PGI_vertex_hints
< #define GL_PGI_vertex_hints 1
< #endif
< 
< #ifndef GL_PGI_misc_hints
< #define GL_PGI_misc_hints 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glHintPGI (GLenum target, GLint mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode);
< #endif
< 
< #ifndef GL_EXT_paletted_texture
< #define GL_EXT_paletted_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
< GLAPI void APIENTRY glGetColorTableEXT (GLenum target, GLenum format, GLenum type, GLvoid *data);
< GLAPI void APIENTRY glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
< #endif
< 
< #ifndef GL_EXT_clip_volume_hint
< #define GL_EXT_clip_volume_hint 1
< #endif
< 
< #ifndef GL_SGIX_list_priority
< #define GL_SGIX_list_priority 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetListParameterivSGIX (GLuint list, GLenum pname, GLint *params);
< GLAPI void APIENTRY glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glListParameteriSGIX (GLuint list, GLenum pname, GLint param);
< GLAPI void APIENTRY glListParameterivSGIX (GLuint list, GLenum pname, const GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
< #endif
< 
< #ifndef GL_SGIX_ir_instrument1
< #define GL_SGIX_ir_instrument1 1
< #endif
< 
< #ifndef GL_SGIX_calligraphic_fragment
< #define GL_SGIX_calligraphic_fragment 1
< #endif
< 
< #ifndef GL_SGIX_texture_lod_bias
< #define GL_SGIX_texture_lod_bias 1
< #endif
< 
< #ifndef GL_SGIX_shadow_ambient
< #define GL_SGIX_shadow_ambient 1
< #endif
< 
< #ifndef GL_EXT_index_texture
< #define GL_EXT_index_texture 1
< #endif
< 
< #ifndef GL_EXT_index_material
< #define GL_EXT_index_material 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glIndexMaterialEXT (GLenum face, GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
< #endif
< 
< #ifndef GL_EXT_index_func
< #define GL_EXT_index_func 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glIndexFuncEXT (GLenum func, GLclampf ref);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
< #endif
< 
< #ifndef GL_EXT_index_array_formats
< #define GL_EXT_index_array_formats 1
< #endif
< 
< #ifndef GL_EXT_compiled_vertex_array
< #define GL_EXT_compiled_vertex_array 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glLockArraysEXT (GLint first, GLsizei count);
< GLAPI void APIENTRY glUnlockArraysEXT (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
< typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) (void);
< #endif
< 
< #ifndef GL_EXT_cull_vertex
< #define GL_EXT_cull_vertex 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCullParameterdvEXT (GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glCullParameterfvEXT (GLenum pname, GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
< #endif
< 
< #ifndef GL_SGIX_ycrcb
< #define GL_SGIX_ycrcb 1
< #endif
< 
< #ifndef GL_SGIX_fragment_lighting
< #define GL_SGIX_fragment_lighting 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFragmentColorMaterialSGIX (GLenum face, GLenum mode);
< GLAPI void APIENTRY glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param);
< GLAPI void APIENTRY glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glFragmentLightModelfSGIX (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glFragmentLightModelfvSGIX (GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glFragmentLightModeliSGIX (GLenum pname, GLint param);
< GLAPI void APIENTRY glFragmentLightModelivSGIX (GLenum pname, const GLint *params);
< GLAPI void APIENTRY glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param);
< GLAPI void APIENTRY glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint *params);
< GLAPI void APIENTRY glLightEnviSGIX (GLenum pname, GLint param);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
< #endif
< 
< #ifndef GL_IBM_rasterpos_clip
< #define GL_IBM_rasterpos_clip 1
< #endif
< 
< #ifndef GL_HP_texture_lighting
< #define GL_HP_texture_lighting 1
< #endif
< 
< #ifndef GL_EXT_draw_range_elements
< #define GL_EXT_draw_range_elements 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
< #endif
< 
< #ifndef GL_WIN_phong_shading
< #define GL_WIN_phong_shading 1
< #endif
< 
< #ifndef GL_WIN_specular_fog
< #define GL_WIN_specular_fog 1
< #endif
< 
< #ifndef GL_EXT_light_texture
< #define GL_EXT_light_texture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glApplyTextureEXT (GLenum mode);
< GLAPI void APIENTRY glTextureLightEXT (GLenum pname);
< GLAPI void APIENTRY glTextureMaterialEXT (GLenum face, GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
< typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
< typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
< #endif
< 
< #ifndef GL_SGIX_blend_alpha_minmax
< #define GL_SGIX_blend_alpha_minmax 1
< #endif
< 
< #ifndef GL_EXT_bgra
< #define GL_EXT_bgra 1
< #endif
< 
< #ifndef GL_SGIX_async
< #define GL_SGIX_async 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glAsyncMarkerSGIX (GLuint marker);
< GLAPI GLint APIENTRY glFinishAsyncSGIX (GLuint *markerp);
< GLAPI GLint APIENTRY glPollAsyncSGIX (GLuint *markerp);
< GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX (GLsizei range);
< GLAPI void APIENTRY glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range);
< GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX (GLuint marker);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
< typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
< typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
< typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
< typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
< typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
< #endif
< 
< #ifndef GL_SGIX_async_pixel
< #define GL_SGIX_async_pixel 1
< #endif
< 
< #ifndef GL_SGIX_async_histogram
< #define GL_SGIX_async_histogram 1
< #endif
< 
< #ifndef GL_INTEL_parallel_arrays
< #define GL_INTEL_parallel_arrays 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
< GLAPI void APIENTRY glNormalPointervINTEL (GLenum type, const GLvoid* *pointer);
< GLAPI void APIENTRY glColorPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
< GLAPI void APIENTRY glTexCoordPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
< typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);
< typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
< typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
< #endif
< 
< #ifndef GL_HP_occlusion_test
< #define GL_HP_occlusion_test 1
< #endif
< 
< #ifndef GL_EXT_pixel_transform
< #define GL_EXT_pixel_transform 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param);
< GLAPI void APIENTRY glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
< #endif
< 
< #ifndef GL_EXT_pixel_transform_color_table
< #define GL_EXT_pixel_transform_color_table 1
< #endif
< 
< #ifndef GL_EXT_shared_texture_palette
< #define GL_EXT_shared_texture_palette 1
< #endif
< 
< #ifndef GL_EXT_separate_specular_color
< #define GL_EXT_separate_specular_color 1
< #endif
< 
< #ifndef GL_EXT_secondary_color
< #define GL_EXT_secondary_color 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue);
< GLAPI void APIENTRY glSecondaryColor3bvEXT (const GLbyte *v);
< GLAPI void APIENTRY glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue);
< GLAPI void APIENTRY glSecondaryColor3dvEXT (const GLdouble *v);
< GLAPI void APIENTRY glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue);
< GLAPI void APIENTRY glSecondaryColor3fvEXT (const GLfloat *v);
< GLAPI void APIENTRY glSecondaryColor3iEXT (GLint red, GLint green, GLint blue);
< GLAPI void APIENTRY glSecondaryColor3ivEXT (const GLint *v);
< GLAPI void APIENTRY glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue);
< GLAPI void APIENTRY glSecondaryColor3svEXT (const GLshort *v);
< GLAPI void APIENTRY glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue);
< GLAPI void APIENTRY glSecondaryColor3ubvEXT (const GLubyte *v);
< GLAPI void APIENTRY glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue);
< GLAPI void APIENTRY glSecondaryColor3uivEXT (const GLuint *v);
< GLAPI void APIENTRY glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue);
< GLAPI void APIENTRY glSecondaryColor3usvEXT (const GLushort *v);
< GLAPI void APIENTRY glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
< typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_EXT_texture_perturb_normal
< #define GL_EXT_texture_perturb_normal 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTextureNormalEXT (GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
< #endif
< 
< #ifndef GL_EXT_multi_draw_arrays
< #define GL_EXT_multi_draw_arrays 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
< GLAPI void APIENTRY glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
< typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
< #endif
< 
< #ifndef GL_EXT_fog_coord
< #define GL_EXT_fog_coord 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFogCoordfEXT (GLfloat coord);
< GLAPI void APIENTRY glFogCoordfvEXT (const GLfloat *coord);
< GLAPI void APIENTRY glFogCoorddEXT (GLdouble coord);
< GLAPI void APIENTRY glFogCoorddvEXT (const GLdouble *coord);
< GLAPI void APIENTRY glFogCoordPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
< typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
< typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
< typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
< typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_REND_screen_coordinates
< #define GL_REND_screen_coordinates 1
< #endif
< 
< #ifndef GL_EXT_coordinate_frame
< #define GL_EXT_coordinate_frame 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz);
< GLAPI void APIENTRY glTangent3bvEXT (const GLbyte *v);
< GLAPI void APIENTRY glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz);
< GLAPI void APIENTRY glTangent3dvEXT (const GLdouble *v);
< GLAPI void APIENTRY glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz);
< GLAPI void APIENTRY glTangent3fvEXT (const GLfloat *v);
< GLAPI void APIENTRY glTangent3iEXT (GLint tx, GLint ty, GLint tz);
< GLAPI void APIENTRY glTangent3ivEXT (const GLint *v);
< GLAPI void APIENTRY glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz);
< GLAPI void APIENTRY glTangent3svEXT (const GLshort *v);
< GLAPI void APIENTRY glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz);
< GLAPI void APIENTRY glBinormal3bvEXT (const GLbyte *v);
< GLAPI void APIENTRY glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz);
< GLAPI void APIENTRY glBinormal3dvEXT (const GLdouble *v);
< GLAPI void APIENTRY glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz);
< GLAPI void APIENTRY glBinormal3fvEXT (const GLfloat *v);
< GLAPI void APIENTRY glBinormal3iEXT (GLint bx, GLint by, GLint bz);
< GLAPI void APIENTRY glBinormal3ivEXT (const GLint *v);
< GLAPI void APIENTRY glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz);
< GLAPI void APIENTRY glBinormal3svEXT (const GLshort *v);
< GLAPI void APIENTRY glTangentPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glBinormalPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
< typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
< typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
< typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
< typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
< typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
< typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
< typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
< typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
< typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
< typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
< typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
< typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_EXT_texture_env_combine
< #define GL_EXT_texture_env_combine 1
< #endif
< 
< #ifndef GL_APPLE_specular_vector
< #define GL_APPLE_specular_vector 1
< #endif
< 
< #ifndef GL_APPLE_transform_hint
< #define GL_APPLE_transform_hint 1
< #endif
< 
< #ifndef GL_SGIX_fog_scale
< #define GL_SGIX_fog_scale 1
< #endif
< 
< #ifndef GL_SUNX_constant_data
< #define GL_SUNX_constant_data 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFinishTextureSUNX (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC) (void);
< #endif
< 
< #ifndef GL_SUN_global_alpha
< #define GL_SUN_global_alpha 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGlobalAlphaFactorbSUN (GLbyte factor);
< GLAPI void APIENTRY glGlobalAlphaFactorsSUN (GLshort factor);
< GLAPI void APIENTRY glGlobalAlphaFactoriSUN (GLint factor);
< GLAPI void APIENTRY glGlobalAlphaFactorfSUN (GLfloat factor);
< GLAPI void APIENTRY glGlobalAlphaFactordSUN (GLdouble factor);
< GLAPI void APIENTRY glGlobalAlphaFactorubSUN (GLubyte factor);
< GLAPI void APIENTRY glGlobalAlphaFactorusSUN (GLushort factor);
< GLAPI void APIENTRY glGlobalAlphaFactoruiSUN (GLuint factor);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
< typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
< #endif
< 
< #ifndef GL_SUN_triangle_list
< #define GL_SUN_triangle_list 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glReplacementCodeuiSUN (GLuint code);
< GLAPI void APIENTRY glReplacementCodeusSUN (GLushort code);
< GLAPI void APIENTRY glReplacementCodeubSUN (GLubyte code);
< GLAPI void APIENTRY glReplacementCodeuivSUN (const GLuint *code);
< GLAPI void APIENTRY glReplacementCodeusvSUN (const GLushort *code);
< GLAPI void APIENTRY glReplacementCodeubvSUN (const GLubyte *code);
< GLAPI void APIENTRY glReplacementCodePointerSUN (GLenum type, GLsizei stride, const GLvoid* *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);
< #endif
< 
< #ifndef GL_SUN_vertex
< #define GL_SUN_vertex 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
< GLAPI void APIENTRY glColor4ubVertex2fvSUN (const GLubyte *c, const GLfloat *v);
< GLAPI void APIENTRY glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glColor4ubVertex3fvSUN (const GLubyte *c, const GLfloat *v);
< GLAPI void APIENTRY glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glColor3fVertex3fvSUN (const GLfloat *c, const GLfloat *v);
< GLAPI void APIENTRY glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glNormal3fVertex3fvSUN (const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glColor4fNormal3fVertex3fvSUN (const GLfloat *c, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glTexCoord2fVertex3fvSUN (const GLfloat *tc, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glTexCoord4fVertex4fvSUN (const GLfloat *tc, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fvSUN (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glTexCoord2fColor3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiVertex3fvSUN (const GLuint *rc, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint *rc, const GLubyte *c, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
< GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
< #endif
< 
< #ifndef GL_EXT_blend_func_separate
< #define GL_EXT_blend_func_separate 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
< #endif
< 
< #ifndef GL_INGR_blend_func_separate
< #define GL_INGR_blend_func_separate 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
< #endif
< 
< #ifndef GL_INGR_color_clamp
< #define GL_INGR_color_clamp 1
< #endif
< 
< #ifndef GL_INGR_interlace_read
< #define GL_INGR_interlace_read 1
< #endif
< 
< #ifndef GL_EXT_stencil_wrap
< #define GL_EXT_stencil_wrap 1
< #endif
< 
< #ifndef GL_EXT_422_pixels
< #define GL_EXT_422_pixels 1
< #endif
< 
< #ifndef GL_NV_texgen_reflection
< #define GL_NV_texgen_reflection 1
< #endif
< 
< #ifndef GL_SUN_convolution_border_modes
< #define GL_SUN_convolution_border_modes 1
< #endif
< 
< #ifndef GL_EXT_texture_env_add
< #define GL_EXT_texture_env_add 1
< #endif
< 
< #ifndef GL_EXT_texture_lod_bias
< #define GL_EXT_texture_lod_bias 1
< #endif
< 
< #ifndef GL_EXT_texture_filter_anisotropic
< #define GL_EXT_texture_filter_anisotropic 1
< #endif
< 
< #ifndef GL_EXT_vertex_weighting
< #define GL_EXT_vertex_weighting 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexWeightfEXT (GLfloat weight);
< GLAPI void APIENTRY glVertexWeightfvEXT (const GLfloat *weight);
< GLAPI void APIENTRY glVertexWeightPointerEXT (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
< typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
< typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_NV_light_max_exponent
< #define GL_NV_light_max_exponent 1
< #endif
< 
< #ifndef GL_NV_vertex_array_range
< #define GL_NV_vertex_array_range 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFlushVertexArrayRangeNV (void);
< GLAPI void APIENTRY glVertexArrayRangeNV (GLsizei length, const GLvoid *pointer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
< typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const GLvoid *pointer);
< #endif
< 
< #ifndef GL_NV_register_combiners
< #define GL_NV_register_combiners 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCombinerParameterfvNV (GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glCombinerParameterfNV (GLenum pname, GLfloat param);
< GLAPI void APIENTRY glCombinerParameterivNV (GLenum pname, const GLint *params);
< GLAPI void APIENTRY glCombinerParameteriNV (GLenum pname, GLint param);
< GLAPI void APIENTRY glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
< GLAPI void APIENTRY glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
< GLAPI void APIENTRY glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
< GLAPI void APIENTRY glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
< typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
< typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
< typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_NV_fog_distance
< #define GL_NV_fog_distance 1
< #endif
< 
< #ifndef GL_NV_texgen_emboss
< #define GL_NV_texgen_emboss 1
< #endif
< 
< #ifndef GL_NV_blend_square
< #define GL_NV_blend_square 1
< #endif
< 
< #ifndef GL_NV_texture_env_combine4
< #define GL_NV_texture_env_combine4 1
< #endif
< 
< #ifndef GL_MESA_resize_buffers
< #define GL_MESA_resize_buffers 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glResizeBuffersMESA (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void);
< #endif
< 
< #ifndef GL_MESA_window_pos
< #define GL_MESA_window_pos 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glWindowPos2dMESA (GLdouble x, GLdouble y);
< GLAPI void APIENTRY glWindowPos2dvMESA (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos2fMESA (GLfloat x, GLfloat y);
< GLAPI void APIENTRY glWindowPos2fvMESA (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos2iMESA (GLint x, GLint y);
< GLAPI void APIENTRY glWindowPos2ivMESA (const GLint *v);
< GLAPI void APIENTRY glWindowPos2sMESA (GLshort x, GLshort y);
< GLAPI void APIENTRY glWindowPos2svMESA (const GLshort *v);
< GLAPI void APIENTRY glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glWindowPos3dvMESA (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glWindowPos3fvMESA (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos3iMESA (GLint x, GLint y, GLint z);
< GLAPI void APIENTRY glWindowPos3ivMESA (const GLint *v);
< GLAPI void APIENTRY glWindowPos3sMESA (GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glWindowPos3svMESA (const GLshort *v);
< GLAPI void APIENTRY glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glWindowPos4dvMESA (const GLdouble *v);
< GLAPI void APIENTRY glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glWindowPos4fvMESA (const GLfloat *v);
< GLAPI void APIENTRY glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glWindowPos4ivMESA (const GLint *v);
< GLAPI void APIENTRY glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w);
< GLAPI void APIENTRY glWindowPos4svMESA (const GLshort *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
< typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
< typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
< #endif
< 
< #ifndef GL_IBM_cull_vertex
< #define GL_IBM_cull_vertex 1
< #endif
< 
< #ifndef GL_IBM_multimode_draw_arrays
< #define GL_IBM_multimode_draw_arrays 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glMultiModeDrawArraysIBM (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
< GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
< typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
< #endif
< 
< #ifndef GL_IBM_vertex_array_lists
< #define GL_IBM_vertex_array_lists 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glEdgeFlagPointerListIBM (GLint stride, const GLboolean* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glFogCoordPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glIndexPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glNormalPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< GLAPI void APIENTRY glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
< #endif
< 
< #ifndef GL_SGIX_subsample
< #define GL_SGIX_subsample 1
< #endif
< 
< #ifndef GL_SGIX_ycrcba
< #define GL_SGIX_ycrcba 1
< #endif
< 
< #ifndef GL_SGIX_ycrcb_subsample
< #define GL_SGIX_ycrcb_subsample 1
< #endif
< 
< #ifndef GL_SGIX_depth_pass_instrument
< #define GL_SGIX_depth_pass_instrument 1
< #endif
< 
< #ifndef GL_3DFX_texture_compression_FXT1
< #define GL_3DFX_texture_compression_FXT1 1
< #endif
< 
< #ifndef GL_3DFX_multisample
< #define GL_3DFX_multisample 1
< #endif
< 
< #ifndef GL_3DFX_tbuffer
< #define GL_3DFX_tbuffer 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTbufferMask3DFX (GLuint mask);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
< #endif
< 
< #ifndef GL_EXT_multisample
< #define GL_EXT_multisample 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glSampleMaskEXT (GLclampf value, GLboolean invert);
< GLAPI void APIENTRY glSamplePatternEXT (GLenum pattern);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
< typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
< #endif
< 
< #ifndef GL_SGIX_vertex_preclip
< #define GL_SGIX_vertex_preclip 1
< #endif
< 
< #ifndef GL_SGIX_convolution_accuracy
< #define GL_SGIX_convolution_accuracy 1
< #endif
< 
< #ifndef GL_SGIX_resample
< #define GL_SGIX_resample 1
< #endif
< 
< #ifndef GL_SGIS_point_line_texgen
< #define GL_SGIS_point_line_texgen 1
< #endif
< 
< #ifndef GL_SGIS_texture_color_mask
< #define GL_SGIS_texture_color_mask 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
< #endif
< 
< #ifndef GL_SGIX_igloo_interface
< #define GL_SGIX_igloo_interface 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glIglooInterfaceSGIX (GLenum pname, const GLvoid *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);
< #endif
< 
< #ifndef GL_EXT_texture_env_dot3
< #define GL_EXT_texture_env_dot3 1
< #endif
< 
< #ifndef GL_ATI_texture_mirror_once
< #define GL_ATI_texture_mirror_once 1
< #endif
< 
< #ifndef GL_NV_fence
< #define GL_NV_fence 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDeleteFencesNV (GLsizei n, const GLuint *fences);
< GLAPI void APIENTRY glGenFencesNV (GLsizei n, GLuint *fences);
< GLAPI GLboolean APIENTRY glIsFenceNV (GLuint fence);
< GLAPI GLboolean APIENTRY glTestFenceNV (GLuint fence);
< GLAPI void APIENTRY glGetFenceivNV (GLuint fence, GLenum pname, GLint *params);
< GLAPI void APIENTRY glFinishFenceNV (GLuint fence);
< GLAPI void APIENTRY glSetFenceNV (GLuint fence, GLenum condition);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
< typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
< typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);
< typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);
< typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);
< typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
< #endif
< 
< #ifndef GL_NV_evaluators
< #define GL_NV_evaluators 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
< GLAPI void APIENTRY glMapParameterivNV (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
< GLAPI void APIENTRY glGetMapParameterivNV (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glEvalMapsNV (GLenum target, GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
< typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
< typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
< #endif
< 
< #ifndef GL_NV_packed_depth_stencil
< #define GL_NV_packed_depth_stencil 1
< #endif
< 
< #ifndef GL_NV_register_combiners2
< #define GL_NV_register_combiners2 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
< #endif
< 
< #ifndef GL_NV_texture_compression_vtc
< #define GL_NV_texture_compression_vtc 1
< #endif
< 
< #ifndef GL_NV_texture_rectangle
< #define GL_NV_texture_rectangle 1
< #endif
< 
< #ifndef GL_NV_texture_shader
< #define GL_NV_texture_shader 1
< #endif
< 
< #ifndef GL_NV_texture_shader2
< #define GL_NV_texture_shader2 1
< #endif
< 
< #ifndef GL_NV_vertex_array_range2
< #define GL_NV_vertex_array_range2 1
< #endif
< 
< #ifndef GL_NV_vertex_program
< #define GL_NV_vertex_program 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLboolean APIENTRY glAreProgramsResidentNV (GLsizei n, const GLuint *programs, GLboolean *residences);
< GLAPI void APIENTRY glBindProgramNV (GLenum target, GLuint id);
< GLAPI void APIENTRY glDeleteProgramsNV (GLsizei n, const GLuint *programs);
< GLAPI void APIENTRY glExecuteProgramNV (GLenum target, GLuint id, const GLfloat *params);
< GLAPI void APIENTRY glGenProgramsNV (GLsizei n, GLuint *programs);
< GLAPI void APIENTRY glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetProgramivNV (GLuint id, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetProgramStringNV (GLuint id, GLenum pname, GLubyte *program);
< GLAPI void APIENTRY glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetVertexAttribivNV (GLuint index, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribPointervNV (GLuint index, GLenum pname, GLvoid* *pointer);
< GLAPI GLboolean APIENTRY glIsProgramNV (GLuint id);
< GLAPI void APIENTRY glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
< GLAPI void APIENTRY glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glProgramParameters4dvNV (GLenum target, GLuint index, GLuint count, const GLdouble *v);
< GLAPI void APIENTRY glProgramParameters4fvNV (GLenum target, GLuint index, GLuint count, const GLfloat *v);
< GLAPI void APIENTRY glRequestResidentProgramsNV (GLsizei n, const GLuint *programs);
< GLAPI void APIENTRY glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform);
< GLAPI void APIENTRY glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glVertexAttrib1dNV (GLuint index, GLdouble x);
< GLAPI void APIENTRY glVertexAttrib1dvNV (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib1fNV (GLuint index, GLfloat x);
< GLAPI void APIENTRY glVertexAttrib1fvNV (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib1sNV (GLuint index, GLshort x);
< GLAPI void APIENTRY glVertexAttrib1svNV (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glVertexAttrib2dvNV (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y);
< GLAPI void APIENTRY glVertexAttrib2fvNV (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y);
< GLAPI void APIENTRY glVertexAttrib2svNV (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glVertexAttrib3dvNV (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glVertexAttrib3fvNV (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glVertexAttrib3svNV (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glVertexAttrib4dvNV (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glVertexAttrib4fvNV (GLuint index, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
< GLAPI void APIENTRY glVertexAttrib4svNV (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
< GLAPI void APIENTRY glVertexAttrib4ubvNV (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort *v);
< GLAPI void APIENTRY glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort *v);
< GLAPI void APIENTRY glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort *v);
< GLAPI void APIENTRY glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat *v);
< GLAPI void APIENTRY glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort *v);
< GLAPI void APIENTRY glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
< typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
< typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
< typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
< typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
< typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
< typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
< typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
< typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
< #endif
< 
< #ifndef GL_SGIX_texture_coordinate_clamp
< #define GL_SGIX_texture_coordinate_clamp 1
< #endif
< 
< #ifndef GL_SGIX_scalebias_hint
< #define GL_SGIX_scalebias_hint 1
< #endif
< 
< #ifndef GL_OML_interlace
< #define GL_OML_interlace 1
< #endif
< 
< #ifndef GL_OML_subsample
< #define GL_OML_subsample 1
< #endif
< 
< #ifndef GL_OML_resample
< #define GL_OML_resample 1
< #endif
< 
< #ifndef GL_NV_copy_depth_to_color
< #define GL_NV_copy_depth_to_color 1
< #endif
< 
< #ifndef GL_ATI_envmap_bumpmap
< #define GL_ATI_envmap_bumpmap 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexBumpParameterivATI (GLenum pname, const GLint *param);
< GLAPI void APIENTRY glTexBumpParameterfvATI (GLenum pname, const GLfloat *param);
< GLAPI void APIENTRY glGetTexBumpParameterivATI (GLenum pname, GLint *param);
< GLAPI void APIENTRY glGetTexBumpParameterfvATI (GLenum pname, GLfloat *param);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
< typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
< typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
< typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
< #endif
< 
< #ifndef GL_ATI_fragment_shader
< #define GL_ATI_fragment_shader 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLuint APIENTRY glGenFragmentShadersATI (GLuint range);
< GLAPI void APIENTRY glBindFragmentShaderATI (GLuint id);
< GLAPI void APIENTRY glDeleteFragmentShaderATI (GLuint id);
< GLAPI void APIENTRY glBeginFragmentShaderATI (void);
< GLAPI void APIENTRY glEndFragmentShaderATI (void);
< GLAPI void APIENTRY glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle);
< GLAPI void APIENTRY glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle);
< GLAPI void APIENTRY glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
< GLAPI void APIENTRY glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
< GLAPI void APIENTRY glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
< GLAPI void APIENTRY glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
< GLAPI void APIENTRY glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
< GLAPI void APIENTRY glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
< GLAPI void APIENTRY glSetFragmentShaderConstantATI (GLuint dst, const GLfloat *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
< typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
< typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void);
< typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
< typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
< typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
< typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
< typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
< typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
< typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
< typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
< typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
< #endif
< 
< #ifndef GL_ATI_pn_triangles
< #define GL_ATI_pn_triangles 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPNTrianglesiATI (GLenum pname, GLint param);
< GLAPI void APIENTRY glPNTrianglesfATI (GLenum pname, GLfloat param);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
< #endif
< 
< #ifndef GL_ATI_vertex_array_object
< #define GL_ATI_vertex_array_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const GLvoid *pointer, GLenum usage);
< GLAPI GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer);
< GLAPI void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
< GLAPI void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params);
< GLAPI void APIENTRY glFreeObjectBufferATI (GLuint buffer);
< GLAPI void APIENTRY glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
< GLAPI void APIENTRY glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetArrayObjectivATI (GLenum array, GLenum pname, GLint *params);
< GLAPI void APIENTRY glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
< GLAPI void APIENTRY glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);
< typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
< typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
< typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
< typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
< typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
< typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_EXT_vertex_shader
< #define GL_EXT_vertex_shader 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBeginVertexShaderEXT (void);
< GLAPI void APIENTRY glEndVertexShaderEXT (void);
< GLAPI void APIENTRY glBindVertexShaderEXT (GLuint id);
< GLAPI GLuint APIENTRY glGenVertexShadersEXT (GLuint range);
< GLAPI void APIENTRY glDeleteVertexShaderEXT (GLuint id);
< GLAPI void APIENTRY glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1);
< GLAPI void APIENTRY glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
< GLAPI void APIENTRY glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
< GLAPI void APIENTRY glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
< GLAPI void APIENTRY glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
< GLAPI void APIENTRY glInsertComponentEXT (GLuint res, GLuint src, GLuint num);
< GLAPI void APIENTRY glExtractComponentEXT (GLuint res, GLuint src, GLuint num);
< GLAPI GLuint APIENTRY glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
< GLAPI void APIENTRY glSetInvariantEXT (GLuint id, GLenum type, const GLvoid *addr);
< GLAPI void APIENTRY glSetLocalConstantEXT (GLuint id, GLenum type, const GLvoid *addr);
< GLAPI void APIENTRY glVariantbvEXT (GLuint id, const GLbyte *addr);
< GLAPI void APIENTRY glVariantsvEXT (GLuint id, const GLshort *addr);
< GLAPI void APIENTRY glVariantivEXT (GLuint id, const GLint *addr);
< GLAPI void APIENTRY glVariantfvEXT (GLuint id, const GLfloat *addr);
< GLAPI void APIENTRY glVariantdvEXT (GLuint id, const GLdouble *addr);
< GLAPI void APIENTRY glVariantubvEXT (GLuint id, const GLubyte *addr);
< GLAPI void APIENTRY glVariantusvEXT (GLuint id, const GLushort *addr);
< GLAPI void APIENTRY glVariantuivEXT (GLuint id, const GLuint *addr);
< GLAPI void APIENTRY glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
< GLAPI void APIENTRY glEnableVariantClientStateEXT (GLuint id);
< GLAPI void APIENTRY glDisableVariantClientStateEXT (GLuint id);
< GLAPI GLuint APIENTRY glBindLightParameterEXT (GLenum light, GLenum value);
< GLAPI GLuint APIENTRY glBindMaterialParameterEXT (GLenum face, GLenum value);
< GLAPI GLuint APIENTRY glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value);
< GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT (GLenum unit, GLenum value);
< GLAPI GLuint APIENTRY glBindParameterEXT (GLenum value);
< GLAPI GLboolean APIENTRY glIsVariantEnabledEXT (GLuint id, GLenum cap);
< GLAPI void APIENTRY glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
< GLAPI void APIENTRY glGetVariantIntegervEXT (GLuint id, GLenum value, GLint *data);
< GLAPI void APIENTRY glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
< GLAPI void APIENTRY glGetVariantPointervEXT (GLuint id, GLenum value, GLvoid* *data);
< GLAPI void APIENTRY glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
< GLAPI void APIENTRY glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint *data);
< GLAPI void APIENTRY glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
< GLAPI void APIENTRY glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
< GLAPI void APIENTRY glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint *data);
< GLAPI void APIENTRY glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void);
< typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) (void);
< typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
< typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
< typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
< typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
< typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
< typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
< typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
< typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
< typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
< typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
< typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
< typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
< typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
< typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
< typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
< typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
< typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
< typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
< typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
< typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
< typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
< typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
< typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
< typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
< typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
< typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
< typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value);
< typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
< typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
< typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
< typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
< typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);
< typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
< typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
< typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
< typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
< typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
< typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
< #endif
< 
< #ifndef GL_ATI_vertex_streams
< #define GL_ATI_vertex_streams 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexStream1sATI (GLenum stream, GLshort x);
< GLAPI void APIENTRY glVertexStream1svATI (GLenum stream, const GLshort *coords);
< GLAPI void APIENTRY glVertexStream1iATI (GLenum stream, GLint x);
< GLAPI void APIENTRY glVertexStream1ivATI (GLenum stream, const GLint *coords);
< GLAPI void APIENTRY glVertexStream1fATI (GLenum stream, GLfloat x);
< GLAPI void APIENTRY glVertexStream1fvATI (GLenum stream, const GLfloat *coords);
< GLAPI void APIENTRY glVertexStream1dATI (GLenum stream, GLdouble x);
< GLAPI void APIENTRY glVertexStream1dvATI (GLenum stream, const GLdouble *coords);
< GLAPI void APIENTRY glVertexStream2sATI (GLenum stream, GLshort x, GLshort y);
< GLAPI void APIENTRY glVertexStream2svATI (GLenum stream, const GLshort *coords);
< GLAPI void APIENTRY glVertexStream2iATI (GLenum stream, GLint x, GLint y);
< GLAPI void APIENTRY glVertexStream2ivATI (GLenum stream, const GLint *coords);
< GLAPI void APIENTRY glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y);
< GLAPI void APIENTRY glVertexStream2fvATI (GLenum stream, const GLfloat *coords);
< GLAPI void APIENTRY glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glVertexStream2dvATI (GLenum stream, const GLdouble *coords);
< GLAPI void APIENTRY glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z);
< GLAPI void APIENTRY glVertexStream3svATI (GLenum stream, const GLshort *coords);
< GLAPI void APIENTRY glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z);
< GLAPI void APIENTRY glVertexStream3ivATI (GLenum stream, const GLint *coords);
< GLAPI void APIENTRY glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glVertexStream3fvATI (GLenum stream, const GLfloat *coords);
< GLAPI void APIENTRY glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glVertexStream3dvATI (GLenum stream, const GLdouble *coords);
< GLAPI void APIENTRY glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
< GLAPI void APIENTRY glVertexStream4svATI (GLenum stream, const GLshort *coords);
< GLAPI void APIENTRY glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glVertexStream4ivATI (GLenum stream, const GLint *coords);
< GLAPI void APIENTRY glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glVertexStream4fvATI (GLenum stream, const GLfloat *coords);
< GLAPI void APIENTRY glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glVertexStream4dvATI (GLenum stream, const GLdouble *coords);
< GLAPI void APIENTRY glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
< GLAPI void APIENTRY glNormalStream3bvATI (GLenum stream, const GLbyte *coords);
< GLAPI void APIENTRY glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
< GLAPI void APIENTRY glNormalStream3svATI (GLenum stream, const GLshort *coords);
< GLAPI void APIENTRY glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz);
< GLAPI void APIENTRY glNormalStream3ivATI (GLenum stream, const GLint *coords);
< GLAPI void APIENTRY glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
< GLAPI void APIENTRY glNormalStream3fvATI (GLenum stream, const GLfloat *coords);
< GLAPI void APIENTRY glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
< GLAPI void APIENTRY glNormalStream3dvATI (GLenum stream, const GLdouble *coords);
< GLAPI void APIENTRY glClientActiveVertexStreamATI (GLenum stream);
< GLAPI void APIENTRY glVertexBlendEnviATI (GLenum pname, GLint param);
< GLAPI void APIENTRY glVertexBlendEnvfATI (GLenum pname, GLfloat param);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
< typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
< typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
< typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
< #endif
< 
< #ifndef GL_ATI_element_array
< #define GL_ATI_element_array 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glElementPointerATI (GLenum type, const GLvoid *pointer);
< GLAPI void APIENTRY glDrawElementArrayATI (GLenum mode, GLsizei count);
< GLAPI void APIENTRY glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
< typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
< #endif
< 
< #ifndef GL_SUN_mesh_array
< #define GL_SUN_mesh_array 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
< #endif
< 
< #ifndef GL_SUN_slice_accum
< #define GL_SUN_slice_accum 1
< #endif
< 
< #ifndef GL_NV_multisample_filter_hint
< #define GL_NV_multisample_filter_hint 1
< #endif
< 
< #ifndef GL_NV_depth_clamp
< #define GL_NV_depth_clamp 1
< #endif
< 
< #ifndef GL_NV_occlusion_query
< #define GL_NV_occlusion_query 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGenOcclusionQueriesNV (GLsizei n, GLuint *ids);
< GLAPI void APIENTRY glDeleteOcclusionQueriesNV (GLsizei n, const GLuint *ids);
< GLAPI GLboolean APIENTRY glIsOcclusionQueryNV (GLuint id);
< GLAPI void APIENTRY glBeginOcclusionQueryNV (GLuint id);
< GLAPI void APIENTRY glEndOcclusionQueryNV (void);
< GLAPI void APIENTRY glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
< typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
< typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void);
< typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
< #endif
< 
< #ifndef GL_NV_point_sprite
< #define GL_NV_point_sprite 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPointParameteriNV (GLenum pname, GLint param);
< GLAPI void APIENTRY glPointParameterivNV (GLenum pname, const GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
< #endif
< 
< #ifndef GL_NV_texture_shader3
< #define GL_NV_texture_shader3 1
< #endif
< 
< #ifndef GL_NV_vertex_program1_1
< #define GL_NV_vertex_program1_1 1
< #endif
< 
< #ifndef GL_EXT_shadow_funcs
< #define GL_EXT_shadow_funcs 1
< #endif
< 
< #ifndef GL_EXT_stencil_two_side
< #define GL_EXT_stencil_two_side 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum face);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
< #endif
< 
< #ifndef GL_ATI_text_fragment_shader
< #define GL_ATI_text_fragment_shader 1
< #endif
< 
< #ifndef GL_APPLE_client_storage
< #define GL_APPLE_client_storage 1
< #endif
< 
< #ifndef GL_APPLE_element_array
< #define GL_APPLE_element_array 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glElementPointerAPPLE (GLenum type, const GLvoid *pointer);
< GLAPI void APIENTRY glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count);
< GLAPI void APIENTRY glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
< GLAPI void APIENTRY glMultiDrawElementArrayAPPLE (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
< GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
< typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
< typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
< typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
< #endif
< 
< #ifndef GL_APPLE_fence
< #define GL_APPLE_fence 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGenFencesAPPLE (GLsizei n, GLuint *fences);
< GLAPI void APIENTRY glDeleteFencesAPPLE (GLsizei n, const GLuint *fences);
< GLAPI void APIENTRY glSetFenceAPPLE (GLuint fence);
< GLAPI GLboolean APIENTRY glIsFenceAPPLE (GLuint fence);
< GLAPI GLboolean APIENTRY glTestFenceAPPLE (GLuint fence);
< GLAPI void APIENTRY glFinishFenceAPPLE (GLuint fence);
< GLAPI GLboolean APIENTRY glTestObjectAPPLE (GLenum object, GLuint name);
< GLAPI void APIENTRY glFinishObjectAPPLE (GLenum object, GLint name);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
< typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
< typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence);
< typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence);
< typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
< typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
< typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
< typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
< #endif
< 
< #ifndef GL_APPLE_vertex_array_object
< #define GL_APPLE_vertex_array_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindVertexArrayAPPLE (GLuint array);
< GLAPI void APIENTRY glDeleteVertexArraysAPPLE (GLsizei n, const GLuint *arrays);
< GLAPI void APIENTRY glGenVertexArraysAPPLE (GLsizei n, GLuint *arrays);
< GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint array);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
< typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
< typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);
< typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
< #endif
< 
< #ifndef GL_APPLE_vertex_array_range
< #define GL_APPLE_vertex_array_range 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);
< GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);
< GLAPI void APIENTRY glVertexArrayParameteriAPPLE (GLenum pname, GLint param);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
< typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
< typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
< #endif
< 
< #ifndef GL_APPLE_ycbcr_422
< #define GL_APPLE_ycbcr_422 1
< #endif
< 
< #ifndef GL_S3_s3tc
< #define GL_S3_s3tc 1
< #endif
< 
< #ifndef GL_ATI_draw_buffers
< #define GL_ATI_draw_buffers 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawBuffersATI (GLsizei n, const GLenum *bufs);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
< #endif
< 
< #ifndef GL_ATI_pixel_format_float
< #define GL_ATI_pixel_format_float 1
< /* This is really a WGL extension, but defines some associated GL enums.
<  * ATI does not export "GL_ATI_pixel_format_float" in the GL_EXTENSIONS string.
<  */
< #endif
< 
< #ifndef GL_ATI_texture_env_combine3
< #define GL_ATI_texture_env_combine3 1
< #endif
< 
< #ifndef GL_ATI_texture_float
< #define GL_ATI_texture_float 1
< #endif
< 
< #ifndef GL_NV_float_buffer
< #define GL_NV_float_buffer 1
< #endif
< 
< #ifndef GL_NV_fragment_program
< #define GL_NV_fragment_program 1
< /* Some NV_fragment_program entry points are shared with ARB_vertex_program. */
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
< GLAPI void APIENTRY glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
< GLAPI void APIENTRY glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
< GLAPI void APIENTRY glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
< typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
< typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
< #endif
< 
< #ifndef GL_NV_half_float
< #define GL_NV_half_float 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertex2hNV (GLhalfNV x, GLhalfNV y);
< GLAPI void APIENTRY glVertex2hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z);
< GLAPI void APIENTRY glVertex3hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
< GLAPI void APIENTRY glVertex4hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
< GLAPI void APIENTRY glNormal3hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
< GLAPI void APIENTRY glColor3hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
< GLAPI void APIENTRY glColor4hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glTexCoord1hNV (GLhalfNV s);
< GLAPI void APIENTRY glTexCoord1hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glTexCoord2hNV (GLhalfNV s, GLhalfNV t);
< GLAPI void APIENTRY glTexCoord2hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r);
< GLAPI void APIENTRY glTexCoord3hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
< GLAPI void APIENTRY glTexCoord4hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glMultiTexCoord1hNV (GLenum target, GLhalfNV s);
< GLAPI void APIENTRY glMultiTexCoord1hvNV (GLenum target, const GLhalfNV *v);
< GLAPI void APIENTRY glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t);
< GLAPI void APIENTRY glMultiTexCoord2hvNV (GLenum target, const GLhalfNV *v);
< GLAPI void APIENTRY glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
< GLAPI void APIENTRY glMultiTexCoord3hvNV (GLenum target, const GLhalfNV *v);
< GLAPI void APIENTRY glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
< GLAPI void APIENTRY glMultiTexCoord4hvNV (GLenum target, const GLhalfNV *v);
< GLAPI void APIENTRY glFogCoordhNV (GLhalfNV fog);
< GLAPI void APIENTRY glFogCoordhvNV (const GLhalfNV *fog);
< GLAPI void APIENTRY glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
< GLAPI void APIENTRY glSecondaryColor3hvNV (const GLhalfNV *v);
< GLAPI void APIENTRY glVertexWeighthNV (GLhalfNV weight);
< GLAPI void APIENTRY glVertexWeighthvNV (const GLhalfNV *weight);
< GLAPI void APIENTRY glVertexAttrib1hNV (GLuint index, GLhalfNV x);
< GLAPI void APIENTRY glVertexAttrib1hvNV (GLuint index, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y);
< GLAPI void APIENTRY glVertexAttrib2hvNV (GLuint index, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
< GLAPI void APIENTRY glVertexAttrib3hvNV (GLuint index, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
< GLAPI void APIENTRY glVertexAttrib4hvNV (GLuint index, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
< GLAPI void APIENTRY glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
< typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
< typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
< typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
< typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
< typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
< typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
< typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
< typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
< typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
< typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
< typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
< typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
< typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
< typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
< #endif
< 
< #ifndef GL_NV_pixel_data_range
< #define GL_NV_pixel_data_range 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPixelDataRangeNV (GLenum target, GLsizei length, GLvoid *pointer);
< GLAPI void APIENTRY glFlushPixelDataRangeNV (GLenum target);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, GLvoid *pointer);
< typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
< #endif
< 
< #ifndef GL_NV_primitive_restart
< #define GL_NV_primitive_restart 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPrimitiveRestartNV (void);
< GLAPI void APIENTRY glPrimitiveRestartIndexNV (GLuint index);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) (void);
< typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
< #endif
< 
< #ifndef GL_NV_texture_expand_normal
< #define GL_NV_texture_expand_normal 1
< #endif
< 
< #ifndef GL_NV_vertex_program2
< #define GL_NV_vertex_program2 1
< #endif
< 
< #ifndef GL_ATI_map_object_buffer
< #define GL_ATI_map_object_buffer 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLvoid* APIENTRY glMapObjectBufferATI (GLuint buffer);
< GLAPI void APIENTRY glUnmapObjectBufferATI (GLuint buffer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLvoid* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
< typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
< #endif
< 
< #ifndef GL_ATI_separate_stencil
< #define GL_ATI_separate_stencil 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
< GLAPI void APIENTRY glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
< typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
< #endif
< 
< #ifndef GL_ATI_vertex_attrib_array_object
< #define GL_ATI_vertex_attrib_array_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
< GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_OES_read_format
< #define GL_OES_read_format 1
< #endif
< 
< #ifndef GL_EXT_depth_bounds_test
< #define GL_EXT_depth_bounds_test 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDepthBoundsEXT (GLclampd zmin, GLclampd zmax);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
< #endif
< 
< #ifndef GL_EXT_texture_mirror_clamp
< #define GL_EXT_texture_mirror_clamp 1
< #endif
< 
< #ifndef GL_EXT_blend_equation_separate
< #define GL_EXT_blend_equation_separate 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
< #endif
< 
< #ifndef GL_MESA_pack_invert
< #define GL_MESA_pack_invert 1
< #endif
< 
< #ifndef GL_MESA_ycbcr_texture
< #define GL_MESA_ycbcr_texture 1
< #endif
< 
< #ifndef GL_EXT_pixel_buffer_object
< #define GL_EXT_pixel_buffer_object 1
< #endif
< 
< #ifndef GL_NV_fragment_program_option
< #define GL_NV_fragment_program_option 1
< #endif
< 
< #ifndef GL_NV_fragment_program2
< #define GL_NV_fragment_program2 1
< #endif
< 
< #ifndef GL_NV_vertex_program2_option
< #define GL_NV_vertex_program2_option 1
< #endif
< 
< #ifndef GL_NV_vertex_program3
< #define GL_NV_vertex_program3 1
< #endif
< 
< #ifndef GL_EXT_framebuffer_object
< #define GL_EXT_framebuffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLboolean APIENTRY glIsRenderbufferEXT (GLuint renderbuffer);
< GLAPI void APIENTRY glBindRenderbufferEXT (GLenum target, GLuint renderbuffer);
< GLAPI void APIENTRY glDeleteRenderbuffersEXT (GLsizei n, const GLuint *renderbuffers);
< GLAPI void APIENTRY glGenRenderbuffersEXT (GLsizei n, GLuint *renderbuffers);
< GLAPI void APIENTRY glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint *params);
< GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint framebuffer);
< GLAPI void APIENTRY glBindFramebufferEXT (GLenum target, GLuint framebuffer);
< GLAPI void APIENTRY glDeleteFramebuffersEXT (GLsizei n, const GLuint *framebuffers);
< GLAPI void APIENTRY glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers);
< GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum target);
< GLAPI void APIENTRY glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< GLAPI void APIENTRY glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
< GLAPI void APIENTRY glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
< GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGenerateMipmapEXT (GLenum target);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);
< typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);
< typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
< typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
< typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
< typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);
< typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);
< typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
< #endif
< 
< #ifndef GL_GREMEDY_string_marker
< #define GL_GREMEDY_string_marker 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glStringMarkerGREMEDY (GLsizei len, const GLvoid *string);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const GLvoid *string);
< #endif
< 
< #ifndef GL_EXT_packed_depth_stencil
< #define GL_EXT_packed_depth_stencil 1
< #endif
< 
< #ifndef GL_EXT_stencil_clear_tag
< #define GL_EXT_stencil_clear_tag 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);
< #endif
< 
< #ifndef GL_EXT_texture_sRGB
< #define GL_EXT_texture_sRGB 1
< #endif
< 
< #ifndef GL_EXT_framebuffer_blit
< #define GL_EXT_framebuffer_blit 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
< #endif
< 
< #ifndef GL_EXT_framebuffer_multisample
< #define GL_EXT_framebuffer_multisample 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
< #endif
< 
< #ifndef GL_MESAX_texture_stack
< #define GL_MESAX_texture_stack 1
< #endif
< 
< #ifndef GL_EXT_timer_query
< #define GL_EXT_timer_query 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64EXT *params);
< GLAPI void APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64EXT *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
< typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
< #endif
< 
< #ifndef GL_EXT_gpu_program_parameters
< #define GL_EXT_gpu_program_parameters 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
< GLAPI void APIENTRY glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
< #endif
< 
< #ifndef GL_APPLE_flush_buffer_range
< #define GL_APPLE_flush_buffer_range 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param);
< GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
< #endif
< 
< #ifndef GL_NV_gpu_program4
< #define GL_NV_gpu_program4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint *params);
< GLAPI void APIENTRY glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);
< GLAPI void APIENTRY glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< GLAPI void APIENTRY glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);
< GLAPI void APIENTRY glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);
< GLAPI void APIENTRY glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint *params);
< GLAPI void APIENTRY glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);
< GLAPI void APIENTRY glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< GLAPI void APIENTRY glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);
< GLAPI void APIENTRY glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);
< GLAPI void APIENTRY glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint *params);
< GLAPI void APIENTRY glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint *params);
< GLAPI void APIENTRY glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint *params);
< GLAPI void APIENTRY glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
< typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
< typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
< #endif
< 
< #ifndef GL_NV_geometry_program4
< #define GL_NV_geometry_program4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramVertexLimitNV (GLenum target, GLint limit);
< GLAPI void APIENTRY glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level);
< GLAPI void APIENTRY glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
< GLAPI void APIENTRY glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
< #endif
< 
< #ifndef GL_EXT_geometry_shader4
< #define GL_EXT_geometry_shader4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname, GLint value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
< #endif
< 
< #ifndef GL_NV_vertex_program4
< #define GL_NV_vertex_program4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribI1iEXT (GLuint index, GLint x);
< GLAPI void APIENTRY glVertexAttribI2iEXT (GLuint index, GLint x, GLint y);
< GLAPI void APIENTRY glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z);
< GLAPI void APIENTRY glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glVertexAttribI1uiEXT (GLuint index, GLuint x);
< GLAPI void APIENTRY glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y);
< GLAPI void APIENTRY glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z);
< GLAPI void APIENTRY glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< GLAPI void APIENTRY glVertexAttribI1ivEXT (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI2ivEXT (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI3ivEXT (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI4ivEXT (GLuint index, const GLint *v);
< GLAPI void APIENTRY glVertexAttribI1uivEXT (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI2uivEXT (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI3uivEXT (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI4uivEXT (GLuint index, const GLuint *v);
< GLAPI void APIENTRY glVertexAttribI4bvEXT (GLuint index, const GLbyte *v);
< GLAPI void APIENTRY glVertexAttribI4svEXT (GLuint index, const GLshort *v);
< GLAPI void APIENTRY glVertexAttribI4ubvEXT (GLuint index, const GLubyte *v);
< GLAPI void APIENTRY glVertexAttribI4usvEXT (GLuint index, const GLushort *v);
< GLAPI void APIENTRY glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
< #endif
< 
< #ifndef GL_EXT_gpu_shader4
< #define GL_EXT_gpu_shader4 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetUniformuivEXT (GLuint program, GLint location, GLuint *params);
< GLAPI void APIENTRY glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar *name);
< GLAPI GLint APIENTRY glGetFragDataLocationEXT (GLuint program, const GLchar *name);
< GLAPI void APIENTRY glUniform1uiEXT (GLint location, GLuint v0);
< GLAPI void APIENTRY glUniform2uiEXT (GLint location, GLuint v0, GLuint v1);
< GLAPI void APIENTRY glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2);
< GLAPI void APIENTRY glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< GLAPI void APIENTRY glUniform1uivEXT (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glUniform2uivEXT (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glUniform3uivEXT (GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glUniform4uivEXT (GLint location, GLsizei count, const GLuint *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
< typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
< typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
< typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
< typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
< typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
< typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
< #endif
< 
< #ifndef GL_EXT_draw_instanced
< #define GL_EXT_draw_instanced 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
< GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
< typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
< #endif
< 
< #ifndef GL_EXT_packed_float
< #define GL_EXT_packed_float 1
< #endif
< 
< #ifndef GL_EXT_texture_array
< #define GL_EXT_texture_array 1
< #endif
< 
< #ifndef GL_EXT_texture_buffer_object
< #define GL_EXT_texture_buffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
< #endif
< 
< #ifndef GL_EXT_texture_compression_latc
< #define GL_EXT_texture_compression_latc 1
< #endif
< 
< #ifndef GL_EXT_texture_compression_rgtc
< #define GL_EXT_texture_compression_rgtc 1
< #endif
< 
< #ifndef GL_EXT_texture_shared_exponent
< #define GL_EXT_texture_shared_exponent 1
< #endif
< 
< #ifndef GL_NV_depth_buffer_float
< #define GL_NV_depth_buffer_float 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDepthRangedNV (GLdouble zNear, GLdouble zFar);
< GLAPI void APIENTRY glClearDepthdNV (GLdouble depth);
< GLAPI void APIENTRY glDepthBoundsdNV (GLdouble zmin, GLdouble zmax);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
< typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
< typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
< #endif
< 
< #ifndef GL_NV_fragment_program4
< #define GL_NV_fragment_program4 1
< #endif
< 
< #ifndef GL_NV_framebuffer_multisample_coverage
< #define GL_NV_framebuffer_multisample_coverage 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
< #endif
< 
< #ifndef GL_EXT_framebuffer_sRGB
< #define GL_EXT_framebuffer_sRGB 1
< #endif
< 
< #ifndef GL_NV_geometry_shader4
< #define GL_NV_geometry_shader4 1
< #endif
< 
< #ifndef GL_NV_parameter_buffer_object
< #define GL_NV_parameter_buffer_object 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramBufferParametersfvNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
< GLAPI void APIENTRY glProgramBufferParametersIivNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
< GLAPI void APIENTRY glProgramBufferParametersIuivNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
< typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
< typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
< #endif
< 
< #ifndef GL_EXT_draw_buffers2
< #define GL_EXT_draw_buffers2 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
< GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data);
< GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data);
< GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index);
< GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index);
< GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
< typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
< typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
< typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
< typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
< typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
< #endif
< 
< #ifndef GL_NV_transform_feedback
< #define GL_NV_transform_feedback 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBeginTransformFeedbackNV (GLenum primitiveMode);
< GLAPI void APIENTRY glEndTransformFeedbackNV (void);
< GLAPI void APIENTRY glTransformFeedbackAttribsNV (GLuint count, const GLint *attribs, GLenum bufferMode);
< GLAPI void APIENTRY glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
< GLAPI void APIENTRY glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
< GLAPI void APIENTRY glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer);
< GLAPI void APIENTRY glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
< GLAPI void APIENTRY glActiveVaryingNV (GLuint program, const GLchar *name);
< GLAPI GLint APIENTRY glGetVaryingLocationNV (GLuint program, const GLchar *name);
< GLAPI void APIENTRY glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
< GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint *location);
< GLAPI void APIENTRY glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
< typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
< typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
< typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
< typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
< typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
< typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
< typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
< typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
< typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
< typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
< typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
< #endif
< 
< #ifndef GL_EXT_bindable_uniform
< #define GL_EXT_bindable_uniform 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glUniformBufferEXT (GLuint program, GLint location, GLuint buffer);
< GLAPI GLint APIENTRY glGetUniformBufferSizeEXT (GLuint program, GLint location);
< GLAPI GLintptr APIENTRY glGetUniformOffsetEXT (GLuint program, GLint location);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
< typedef GLint (APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
< typedef GLintptr (APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
< #endif
< 
< #ifndef GL_EXT_texture_integer
< #define GL_EXT_texture_integer 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params);
< GLAPI void APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha);
< GLAPI void APIENTRY glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
< typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
< #endif
< 
< #ifndef GL_GREMEDY_frame_terminator
< #define GL_GREMEDY_frame_terminator 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glFrameTerminatorGREMEDY (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) (void);
< #endif
< 
< #ifndef GL_NV_conditional_render
< #define GL_NV_conditional_render 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode);
< GLAPI void APIENTRY glEndConditionalRenderNV (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
< typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void);
< #endif
< 
< #ifndef GL_NV_present_video
< #define GL_NV_present_video 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
< GLAPI void APIENTRY glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
< GLAPI void APIENTRY glGetVideoivNV (GLuint video_slot, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT *params);
< GLAPI void APIENTRY glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
< typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
< typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);
< typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);
< #endif
< 
< #ifndef GL_EXT_transform_feedback
< #define GL_EXT_transform_feedback 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBeginTransformFeedbackEXT (GLenum primitiveMode);
< GLAPI void APIENTRY glEndTransformFeedbackEXT (void);
< GLAPI void APIENTRY glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
< GLAPI void APIENTRY glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
< GLAPI void APIENTRY glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer);
< GLAPI void APIENTRY glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
< GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
< typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
< typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
< typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
< typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
< typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
< typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
< #endif
< 
< #ifndef GL_EXT_direct_state_access
< #define GL_EXT_direct_state_access 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask);
< GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask);
< GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m);
< GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m);
< GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m);
< GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m);
< GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode);
< GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
< GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
< GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
< GLAPI void APIENTRY glMatrixPopEXT (GLenum mode);
< GLAPI void APIENTRY glMatrixPushEXT (GLenum mode);
< GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m);
< GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m);
< GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m);
< GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m);
< GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param);
< GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
< GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
< GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
< GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
< GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
< GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
< GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
< GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
< GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
< GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
< GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture);
< GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index);
< GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index);
< GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
< GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
< GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
< GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
< GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param);
< GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data);
< GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data);
< GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, GLvoid* *data);
< GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, GLvoid *img);
< GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
< GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
< GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
< GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params);
< GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params);
< GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params);
< GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params);
< GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, GLvoid *string);
< GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
< GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
< GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params);
< GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
< GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params);
< GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
< GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params);
< GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params);
< GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
< GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
< GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
< GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0);
< GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1);
< GLAPI void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< GLAPI void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< GLAPI void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint v0);
< GLAPI void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1);
< GLAPI void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
< GLAPI void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
< GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0);
< GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1);
< GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
< GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
< GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
< GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
< GLAPI GLvoid* APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access);
< GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer);
< GLAPI GLvoid* APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
< GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length);
< GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
< GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, GLvoid* *params);
< GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
< GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
< GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
< GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params);
< GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target);
< GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
< GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
< GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target);
< GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target);
< GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode);
< GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs);
< GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode);
< GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
< GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
< GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
< GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
< GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
< GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer);
< GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer);
< GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x);
< GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
< typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
< typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
< typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
< typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
< typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
< typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
< typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
< typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
< typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
< typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);
< typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
< typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
< typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
< typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
< typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
< typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
< typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
< typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
< typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
< typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
< typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
< typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
< typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
< typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
< typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
< typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
< typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
< typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
< typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
< typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
< typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
< typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
< typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLvoid* *data);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, GLvoid *img);
< typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
< typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
< typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
< typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, GLvoid *string);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
< typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
< typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
< typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
< typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
< typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
< typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
< typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
< typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
< typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
< typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
< typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, GLvoid* *params);
< typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
< typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
< typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
< typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
< typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
< typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
< typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
< typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
< typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
< typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
< #endif
< 
< #ifndef GL_EXT_vertex_array_bgra
< #define GL_EXT_vertex_array_bgra 1
< #endif
< 
< #ifndef GL_EXT_texture_swizzle
< #define GL_EXT_texture_swizzle 1
< #endif
< 
< #ifndef GL_NV_explicit_multisample
< #define GL_NV_explicit_multisample 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat *val);
< GLAPI void APIENTRY glSampleMaskIndexedNV (GLuint index, GLbitfield mask);
< GLAPI void APIENTRY glTexRenderbufferNV (GLenum target, GLuint renderbuffer);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);
< typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
< typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
< #endif
< 
< #ifndef GL_NV_transform_feedback2
< #define GL_NV_transform_feedback2 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindTransformFeedbackNV (GLenum target, GLuint id);
< GLAPI void APIENTRY glDeleteTransformFeedbacksNV (GLsizei n, const GLuint *ids);
< GLAPI void APIENTRY glGenTransformFeedbacksNV (GLsizei n, GLuint *ids);
< GLAPI GLboolean APIENTRY glIsTransformFeedbackNV (GLuint id);
< GLAPI void APIENTRY glPauseTransformFeedbackNV (void);
< GLAPI void APIENTRY glResumeTransformFeedbackNV (void);
< GLAPI void APIENTRY glDrawTransformFeedbackNV (GLenum mode, GLuint id);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
< typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);
< typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);
< typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
< typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
< typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
< typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
< #endif
< 
< #ifndef GL_ATI_meminfo
< #define GL_ATI_meminfo 1
< #endif
< 
< #ifndef GL_AMD_performance_monitor
< #define GL_AMD_performance_monitor 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
< GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
< GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
< GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
< GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, GLvoid *data);
< GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);
< GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);
< GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
< GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor);
< GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor);
< GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
< typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
< typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
< typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
< typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, GLvoid *data);
< typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
< typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
< typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
< typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
< typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
< typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
< #endif
< 
< #ifndef GL_AMD_texture_texture4
< #define GL_AMD_texture_texture4 1
< #endif
< 
< #ifndef GL_AMD_vertex_shader_tesselator
< #define GL_AMD_vertex_shader_tesselator 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTessellationFactorAMD (GLfloat factor);
< GLAPI void APIENTRY glTessellationModeAMD (GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
< typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
< #endif
< 
< #ifndef GL_EXT_provoking_vertex
< #define GL_EXT_provoking_vertex 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProvokingVertexEXT (GLenum mode);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
< #endif
< 
< #ifndef GL_EXT_texture_snorm
< #define GL_EXT_texture_snorm 1
< #endif
< 
< #ifndef GL_AMD_draw_buffers_blend
< #define GL_AMD_draw_buffers_blend 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst);
< GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
< GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode);
< GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
< typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
< typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
< typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
< #endif
< 
< #ifndef GL_APPLE_texture_range
< #define GL_APPLE_texture_range 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTextureRangeAPPLE (GLenum target, GLsizei length, const GLvoid *pointer);
< GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, GLvoid* *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid* *params);
< #endif
< 
< #ifndef GL_APPLE_float_pixels
< #define GL_APPLE_float_pixels 1
< #endif
< 
< #ifndef GL_APPLE_vertex_program_evaluators
< #define GL_APPLE_vertex_program_evaluators 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname);
< GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum pname);
< GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname);
< GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
< GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
< GLAPI void APIENTRY glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
< GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
< typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
< typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
< typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
< typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
< typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
< typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
< #endif
< 
< #ifndef GL_APPLE_aux_depth_stencil
< #define GL_APPLE_aux_depth_stencil 1
< #endif
< 
< #ifndef GL_APPLE_object_purgeable
< #define GL_APPLE_object_purgeable 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI GLenum APIENTRY glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option);
< GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option);
< GLAPI void APIENTRY glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
< typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
< typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);
< #endif
< 
< #ifndef GL_APPLE_row_bytes
< #define GL_APPLE_row_bytes 1
< #endif
< 
< #ifndef GL_APPLE_rgb_422
< #define GL_APPLE_rgb_422 1
< #endif
< 
< #ifndef GL_NV_video_capture
< #define GL_NV_video_capture 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBeginVideoCaptureNV (GLuint video_capture_slot);
< GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
< GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
< GLAPI void APIENTRY glEndVideoCaptureNV (GLuint video_capture_slot);
< GLAPI void APIENTRY glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
< GLAPI void APIENTRY glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
< GLAPI void APIENTRY glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
< GLAPI GLenum APIENTRY glVideoCaptureNV (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
< GLAPI void APIENTRY glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
< GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
< GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
< typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
< typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
< typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
< typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
< typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
< typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
< typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
< typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
< typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
< typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
< #endif
< 
< #ifndef GL_NV_copy_image
< #define GL_NV_copy_image 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
< #endif
< 
< #ifndef GL_EXT_separate_shader_objects
< #define GL_EXT_separate_shader_objects 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program);
< GLAPI void APIENTRY glActiveProgramEXT (GLuint program);
< GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
< typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
< typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
< #endif
< 
< #ifndef GL_NV_parameter_buffer_object2
< #define GL_NV_parameter_buffer_object2 1
< #endif
< 
< #ifndef GL_NV_shader_buffer_load
< #define GL_NV_shader_buffer_load 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access);
< GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target);
< GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target);
< GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access);
< GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer);
< GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer);
< GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params);
< GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params);
< GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result);
< GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value);
< GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT *params);
< GLAPI void APIENTRY glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value);
< GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
< typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
< typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
< typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
< typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
< typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
< typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
< typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
< typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
< typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
< typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< #endif
< 
< #ifndef GL_NV_vertex_buffer_unified_memory
< #define GL_NV_vertex_buffer_unified_memory 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
< GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride);
< GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride);
< GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride);
< GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride);
< GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride);
< GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride);
< GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride);
< GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride);
< GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
< GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
< GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
< typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
< typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
< typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
< #endif
< 
< #ifndef GL_NV_texture_barrier
< #define GL_NV_texture_barrier 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glTextureBarrierNV (void);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);
< #endif
< 
< #ifndef GL_AMD_shader_stencil_export
< #define GL_AMD_shader_stencil_export 1
< #endif
< 
< #ifndef GL_AMD_seamless_cubemap_per_texture
< #define GL_AMD_seamless_cubemap_per_texture 1
< #endif
< 
< #ifndef GL_AMD_conservative_depth
< #define GL_AMD_conservative_depth 1
< #endif
< 
< #ifndef GL_EXT_shader_image_load_store
< #define GL_EXT_shader_image_load_store 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
< GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
< typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);
< #endif
< 
< #ifndef GL_EXT_vertex_attrib_64bit
< #define GL_EXT_vertex_attrib_64bit 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribL1dEXT (GLuint index, GLdouble x);
< GLAPI void APIENTRY glVertexAttribL2dEXT (GLuint index, GLdouble x, GLdouble y);
< GLAPI void APIENTRY glVertexAttribL3dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< GLAPI void APIENTRY glVertexAttribL4dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< GLAPI void APIENTRY glVertexAttribL1dvEXT (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribL2dvEXT (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribL3dvEXT (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribL4dvEXT (GLuint index, const GLdouble *v);
< GLAPI void APIENTRY glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< GLAPI void APIENTRY glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble *params);
< GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);
< typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
< #endif
< 
< #ifndef GL_NV_gpu_program5
< #define GL_NV_gpu_program5 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint *params);
< GLAPI void APIENTRY glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint *param);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);
< typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);
< #endif
< 
< #ifndef GL_NV_gpu_shader5
< #define GL_NV_gpu_shader5 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x);
< GLAPI void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y);
< GLAPI void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
< GLAPI void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
< GLAPI void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x);
< GLAPI void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y);
< GLAPI void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
< GLAPI void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
< GLAPI void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params);
< GLAPI void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x);
< GLAPI void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
< GLAPI void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
< GLAPI void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
< GLAPI void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< GLAPI void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x);
< GLAPI void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
< GLAPI void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
< GLAPI void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
< GLAPI void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< GLAPI void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
< typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
< typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
< typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
< typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
< typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
< typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
< typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
< typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
< #endif
< 
< #ifndef GL_NV_shader_buffer_store
< #define GL_NV_shader_buffer_store 1
< #endif
< 
< #ifndef GL_NV_tessellation_program5
< #define GL_NV_tessellation_program5 1
< #endif
< 
< #ifndef GL_NV_vertex_attrib_integer_64bit
< #define GL_NV_vertex_attrib_integer_64bit 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x);
< GLAPI void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y);
< GLAPI void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
< GLAPI void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
< GLAPI void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x);
< GLAPI void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y);
< GLAPI void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
< GLAPI void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
< GLAPI void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v);
< GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v);
< GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params);
< GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params);
< GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);
< typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
< typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
< #endif
< 
< #ifndef GL_NV_multisample_coverage
< #define GL_NV_multisample_coverage 1
< #endif
< 
< #ifndef GL_AMD_name_gen_delete
< #define GL_AMD_name_gen_delete 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glGenNamesAMD (GLenum identifier, GLuint num, GLuint *names);
< GLAPI void APIENTRY glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint *names);
< GLAPI GLboolean APIENTRY glIsNameAMD (GLenum identifier, GLuint name);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);
< typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);
< typedef GLboolean (APIENTRYP PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);
< #endif
< 
< #ifndef GL_AMD_debug_output
< #define GL_AMD_debug_output 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
< GLAPI void APIENTRY glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
< GLAPI void APIENTRY glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, GLvoid *userParam);
< GLAPI GLuint APIENTRY glGetDebugMessageLogAMD (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
< typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
< typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, GLvoid *userParam);
< typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
< #endif
< 
< #ifndef GL_NV_vdpau_interop
< #define GL_NV_vdpau_interop 1
< #ifdef GL_GLEXT_PROTOTYPES
< GLAPI void APIENTRY glVDPAUInitNV (const GLvoid *vdpDevice, const GLvoid *getProcAddress);
< GLAPI void APIENTRY glVDPAUFiniNV (void);
< GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
< GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
< GLAPI void APIENTRY glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface);
< GLAPI void APIENTRY glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface);
< GLAPI void APIENTRY glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
< GLAPI void APIENTRY glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access);
< GLAPI void APIENTRY glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
< GLAPI void APIENTRY glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
< #endif /* GL_GLEXT_PROTOTYPES */
< typedef void (APIENTRYP PFNGLVDPAUINITNVPROC) (const GLvoid *vdpDevice, const GLvoid *getProcAddress);
< typedef void (APIENTRYP PFNGLVDPAUFININVPROC) (void);
< typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
< typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
< typedef void (APIENTRYP PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
< typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
< typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
< typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
< typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
< typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
< #endif
< 
< #ifndef GL_AMD_transform_feedback3_lines_triangles
< #define GL_AMD_transform_feedback3_lines_triangles 1
< #endif
< 
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< #endif /* NO_SDL_GLEXT */
< 
< #endif /* !__IPHONEOS__ */
< 
< #endif /* _SDL_opengl_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_opengl.h
>  *
>  *  This is a simple file to encapsulate the OpenGL API headers.
>  */
> 
> #ifndef _SDL_opengl_h
> #define _SDL_opengl_h
> 
> #include "SDL_config.h"
> 
> #ifndef __IPHONEOS__
> 
> #ifdef __WIN32__
> #define WIN32_LEAN_AND_MEAN
> #ifndef NOMINMAX
> #define NOMINMAX                /* Don't defined min() and max() */
> #endif
> #include <windows.h>
> #endif
> 
> #ifdef __glext_h_
> /* Someone has already included glext.h */
> #define NO_SDL_GLEXT
> #endif
> #ifndef NO_SDL_GLEXT
> #define __glext_h_              /* Don't let gl.h include glext.h */
> #endif
> #if defined(__MACOSX__)
> #include <OpenGL/gl.h>          /* Header File For The OpenGL Library */
> #define __X_GL_H
> #else
> #include <GL/gl.h>              /* Header File For The OpenGL Library */
> #endif
> #ifndef NO_SDL_GLEXT
> #undef __glext_h_
> #endif
> 
> /**
>  *  \file SDL_opengl.h
>  *
>  *  This file is included because glext.h is not available on some systems.
>  *  If you don't want this version included, simply define ::NO_SDL_GLEXT.
>  *
>  *  The latest version is available from:
>  *      http://www.opengl.org/registry/
>  */
> 
> /**
>  *  \def NO_SDL_GLEXT
>  *
>  *  Define this if you have your own version of glext.h and want to disable the
>  *  version included in SDL_opengl.h.
>  */
> 
> #if !defined(NO_SDL_GLEXT) && !defined(GL_GLEXT_LEGACY)
> #ifndef __glext_h_
> #define __glext_h_
> 
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /*
> ** Copyright (c) 2007-2010 The Khronos Group Inc.
> **
> ** Permission is hereby granted, free of charge, to any person obtaining a
> ** copy of this software and/or associated documentation files (the
> ** "Materials"), to deal in the Materials without restriction, including
> ** without limitation the rights to use, copy, modify, merge, publish,
> ** distribute, sublicense, and/or sell copies of the Materials, and to
> ** permit persons to whom the Materials are furnished to do so, subject to
> ** the following conditions:
> **
> ** The above copyright notice and this permission notice shall be included
> ** in all copies or substantial portions of the Materials.
> **
> ** THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
> ** EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
> ** MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
> ** IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
> ** CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
> ** TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
> ** MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.
> */
> 
> /* Header file version number, required by OpenGL ABI for Linux */
> /* glext.h last updated $Date: 2010-08-03 01:30:25 -0700 (Tue, 03 Aug 2010) $ */
> /* Current version at http://www.opengl.org/registry/ */
> #define GL_GLEXT_VERSION 64
> /* Function declaration macros - to move into glplatform.h */
> 
> #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
> #define WIN32_LEAN_AND_MEAN 1
> #include <windows.h>
> #endif
> 
> #ifndef APIENTRY
> #define APIENTRY
> #endif
> #ifndef APIENTRYP
> #define APIENTRYP APIENTRY *
> #endif
> #ifndef GLAPI
> #define GLAPI extern
> #endif
> 
> /*************************************************************/
> 
> #ifndef GL_VERSION_1_2
> #define GL_UNSIGNED_BYTE_3_3_2            0x8032
> #define GL_UNSIGNED_SHORT_4_4_4_4         0x8033
> #define GL_UNSIGNED_SHORT_5_5_5_1         0x8034
> #define GL_UNSIGNED_INT_8_8_8_8           0x8035
> #define GL_UNSIGNED_INT_10_10_10_2        0x8036
> #define GL_TEXTURE_BINDING_3D             0x806A
> #define GL_PACK_SKIP_IMAGES               0x806B
> #define GL_PACK_IMAGE_HEIGHT              0x806C
> #define GL_UNPACK_SKIP_IMAGES             0x806D
> #define GL_UNPACK_IMAGE_HEIGHT            0x806E
> #define GL_TEXTURE_3D                     0x806F
> #define GL_PROXY_TEXTURE_3D               0x8070
> #define GL_TEXTURE_DEPTH                  0x8071
> #define GL_TEXTURE_WRAP_R                 0x8072
> #define GL_MAX_3D_TEXTURE_SIZE            0x8073
> #define GL_UNSIGNED_BYTE_2_3_3_REV        0x8362
> #define GL_UNSIGNED_SHORT_5_6_5           0x8363
> #define GL_UNSIGNED_SHORT_5_6_5_REV       0x8364
> #define GL_UNSIGNED_SHORT_4_4_4_4_REV     0x8365
> #define GL_UNSIGNED_SHORT_1_5_5_5_REV     0x8366
> #define GL_UNSIGNED_INT_8_8_8_8_REV       0x8367
> #define GL_UNSIGNED_INT_2_10_10_10_REV    0x8368
> #define GL_BGR                            0x80E0
> #define GL_BGRA                           0x80E1
> #define GL_MAX_ELEMENTS_VERTICES          0x80E8
> #define GL_MAX_ELEMENTS_INDICES           0x80E9
> #define GL_CLAMP_TO_EDGE                  0x812F
> #define GL_TEXTURE_MIN_LOD                0x813A
> #define GL_TEXTURE_MAX_LOD                0x813B
> #define GL_TEXTURE_BASE_LEVEL             0x813C
> #define GL_TEXTURE_MAX_LEVEL              0x813D
> #define GL_SMOOTH_POINT_SIZE_RANGE        0x0B12
> #define GL_SMOOTH_POINT_SIZE_GRANULARITY  0x0B13
> #define GL_SMOOTH_LINE_WIDTH_RANGE        0x0B22
> #define GL_SMOOTH_LINE_WIDTH_GRANULARITY  0x0B23
> #define GL_ALIASED_LINE_WIDTH_RANGE       0x846E
> #endif
> 
> #ifndef GL_VERSION_1_2_DEPRECATED
> #define GL_RESCALE_NORMAL                 0x803A
> #define GL_LIGHT_MODEL_COLOR_CONTROL      0x81F8
> #define GL_SINGLE_COLOR                   0x81F9
> #define GL_SEPARATE_SPECULAR_COLOR        0x81FA
> #define GL_ALIASED_POINT_SIZE_RANGE       0x846D
> #endif
> 
> #ifndef GL_ARB_imaging
> #define GL_CONSTANT_COLOR                 0x8001
> #define GL_ONE_MINUS_CONSTANT_COLOR       0x8002
> #define GL_CONSTANT_ALPHA                 0x8003
> #define GL_ONE_MINUS_CONSTANT_ALPHA       0x8004
> #define GL_BLEND_COLOR                    0x8005
> #define GL_FUNC_ADD                       0x8006
> #define GL_MIN                            0x8007
> #define GL_MAX                            0x8008
> #define GL_BLEND_EQUATION                 0x8009
> #define GL_FUNC_SUBTRACT                  0x800A
> #define GL_FUNC_REVERSE_SUBTRACT          0x800B
> #endif
> 
> #ifndef GL_ARB_imaging_DEPRECATED
> #define GL_CONVOLUTION_1D                 0x8010
> #define GL_CONVOLUTION_2D                 0x8011
> #define GL_SEPARABLE_2D                   0x8012
> #define GL_CONVOLUTION_BORDER_MODE        0x8013
> #define GL_CONVOLUTION_FILTER_SCALE       0x8014
> #define GL_CONVOLUTION_FILTER_BIAS        0x8015
> #define GL_REDUCE                         0x8016
> #define GL_CONVOLUTION_FORMAT             0x8017
> #define GL_CONVOLUTION_WIDTH              0x8018
> #define GL_CONVOLUTION_HEIGHT             0x8019
> #define GL_MAX_CONVOLUTION_WIDTH          0x801A
> #define GL_MAX_CONVOLUTION_HEIGHT         0x801B
> #define GL_POST_CONVOLUTION_RED_SCALE     0x801C
> #define GL_POST_CONVOLUTION_GREEN_SCALE   0x801D
> #define GL_POST_CONVOLUTION_BLUE_SCALE    0x801E
> #define GL_POST_CONVOLUTION_ALPHA_SCALE   0x801F
> #define GL_POST_CONVOLUTION_RED_BIAS      0x8020
> #define GL_POST_CONVOLUTION_GREEN_BIAS    0x8021
> #define GL_POST_CONVOLUTION_BLUE_BIAS     0x8022
> #define GL_POST_CONVOLUTION_ALPHA_BIAS    0x8023
> #define GL_HISTOGRAM                      0x8024
> #define GL_PROXY_HISTOGRAM                0x8025
> #define GL_HISTOGRAM_WIDTH                0x8026
> #define GL_HISTOGRAM_FORMAT               0x8027
> #define GL_HISTOGRAM_RED_SIZE             0x8028
> #define GL_HISTOGRAM_GREEN_SIZE           0x8029
> #define GL_HISTOGRAM_BLUE_SIZE            0x802A
> #define GL_HISTOGRAM_ALPHA_SIZE           0x802B
> #define GL_HISTOGRAM_LUMINANCE_SIZE       0x802C
> #define GL_HISTOGRAM_SINK                 0x802D
> #define GL_MINMAX                         0x802E
> #define GL_MINMAX_FORMAT                  0x802F
> #define GL_MINMAX_SINK                    0x8030
> #define GL_TABLE_TOO_LARGE                0x8031
> #define GL_COLOR_MATRIX                   0x80B1
> #define GL_COLOR_MATRIX_STACK_DEPTH       0x80B2
> #define GL_MAX_COLOR_MATRIX_STACK_DEPTH   0x80B3
> #define GL_POST_COLOR_MATRIX_RED_SCALE    0x80B4
> #define GL_POST_COLOR_MATRIX_GREEN_SCALE  0x80B5
> #define GL_POST_COLOR_MATRIX_BLUE_SCALE   0x80B6
> #define GL_POST_COLOR_MATRIX_ALPHA_SCALE  0x80B7
> #define GL_POST_COLOR_MATRIX_RED_BIAS     0x80B8
> #define GL_POST_COLOR_MATRIX_GREEN_BIAS   0x80B9
> #define GL_POST_COLOR_MATRIX_BLUE_BIAS    0x80BA
> #define GL_POST_COLOR_MATRIX_ALPHA_BIAS   0x80BB
> #define GL_COLOR_TABLE                    0x80D0
> #define GL_POST_CONVOLUTION_COLOR_TABLE   0x80D1
> #define GL_POST_COLOR_MATRIX_COLOR_TABLE  0x80D2
> #define GL_PROXY_COLOR_TABLE              0x80D3
> #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE 0x80D4
> #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE 0x80D5
> #define GL_COLOR_TABLE_SCALE              0x80D6
> #define GL_COLOR_TABLE_BIAS               0x80D7
> #define GL_COLOR_TABLE_FORMAT             0x80D8
> #define GL_COLOR_TABLE_WIDTH              0x80D9
> #define GL_COLOR_TABLE_RED_SIZE           0x80DA
> #define GL_COLOR_TABLE_GREEN_SIZE         0x80DB
> #define GL_COLOR_TABLE_BLUE_SIZE          0x80DC
> #define GL_COLOR_TABLE_ALPHA_SIZE         0x80DD
> #define GL_COLOR_TABLE_LUMINANCE_SIZE     0x80DE
> #define GL_COLOR_TABLE_INTENSITY_SIZE     0x80DF
> #define GL_CONSTANT_BORDER                0x8151
> #define GL_REPLICATE_BORDER               0x8153
> #define GL_CONVOLUTION_BORDER_COLOR       0x8154
> #endif
> 
> #ifndef GL_VERSION_1_3
> #define GL_TEXTURE0                       0x84C0
> #define GL_TEXTURE1                       0x84C1
> #define GL_TEXTURE2                       0x84C2
> #define GL_TEXTURE3                       0x84C3
> #define GL_TEXTURE4                       0x84C4
> #define GL_TEXTURE5                       0x84C5
> #define GL_TEXTURE6                       0x84C6
> #define GL_TEXTURE7                       0x84C7
> #define GL_TEXTURE8                       0x84C8
> #define GL_TEXTURE9                       0x84C9
> #define GL_TEXTURE10                      0x84CA
> #define GL_TEXTURE11                      0x84CB
> #define GL_TEXTURE12                      0x84CC
> #define GL_TEXTURE13                      0x84CD
> #define GL_TEXTURE14                      0x84CE
> #define GL_TEXTURE15                      0x84CF
> #define GL_TEXTURE16                      0x84D0
> #define GL_TEXTURE17                      0x84D1
> #define GL_TEXTURE18                      0x84D2
> #define GL_TEXTURE19                      0x84D3
> #define GL_TEXTURE20                      0x84D4
> #define GL_TEXTURE21                      0x84D5
> #define GL_TEXTURE22                      0x84D6
> #define GL_TEXTURE23                      0x84D7
> #define GL_TEXTURE24                      0x84D8
> #define GL_TEXTURE25                      0x84D9
> #define GL_TEXTURE26                      0x84DA
> #define GL_TEXTURE27                      0x84DB
> #define GL_TEXTURE28                      0x84DC
> #define GL_TEXTURE29                      0x84DD
> #define GL_TEXTURE30                      0x84DE
> #define GL_TEXTURE31                      0x84DF
> #define GL_ACTIVE_TEXTURE                 0x84E0
> #define GL_MULTISAMPLE                    0x809D
> #define GL_SAMPLE_ALPHA_TO_COVERAGE       0x809E
> #define GL_SAMPLE_ALPHA_TO_ONE            0x809F
> #define GL_SAMPLE_COVERAGE                0x80A0
> #define GL_SAMPLE_BUFFERS                 0x80A8
> #define GL_SAMPLES                        0x80A9
> #define GL_SAMPLE_COVERAGE_VALUE          0x80AA
> #define GL_SAMPLE_COVERAGE_INVERT         0x80AB
> #define GL_TEXTURE_CUBE_MAP               0x8513
> #define GL_TEXTURE_BINDING_CUBE_MAP       0x8514
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_X    0x8515
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X    0x8516
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y    0x8517
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y    0x8518
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z    0x8519
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z    0x851A
> #define GL_PROXY_TEXTURE_CUBE_MAP         0x851B
> #define GL_MAX_CUBE_MAP_TEXTURE_SIZE      0x851C
> #define GL_COMPRESSED_RGB                 0x84ED
> #define GL_COMPRESSED_RGBA                0x84EE
> #define GL_TEXTURE_COMPRESSION_HINT       0x84EF
> #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE  0x86A0
> #define GL_TEXTURE_COMPRESSED             0x86A1
> #define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
> #define GL_COMPRESSED_TEXTURE_FORMATS     0x86A3
> #define GL_CLAMP_TO_BORDER                0x812D
> #endif
> 
> #ifndef GL_VERSION_1_3_DEPRECATED
> #define GL_CLIENT_ACTIVE_TEXTURE          0x84E1
> #define GL_MAX_TEXTURE_UNITS              0x84E2
> #define GL_TRANSPOSE_MODELVIEW_MATRIX     0x84E3
> #define GL_TRANSPOSE_PROJECTION_MATRIX    0x84E4
> #define GL_TRANSPOSE_TEXTURE_MATRIX       0x84E5
> #define GL_TRANSPOSE_COLOR_MATRIX         0x84E6
> #define GL_MULTISAMPLE_BIT                0x20000000
> #define GL_NORMAL_MAP                     0x8511
> #define GL_REFLECTION_MAP                 0x8512
> #define GL_COMPRESSED_ALPHA               0x84E9
> #define GL_COMPRESSED_LUMINANCE           0x84EA
> #define GL_COMPRESSED_LUMINANCE_ALPHA     0x84EB
> #define GL_COMPRESSED_INTENSITY           0x84EC
> #define GL_COMBINE                        0x8570
> #define GL_COMBINE_RGB                    0x8571
> #define GL_COMBINE_ALPHA                  0x8572
> #define GL_SOURCE0_RGB                    0x8580
> #define GL_SOURCE1_RGB                    0x8581
> #define GL_SOURCE2_RGB                    0x8582
> #define GL_SOURCE0_ALPHA                  0x8588
> #define GL_SOURCE1_ALPHA                  0x8589
> #define GL_SOURCE2_ALPHA                  0x858A
> #define GL_OPERAND0_RGB                   0x8590
> #define GL_OPERAND1_RGB                   0x8591
> #define GL_OPERAND2_RGB                   0x8592
> #define GL_OPERAND0_ALPHA                 0x8598
> #define GL_OPERAND1_ALPHA                 0x8599
> #define GL_OPERAND2_ALPHA                 0x859A
> #define GL_RGB_SCALE                      0x8573
> #define GL_ADD_SIGNED                     0x8574
> #define GL_INTERPOLATE                    0x8575
> #define GL_SUBTRACT                       0x84E7
> #define GL_CONSTANT                       0x8576
> #define GL_PRIMARY_COLOR                  0x8577
> #define GL_PREVIOUS                       0x8578
> #define GL_DOT3_RGB                       0x86AE
> #define GL_DOT3_RGBA                      0x86AF
> #endif
> 
> #ifndef GL_VERSION_1_4
> #define GL_BLEND_DST_RGB                  0x80C8
> #define GL_BLEND_SRC_RGB                  0x80C9
> #define GL_BLEND_DST_ALPHA                0x80CA
> #define GL_BLEND_SRC_ALPHA                0x80CB
> #define GL_POINT_FADE_THRESHOLD_SIZE      0x8128
> #define GL_DEPTH_COMPONENT16              0x81A5
> #define GL_DEPTH_COMPONENT24              0x81A6
> #define GL_DEPTH_COMPONENT32              0x81A7
> #define GL_MIRRORED_REPEAT                0x8370
> #define GL_MAX_TEXTURE_LOD_BIAS           0x84FD
> #define GL_TEXTURE_LOD_BIAS               0x8501
> #define GL_INCR_WRAP                      0x8507
> #define GL_DECR_WRAP                      0x8508
> #define GL_TEXTURE_DEPTH_SIZE             0x884A
> #define GL_TEXTURE_COMPARE_MODE           0x884C
> #define GL_TEXTURE_COMPARE_FUNC           0x884D
> #endif
> 
> #ifndef GL_VERSION_1_4_DEPRECATED
> #define GL_POINT_SIZE_MIN                 0x8126
> #define GL_POINT_SIZE_MAX                 0x8127
> #define GL_POINT_DISTANCE_ATTENUATION     0x8129
> #define GL_GENERATE_MIPMAP                0x8191
> #define GL_GENERATE_MIPMAP_HINT           0x8192
> #define GL_FOG_COORDINATE_SOURCE          0x8450
> #define GL_FOG_COORDINATE                 0x8451
> #define GL_FRAGMENT_DEPTH                 0x8452
> #define GL_CURRENT_FOG_COORDINATE         0x8453
> #define GL_FOG_COORDINATE_ARRAY_TYPE      0x8454
> #define GL_FOG_COORDINATE_ARRAY_STRIDE    0x8455
> #define GL_FOG_COORDINATE_ARRAY_POINTER   0x8456
> #define GL_FOG_COORDINATE_ARRAY           0x8457
> #define GL_COLOR_SUM                      0x8458
> #define GL_CURRENT_SECONDARY_COLOR        0x8459
> #define GL_SECONDARY_COLOR_ARRAY_SIZE     0x845A
> #define GL_SECONDARY_COLOR_ARRAY_TYPE     0x845B
> #define GL_SECONDARY_COLOR_ARRAY_STRIDE   0x845C
> #define GL_SECONDARY_COLOR_ARRAY_POINTER  0x845D
> #define GL_SECONDARY_COLOR_ARRAY          0x845E
> #define GL_TEXTURE_FILTER_CONTROL         0x8500
> #define GL_DEPTH_TEXTURE_MODE             0x884B
> #define GL_COMPARE_R_TO_TEXTURE           0x884E
> #endif
> 
> #ifndef GL_VERSION_1_5
> #define GL_BUFFER_SIZE                    0x8764
> #define GL_BUFFER_USAGE                   0x8765
> #define GL_QUERY_COUNTER_BITS             0x8864
> #define GL_CURRENT_QUERY                  0x8865
> #define GL_QUERY_RESULT                   0x8866
> #define GL_QUERY_RESULT_AVAILABLE         0x8867
> #define GL_ARRAY_BUFFER                   0x8892
> #define GL_ELEMENT_ARRAY_BUFFER           0x8893
> #define GL_ARRAY_BUFFER_BINDING           0x8894
> #define GL_ELEMENT_ARRAY_BUFFER_BINDING   0x8895
> #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0x889F
> #define GL_READ_ONLY                      0x88B8
> #define GL_WRITE_ONLY                     0x88B9
> #define GL_READ_WRITE                     0x88BA
> #define GL_BUFFER_ACCESS                  0x88BB
> #define GL_BUFFER_MAPPED                  0x88BC
> #define GL_BUFFER_MAP_POINTER             0x88BD
> #define GL_STREAM_DRAW                    0x88E0
> #define GL_STREAM_READ                    0x88E1
> #define GL_STREAM_COPY                    0x88E2
> #define GL_STATIC_DRAW                    0x88E4
> #define GL_STATIC_READ                    0x88E5
> #define GL_STATIC_COPY                    0x88E6
> #define GL_DYNAMIC_DRAW                   0x88E8
> #define GL_DYNAMIC_READ                   0x88E9
> #define GL_DYNAMIC_COPY                   0x88EA
> #define GL_SAMPLES_PASSED                 0x8914
> #endif
> 
> #ifndef GL_VERSION_1_5_DEPRECATED
> #define GL_VERTEX_ARRAY_BUFFER_BINDING    0x8896
> #define GL_NORMAL_ARRAY_BUFFER_BINDING    0x8897
> #define GL_COLOR_ARRAY_BUFFER_BINDING     0x8898
> #define GL_INDEX_ARRAY_BUFFER_BINDING     0x8899
> #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
> #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING 0x889B
> #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING 0x889C
> #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING 0x889D
> #define GL_WEIGHT_ARRAY_BUFFER_BINDING    0x889E
> #define GL_FOG_COORD_SRC                  0x8450
> #define GL_FOG_COORD                      0x8451
> #define GL_CURRENT_FOG_COORD              0x8453
> #define GL_FOG_COORD_ARRAY_TYPE           0x8454
> #define GL_FOG_COORD_ARRAY_STRIDE         0x8455
> #define GL_FOG_COORD_ARRAY_POINTER        0x8456
> #define GL_FOG_COORD_ARRAY                0x8457
> #define GL_FOG_COORD_ARRAY_BUFFER_BINDING 0x889D
> #define GL_SRC0_RGB                       0x8580
> #define GL_SRC1_RGB                       0x8581
> #define GL_SRC2_RGB                       0x8582
> #define GL_SRC0_ALPHA                     0x8588
> #define GL_SRC1_ALPHA                     0x8589
> #define GL_SRC2_ALPHA                     0x858A
> #endif
> 
> #ifndef GL_VERSION_2_0
> #define GL_BLEND_EQUATION_RGB             0x8009
> #define GL_VERTEX_ATTRIB_ARRAY_ENABLED    0x8622
> #define GL_VERTEX_ATTRIB_ARRAY_SIZE       0x8623
> #define GL_VERTEX_ATTRIB_ARRAY_STRIDE     0x8624
> #define GL_VERTEX_ATTRIB_ARRAY_TYPE       0x8625
> #define GL_CURRENT_VERTEX_ATTRIB          0x8626
> #define GL_VERTEX_PROGRAM_POINT_SIZE      0x8642
> #define GL_VERTEX_ATTRIB_ARRAY_POINTER    0x8645
> #define GL_STENCIL_BACK_FUNC              0x8800
> #define GL_STENCIL_BACK_FAIL              0x8801
> #define GL_STENCIL_BACK_PASS_DEPTH_FAIL   0x8802
> #define GL_STENCIL_BACK_PASS_DEPTH_PASS   0x8803
> #define GL_MAX_DRAW_BUFFERS               0x8824
> #define GL_DRAW_BUFFER0                   0x8825
> #define GL_DRAW_BUFFER1                   0x8826
> #define GL_DRAW_BUFFER2                   0x8827
> #define GL_DRAW_BUFFER3                   0x8828
> #define GL_DRAW_BUFFER4                   0x8829
> #define GL_DRAW_BUFFER5                   0x882A
> #define GL_DRAW_BUFFER6                   0x882B
> #define GL_DRAW_BUFFER7                   0x882C
> #define GL_DRAW_BUFFER8                   0x882D
> #define GL_DRAW_BUFFER9                   0x882E
> #define GL_DRAW_BUFFER10                  0x882F
> #define GL_DRAW_BUFFER11                  0x8830
> #define GL_DRAW_BUFFER12                  0x8831
> #define GL_DRAW_BUFFER13                  0x8832
> #define GL_DRAW_BUFFER14                  0x8833
> #define GL_DRAW_BUFFER15                  0x8834
> #define GL_BLEND_EQUATION_ALPHA           0x883D
> #define GL_MAX_VERTEX_ATTRIBS             0x8869
> #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0x886A
> #define GL_MAX_TEXTURE_IMAGE_UNITS        0x8872
> #define GL_FRAGMENT_SHADER                0x8B30
> #define GL_VERTEX_SHADER                  0x8B31
> #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0x8B49
> #define GL_MAX_VERTEX_UNIFORM_COMPONENTS  0x8B4A
> #define GL_MAX_VARYING_FLOATS             0x8B4B
> #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0x8B4C
> #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0x8B4D
> #define GL_SHADER_TYPE                    0x8B4F
> #define GL_FLOAT_VEC2                     0x8B50
> #define GL_FLOAT_VEC3                     0x8B51
> #define GL_FLOAT_VEC4                     0x8B52
> #define GL_INT_VEC2                       0x8B53
> #define GL_INT_VEC3                       0x8B54
> #define GL_INT_VEC4                       0x8B55
> #define GL_BOOL                           0x8B56
> #define GL_BOOL_VEC2                      0x8B57
> #define GL_BOOL_VEC3                      0x8B58
> #define GL_BOOL_VEC4                      0x8B59
> #define GL_FLOAT_MAT2                     0x8B5A
> #define GL_FLOAT_MAT3                     0x8B5B
> #define GL_FLOAT_MAT4                     0x8B5C
> #define GL_SAMPLER_1D                     0x8B5D
> #define GL_SAMPLER_2D                     0x8B5E
> #define GL_SAMPLER_3D                     0x8B5F
> #define GL_SAMPLER_CUBE                   0x8B60
> #define GL_SAMPLER_1D_SHADOW              0x8B61
> #define GL_SAMPLER_2D_SHADOW              0x8B62
> #define GL_DELETE_STATUS                  0x8B80
> #define GL_COMPILE_STATUS                 0x8B81
> #define GL_LINK_STATUS                    0x8B82
> #define GL_VALIDATE_STATUS                0x8B83
> #define GL_INFO_LOG_LENGTH                0x8B84
> #define GL_ATTACHED_SHADERS               0x8B85
> #define GL_ACTIVE_UNIFORMS                0x8B86
> #define GL_ACTIVE_UNIFORM_MAX_LENGTH      0x8B87
> #define GL_SHADER_SOURCE_LENGTH           0x8B88
> #define GL_ACTIVE_ATTRIBUTES              0x8B89
> #define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH    0x8B8A
> #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0x8B8B
> #define GL_SHADING_LANGUAGE_VERSION       0x8B8C
> #define GL_CURRENT_PROGRAM                0x8B8D
> #define GL_POINT_SPRITE_COORD_ORIGIN      0x8CA0
> #define GL_LOWER_LEFT                     0x8CA1
> #define GL_UPPER_LEFT                     0x8CA2
> #define GL_STENCIL_BACK_REF               0x8CA3
> #define GL_STENCIL_BACK_VALUE_MASK        0x8CA4
> #define GL_STENCIL_BACK_WRITEMASK         0x8CA5
> #endif
> 
> #ifndef GL_VERSION_2_0_DEPRECATED
> #define GL_VERTEX_PROGRAM_TWO_SIDE        0x8643
> #define GL_POINT_SPRITE                   0x8861
> #define GL_COORD_REPLACE                  0x8862
> #define GL_MAX_TEXTURE_COORDS             0x8871
> #endif
> 
> #ifndef GL_VERSION_2_1
> #define GL_PIXEL_PACK_BUFFER              0x88EB
> #define GL_PIXEL_UNPACK_BUFFER            0x88EC
> #define GL_PIXEL_PACK_BUFFER_BINDING      0x88ED
> #define GL_PIXEL_UNPACK_BUFFER_BINDING    0x88EF
> #define GL_FLOAT_MAT2x3                   0x8B65
> #define GL_FLOAT_MAT2x4                   0x8B66
> #define GL_FLOAT_MAT3x2                   0x8B67
> #define GL_FLOAT_MAT3x4                   0x8B68
> #define GL_FLOAT_MAT4x2                   0x8B69
> #define GL_FLOAT_MAT4x3                   0x8B6A
> #define GL_SRGB                           0x8C40
> #define GL_SRGB8                          0x8C41
> #define GL_SRGB_ALPHA                     0x8C42
> #define GL_SRGB8_ALPHA8                   0x8C43
> #define GL_COMPRESSED_SRGB                0x8C48
> #define GL_COMPRESSED_SRGB_ALPHA          0x8C49
> #endif
> 
> #ifndef GL_VERSION_2_1_DEPRECATED
> #define GL_CURRENT_RASTER_SECONDARY_COLOR 0x845F
> #define GL_SLUMINANCE_ALPHA               0x8C44
> #define GL_SLUMINANCE8_ALPHA8             0x8C45
> #define GL_SLUMINANCE                     0x8C46
> #define GL_SLUMINANCE8                    0x8C47
> #define GL_COMPRESSED_SLUMINANCE          0x8C4A
> #define GL_COMPRESSED_SLUMINANCE_ALPHA    0x8C4B
> #endif
> 
> #ifndef GL_VERSION_3_0
> #define GL_COMPARE_REF_TO_TEXTURE         0x884E
> #define GL_CLIP_DISTANCE0                 0x3000
> #define GL_CLIP_DISTANCE1                 0x3001
> #define GL_CLIP_DISTANCE2                 0x3002
> #define GL_CLIP_DISTANCE3                 0x3003
> #define GL_CLIP_DISTANCE4                 0x3004
> #define GL_CLIP_DISTANCE5                 0x3005
> #define GL_CLIP_DISTANCE6                 0x3006
> #define GL_CLIP_DISTANCE7                 0x3007
> #define GL_MAX_CLIP_DISTANCES             0x0D32
> #define GL_MAJOR_VERSION                  0x821B
> #define GL_MINOR_VERSION                  0x821C
> #define GL_NUM_EXTENSIONS                 0x821D
> #define GL_CONTEXT_FLAGS                  0x821E
> #define GL_DEPTH_BUFFER                   0x8223
> #define GL_STENCIL_BUFFER                 0x8224
> #define GL_COMPRESSED_RED                 0x8225
> #define GL_COMPRESSED_RG                  0x8226
> #define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0x0001
> #define GL_RGBA32F                        0x8814
> #define GL_RGB32F                         0x8815
> #define GL_RGBA16F                        0x881A
> #define GL_RGB16F                         0x881B
> #define GL_VERTEX_ATTRIB_ARRAY_INTEGER    0x88FD
> #define GL_MAX_ARRAY_TEXTURE_LAYERS       0x88FF
> #define GL_MIN_PROGRAM_TEXEL_OFFSET       0x8904
> #define GL_MAX_PROGRAM_TEXEL_OFFSET       0x8905
> #define GL_CLAMP_READ_COLOR               0x891C
> #define GL_FIXED_ONLY                     0x891D
> #define GL_MAX_VARYING_COMPONENTS         0x8B4B
> #define GL_TEXTURE_1D_ARRAY               0x8C18
> #define GL_PROXY_TEXTURE_1D_ARRAY         0x8C19
> #define GL_TEXTURE_2D_ARRAY               0x8C1A
> #define GL_PROXY_TEXTURE_2D_ARRAY         0x8C1B
> #define GL_TEXTURE_BINDING_1D_ARRAY       0x8C1C
> #define GL_TEXTURE_BINDING_2D_ARRAY       0x8C1D
> #define GL_R11F_G11F_B10F                 0x8C3A
> #define GL_UNSIGNED_INT_10F_11F_11F_REV   0x8C3B
> #define GL_RGB9_E5                        0x8C3D
> #define GL_UNSIGNED_INT_5_9_9_9_REV       0x8C3E
> #define GL_TEXTURE_SHARED_SIZE            0x8C3F
> #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0x8C76
> #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0x8C7F
> #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0x8C80
> #define GL_TRANSFORM_FEEDBACK_VARYINGS    0x8C83
> #define GL_TRANSFORM_FEEDBACK_BUFFER_START 0x8C84
> #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0x8C85
> #define GL_PRIMITIVES_GENERATED           0x8C87
> #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0x8C88
> #define GL_RASTERIZER_DISCARD             0x8C89
> #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0x8C8A
> #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0x8C8B
> #define GL_INTERLEAVED_ATTRIBS            0x8C8C
> #define GL_SEPARATE_ATTRIBS               0x8C8D
> #define GL_TRANSFORM_FEEDBACK_BUFFER      0x8C8E
> #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0x8C8F
> #define GL_RGBA32UI                       0x8D70
> #define GL_RGB32UI                        0x8D71
> #define GL_RGBA16UI                       0x8D76
> #define GL_RGB16UI                        0x8D77
> #define GL_RGBA8UI                        0x8D7C
> #define GL_RGB8UI                         0x8D7D
> #define GL_RGBA32I                        0x8D82
> #define GL_RGB32I                         0x8D83
> #define GL_RGBA16I                        0x8D88
> #define GL_RGB16I                         0x8D89
> #define GL_RGBA8I                         0x8D8E
> #define GL_RGB8I                          0x8D8F
> #define GL_RED_INTEGER                    0x8D94
> #define GL_GREEN_INTEGER                  0x8D95
> #define GL_BLUE_INTEGER                   0x8D96
> #define GL_RGB_INTEGER                    0x8D98
> #define GL_RGBA_INTEGER                   0x8D99
> #define GL_BGR_INTEGER                    0x8D9A
> #define GL_BGRA_INTEGER                   0x8D9B
> #define GL_SAMPLER_1D_ARRAY               0x8DC0
> #define GL_SAMPLER_2D_ARRAY               0x8DC1
> #define GL_SAMPLER_1D_ARRAY_SHADOW        0x8DC3
> #define GL_SAMPLER_2D_ARRAY_SHADOW        0x8DC4
> #define GL_SAMPLER_CUBE_SHADOW            0x8DC5
> #define GL_UNSIGNED_INT_VEC2              0x8DC6
> #define GL_UNSIGNED_INT_VEC3              0x8DC7
> #define GL_UNSIGNED_INT_VEC4              0x8DC8
> #define GL_INT_SAMPLER_1D                 0x8DC9
> #define GL_INT_SAMPLER_2D                 0x8DCA
> #define GL_INT_SAMPLER_3D                 0x8DCB
> #define GL_INT_SAMPLER_CUBE               0x8DCC
> #define GL_INT_SAMPLER_1D_ARRAY           0x8DCE
> #define GL_INT_SAMPLER_2D_ARRAY           0x8DCF
> #define GL_UNSIGNED_INT_SAMPLER_1D        0x8DD1
> #define GL_UNSIGNED_INT_SAMPLER_2D        0x8DD2
> #define GL_UNSIGNED_INT_SAMPLER_3D        0x8DD3
> #define GL_UNSIGNED_INT_SAMPLER_CUBE      0x8DD4
> #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY  0x8DD6
> #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY  0x8DD7
> #define GL_QUERY_WAIT                     0x8E13
> #define GL_QUERY_NO_WAIT                  0x8E14
> #define GL_QUERY_BY_REGION_WAIT           0x8E15
> #define GL_QUERY_BY_REGION_NO_WAIT        0x8E16
> #define GL_BUFFER_ACCESS_FLAGS            0x911F
> #define GL_BUFFER_MAP_LENGTH              0x9120
> #define GL_BUFFER_MAP_OFFSET              0x9121
> /* Reuse tokens from ARB_depth_buffer_float */
> /* reuse GL_DEPTH_COMPONENT32F */
> /* reuse GL_DEPTH32F_STENCIL8 */
> /* reuse GL_FLOAT_32_UNSIGNED_INT_24_8_REV */
> /* Reuse tokens from ARB_framebuffer_object */
> /* reuse GL_INVALID_FRAMEBUFFER_OPERATION */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE */
> /* reuse GL_FRAMEBUFFER_DEFAULT */
> /* reuse GL_FRAMEBUFFER_UNDEFINED */
> /* reuse GL_DEPTH_STENCIL_ATTACHMENT */
> /* reuse GL_INDEX */
> /* reuse GL_MAX_RENDERBUFFER_SIZE */
> /* reuse GL_DEPTH_STENCIL */
> /* reuse GL_UNSIGNED_INT_24_8 */
> /* reuse GL_DEPTH24_STENCIL8 */
> /* reuse GL_TEXTURE_STENCIL_SIZE */
> /* reuse GL_TEXTURE_RED_TYPE */
> /* reuse GL_TEXTURE_GREEN_TYPE */
> /* reuse GL_TEXTURE_BLUE_TYPE */
> /* reuse GL_TEXTURE_ALPHA_TYPE */
> /* reuse GL_TEXTURE_DEPTH_TYPE */
> /* reuse GL_UNSIGNED_NORMALIZED */
> /* reuse GL_FRAMEBUFFER_BINDING */
> /* reuse GL_DRAW_FRAMEBUFFER_BINDING */
> /* reuse GL_RENDERBUFFER_BINDING */
> /* reuse GL_READ_FRAMEBUFFER */
> /* reuse GL_DRAW_FRAMEBUFFER */
> /* reuse GL_READ_FRAMEBUFFER_BINDING */
> /* reuse GL_RENDERBUFFER_SAMPLES */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
> /* reuse GL_FRAMEBUFFER_COMPLETE */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER */
> /* reuse GL_FRAMEBUFFER_UNSUPPORTED */
> /* reuse GL_MAX_COLOR_ATTACHMENTS */
> /* reuse GL_COLOR_ATTACHMENT0 */
> /* reuse GL_COLOR_ATTACHMENT1 */
> /* reuse GL_COLOR_ATTACHMENT2 */
> /* reuse GL_COLOR_ATTACHMENT3 */
> /* reuse GL_COLOR_ATTACHMENT4 */
> /* reuse GL_COLOR_ATTACHMENT5 */
> /* reuse GL_COLOR_ATTACHMENT6 */
> /* reuse GL_COLOR_ATTACHMENT7 */
> /* reuse GL_COLOR_ATTACHMENT8 */
> /* reuse GL_COLOR_ATTACHMENT9 */
> /* reuse GL_COLOR_ATTACHMENT10 */
> /* reuse GL_COLOR_ATTACHMENT11 */
> /* reuse GL_COLOR_ATTACHMENT12 */
> /* reuse GL_COLOR_ATTACHMENT13 */
> /* reuse GL_COLOR_ATTACHMENT14 */
> /* reuse GL_COLOR_ATTACHMENT15 */
> /* reuse GL_DEPTH_ATTACHMENT */
> /* reuse GL_STENCIL_ATTACHMENT */
> /* reuse GL_FRAMEBUFFER */
> /* reuse GL_RENDERBUFFER */
> /* reuse GL_RENDERBUFFER_WIDTH */
> /* reuse GL_RENDERBUFFER_HEIGHT */
> /* reuse GL_RENDERBUFFER_INTERNAL_FORMAT */
> /* reuse GL_STENCIL_INDEX1 */
> /* reuse GL_STENCIL_INDEX4 */
> /* reuse GL_STENCIL_INDEX8 */
> /* reuse GL_STENCIL_INDEX16 */
> /* reuse GL_RENDERBUFFER_RED_SIZE */
> /* reuse GL_RENDERBUFFER_GREEN_SIZE */
> /* reuse GL_RENDERBUFFER_BLUE_SIZE */
> /* reuse GL_RENDERBUFFER_ALPHA_SIZE */
> /* reuse GL_RENDERBUFFER_DEPTH_SIZE */
> /* reuse GL_RENDERBUFFER_STENCIL_SIZE */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE */
> /* reuse GL_MAX_SAMPLES */
> /* Reuse tokens from ARB_framebuffer_sRGB */
> /* reuse GL_FRAMEBUFFER_SRGB */
> /* Reuse tokens from ARB_half_float_vertex */
> /* reuse GL_HALF_FLOAT */
> /* Reuse tokens from ARB_map_buffer_range */
> /* reuse GL_MAP_READ_BIT */
> /* reuse GL_MAP_WRITE_BIT */
> /* reuse GL_MAP_INVALIDATE_RANGE_BIT */
> /* reuse GL_MAP_INVALIDATE_BUFFER_BIT */
> /* reuse GL_MAP_FLUSH_EXPLICIT_BIT */
> /* reuse GL_MAP_UNSYNCHRONIZED_BIT */
> /* Reuse tokens from ARB_texture_compression_rgtc */
> /* reuse GL_COMPRESSED_RED_RGTC1 */
> /* reuse GL_COMPRESSED_SIGNED_RED_RGTC1 */
> /* reuse GL_COMPRESSED_RG_RGTC2 */
> /* reuse GL_COMPRESSED_SIGNED_RG_RGTC2 */
> /* Reuse tokens from ARB_texture_rg */
> /* reuse GL_RG */
> /* reuse GL_RG_INTEGER */
> /* reuse GL_R8 */
> /* reuse GL_R16 */
> /* reuse GL_RG8 */
> /* reuse GL_RG16 */
> /* reuse GL_R16F */
> /* reuse GL_R32F */
> /* reuse GL_RG16F */
> /* reuse GL_RG32F */
> /* reuse GL_R8I */
> /* reuse GL_R8UI */
> /* reuse GL_R16I */
> /* reuse GL_R16UI */
> /* reuse GL_R32I */
> /* reuse GL_R32UI */
> /* reuse GL_RG8I */
> /* reuse GL_RG8UI */
> /* reuse GL_RG16I */
> /* reuse GL_RG16UI */
> /* reuse GL_RG32I */
> /* reuse GL_RG32UI */
> /* Reuse tokens from ARB_vertex_array_object */
> /* reuse GL_VERTEX_ARRAY_BINDING */
> #endif
> 
> #ifndef GL_VERSION_3_0_DEPRECATED
> #define GL_CLAMP_VERTEX_COLOR             0x891A
> #define GL_CLAMP_FRAGMENT_COLOR           0x891B
> #define GL_ALPHA_INTEGER                  0x8D97
> /* Reuse tokens from ARB_framebuffer_object */
> /* reuse GL_TEXTURE_LUMINANCE_TYPE */
> /* reuse GL_TEXTURE_INTENSITY_TYPE */
> #endif
> 
> #ifndef GL_VERSION_3_1
> #define GL_SAMPLER_2D_RECT                0x8B63
> #define GL_SAMPLER_2D_RECT_SHADOW         0x8B64
> #define GL_SAMPLER_BUFFER                 0x8DC2
> #define GL_INT_SAMPLER_2D_RECT            0x8DCD
> #define GL_INT_SAMPLER_BUFFER             0x8DD0
> #define GL_UNSIGNED_INT_SAMPLER_2D_RECT   0x8DD5
> #define GL_UNSIGNED_INT_SAMPLER_BUFFER    0x8DD8
> #define GL_TEXTURE_BUFFER                 0x8C2A
> #define GL_MAX_TEXTURE_BUFFER_SIZE        0x8C2B
> #define GL_TEXTURE_BINDING_BUFFER         0x8C2C
> #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0x8C2D
> #define GL_TEXTURE_BUFFER_FORMAT          0x8C2E
> #define GL_TEXTURE_RECTANGLE              0x84F5
> #define GL_TEXTURE_BINDING_RECTANGLE      0x84F6
> #define GL_PROXY_TEXTURE_RECTANGLE        0x84F7
> #define GL_MAX_RECTANGLE_TEXTURE_SIZE     0x84F8
> #define GL_RED_SNORM                      0x8F90
> #define GL_RG_SNORM                       0x8F91
> #define GL_RGB_SNORM                      0x8F92
> #define GL_RGBA_SNORM                     0x8F93
> #define GL_R8_SNORM                       0x8F94
> #define GL_RG8_SNORM                      0x8F95
> #define GL_RGB8_SNORM                     0x8F96
> #define GL_RGBA8_SNORM                    0x8F97
> #define GL_R16_SNORM                      0x8F98
> #define GL_RG16_SNORM                     0x8F99
> #define GL_RGB16_SNORM                    0x8F9A
> #define GL_RGBA16_SNORM                   0x8F9B
> #define GL_SIGNED_NORMALIZED              0x8F9C
> #define GL_PRIMITIVE_RESTART              0x8F9D
> #define GL_PRIMITIVE_RESTART_INDEX        0x8F9E
> /* Reuse tokens from ARB_copy_buffer */
> /* reuse GL_COPY_READ_BUFFER */
> /* reuse GL_COPY_WRITE_BUFFER */
> /* Reuse tokens from ARB_draw_instanced (none) */
> /* Reuse tokens from ARB_uniform_buffer_object */
> /* reuse GL_UNIFORM_BUFFER */
> /* reuse GL_UNIFORM_BUFFER_BINDING */
> /* reuse GL_UNIFORM_BUFFER_START */
> /* reuse GL_UNIFORM_BUFFER_SIZE */
> /* reuse GL_MAX_VERTEX_UNIFORM_BLOCKS */
> /* reuse GL_MAX_FRAGMENT_UNIFORM_BLOCKS */
> /* reuse GL_MAX_COMBINED_UNIFORM_BLOCKS */
> /* reuse GL_MAX_UNIFORM_BUFFER_BINDINGS */
> /* reuse GL_MAX_UNIFORM_BLOCK_SIZE */
> /* reuse GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS */
> /* reuse GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS */
> /* reuse GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT */
> /* reuse GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH */
> /* reuse GL_ACTIVE_UNIFORM_BLOCKS */
> /* reuse GL_UNIFORM_TYPE */
> /* reuse GL_UNIFORM_SIZE */
> /* reuse GL_UNIFORM_NAME_LENGTH */
> /* reuse GL_UNIFORM_BLOCK_INDEX */
> /* reuse GL_UNIFORM_OFFSET */
> /* reuse GL_UNIFORM_ARRAY_STRIDE */
> /* reuse GL_UNIFORM_MATRIX_STRIDE */
> /* reuse GL_UNIFORM_IS_ROW_MAJOR */
> /* reuse GL_UNIFORM_BLOCK_BINDING */
> /* reuse GL_UNIFORM_BLOCK_DATA_SIZE */
> /* reuse GL_UNIFORM_BLOCK_NAME_LENGTH */
> /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS */
> /* reuse GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES */
> /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER */
> /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER */
> /* reuse GL_INVALID_INDEX */
> #endif
> 
> #ifndef GL_VERSION_3_2
> #define GL_CONTEXT_CORE_PROFILE_BIT       0x00000001
> #define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0x00000002
> #define GL_LINES_ADJACENCY                0x000A
> #define GL_LINE_STRIP_ADJACENCY           0x000B
> #define GL_TRIANGLES_ADJACENCY            0x000C
> #define GL_TRIANGLE_STRIP_ADJACENCY       0x000D
> #define GL_PROGRAM_POINT_SIZE             0x8642
> #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0x8C29
> #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0x8DA7
> #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0x8DA8
> #define GL_GEOMETRY_SHADER                0x8DD9
> #define GL_GEOMETRY_VERTICES_OUT          0x8916
> #define GL_GEOMETRY_INPUT_TYPE            0x8917
> #define GL_GEOMETRY_OUTPUT_TYPE           0x8918
> #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0x8DDF
> #define GL_MAX_GEOMETRY_OUTPUT_VERTICES   0x8DE0
> #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0x8DE1
> #define GL_MAX_VERTEX_OUTPUT_COMPONENTS   0x9122
> #define GL_MAX_GEOMETRY_INPUT_COMPONENTS  0x9123
> #define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0x9124
> #define GL_MAX_FRAGMENT_INPUT_COMPONENTS  0x9125
> #define GL_CONTEXT_PROFILE_MASK           0x9126
> /* reuse GL_MAX_VARYING_COMPONENTS */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
> /* Reuse tokens from ARB_depth_clamp */
> /* reuse GL_DEPTH_CLAMP */
> /* Reuse tokens from ARB_draw_elements_base_vertex (none) */
> /* Reuse tokens from ARB_fragment_coord_conventions (none) */
> /* Reuse tokens from ARB_provoking_vertex */
> /* reuse GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION */
> /* reuse GL_FIRST_VERTEX_CONVENTION */
> /* reuse GL_LAST_VERTEX_CONVENTION */
> /* reuse GL_PROVOKING_VERTEX */
> /* Reuse tokens from ARB_seamless_cube_map */
> /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS */
> /* Reuse tokens from ARB_sync */
> /* reuse GL_MAX_SERVER_WAIT_TIMEOUT */
> /* reuse GL_OBJECT_TYPE */
> /* reuse GL_SYNC_CONDITION */
> /* reuse GL_SYNC_STATUS */
> /* reuse GL_SYNC_FLAGS */
> /* reuse GL_SYNC_FENCE */
> /* reuse GL_SYNC_GPU_COMMANDS_COMPLETE */
> /* reuse GL_UNSIGNALED */
> /* reuse GL_SIGNALED */
> /* reuse GL_ALREADY_SIGNALED */
> /* reuse GL_TIMEOUT_EXPIRED */
> /* reuse GL_CONDITION_SATISFIED */
> /* reuse GL_WAIT_FAILED */
> /* reuse GL_TIMEOUT_IGNORED */
> /* reuse GL_SYNC_FLUSH_COMMANDS_BIT */
> /* reuse GL_TIMEOUT_IGNORED */
> /* Reuse tokens from ARB_texture_multisample */
> /* reuse GL_SAMPLE_POSITION */
> /* reuse GL_SAMPLE_MASK */
> /* reuse GL_SAMPLE_MASK_VALUE */
> /* reuse GL_MAX_SAMPLE_MASK_WORDS */
> /* reuse GL_TEXTURE_2D_MULTISAMPLE */
> /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE */
> /* reuse GL_TEXTURE_2D_MULTISAMPLE_ARRAY */
> /* reuse GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY */
> /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE */
> /* reuse GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY */
> /* reuse GL_TEXTURE_SAMPLES */
> /* reuse GL_TEXTURE_FIXED_SAMPLE_LOCATIONS */
> /* reuse GL_SAMPLER_2D_MULTISAMPLE */
> /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE */
> /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE */
> /* reuse GL_SAMPLER_2D_MULTISAMPLE_ARRAY */
> /* reuse GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
> /* reuse GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY */
> /* reuse GL_MAX_COLOR_TEXTURE_SAMPLES */
> /* reuse GL_MAX_DEPTH_TEXTURE_SAMPLES */
> /* reuse GL_MAX_INTEGER_SAMPLES */
> /* Don't need to reuse tokens from ARB_vertex_array_bgra since they're already in 1.2 core */
> #endif
> 
> #ifndef GL_VERSION_3_3
> #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR    0x88FE
> /* Reuse tokens from ARB_blend_func_extended */
> /* reuse GL_SRC1_COLOR */
> /* reuse GL_ONE_MINUS_SRC1_COLOR */
> /* reuse GL_ONE_MINUS_SRC1_ALPHA */
> /* reuse GL_MAX_DUAL_SOURCE_DRAW_BUFFERS */
> /* Reuse tokens from ARB_explicit_attrib_location (none) */
> /* Reuse tokens from ARB_occlusion_query2 */
> /* reuse GL_ANY_SAMPLES_PASSED */
> /* Reuse tokens from ARB_sampler_objects */
> /* reuse GL_SAMPLER_BINDING */
> /* Reuse tokens from ARB_shader_bit_encoding (none) */
> /* Reuse tokens from ARB_texture_rgb10_a2ui */
> /* reuse GL_RGB10_A2UI */
> /* Reuse tokens from ARB_texture_swizzle */
> /* reuse GL_TEXTURE_SWIZZLE_R */
> /* reuse GL_TEXTURE_SWIZZLE_G */
> /* reuse GL_TEXTURE_SWIZZLE_B */
> /* reuse GL_TEXTURE_SWIZZLE_A */
> /* reuse GL_TEXTURE_SWIZZLE_RGBA */
> /* Reuse tokens from ARB_timer_query */
> /* reuse GL_TIME_ELAPSED */
> /* reuse GL_TIMESTAMP */
> /* Reuse tokens from ARB_vertex_type_2_10_10_10_rev */
> /* reuse GL_INT_2_10_10_10_REV */
> #endif
> 
> #ifndef GL_VERSION_4_0
> #define GL_SAMPLE_SHADING                 0x8C36
> #define GL_MIN_SAMPLE_SHADING_VALUE       0x8C37
> #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5E
> #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0x8E5F
> #define GL_TEXTURE_CUBE_MAP_ARRAY         0x9009
> #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0x900A
> #define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY   0x900B
> #define GL_SAMPLER_CUBE_MAP_ARRAY         0x900C
> #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW  0x900D
> #define GL_INT_SAMPLER_CUBE_MAP_ARRAY     0x900E
> #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0x900F
> /* Reuse tokens from ARB_texture_query_lod (none) */
> /* Reuse tokens from ARB_draw_buffers_blend (none) */
> /* Reuse tokens from ARB_draw_indirect */
> /* reuse GL_DRAW_INDIRECT_BUFFER */
> /* reuse GL_DRAW_INDIRECT_BUFFER_BINDING */
> /* Reuse tokens from ARB_gpu_shader5 */
> /* reuse GL_GEOMETRY_SHADER_INVOCATIONS */
> /* reuse GL_MAX_GEOMETRY_SHADER_INVOCATIONS */
> /* reuse GL_MIN_FRAGMENT_INTERPOLATION_OFFSET */
> /* reuse GL_MAX_FRAGMENT_INTERPOLATION_OFFSET */
> /* reuse GL_FRAGMENT_INTERPOLATION_OFFSET_BITS */
> /* reuse GL_MAX_VERTEX_STREAMS */
> /* Reuse tokens from ARB_gpu_shader_fp64 */
> /* reuse GL_DOUBLE_VEC2 */
> /* reuse GL_DOUBLE_VEC3 */
> /* reuse GL_DOUBLE_VEC4 */
> /* reuse GL_DOUBLE_MAT2 */
> /* reuse GL_DOUBLE_MAT3 */
> /* reuse GL_DOUBLE_MAT4 */
> /* reuse GL_DOUBLE_MAT2x3 */
> /* reuse GL_DOUBLE_MAT2x4 */
> /* reuse GL_DOUBLE_MAT3x2 */
> /* reuse GL_DOUBLE_MAT3x4 */
> /* reuse GL_DOUBLE_MAT4x2 */
> /* reuse GL_DOUBLE_MAT4x3 */
> /* Reuse tokens from ARB_shader_subroutine */
> /* reuse GL_ACTIVE_SUBROUTINES */
> /* reuse GL_ACTIVE_SUBROUTINE_UNIFORMS */
> /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS */
> /* reuse GL_ACTIVE_SUBROUTINE_MAX_LENGTH */
> /* reuse GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH */
> /* reuse GL_MAX_SUBROUTINES */
> /* reuse GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS */
> /* reuse GL_NUM_COMPATIBLE_SUBROUTINES */
> /* reuse GL_COMPATIBLE_SUBROUTINES */
> /* Reuse tokens from ARB_tessellation_shader */
> /* reuse GL_PATCHES */
> /* reuse GL_PATCH_VERTICES */
> /* reuse GL_PATCH_DEFAULT_INNER_LEVEL */
> /* reuse GL_PATCH_DEFAULT_OUTER_LEVEL */
> /* reuse GL_TESS_CONTROL_OUTPUT_VERTICES */
> /* reuse GL_TESS_GEN_MODE */
> /* reuse GL_TESS_GEN_SPACING */
> /* reuse GL_TESS_GEN_VERTEX_ORDER */
> /* reuse GL_TESS_GEN_POINT_MODE */
> /* reuse GL_ISOLINES */
> /* reuse GL_FRACTIONAL_ODD */
> /* reuse GL_FRACTIONAL_EVEN */
> /* reuse GL_MAX_PATCH_VERTICES */
> /* reuse GL_MAX_TESS_GEN_LEVEL */
> /* reuse GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS */
> /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS */
> /* reuse GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS */
> /* reuse GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS */
> /* reuse GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS */
> /* reuse GL_MAX_TESS_PATCH_COMPONENTS */
> /* reuse GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS */
> /* reuse GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS */
> /* reuse GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS */
> /* reuse GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS */
> /* reuse GL_MAX_TESS_CONTROL_INPUT_COMPONENTS */
> /* reuse GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS */
> /* reuse GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS */
> /* reuse GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS */
> /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER */
> /* reuse GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER */
> /* reuse GL_TESS_EVALUATION_SHADER */
> /* reuse GL_TESS_CONTROL_SHADER */
> /* Reuse tokens from ARB_texture_buffer_object_rgb32 (none) */
> /* Reuse tokens from ARB_transform_feedback2 */
> /* reuse GL_TRANSFORM_FEEDBACK */
> /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED */
> /* reuse GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE */
> /* reuse GL_TRANSFORM_FEEDBACK_BINDING */
> /* Reuse tokens from ARB_transform_feedback3 */
> /* reuse GL_MAX_TRANSFORM_FEEDBACK_BUFFERS */
> /* reuse GL_MAX_VERTEX_STREAMS */
> #endif
> 
> #ifndef GL_VERSION_4_1
> /* Reuse tokens from ARB_ES2_compatibility */
> /* reuse GL_FIXED */
> /* reuse GL_IMPLEMENTATION_COLOR_READ_TYPE */
> /* reuse GL_IMPLEMENTATION_COLOR_READ_FORMAT */
> /* reuse GL_LOW_FLOAT */
> /* reuse GL_MEDIUM_FLOAT */
> /* reuse GL_HIGH_FLOAT */
> /* reuse GL_LOW_INT */
> /* reuse GL_MEDIUM_INT */
> /* reuse GL_HIGH_INT */
> /* reuse GL_SHADER_COMPILER */
> /* reuse GL_NUM_SHADER_BINARY_FORMATS */
> /* reuse GL_MAX_VERTEX_UNIFORM_VECTORS */
> /* reuse GL_MAX_VARYING_VECTORS */
> /* reuse GL_MAX_FRAGMENT_UNIFORM_VECTORS */
> /* Reuse tokens from ARB_get_program_binary */
> /* reuse GL_PROGRAM_BINARY_RETRIEVABLE_HINT */
> /* reuse GL_PROGRAM_BINARY_LENGTH */
> /* reuse GL_NUM_PROGRAM_BINARY_FORMATS */
> /* reuse GL_PROGRAM_BINARY_FORMATS */
> /* Reuse tokens from ARB_separate_shader_objects */
> /* reuse GL_VERTEX_SHADER_BIT */
> /* reuse GL_FRAGMENT_SHADER_BIT */
> /* reuse GL_GEOMETRY_SHADER_BIT */
> /* reuse GL_TESS_CONTROL_SHADER_BIT */
> /* reuse GL_TESS_EVALUATION_SHADER_BIT */
> /* reuse GL_ALL_SHADER_BITS */
> /* reuse GL_PROGRAM_SEPARABLE */
> /* reuse GL_ACTIVE_PROGRAM */
> /* reuse GL_PROGRAM_PIPELINE_BINDING */
> /* Reuse tokens from ARB_shader_precision (none) */
> /* Reuse tokens from ARB_vertex_attrib_64bit - all are in GL 3.0 and 4.0 already */
> /* Reuse tokens from ARB_viewport_array - some are in GL 1.1 and ARB_provoking_vertex already */
> /* reuse GL_MAX_VIEWPORTS */
> /* reuse GL_VIEWPORT_SUBPIXEL_BITS */
> /* reuse GL_VIEWPORT_BOUNDS_RANGE */
> /* reuse GL_LAYER_PROVOKING_VERTEX */
> /* reuse GL_VIEWPORT_INDEX_PROVOKING_VERTEX */
> /* reuse GL_UNDEFINED_VERTEX */
> #endif
> 
> #ifndef GL_ARB_multitexture
> #define GL_TEXTURE0_ARB                   0x84C0
> #define GL_TEXTURE1_ARB                   0x84C1
> #define GL_TEXTURE2_ARB                   0x84C2
> #define GL_TEXTURE3_ARB                   0x84C3
> #define GL_TEXTURE4_ARB                   0x84C4
> #define GL_TEXTURE5_ARB                   0x84C5
> #define GL_TEXTURE6_ARB                   0x84C6
> #define GL_TEXTURE7_ARB                   0x84C7
> #define GL_TEXTURE8_ARB                   0x84C8
> #define GL_TEXTURE9_ARB                   0x84C9
> #define GL_TEXTURE10_ARB                  0x84CA
> #define GL_TEXTURE11_ARB                  0x84CB
> #define GL_TEXTURE12_ARB                  0x84CC
> #define GL_TEXTURE13_ARB                  0x84CD
> #define GL_TEXTURE14_ARB                  0x84CE
> #define GL_TEXTURE15_ARB                  0x84CF
> #define GL_TEXTURE16_ARB                  0x84D0
> #define GL_TEXTURE17_ARB                  0x84D1
> #define GL_TEXTURE18_ARB                  0x84D2
> #define GL_TEXTURE19_ARB                  0x84D3
> #define GL_TEXTURE20_ARB                  0x84D4
> #define GL_TEXTURE21_ARB                  0x84D5
> #define GL_TEXTURE22_ARB                  0x84D6
> #define GL_TEXTURE23_ARB                  0x84D7
> #define GL_TEXTURE24_ARB                  0x84D8
> #define GL_TEXTURE25_ARB                  0x84D9
> #define GL_TEXTURE26_ARB                  0x84DA
> #define GL_TEXTURE27_ARB                  0x84DB
> #define GL_TEXTURE28_ARB                  0x84DC
> #define GL_TEXTURE29_ARB                  0x84DD
> #define GL_TEXTURE30_ARB                  0x84DE
> #define GL_TEXTURE31_ARB                  0x84DF
> #define GL_ACTIVE_TEXTURE_ARB             0x84E0
> #define GL_CLIENT_ACTIVE_TEXTURE_ARB      0x84E1
> #define GL_MAX_TEXTURE_UNITS_ARB          0x84E2
> #endif
> 
> #ifndef GL_ARB_transpose_matrix
> #define GL_TRANSPOSE_MODELVIEW_MATRIX_ARB 0x84E3
> #define GL_TRANSPOSE_PROJECTION_MATRIX_ARB 0x84E4
> #define GL_TRANSPOSE_TEXTURE_MATRIX_ARB   0x84E5
> #define GL_TRANSPOSE_COLOR_MATRIX_ARB     0x84E6
> #endif
> 
> #ifndef GL_ARB_multisample
> #define GL_MULTISAMPLE_ARB                0x809D
> #define GL_SAMPLE_ALPHA_TO_COVERAGE_ARB   0x809E
> #define GL_SAMPLE_ALPHA_TO_ONE_ARB        0x809F
> #define GL_SAMPLE_COVERAGE_ARB            0x80A0
> #define GL_SAMPLE_BUFFERS_ARB             0x80A8
> #define GL_SAMPLES_ARB                    0x80A9
> #define GL_SAMPLE_COVERAGE_VALUE_ARB      0x80AA
> #define GL_SAMPLE_COVERAGE_INVERT_ARB     0x80AB
> #define GL_MULTISAMPLE_BIT_ARB            0x20000000
> #endif
> 
> #ifndef GL_ARB_texture_env_add
> #endif
> 
> #ifndef GL_ARB_texture_cube_map
> #define GL_NORMAL_MAP_ARB                 0x8511
> #define GL_REFLECTION_MAP_ARB             0x8512
> #define GL_TEXTURE_CUBE_MAP_ARB           0x8513
> #define GL_TEXTURE_BINDING_CUBE_MAP_ARB   0x8514
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB 0x8515
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB 0x8516
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB 0x8517
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB 0x8518
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB 0x8519
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB 0x851A
> #define GL_PROXY_TEXTURE_CUBE_MAP_ARB     0x851B
> #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB  0x851C
> #endif
> 
> #ifndef GL_ARB_texture_compression
> #define GL_COMPRESSED_ALPHA_ARB           0x84E9
> #define GL_COMPRESSED_LUMINANCE_ARB       0x84EA
> #define GL_COMPRESSED_LUMINANCE_ALPHA_ARB 0x84EB
> #define GL_COMPRESSED_INTENSITY_ARB       0x84EC
> #define GL_COMPRESSED_RGB_ARB             0x84ED
> #define GL_COMPRESSED_RGBA_ARB            0x84EE
> #define GL_TEXTURE_COMPRESSION_HINT_ARB   0x84EF
> #define GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB 0x86A0
> #define GL_TEXTURE_COMPRESSED_ARB         0x86A1
> #define GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A2
> #define GL_COMPRESSED_TEXTURE_FORMATS_ARB 0x86A3
> #endif
> 
> #ifndef GL_ARB_texture_border_clamp
> #define GL_CLAMP_TO_BORDER_ARB            0x812D
> #endif
> 
> #ifndef GL_ARB_point_parameters
> #define GL_POINT_SIZE_MIN_ARB             0x8126
> #define GL_POINT_SIZE_MAX_ARB             0x8127
> #define GL_POINT_FADE_THRESHOLD_SIZE_ARB  0x8128
> #define GL_POINT_DISTANCE_ATTENUATION_ARB 0x8129
> #endif
> 
> #ifndef GL_ARB_vertex_blend
> #define GL_MAX_VERTEX_UNITS_ARB           0x86A4
> #define GL_ACTIVE_VERTEX_UNITS_ARB        0x86A5
> #define GL_WEIGHT_SUM_UNITY_ARB           0x86A6
> #define GL_VERTEX_BLEND_ARB               0x86A7
> #define GL_CURRENT_WEIGHT_ARB             0x86A8
> #define GL_WEIGHT_ARRAY_TYPE_ARB          0x86A9
> #define GL_WEIGHT_ARRAY_STRIDE_ARB        0x86AA
> #define GL_WEIGHT_ARRAY_SIZE_ARB          0x86AB
> #define GL_WEIGHT_ARRAY_POINTER_ARB       0x86AC
> #define GL_WEIGHT_ARRAY_ARB               0x86AD
> #define GL_MODELVIEW0_ARB                 0x1700
> #define GL_MODELVIEW1_ARB                 0x850A
> #define GL_MODELVIEW2_ARB                 0x8722
> #define GL_MODELVIEW3_ARB                 0x8723
> #define GL_MODELVIEW4_ARB                 0x8724
> #define GL_MODELVIEW5_ARB                 0x8725
> #define GL_MODELVIEW6_ARB                 0x8726
> #define GL_MODELVIEW7_ARB                 0x8727
> #define GL_MODELVIEW8_ARB                 0x8728
> #define GL_MODELVIEW9_ARB                 0x8729
> #define GL_MODELVIEW10_ARB                0x872A
> #define GL_MODELVIEW11_ARB                0x872B
> #define GL_MODELVIEW12_ARB                0x872C
> #define GL_MODELVIEW13_ARB                0x872D
> #define GL_MODELVIEW14_ARB                0x872E
> #define GL_MODELVIEW15_ARB                0x872F
> #define GL_MODELVIEW16_ARB                0x8730
> #define GL_MODELVIEW17_ARB                0x8731
> #define GL_MODELVIEW18_ARB                0x8732
> #define GL_MODELVIEW19_ARB                0x8733
> #define GL_MODELVIEW20_ARB                0x8734
> #define GL_MODELVIEW21_ARB                0x8735
> #define GL_MODELVIEW22_ARB                0x8736
> #define GL_MODELVIEW23_ARB                0x8737
> #define GL_MODELVIEW24_ARB                0x8738
> #define GL_MODELVIEW25_ARB                0x8739
> #define GL_MODELVIEW26_ARB                0x873A
> #define GL_MODELVIEW27_ARB                0x873B
> #define GL_MODELVIEW28_ARB                0x873C
> #define GL_MODELVIEW29_ARB                0x873D
> #define GL_MODELVIEW30_ARB                0x873E
> #define GL_MODELVIEW31_ARB                0x873F
> #endif
> 
> #ifndef GL_ARB_matrix_palette
> #define GL_MATRIX_PALETTE_ARB             0x8840
> #define GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB 0x8841
> #define GL_MAX_PALETTE_MATRICES_ARB       0x8842
> #define GL_CURRENT_PALETTE_MATRIX_ARB     0x8843
> #define GL_MATRIX_INDEX_ARRAY_ARB         0x8844
> #define GL_CURRENT_MATRIX_INDEX_ARB       0x8845
> #define GL_MATRIX_INDEX_ARRAY_SIZE_ARB    0x8846
> #define GL_MATRIX_INDEX_ARRAY_TYPE_ARB    0x8847
> #define GL_MATRIX_INDEX_ARRAY_STRIDE_ARB  0x8848
> #define GL_MATRIX_INDEX_ARRAY_POINTER_ARB 0x8849
> #endif
> 
> #ifndef GL_ARB_texture_env_combine
> #define GL_COMBINE_ARB                    0x8570
> #define GL_COMBINE_RGB_ARB                0x8571
> #define GL_COMBINE_ALPHA_ARB              0x8572
> #define GL_SOURCE0_RGB_ARB                0x8580
> #define GL_SOURCE1_RGB_ARB                0x8581
> #define GL_SOURCE2_RGB_ARB                0x8582
> #define GL_SOURCE0_ALPHA_ARB              0x8588
> #define GL_SOURCE1_ALPHA_ARB              0x8589
> #define GL_SOURCE2_ALPHA_ARB              0x858A
> #define GL_OPERAND0_RGB_ARB               0x8590
> #define GL_OPERAND1_RGB_ARB               0x8591
> #define GL_OPERAND2_RGB_ARB               0x8592
> #define GL_OPERAND0_ALPHA_ARB             0x8598
> #define GL_OPERAND1_ALPHA_ARB             0x8599
> #define GL_OPERAND2_ALPHA_ARB             0x859A
> #define GL_RGB_SCALE_ARB                  0x8573
> #define GL_ADD_SIGNED_ARB                 0x8574
> #define GL_INTERPOLATE_ARB                0x8575
> #define GL_SUBTRACT_ARB                   0x84E7
> #define GL_CONSTANT_ARB                   0x8576
> #define GL_PRIMARY_COLOR_ARB              0x8577
> #define GL_PREVIOUS_ARB                   0x8578
> #endif
> 
> #ifndef GL_ARB_texture_env_crossbar
> #endif
> 
> #ifndef GL_ARB_texture_env_dot3
> #define GL_DOT3_RGB_ARB                   0x86AE
> #define GL_DOT3_RGBA_ARB                  0x86AF
> #endif
> 
> #ifndef GL_ARB_texture_mirrored_repeat
> #define GL_MIRRORED_REPEAT_ARB            0x8370
> #endif
> 
> #ifndef GL_ARB_depth_texture
> #define GL_DEPTH_COMPONENT16_ARB          0x81A5
> #define GL_DEPTH_COMPONENT24_ARB          0x81A6
> #define GL_DEPTH_COMPONENT32_ARB          0x81A7
> #define GL_TEXTURE_DEPTH_SIZE_ARB         0x884A
> #define GL_DEPTH_TEXTURE_MODE_ARB         0x884B
> #endif
> 
> #ifndef GL_ARB_shadow
> #define GL_TEXTURE_COMPARE_MODE_ARB       0x884C
> #define GL_TEXTURE_COMPARE_FUNC_ARB       0x884D
> #define GL_COMPARE_R_TO_TEXTURE_ARB       0x884E
> #endif
> 
> #ifndef GL_ARB_shadow_ambient
> #define GL_TEXTURE_COMPARE_FAIL_VALUE_ARB 0x80BF
> #endif
> 
> #ifndef GL_ARB_window_pos
> #endif
> 
> #ifndef GL_ARB_vertex_program
> #define GL_COLOR_SUM_ARB                  0x8458
> #define GL_VERTEX_PROGRAM_ARB             0x8620
> #define GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB 0x8622
> #define GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB   0x8623
> #define GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB 0x8624
> #define GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB   0x8625
> #define GL_CURRENT_VERTEX_ATTRIB_ARB      0x8626
> #define GL_PROGRAM_LENGTH_ARB             0x8627
> #define GL_PROGRAM_STRING_ARB             0x8628
> #define GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB 0x862E
> #define GL_MAX_PROGRAM_MATRICES_ARB       0x862F
> #define GL_CURRENT_MATRIX_STACK_DEPTH_ARB 0x8640
> #define GL_CURRENT_MATRIX_ARB             0x8641
> #define GL_VERTEX_PROGRAM_POINT_SIZE_ARB  0x8642
> #define GL_VERTEX_PROGRAM_TWO_SIDE_ARB    0x8643
> #define GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB 0x8645
> #define GL_PROGRAM_ERROR_POSITION_ARB     0x864B
> #define GL_PROGRAM_BINDING_ARB            0x8677
> #define GL_MAX_VERTEX_ATTRIBS_ARB         0x8869
> #define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB 0x886A
> #define GL_PROGRAM_ERROR_STRING_ARB       0x8874
> #define GL_PROGRAM_FORMAT_ASCII_ARB       0x8875
> #define GL_PROGRAM_FORMAT_ARB             0x8876
> #define GL_PROGRAM_INSTRUCTIONS_ARB       0x88A0
> #define GL_MAX_PROGRAM_INSTRUCTIONS_ARB   0x88A1
> #define GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A2
> #define GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB 0x88A3
> #define GL_PROGRAM_TEMPORARIES_ARB        0x88A4
> #define GL_MAX_PROGRAM_TEMPORARIES_ARB    0x88A5
> #define GL_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A6
> #define GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB 0x88A7
> #define GL_PROGRAM_PARAMETERS_ARB         0x88A8
> #define GL_MAX_PROGRAM_PARAMETERS_ARB     0x88A9
> #define GL_PROGRAM_NATIVE_PARAMETERS_ARB  0x88AA
> #define GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB 0x88AB
> #define GL_PROGRAM_ATTRIBS_ARB            0x88AC
> #define GL_MAX_PROGRAM_ATTRIBS_ARB        0x88AD
> #define GL_PROGRAM_NATIVE_ATTRIBS_ARB     0x88AE
> #define GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB 0x88AF
> #define GL_PROGRAM_ADDRESS_REGISTERS_ARB  0x88B0
> #define GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB 0x88B1
> #define GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B2
> #define GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB 0x88B3
> #define GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB 0x88B4
> #define GL_MAX_PROGRAM_ENV_PARAMETERS_ARB 0x88B5
> #define GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB 0x88B6
> #define GL_TRANSPOSE_CURRENT_MATRIX_ARB   0x88B7
> #define GL_MATRIX0_ARB                    0x88C0
> #define GL_MATRIX1_ARB                    0x88C1
> #define GL_MATRIX2_ARB                    0x88C2
> #define GL_MATRIX3_ARB                    0x88C3
> #define GL_MATRIX4_ARB                    0x88C4
> #define GL_MATRIX5_ARB                    0x88C5
> #define GL_MATRIX6_ARB                    0x88C6
> #define GL_MATRIX7_ARB                    0x88C7
> #define GL_MATRIX8_ARB                    0x88C8
> #define GL_MATRIX9_ARB                    0x88C9
> #define GL_MATRIX10_ARB                   0x88CA
> #define GL_MATRIX11_ARB                   0x88CB
> #define GL_MATRIX12_ARB                   0x88CC
> #define GL_MATRIX13_ARB                   0x88CD
> #define GL_MATRIX14_ARB                   0x88CE
> #define GL_MATRIX15_ARB                   0x88CF
> #define GL_MATRIX16_ARB                   0x88D0
> #define GL_MATRIX17_ARB                   0x88D1
> #define GL_MATRIX18_ARB                   0x88D2
> #define GL_MATRIX19_ARB                   0x88D3
> #define GL_MATRIX20_ARB                   0x88D4
> #define GL_MATRIX21_ARB                   0x88D5
> #define GL_MATRIX22_ARB                   0x88D6
> #define GL_MATRIX23_ARB                   0x88D7
> #define GL_MATRIX24_ARB                   0x88D8
> #define GL_MATRIX25_ARB                   0x88D9
> #define GL_MATRIX26_ARB                   0x88DA
> #define GL_MATRIX27_ARB                   0x88DB
> #define GL_MATRIX28_ARB                   0x88DC
> #define GL_MATRIX29_ARB                   0x88DD
> #define GL_MATRIX30_ARB                   0x88DE
> #define GL_MATRIX31_ARB                   0x88DF
> #endif
> 
> #ifndef GL_ARB_fragment_program
> #define GL_FRAGMENT_PROGRAM_ARB           0x8804
> #define GL_PROGRAM_ALU_INSTRUCTIONS_ARB   0x8805
> #define GL_PROGRAM_TEX_INSTRUCTIONS_ARB   0x8806
> #define GL_PROGRAM_TEX_INDIRECTIONS_ARB   0x8807
> #define GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x8808
> #define GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x8809
> #define GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x880A
> #define GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB 0x880B
> #define GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB 0x880C
> #define GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB 0x880D
> #define GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB 0x880E
> #define GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB 0x880F
> #define GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB 0x8810
> #define GL_MAX_TEXTURE_COORDS_ARB         0x8871
> #define GL_MAX_TEXTURE_IMAGE_UNITS_ARB    0x8872
> #endif
> 
> #ifndef GL_ARB_vertex_buffer_object
> #define GL_BUFFER_SIZE_ARB                0x8764
> #define GL_BUFFER_USAGE_ARB               0x8765
> #define GL_ARRAY_BUFFER_ARB               0x8892
> #define GL_ELEMENT_ARRAY_BUFFER_ARB       0x8893
> #define GL_ARRAY_BUFFER_BINDING_ARB       0x8894
> #define GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB 0x8895
> #define GL_VERTEX_ARRAY_BUFFER_BINDING_ARB 0x8896
> #define GL_NORMAL_ARRAY_BUFFER_BINDING_ARB 0x8897
> #define GL_COLOR_ARRAY_BUFFER_BINDING_ARB 0x8898
> #define GL_INDEX_ARRAY_BUFFER_BINDING_ARB 0x8899
> #define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB 0x889A
> #define GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB 0x889B
> #define GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB 0x889C
> #define GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB 0x889D
> #define GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB 0x889E
> #define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB 0x889F
> #define GL_READ_ONLY_ARB                  0x88B8
> #define GL_WRITE_ONLY_ARB                 0x88B9
> #define GL_READ_WRITE_ARB                 0x88BA
> #define GL_BUFFER_ACCESS_ARB              0x88BB
> #define GL_BUFFER_MAPPED_ARB              0x88BC
> #define GL_BUFFER_MAP_POINTER_ARB         0x88BD
> #define GL_STREAM_DRAW_ARB                0x88E0
> #define GL_STREAM_READ_ARB                0x88E1
> #define GL_STREAM_COPY_ARB                0x88E2
> #define GL_STATIC_DRAW_ARB                0x88E4
> #define GL_STATIC_READ_ARB                0x88E5
> #define GL_STATIC_COPY_ARB                0x88E6
> #define GL_DYNAMIC_DRAW_ARB               0x88E8
> #define GL_DYNAMIC_READ_ARB               0x88E9
> #define GL_DYNAMIC_COPY_ARB               0x88EA
> #endif
> 
> #ifndef GL_ARB_occlusion_query
> #define GL_QUERY_COUNTER_BITS_ARB         0x8864
> #define GL_CURRENT_QUERY_ARB              0x8865
> #define GL_QUERY_RESULT_ARB               0x8866
> #define GL_QUERY_RESULT_AVAILABLE_ARB     0x8867
> #define GL_SAMPLES_PASSED_ARB             0x8914
> #endif
> 
> #ifndef GL_ARB_shader_objects
> #define GL_PROGRAM_OBJECT_ARB             0x8B40
> #define GL_SHADER_OBJECT_ARB              0x8B48
> #define GL_OBJECT_TYPE_ARB                0x8B4E
> #define GL_OBJECT_SUBTYPE_ARB             0x8B4F
> #define GL_FLOAT_VEC2_ARB                 0x8B50
> #define GL_FLOAT_VEC3_ARB                 0x8B51
> #define GL_FLOAT_VEC4_ARB                 0x8B52
> #define GL_INT_VEC2_ARB                   0x8B53
> #define GL_INT_VEC3_ARB                   0x8B54
> #define GL_INT_VEC4_ARB                   0x8B55
> #define GL_BOOL_ARB                       0x8B56
> #define GL_BOOL_VEC2_ARB                  0x8B57
> #define GL_BOOL_VEC3_ARB                  0x8B58
> #define GL_BOOL_VEC4_ARB                  0x8B59
> #define GL_FLOAT_MAT2_ARB                 0x8B5A
> #define GL_FLOAT_MAT3_ARB                 0x8B5B
> #define GL_FLOAT_MAT4_ARB                 0x8B5C
> #define GL_SAMPLER_1D_ARB                 0x8B5D
> #define GL_SAMPLER_2D_ARB                 0x8B5E
> #define GL_SAMPLER_3D_ARB                 0x8B5F
> #define GL_SAMPLER_CUBE_ARB               0x8B60
> #define GL_SAMPLER_1D_SHADOW_ARB          0x8B61
> #define GL_SAMPLER_2D_SHADOW_ARB          0x8B62
> #define GL_SAMPLER_2D_RECT_ARB            0x8B63
> #define GL_SAMPLER_2D_RECT_SHADOW_ARB     0x8B64
> #define GL_OBJECT_DELETE_STATUS_ARB       0x8B80
> #define GL_OBJECT_COMPILE_STATUS_ARB      0x8B81
> #define GL_OBJECT_LINK_STATUS_ARB         0x8B82
> #define GL_OBJECT_VALIDATE_STATUS_ARB     0x8B83
> #define GL_OBJECT_INFO_LOG_LENGTH_ARB     0x8B84
> #define GL_OBJECT_ATTACHED_OBJECTS_ARB    0x8B85
> #define GL_OBJECT_ACTIVE_UNIFORMS_ARB     0x8B86
> #define GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB 0x8B87
> #define GL_OBJECT_SHADER_SOURCE_LENGTH_ARB 0x8B88
> #endif
> 
> #ifndef GL_ARB_vertex_shader
> #define GL_VERTEX_SHADER_ARB              0x8B31
> #define GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB 0x8B4A
> #define GL_MAX_VARYING_FLOATS_ARB         0x8B4B
> #define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB 0x8B4C
> #define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB 0x8B4D
> #define GL_OBJECT_ACTIVE_ATTRIBUTES_ARB   0x8B89
> #define GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB 0x8B8A
> #endif
> 
> #ifndef GL_ARB_fragment_shader
> #define GL_FRAGMENT_SHADER_ARB            0x8B30
> #define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB 0x8B49
> #define GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB 0x8B8B
> #endif
> 
> #ifndef GL_ARB_shading_language_100
> #define GL_SHADING_LANGUAGE_VERSION_ARB   0x8B8C
> #endif
> 
> #ifndef GL_ARB_texture_non_power_of_two
> #endif
> 
> #ifndef GL_ARB_point_sprite
> #define GL_POINT_SPRITE_ARB               0x8861
> #define GL_COORD_REPLACE_ARB              0x8862
> #endif
> 
> #ifndef GL_ARB_fragment_program_shadow
> #endif
> 
> #ifndef GL_ARB_draw_buffers
> #define GL_MAX_DRAW_BUFFERS_ARB           0x8824
> #define GL_DRAW_BUFFER0_ARB               0x8825
> #define GL_DRAW_BUFFER1_ARB               0x8826
> #define GL_DRAW_BUFFER2_ARB               0x8827
> #define GL_DRAW_BUFFER3_ARB               0x8828
> #define GL_DRAW_BUFFER4_ARB               0x8829
> #define GL_DRAW_BUFFER5_ARB               0x882A
> #define GL_DRAW_BUFFER6_ARB               0x882B
> #define GL_DRAW_BUFFER7_ARB               0x882C
> #define GL_DRAW_BUFFER8_ARB               0x882D
> #define GL_DRAW_BUFFER9_ARB               0x882E
> #define GL_DRAW_BUFFER10_ARB              0x882F
> #define GL_DRAW_BUFFER11_ARB              0x8830
> #define GL_DRAW_BUFFER12_ARB              0x8831
> #define GL_DRAW_BUFFER13_ARB              0x8832
> #define GL_DRAW_BUFFER14_ARB              0x8833
> #define GL_DRAW_BUFFER15_ARB              0x8834
> #endif
> 
> #ifndef GL_ARB_texture_rectangle
> #define GL_TEXTURE_RECTANGLE_ARB          0x84F5
> #define GL_TEXTURE_BINDING_RECTANGLE_ARB  0x84F6
> #define GL_PROXY_TEXTURE_RECTANGLE_ARB    0x84F7
> #define GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB 0x84F8
> #endif
> 
> #ifndef GL_ARB_color_buffer_float
> #define GL_RGBA_FLOAT_MODE_ARB            0x8820
> #define GL_CLAMP_VERTEX_COLOR_ARB         0x891A
> #define GL_CLAMP_FRAGMENT_COLOR_ARB       0x891B
> #define GL_CLAMP_READ_COLOR_ARB           0x891C
> #define GL_FIXED_ONLY_ARB                 0x891D
> #endif
> 
> #ifndef GL_ARB_half_float_pixel
> #define GL_HALF_FLOAT_ARB                 0x140B
> #endif
> 
> #ifndef GL_ARB_texture_float
> #define GL_TEXTURE_RED_TYPE_ARB           0x8C10
> #define GL_TEXTURE_GREEN_TYPE_ARB         0x8C11
> #define GL_TEXTURE_BLUE_TYPE_ARB          0x8C12
> #define GL_TEXTURE_ALPHA_TYPE_ARB         0x8C13
> #define GL_TEXTURE_LUMINANCE_TYPE_ARB     0x8C14
> #define GL_TEXTURE_INTENSITY_TYPE_ARB     0x8C15
> #define GL_TEXTURE_DEPTH_TYPE_ARB         0x8C16
> #define GL_UNSIGNED_NORMALIZED_ARB        0x8C17
> #define GL_RGBA32F_ARB                    0x8814
> #define GL_RGB32F_ARB                     0x8815
> #define GL_ALPHA32F_ARB                   0x8816
> #define GL_INTENSITY32F_ARB               0x8817
> #define GL_LUMINANCE32F_ARB               0x8818
> #define GL_LUMINANCE_ALPHA32F_ARB         0x8819
> #define GL_RGBA16F_ARB                    0x881A
> #define GL_RGB16F_ARB                     0x881B
> #define GL_ALPHA16F_ARB                   0x881C
> #define GL_INTENSITY16F_ARB               0x881D
> #define GL_LUMINANCE16F_ARB               0x881E
> #define GL_LUMINANCE_ALPHA16F_ARB         0x881F
> #endif
> 
> #ifndef GL_ARB_pixel_buffer_object
> #define GL_PIXEL_PACK_BUFFER_ARB          0x88EB
> #define GL_PIXEL_UNPACK_BUFFER_ARB        0x88EC
> #define GL_PIXEL_PACK_BUFFER_BINDING_ARB  0x88ED
> #define GL_PIXEL_UNPACK_BUFFER_BINDING_ARB 0x88EF
> #endif
> 
> #ifndef GL_ARB_depth_buffer_float
> #define GL_DEPTH_COMPONENT32F             0x8CAC
> #define GL_DEPTH32F_STENCIL8              0x8CAD
> #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0x8DAD
> #endif
> 
> #ifndef GL_ARB_draw_instanced
> #endif
> 
> #ifndef GL_ARB_framebuffer_object
> #define GL_INVALID_FRAMEBUFFER_OPERATION  0x0506
> #define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0x8210
> #define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0x8211
> #define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0x8212
> #define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0x8213
> #define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0x8214
> #define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0x8215
> #define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0x8216
> #define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0x8217
> #define GL_FRAMEBUFFER_DEFAULT            0x8218
> #define GL_FRAMEBUFFER_UNDEFINED          0x8219
> #define GL_DEPTH_STENCIL_ATTACHMENT       0x821A
> #define GL_MAX_RENDERBUFFER_SIZE          0x84E8
> #define GL_DEPTH_STENCIL                  0x84F9
> #define GL_UNSIGNED_INT_24_8              0x84FA
> #define GL_DEPTH24_STENCIL8               0x88F0
> #define GL_TEXTURE_STENCIL_SIZE           0x88F1
> #define GL_TEXTURE_RED_TYPE               0x8C10
> #define GL_TEXTURE_GREEN_TYPE             0x8C11
> #define GL_TEXTURE_BLUE_TYPE              0x8C12
> #define GL_TEXTURE_ALPHA_TYPE             0x8C13
> #define GL_TEXTURE_DEPTH_TYPE             0x8C16
> #define GL_UNSIGNED_NORMALIZED            0x8C17
> #define GL_FRAMEBUFFER_BINDING            0x8CA6
> #define GL_DRAW_FRAMEBUFFER_BINDING       GL_FRAMEBUFFER_BINDING
> #define GL_RENDERBUFFER_BINDING           0x8CA7
> #define GL_READ_FRAMEBUFFER               0x8CA8
> #define GL_DRAW_FRAMEBUFFER               0x8CA9
> #define GL_READ_FRAMEBUFFER_BINDING       0x8CAA
> #define GL_RENDERBUFFER_SAMPLES           0x8CAB
> #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0x8CD0
> #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0x8CD1
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0x8CD2
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0x8CD3
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0x8CD4
> #define GL_FRAMEBUFFER_COMPLETE           0x8CD5
> #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0x8CD6
> #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0x8CD7
> #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0x8CDB
> #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0x8CDC
> #define GL_FRAMEBUFFER_UNSUPPORTED        0x8CDD
> #define GL_MAX_COLOR_ATTACHMENTS          0x8CDF
> #define GL_COLOR_ATTACHMENT0              0x8CE0
> #define GL_COLOR_ATTACHMENT1              0x8CE1
> #define GL_COLOR_ATTACHMENT2              0x8CE2
> #define GL_COLOR_ATTACHMENT3              0x8CE3
> #define GL_COLOR_ATTACHMENT4              0x8CE4
> #define GL_COLOR_ATTACHMENT5              0x8CE5
> #define GL_COLOR_ATTACHMENT6              0x8CE6
> #define GL_COLOR_ATTACHMENT7              0x8CE7
> #define GL_COLOR_ATTACHMENT8              0x8CE8
> #define GL_COLOR_ATTACHMENT9              0x8CE9
> #define GL_COLOR_ATTACHMENT10             0x8CEA
> #define GL_COLOR_ATTACHMENT11             0x8CEB
> #define GL_COLOR_ATTACHMENT12             0x8CEC
> #define GL_COLOR_ATTACHMENT13             0x8CED
> #define GL_COLOR_ATTACHMENT14             0x8CEE
> #define GL_COLOR_ATTACHMENT15             0x8CEF
> #define GL_DEPTH_ATTACHMENT               0x8D00
> #define GL_STENCIL_ATTACHMENT             0x8D20
> #define GL_FRAMEBUFFER                    0x8D40
> #define GL_RENDERBUFFER                   0x8D41
> #define GL_RENDERBUFFER_WIDTH             0x8D42
> #define GL_RENDERBUFFER_HEIGHT            0x8D43
> #define GL_RENDERBUFFER_INTERNAL_FORMAT   0x8D44
> #define GL_STENCIL_INDEX1                 0x8D46
> #define GL_STENCIL_INDEX4                 0x8D47
> #define GL_STENCIL_INDEX8                 0x8D48
> #define GL_STENCIL_INDEX16                0x8D49
> #define GL_RENDERBUFFER_RED_SIZE          0x8D50
> #define GL_RENDERBUFFER_GREEN_SIZE        0x8D51
> #define GL_RENDERBUFFER_BLUE_SIZE         0x8D52
> #define GL_RENDERBUFFER_ALPHA_SIZE        0x8D53
> #define GL_RENDERBUFFER_DEPTH_SIZE        0x8D54
> #define GL_RENDERBUFFER_STENCIL_SIZE      0x8D55
> #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0x8D56
> #define GL_MAX_SAMPLES                    0x8D57
> #endif
> 
> #ifndef GL_ARB_framebuffer_object_DEPRECATED
> #define GL_INDEX                          0x8222
> #define GL_TEXTURE_LUMINANCE_TYPE         0x8C14
> #define GL_TEXTURE_INTENSITY_TYPE         0x8C15
> #endif
> 
> #ifndef GL_ARB_framebuffer_sRGB
> #define GL_FRAMEBUFFER_SRGB               0x8DB9
> #endif
> 
> #ifndef GL_ARB_geometry_shader4
> #define GL_LINES_ADJACENCY_ARB            0x000A
> #define GL_LINE_STRIP_ADJACENCY_ARB       0x000B
> #define GL_TRIANGLES_ADJACENCY_ARB        0x000C
> #define GL_TRIANGLE_STRIP_ADJACENCY_ARB   0x000D
> #define GL_PROGRAM_POINT_SIZE_ARB         0x8642
> #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB 0x8C29
> #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB 0x8DA7
> #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB 0x8DA8
> #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB 0x8DA9
> #define GL_GEOMETRY_SHADER_ARB            0x8DD9
> #define GL_GEOMETRY_VERTICES_OUT_ARB      0x8DDA
> #define GL_GEOMETRY_INPUT_TYPE_ARB        0x8DDB
> #define GL_GEOMETRY_OUTPUT_TYPE_ARB       0x8DDC
> #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB 0x8DDD
> #define GL_MAX_VERTEX_VARYING_COMPONENTS_ARB 0x8DDE
> #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB 0x8DDF
> #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB 0x8DE0
> #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB 0x8DE1
> /* reuse GL_MAX_VARYING_COMPONENTS */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER */
> #endif
> 
> #ifndef GL_ARB_half_float_vertex
> #define GL_HALF_FLOAT                     0x140B
> #endif
> 
> #ifndef GL_ARB_instanced_arrays
> #define GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB 0x88FE
> #endif
> 
> #ifndef GL_ARB_map_buffer_range
> #define GL_MAP_READ_BIT                   0x0001
> #define GL_MAP_WRITE_BIT                  0x0002
> #define GL_MAP_INVALIDATE_RANGE_BIT       0x0004
> #define GL_MAP_INVALIDATE_BUFFER_BIT      0x0008
> #define GL_MAP_FLUSH_EXPLICIT_BIT         0x0010
> #define GL_MAP_UNSYNCHRONIZED_BIT         0x0020
> #endif
> 
> #ifndef GL_ARB_texture_buffer_object
> #define GL_TEXTURE_BUFFER_ARB             0x8C2A
> #define GL_MAX_TEXTURE_BUFFER_SIZE_ARB    0x8C2B
> #define GL_TEXTURE_BINDING_BUFFER_ARB     0x8C2C
> #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB 0x8C2D
> #define GL_TEXTURE_BUFFER_FORMAT_ARB      0x8C2E
> #endif
> 
> #ifndef GL_ARB_texture_compression_rgtc
> #define GL_COMPRESSED_RED_RGTC1           0x8DBB
> #define GL_COMPRESSED_SIGNED_RED_RGTC1    0x8DBC
> #define GL_COMPRESSED_RG_RGTC2            0x8DBD
> #define GL_COMPRESSED_SIGNED_RG_RGTC2     0x8DBE
> #endif
> 
> #ifndef GL_ARB_texture_rg
> #define GL_RG                             0x8227
> #define GL_RG_INTEGER                     0x8228
> #define GL_R8                             0x8229
> #define GL_R16                            0x822A
> #define GL_RG8                            0x822B
> #define GL_RG16                           0x822C
> #define GL_R16F                           0x822D
> #define GL_R32F                           0x822E
> #define GL_RG16F                          0x822F
> #define GL_RG32F                          0x8230
> #define GL_R8I                            0x8231
> #define GL_R8UI                           0x8232
> #define GL_R16I                           0x8233
> #define GL_R16UI                          0x8234
> #define GL_R32I                           0x8235
> #define GL_R32UI                          0x8236
> #define GL_RG8I                           0x8237
> #define GL_RG8UI                          0x8238
> #define GL_RG16I                          0x8239
> #define GL_RG16UI                         0x823A
> #define GL_RG32I                          0x823B
> #define GL_RG32UI                         0x823C
> #endif
> 
> #ifndef GL_ARB_vertex_array_object
> #define GL_VERTEX_ARRAY_BINDING           0x85B5
> #endif
> 
> #ifndef GL_ARB_uniform_buffer_object
> #define GL_UNIFORM_BUFFER                 0x8A11
> #define GL_UNIFORM_BUFFER_BINDING         0x8A28
> #define GL_UNIFORM_BUFFER_START           0x8A29
> #define GL_UNIFORM_BUFFER_SIZE            0x8A2A
> #define GL_MAX_VERTEX_UNIFORM_BLOCKS      0x8A2B
> #define GL_MAX_GEOMETRY_UNIFORM_BLOCKS    0x8A2C
> #define GL_MAX_FRAGMENT_UNIFORM_BLOCKS    0x8A2D
> #define GL_MAX_COMBINED_UNIFORM_BLOCKS    0x8A2E
> #define GL_MAX_UNIFORM_BUFFER_BINDINGS    0x8A2F
> #define GL_MAX_UNIFORM_BLOCK_SIZE         0x8A30
> #define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0x8A31
> #define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0x8A32
> #define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0x8A33
> #define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0x8A34
> #define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0x8A35
> #define GL_ACTIVE_UNIFORM_BLOCKS          0x8A36
> #define GL_UNIFORM_TYPE                   0x8A37
> #define GL_UNIFORM_SIZE                   0x8A38
> #define GL_UNIFORM_NAME_LENGTH            0x8A39
> #define GL_UNIFORM_BLOCK_INDEX            0x8A3A
> #define GL_UNIFORM_OFFSET                 0x8A3B
> #define GL_UNIFORM_ARRAY_STRIDE           0x8A3C
> #define GL_UNIFORM_MATRIX_STRIDE          0x8A3D
> #define GL_UNIFORM_IS_ROW_MAJOR           0x8A3E
> #define GL_UNIFORM_BLOCK_BINDING          0x8A3F
> #define GL_UNIFORM_BLOCK_DATA_SIZE        0x8A40
> #define GL_UNIFORM_BLOCK_NAME_LENGTH      0x8A41
> #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS  0x8A42
> #define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0x8A43
> #define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0x8A44
> #define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0x8A45
> #define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0x8A46
> #define GL_INVALID_INDEX                  0xFFFFFFFFu
> #endif
> 
> #ifndef GL_ARB_compatibility
> /* ARB_compatibility just defines tokens from core 3.0 */
> #endif
> 
> #ifndef GL_ARB_copy_buffer
> #define GL_COPY_READ_BUFFER               0x8F36
> #define GL_COPY_WRITE_BUFFER              0x8F37
> #endif
> 
> #ifndef GL_ARB_shader_texture_lod
> #endif
> 
> #ifndef GL_ARB_depth_clamp
> #define GL_DEPTH_CLAMP                    0x864F
> #endif
> 
> #ifndef GL_ARB_draw_elements_base_vertex
> #endif
> 
> #ifndef GL_ARB_fragment_coord_conventions
> #endif
> 
> #ifndef GL_ARB_provoking_vertex
> #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0x8E4C
> #define GL_FIRST_VERTEX_CONVENTION        0x8E4D
> #define GL_LAST_VERTEX_CONVENTION         0x8E4E
> #define GL_PROVOKING_VERTEX               0x8E4F
> #endif
> 
> #ifndef GL_ARB_seamless_cube_map
> #define GL_TEXTURE_CUBE_MAP_SEAMLESS      0x884F
> #endif
> 
> #ifndef GL_ARB_sync
> #define GL_MAX_SERVER_WAIT_TIMEOUT        0x9111
> #define GL_OBJECT_TYPE                    0x9112
> #define GL_SYNC_CONDITION                 0x9113
> #define GL_SYNC_STATUS                    0x9114
> #define GL_SYNC_FLAGS                     0x9115
> #define GL_SYNC_FENCE                     0x9116
> #define GL_SYNC_GPU_COMMANDS_COMPLETE     0x9117
> #define GL_UNSIGNALED                     0x9118
> #define GL_SIGNALED                       0x9119
> #define GL_ALREADY_SIGNALED               0x911A
> #define GL_TIMEOUT_EXPIRED                0x911B
> #define GL_CONDITION_SATISFIED            0x911C
> #define GL_WAIT_FAILED                    0x911D
> #define GL_SYNC_FLUSH_COMMANDS_BIT        0x00000001
> #define GL_TIMEOUT_IGNORED                0xFFFFFFFFFFFFFFFFull
> #endif
> 
> #ifndef GL_ARB_texture_multisample
> #define GL_SAMPLE_POSITION                0x8E50
> #define GL_SAMPLE_MASK                    0x8E51
> #define GL_SAMPLE_MASK_VALUE              0x8E52
> #define GL_MAX_SAMPLE_MASK_WORDS          0x8E59
> #define GL_TEXTURE_2D_MULTISAMPLE         0x9100
> #define GL_PROXY_TEXTURE_2D_MULTISAMPLE   0x9101
> #define GL_TEXTURE_2D_MULTISAMPLE_ARRAY   0x9102
> #define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0x9103
> #define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0x9104
> #define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0x9105
> #define GL_TEXTURE_SAMPLES                0x9106
> #define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0x9107
> #define GL_SAMPLER_2D_MULTISAMPLE         0x9108
> #define GL_INT_SAMPLER_2D_MULTISAMPLE     0x9109
> #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0x910A
> #define GL_SAMPLER_2D_MULTISAMPLE_ARRAY   0x910B
> #define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910C
> #define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0x910D
> #define GL_MAX_COLOR_TEXTURE_SAMPLES      0x910E
> #define GL_MAX_DEPTH_TEXTURE_SAMPLES      0x910F
> #define GL_MAX_INTEGER_SAMPLES            0x9110
> #endif
> 
> #ifndef GL_ARB_vertex_array_bgra
> /* reuse GL_BGRA */
> #endif
> 
> #ifndef GL_ARB_draw_buffers_blend
> #endif
> 
> #ifndef GL_ARB_sample_shading
> #define GL_SAMPLE_SHADING_ARB             0x8C36
> #define GL_MIN_SAMPLE_SHADING_VALUE_ARB   0x8C37
> #endif
> 
> #ifndef GL_ARB_texture_cube_map_array
> #define GL_TEXTURE_CUBE_MAP_ARRAY_ARB     0x9009
> #define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB 0x900A
> #define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB 0x900B
> #define GL_SAMPLER_CUBE_MAP_ARRAY_ARB     0x900C
> #define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB 0x900D
> #define GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900E
> #define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB 0x900F
> #endif
> 
> #ifndef GL_ARB_texture_gather
> #define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5E
> #define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB 0x8E5F
> #endif
> 
> #ifndef GL_ARB_texture_query_lod
> #endif
> 
> #ifndef GL_ARB_shading_language_include
> #define GL_SHADER_INCLUDE_ARB             0x8DAE
> #define GL_NAMED_STRING_LENGTH_ARB        0x8DE9
> #define GL_NAMED_STRING_TYPE_ARB          0x8DEA
> #endif
> 
> #ifndef GL_ARB_texture_compression_bptc
> #define GL_COMPRESSED_RGBA_BPTC_UNORM_ARB 0x8E8C
> #define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB 0x8E8D
> #define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB 0x8E8E
> #define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB 0x8E8F
> #endif
> 
> #ifndef GL_ARB_blend_func_extended
> #define GL_SRC1_COLOR                     0x88F9
> /* reuse GL_SRC1_ALPHA */
> #define GL_ONE_MINUS_SRC1_COLOR           0x88FA
> #define GL_ONE_MINUS_SRC1_ALPHA           0x88FB
> #define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS   0x88FC
> #endif
> 
> #ifndef GL_ARB_explicit_attrib_location
> #endif
> 
> #ifndef GL_ARB_occlusion_query2
> #define GL_ANY_SAMPLES_PASSED             0x8C2F
> #endif
> 
> #ifndef GL_ARB_sampler_objects
> #define GL_SAMPLER_BINDING                0x8919
> #endif
> 
> #ifndef GL_ARB_shader_bit_encoding
> #endif
> 
> #ifndef GL_ARB_texture_rgb10_a2ui
> #define GL_RGB10_A2UI                     0x906F
> #endif
> 
> #ifndef GL_ARB_texture_swizzle
> #define GL_TEXTURE_SWIZZLE_R              0x8E42
> #define GL_TEXTURE_SWIZZLE_G              0x8E43
> #define GL_TEXTURE_SWIZZLE_B              0x8E44
> #define GL_TEXTURE_SWIZZLE_A              0x8E45
> #define GL_TEXTURE_SWIZZLE_RGBA           0x8E46
> #endif
> 
> #ifndef GL_ARB_timer_query
> #define GL_TIME_ELAPSED                   0x88BF
> #define GL_TIMESTAMP                      0x8E28
> #endif
> 
> #ifndef GL_ARB_vertex_type_2_10_10_10_rev
> /* reuse GL_UNSIGNED_INT_2_10_10_10_REV */
> #define GL_INT_2_10_10_10_REV             0x8D9F
> #endif
> 
> #ifndef GL_ARB_draw_indirect
> #define GL_DRAW_INDIRECT_BUFFER           0x8F3F
> #define GL_DRAW_INDIRECT_BUFFER_BINDING   0x8F43
> #endif
> 
> #ifndef GL_ARB_gpu_shader5
> #define GL_GEOMETRY_SHADER_INVOCATIONS    0x887F
> #define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0x8E5A
> #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0x8E5B
> #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0x8E5C
> #define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0x8E5D
> /* reuse GL_MAX_VERTEX_STREAMS */
> #endif
> 
> #ifndef GL_ARB_gpu_shader_fp64
> /* reuse GL_DOUBLE */
> #define GL_DOUBLE_VEC2                    0x8FFC
> #define GL_DOUBLE_VEC3                    0x8FFD
> #define GL_DOUBLE_VEC4                    0x8FFE
> #define GL_DOUBLE_MAT2                    0x8F46
> #define GL_DOUBLE_MAT3                    0x8F47
> #define GL_DOUBLE_MAT4                    0x8F48
> #define GL_DOUBLE_MAT2x3                  0x8F49
> #define GL_DOUBLE_MAT2x4                  0x8F4A
> #define GL_DOUBLE_MAT3x2                  0x8F4B
> #define GL_DOUBLE_MAT3x4                  0x8F4C
> #define GL_DOUBLE_MAT4x2                  0x8F4D
> #define GL_DOUBLE_MAT4x3                  0x8F4E
> #endif
> 
> #ifndef GL_ARB_shader_subroutine
> #define GL_ACTIVE_SUBROUTINES             0x8DE5
> #define GL_ACTIVE_SUBROUTINE_UNIFORMS     0x8DE6
> #define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0x8E47
> #define GL_ACTIVE_SUBROUTINE_MAX_LENGTH   0x8E48
> #define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0x8E49
> #define GL_MAX_SUBROUTINES                0x8DE7
> #define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0x8DE8
> #define GL_NUM_COMPATIBLE_SUBROUTINES     0x8E4A
> #define GL_COMPATIBLE_SUBROUTINES         0x8E4B
> /* reuse GL_UNIFORM_SIZE */
> /* reuse GL_UNIFORM_NAME_LENGTH */
> #endif
> 
> #ifndef GL_ARB_tessellation_shader
> #define GL_PATCHES                        0x000E
> #define GL_PATCH_VERTICES                 0x8E72
> #define GL_PATCH_DEFAULT_INNER_LEVEL      0x8E73
> #define GL_PATCH_DEFAULT_OUTER_LEVEL      0x8E74
> #define GL_TESS_CONTROL_OUTPUT_VERTICES   0x8E75
> #define GL_TESS_GEN_MODE                  0x8E76
> #define GL_TESS_GEN_SPACING               0x8E77
> #define GL_TESS_GEN_VERTEX_ORDER          0x8E78
> #define GL_TESS_GEN_POINT_MODE            0x8E79
> /* reuse GL_TRIANGLES */
> /* reuse GL_QUADS */
> #define GL_ISOLINES                       0x8E7A
> /* reuse GL_EQUAL */
> #define GL_FRACTIONAL_ODD                 0x8E7B
> #define GL_FRACTIONAL_EVEN                0x8E7C
> /* reuse GL_CCW */
> /* reuse GL_CW */
> #define GL_MAX_PATCH_VERTICES             0x8E7D
> #define GL_MAX_TESS_GEN_LEVEL             0x8E7E
> #define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E7F
> #define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E80
> #define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0x8E81
> #define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0x8E82
> #define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0x8E83
> #define GL_MAX_TESS_PATCH_COMPONENTS      0x8E84
> #define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0x8E85
> #define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0x8E86
> #define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0x8E89
> #define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0x8E8A
> #define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0x886C
> #define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0x886D
> #define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0x8E1E
> #define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0x8E1F
> #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0x84F0
> #define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0x84F1
> #define GL_TESS_EVALUATION_SHADER         0x8E87
> #define GL_TESS_CONTROL_SHADER            0x8E88
> #endif
> 
> #ifndef GL_ARB_texture_buffer_object_rgb32
> /* reuse GL_RGB32F */
> /* reuse GL_RGB32UI */
> /* reuse GL_RGB32I */
> #endif
> 
> #ifndef GL_ARB_transform_feedback2
> #define GL_TRANSFORM_FEEDBACK             0x8E22
> #define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0x8E23
> #define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0x8E24
> #define GL_TRANSFORM_FEEDBACK_BINDING     0x8E25
> #endif
> 
> #ifndef GL_ARB_transform_feedback3
> #define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0x8E70
> #define GL_MAX_VERTEX_STREAMS             0x8E71
> #endif
> 
> #ifndef GL_ARB_ES2_compatibility
> #define GL_FIXED                          0x140C
> #define GL_IMPLEMENTATION_COLOR_READ_TYPE 0x8B9A
> #define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0x8B9B
> #define GL_LOW_FLOAT                      0x8DF0
> #define GL_MEDIUM_FLOAT                   0x8DF1
> #define GL_HIGH_FLOAT                     0x8DF2
> #define GL_LOW_INT                        0x8DF3
> #define GL_MEDIUM_INT                     0x8DF4
> #define GL_HIGH_INT                       0x8DF5
> #define GL_SHADER_COMPILER                0x8DFA
> #define GL_NUM_SHADER_BINARY_FORMATS      0x8DF9
> #define GL_MAX_VERTEX_UNIFORM_VECTORS     0x8DFB
> #define GL_MAX_VARYING_VECTORS            0x8DFC
> #define GL_MAX_FRAGMENT_UNIFORM_VECTORS   0x8DFD
> #endif
> 
> #ifndef GL_ARB_get_program_binary
> #define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0x8257
> #define GL_PROGRAM_BINARY_LENGTH          0x8741
> #define GL_NUM_PROGRAM_BINARY_FORMATS     0x87FE
> #define GL_PROGRAM_BINARY_FORMATS         0x87FF
> #endif
> 
> #ifndef GL_ARB_separate_shader_objects
> #define GL_VERTEX_SHADER_BIT              0x00000001
> #define GL_FRAGMENT_SHADER_BIT            0x00000002
> #define GL_GEOMETRY_SHADER_BIT            0x00000004
> #define GL_TESS_CONTROL_SHADER_BIT        0x00000008
> #define GL_TESS_EVALUATION_SHADER_BIT     0x00000010
> #define GL_ALL_SHADER_BITS                0xFFFFFFFF
> #define GL_PROGRAM_SEPARABLE              0x8258
> #define GL_ACTIVE_PROGRAM                 0x8259
> #define GL_PROGRAM_PIPELINE_BINDING       0x825A
> #endif
> 
> #ifndef GL_ARB_shader_precision
> #endif
> 
> #ifndef GL_ARB_vertex_attrib_64bit
> /* reuse GL_RGB32I */
> /* reuse GL_DOUBLE_VEC2 */
> /* reuse GL_DOUBLE_VEC3 */
> /* reuse GL_DOUBLE_VEC4 */
> /* reuse GL_DOUBLE_MAT2 */
> /* reuse GL_DOUBLE_MAT3 */
> /* reuse GL_DOUBLE_MAT4 */
> /* reuse GL_DOUBLE_MAT2x3 */
> /* reuse GL_DOUBLE_MAT2x4 */
> /* reuse GL_DOUBLE_MAT3x2 */
> /* reuse GL_DOUBLE_MAT3x4 */
> /* reuse GL_DOUBLE_MAT4x2 */
> /* reuse GL_DOUBLE_MAT4x3 */
> #endif
> 
> #ifndef GL_ARB_viewport_array
> /* reuse GL_SCISSOR_BOX */
> /* reuse GL_VIEWPORT */
> /* reuse GL_DEPTH_RANGE */
> /* reuse GL_SCISSOR_TEST */
> #define GL_MAX_VIEWPORTS                  0x825B
> #define GL_VIEWPORT_SUBPIXEL_BITS         0x825C
> #define GL_VIEWPORT_BOUNDS_RANGE          0x825D
> #define GL_LAYER_PROVOKING_VERTEX         0x825E
> #define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0x825F
> #define GL_UNDEFINED_VERTEX               0x8260
> /* reuse GL_FIRST_VERTEX_CONVENTION */
> /* reuse GL_LAST_VERTEX_CONVENTION */
> /* reuse GL_PROVOKING_VERTEX */
> #endif
> 
> #ifndef GL_ARB_cl_event
> #define GL_SYNC_CL_EVENT_ARB              0x8240
> #define GL_SYNC_CL_EVENT_COMPLETE_ARB     0x8241
> #endif
> 
> #ifndef GL_ARB_debug_output
> #define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB   0x8242
> #define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0x8243
> #define GL_DEBUG_CALLBACK_FUNCTION_ARB    0x8244
> #define GL_DEBUG_CALLBACK_USER_PARAM_ARB  0x8245
> #define GL_DEBUG_SOURCE_API_ARB           0x8246
> #define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0x8247
> #define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0x8248
> #define GL_DEBUG_SOURCE_THIRD_PARTY_ARB   0x8249
> #define GL_DEBUG_SOURCE_APPLICATION_ARB   0x824A
> #define GL_DEBUG_SOURCE_OTHER_ARB         0x824B
> #define GL_DEBUG_TYPE_ERROR_ARB           0x824C
> #define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0x824D
> #define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0x824E
> #define GL_DEBUG_TYPE_PORTABILITY_ARB     0x824F
> #define GL_DEBUG_TYPE_PERFORMANCE_ARB     0x8250
> #define GL_DEBUG_TYPE_OTHER_ARB           0x8251
> #define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB   0x9143
> #define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB  0x9144
> #define GL_DEBUG_LOGGED_MESSAGES_ARB      0x9145
> #define GL_DEBUG_SEVERITY_HIGH_ARB        0x9146
> #define GL_DEBUG_SEVERITY_MEDIUM_ARB      0x9147
> #define GL_DEBUG_SEVERITY_LOW_ARB         0x9148
> #endif
> 
> #ifndef GL_ARB_robustness
> /* reuse GL_NO_ERROR */
> #define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0x00000004
> #define GL_LOSE_CONTEXT_ON_RESET_ARB      0x8252
> #define GL_GUILTY_CONTEXT_RESET_ARB       0x8253
> #define GL_INNOCENT_CONTEXT_RESET_ARB     0x8254
> #define GL_UNKNOWN_CONTEXT_RESET_ARB      0x8255
> #define GL_RESET_NOTIFICATION_STRATEGY_ARB 0x8256
> #define GL_NO_RESET_NOTIFICATION_ARB      0x8261
> #endif
> 
> #ifndef GL_ARB_shader_stencil_export
> #endif
> 
> #ifndef GL_EXT_abgr
> #define GL_ABGR_EXT                       0x8000
> #endif
> 
> #ifndef GL_EXT_blend_color
> #define GL_CONSTANT_COLOR_EXT             0x8001
> #define GL_ONE_MINUS_CONSTANT_COLOR_EXT   0x8002
> #define GL_CONSTANT_ALPHA_EXT             0x8003
> #define GL_ONE_MINUS_CONSTANT_ALPHA_EXT   0x8004
> #define GL_BLEND_COLOR_EXT                0x8005
> #endif
> 
> #ifndef GL_EXT_polygon_offset
> #define GL_POLYGON_OFFSET_EXT             0x8037
> #define GL_POLYGON_OFFSET_FACTOR_EXT      0x8038
> #define GL_POLYGON_OFFSET_BIAS_EXT        0x8039
> #endif
> 
> #ifndef GL_EXT_texture
> #define GL_ALPHA4_EXT                     0x803B
> #define GL_ALPHA8_EXT                     0x803C
> #define GL_ALPHA12_EXT                    0x803D
> #define GL_ALPHA16_EXT                    0x803E
> #define GL_LUMINANCE4_EXT                 0x803F
> #define GL_LUMINANCE8_EXT                 0x8040
> #define GL_LUMINANCE12_EXT                0x8041
> #define GL_LUMINANCE16_EXT                0x8042
> #define GL_LUMINANCE4_ALPHA4_EXT          0x8043
> #define GL_LUMINANCE6_ALPHA2_EXT          0x8044
> #define GL_LUMINANCE8_ALPHA8_EXT          0x8045
> #define GL_LUMINANCE12_ALPHA4_EXT         0x8046
> #define GL_LUMINANCE12_ALPHA12_EXT        0x8047
> #define GL_LUMINANCE16_ALPHA16_EXT        0x8048
> #define GL_INTENSITY_EXT                  0x8049
> #define GL_INTENSITY4_EXT                 0x804A
> #define GL_INTENSITY8_EXT                 0x804B
> #define GL_INTENSITY12_EXT                0x804C
> #define GL_INTENSITY16_EXT                0x804D
> #define GL_RGB2_EXT                       0x804E
> #define GL_RGB4_EXT                       0x804F
> #define GL_RGB5_EXT                       0x8050
> #define GL_RGB8_EXT                       0x8051
> #define GL_RGB10_EXT                      0x8052
> #define GL_RGB12_EXT                      0x8053
> #define GL_RGB16_EXT                      0x8054
> #define GL_RGBA2_EXT                      0x8055
> #define GL_RGBA4_EXT                      0x8056
> #define GL_RGB5_A1_EXT                    0x8057
> #define GL_RGBA8_EXT                      0x8058
> #define GL_RGB10_A2_EXT                   0x8059
> #define GL_RGBA12_EXT                     0x805A
> #define GL_RGBA16_EXT                     0x805B
> #define GL_TEXTURE_RED_SIZE_EXT           0x805C
> #define GL_TEXTURE_GREEN_SIZE_EXT         0x805D
> #define GL_TEXTURE_BLUE_SIZE_EXT          0x805E
> #define GL_TEXTURE_ALPHA_SIZE_EXT         0x805F
> #define GL_TEXTURE_LUMINANCE_SIZE_EXT     0x8060
> #define GL_TEXTURE_INTENSITY_SIZE_EXT     0x8061
> #define GL_REPLACE_EXT                    0x8062
> #define GL_PROXY_TEXTURE_1D_EXT           0x8063
> #define GL_PROXY_TEXTURE_2D_EXT           0x8064
> #define GL_TEXTURE_TOO_LARGE_EXT          0x8065
> #endif
> 
> #ifndef GL_EXT_texture3D
> #define GL_PACK_SKIP_IMAGES_EXT           0x806B
> #define GL_PACK_IMAGE_HEIGHT_EXT          0x806C
> #define GL_UNPACK_SKIP_IMAGES_EXT         0x806D
> #define GL_UNPACK_IMAGE_HEIGHT_EXT        0x806E
> #define GL_TEXTURE_3D_EXT                 0x806F
> #define GL_PROXY_TEXTURE_3D_EXT           0x8070
> #define GL_TEXTURE_DEPTH_EXT              0x8071
> #define GL_TEXTURE_WRAP_R_EXT             0x8072
> #define GL_MAX_3D_TEXTURE_SIZE_EXT        0x8073
> #endif
> 
> #ifndef GL_SGIS_texture_filter4
> #define GL_FILTER4_SGIS                   0x8146
> #define GL_TEXTURE_FILTER4_SIZE_SGIS      0x8147
> #endif
> 
> #ifndef GL_EXT_subtexture
> #endif
> 
> #ifndef GL_EXT_copy_texture
> #endif
> 
> #ifndef GL_EXT_histogram
> #define GL_HISTOGRAM_EXT                  0x8024
> #define GL_PROXY_HISTOGRAM_EXT            0x8025
> #define GL_HISTOGRAM_WIDTH_EXT            0x8026
> #define GL_HISTOGRAM_FORMAT_EXT           0x8027
> #define GL_HISTOGRAM_RED_SIZE_EXT         0x8028
> #define GL_HISTOGRAM_GREEN_SIZE_EXT       0x8029
> #define GL_HISTOGRAM_BLUE_SIZE_EXT        0x802A
> #define GL_HISTOGRAM_ALPHA_SIZE_EXT       0x802B
> #define GL_HISTOGRAM_LUMINANCE_SIZE_EXT   0x802C
> #define GL_HISTOGRAM_SINK_EXT             0x802D
> #define GL_MINMAX_EXT                     0x802E
> #define GL_MINMAX_FORMAT_EXT              0x802F
> #define GL_MINMAX_SINK_EXT                0x8030
> #define GL_TABLE_TOO_LARGE_EXT            0x8031
> #endif
> 
> #ifndef GL_EXT_convolution
> #define GL_CONVOLUTION_1D_EXT             0x8010
> #define GL_CONVOLUTION_2D_EXT             0x8011
> #define GL_SEPARABLE_2D_EXT               0x8012
> #define GL_CONVOLUTION_BORDER_MODE_EXT    0x8013
> #define GL_CONVOLUTION_FILTER_SCALE_EXT   0x8014
> #define GL_CONVOLUTION_FILTER_BIAS_EXT    0x8015
> #define GL_REDUCE_EXT                     0x8016
> #define GL_CONVOLUTION_FORMAT_EXT         0x8017
> #define GL_CONVOLUTION_WIDTH_EXT          0x8018
> #define GL_CONVOLUTION_HEIGHT_EXT         0x8019
> #define GL_MAX_CONVOLUTION_WIDTH_EXT      0x801A
> #define GL_MAX_CONVOLUTION_HEIGHT_EXT     0x801B
> #define GL_POST_CONVOLUTION_RED_SCALE_EXT 0x801C
> #define GL_POST_CONVOLUTION_GREEN_SCALE_EXT 0x801D
> #define GL_POST_CONVOLUTION_BLUE_SCALE_EXT 0x801E
> #define GL_POST_CONVOLUTION_ALPHA_SCALE_EXT 0x801F
> #define GL_POST_CONVOLUTION_RED_BIAS_EXT  0x8020
> #define GL_POST_CONVOLUTION_GREEN_BIAS_EXT 0x8021
> #define GL_POST_CONVOLUTION_BLUE_BIAS_EXT 0x8022
> #define GL_POST_CONVOLUTION_ALPHA_BIAS_EXT 0x8023
> #endif
> 
> #ifndef GL_SGI_color_matrix
> #define GL_COLOR_MATRIX_SGI               0x80B1
> #define GL_COLOR_MATRIX_STACK_DEPTH_SGI   0x80B2
> #define GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI 0x80B3
> #define GL_POST_COLOR_MATRIX_RED_SCALE_SGI 0x80B4
> #define GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI 0x80B5
> #define GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI 0x80B6
> #define GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI 0x80B7
> #define GL_POST_COLOR_MATRIX_RED_BIAS_SGI 0x80B8
> #define GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI 0x80B9
> #define GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI 0x80BA
> #define GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI 0x80BB
> #endif
> 
> #ifndef GL_SGI_color_table
> #define GL_COLOR_TABLE_SGI                0x80D0
> #define GL_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D1
> #define GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D2
> #define GL_PROXY_COLOR_TABLE_SGI          0x80D3
> #define GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI 0x80D4
> #define GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI 0x80D5
> #define GL_COLOR_TABLE_SCALE_SGI          0x80D6
> #define GL_COLOR_TABLE_BIAS_SGI           0x80D7
> #define GL_COLOR_TABLE_FORMAT_SGI         0x80D8
> #define GL_COLOR_TABLE_WIDTH_SGI          0x80D9
> #define GL_COLOR_TABLE_RED_SIZE_SGI       0x80DA
> #define GL_COLOR_TABLE_GREEN_SIZE_SGI     0x80DB
> #define GL_COLOR_TABLE_BLUE_SIZE_SGI      0x80DC
> #define GL_COLOR_TABLE_ALPHA_SIZE_SGI     0x80DD
> #define GL_COLOR_TABLE_LUMINANCE_SIZE_SGI 0x80DE
> #define GL_COLOR_TABLE_INTENSITY_SIZE_SGI 0x80DF
> #endif
> 
> #ifndef GL_SGIS_pixel_texture
> #define GL_PIXEL_TEXTURE_SGIS             0x8353
> #define GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS 0x8354
> #define GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS 0x8355
> #define GL_PIXEL_GROUP_COLOR_SGIS         0x8356
> #endif
> 
> #ifndef GL_SGIX_pixel_texture
> #define GL_PIXEL_TEX_GEN_SGIX             0x8139
> #define GL_PIXEL_TEX_GEN_MODE_SGIX        0x832B
> #endif
> 
> #ifndef GL_SGIS_texture4D
> #define GL_PACK_SKIP_VOLUMES_SGIS         0x8130
> #define GL_PACK_IMAGE_DEPTH_SGIS          0x8131
> #define GL_UNPACK_SKIP_VOLUMES_SGIS       0x8132
> #define GL_UNPACK_IMAGE_DEPTH_SGIS        0x8133
> #define GL_TEXTURE_4D_SGIS                0x8134
> #define GL_PROXY_TEXTURE_4D_SGIS          0x8135
> #define GL_TEXTURE_4DSIZE_SGIS            0x8136
> #define GL_TEXTURE_WRAP_Q_SGIS            0x8137
> #define GL_MAX_4D_TEXTURE_SIZE_SGIS       0x8138
> #define GL_TEXTURE_4D_BINDING_SGIS        0x814F
> #endif
> 
> #ifndef GL_SGI_texture_color_table
> #define GL_TEXTURE_COLOR_TABLE_SGI        0x80BC
> #define GL_PROXY_TEXTURE_COLOR_TABLE_SGI  0x80BD
> #endif
> 
> #ifndef GL_EXT_cmyka
> #define GL_CMYK_EXT                       0x800C
> #define GL_CMYKA_EXT                      0x800D
> #define GL_PACK_CMYK_HINT_EXT             0x800E
> #define GL_UNPACK_CMYK_HINT_EXT           0x800F
> #endif
> 
> #ifndef GL_EXT_texture_object
> #define GL_TEXTURE_PRIORITY_EXT           0x8066
> #define GL_TEXTURE_RESIDENT_EXT           0x8067
> #define GL_TEXTURE_1D_BINDING_EXT         0x8068
> #define GL_TEXTURE_2D_BINDING_EXT         0x8069
> #define GL_TEXTURE_3D_BINDING_EXT         0x806A
> #endif
> 
> #ifndef GL_SGIS_detail_texture
> #define GL_DETAIL_TEXTURE_2D_SGIS         0x8095
> #define GL_DETAIL_TEXTURE_2D_BINDING_SGIS 0x8096
> #define GL_LINEAR_DETAIL_SGIS             0x8097
> #define GL_LINEAR_DETAIL_ALPHA_SGIS       0x8098
> #define GL_LINEAR_DETAIL_COLOR_SGIS       0x8099
> #define GL_DETAIL_TEXTURE_LEVEL_SGIS      0x809A
> #define GL_DETAIL_TEXTURE_MODE_SGIS       0x809B
> #define GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS 0x809C
> #endif
> 
> #ifndef GL_SGIS_sharpen_texture
> #define GL_LINEAR_SHARPEN_SGIS            0x80AD
> #define GL_LINEAR_SHARPEN_ALPHA_SGIS      0x80AE
> #define GL_LINEAR_SHARPEN_COLOR_SGIS      0x80AF
> #define GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS 0x80B0
> #endif
> 
> #ifndef GL_EXT_packed_pixels
> #define GL_UNSIGNED_BYTE_3_3_2_EXT        0x8032
> #define GL_UNSIGNED_SHORT_4_4_4_4_EXT     0x8033
> #define GL_UNSIGNED_SHORT_5_5_5_1_EXT     0x8034
> #define GL_UNSIGNED_INT_8_8_8_8_EXT       0x8035
> #define GL_UNSIGNED_INT_10_10_10_2_EXT    0x8036
> #endif
> 
> #ifndef GL_SGIS_texture_lod
> #define GL_TEXTURE_MIN_LOD_SGIS           0x813A
> #define GL_TEXTURE_MAX_LOD_SGIS           0x813B
> #define GL_TEXTURE_BASE_LEVEL_SGIS        0x813C
> #define GL_TEXTURE_MAX_LEVEL_SGIS         0x813D
> #endif
> 
> #ifndef GL_SGIS_multisample
> #define GL_MULTISAMPLE_SGIS               0x809D
> #define GL_SAMPLE_ALPHA_TO_MASK_SGIS      0x809E
> #define GL_SAMPLE_ALPHA_TO_ONE_SGIS       0x809F
> #define GL_SAMPLE_MASK_SGIS               0x80A0
> #define GL_1PASS_SGIS                     0x80A1
> #define GL_2PASS_0_SGIS                   0x80A2
> #define GL_2PASS_1_SGIS                   0x80A3
> #define GL_4PASS_0_SGIS                   0x80A4
> #define GL_4PASS_1_SGIS                   0x80A5
> #define GL_4PASS_2_SGIS                   0x80A6
> #define GL_4PASS_3_SGIS                   0x80A7
> #define GL_SAMPLE_BUFFERS_SGIS            0x80A8
> #define GL_SAMPLES_SGIS                   0x80A9
> #define GL_SAMPLE_MASK_VALUE_SGIS         0x80AA
> #define GL_SAMPLE_MASK_INVERT_SGIS        0x80AB
> #define GL_SAMPLE_PATTERN_SGIS            0x80AC
> #endif
> 
> #ifndef GL_EXT_rescale_normal
> #define GL_RESCALE_NORMAL_EXT             0x803A
> #endif
> 
> #ifndef GL_EXT_vertex_array
> #define GL_VERTEX_ARRAY_EXT               0x8074
> #define GL_NORMAL_ARRAY_EXT               0x8075
> #define GL_COLOR_ARRAY_EXT                0x8076
> #define GL_INDEX_ARRAY_EXT                0x8077
> #define GL_TEXTURE_COORD_ARRAY_EXT        0x8078
> #define GL_EDGE_FLAG_ARRAY_EXT            0x8079
> #define GL_VERTEX_ARRAY_SIZE_EXT          0x807A
> #define GL_VERTEX_ARRAY_TYPE_EXT          0x807B
> #define GL_VERTEX_ARRAY_STRIDE_EXT        0x807C
> #define GL_VERTEX_ARRAY_COUNT_EXT         0x807D
> #define GL_NORMAL_ARRAY_TYPE_EXT          0x807E
> #define GL_NORMAL_ARRAY_STRIDE_EXT        0x807F
> #define GL_NORMAL_ARRAY_COUNT_EXT         0x8080
> #define GL_COLOR_ARRAY_SIZE_EXT           0x8081
> #define GL_COLOR_ARRAY_TYPE_EXT           0x8082
> #define GL_COLOR_ARRAY_STRIDE_EXT         0x8083
> #define GL_COLOR_ARRAY_COUNT_EXT          0x8084
> #define GL_INDEX_ARRAY_TYPE_EXT           0x8085
> #define GL_INDEX_ARRAY_STRIDE_EXT         0x8086
> #define GL_INDEX_ARRAY_COUNT_EXT          0x8087
> #define GL_TEXTURE_COORD_ARRAY_SIZE_EXT   0x8088
> #define GL_TEXTURE_COORD_ARRAY_TYPE_EXT   0x8089
> #define GL_TEXTURE_COORD_ARRAY_STRIDE_EXT 0x808A
> #define GL_TEXTURE_COORD_ARRAY_COUNT_EXT  0x808B
> #define GL_EDGE_FLAG_ARRAY_STRIDE_EXT     0x808C
> #define GL_EDGE_FLAG_ARRAY_COUNT_EXT      0x808D
> #define GL_VERTEX_ARRAY_POINTER_EXT       0x808E
> #define GL_NORMAL_ARRAY_POINTER_EXT       0x808F
> #define GL_COLOR_ARRAY_POINTER_EXT        0x8090
> #define GL_INDEX_ARRAY_POINTER_EXT        0x8091
> #define GL_TEXTURE_COORD_ARRAY_POINTER_EXT 0x8092
> #define GL_EDGE_FLAG_ARRAY_POINTER_EXT    0x8093
> #endif
> 
> #ifndef GL_EXT_misc_attribute
> #endif
> 
> #ifndef GL_SGIS_generate_mipmap
> #define GL_GENERATE_MIPMAP_SGIS           0x8191
> #define GL_GENERATE_MIPMAP_HINT_SGIS      0x8192
> #endif
> 
> #ifndef GL_SGIX_clipmap
> #define GL_LINEAR_CLIPMAP_LINEAR_SGIX     0x8170
> #define GL_TEXTURE_CLIPMAP_CENTER_SGIX    0x8171
> #define GL_TEXTURE_CLIPMAP_FRAME_SGIX     0x8172
> #define GL_TEXTURE_CLIPMAP_OFFSET_SGIX    0x8173
> #define GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8174
> #define GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX 0x8175
> #define GL_TEXTURE_CLIPMAP_DEPTH_SGIX     0x8176
> #define GL_MAX_CLIPMAP_DEPTH_SGIX         0x8177
> #define GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX 0x8178
> #define GL_NEAREST_CLIPMAP_NEAREST_SGIX   0x844D
> #define GL_NEAREST_CLIPMAP_LINEAR_SGIX    0x844E
> #define GL_LINEAR_CLIPMAP_NEAREST_SGIX    0x844F
> #endif
> 
> #ifndef GL_SGIX_shadow
> #define GL_TEXTURE_COMPARE_SGIX           0x819A
> #define GL_TEXTURE_COMPARE_OPERATOR_SGIX  0x819B
> #define GL_TEXTURE_LEQUAL_R_SGIX          0x819C
> #define GL_TEXTURE_GEQUAL_R_SGIX          0x819D
> #endif
> 
> #ifndef GL_SGIS_texture_edge_clamp
> #define GL_CLAMP_TO_EDGE_SGIS             0x812F
> #endif
> 
> #ifndef GL_SGIS_texture_border_clamp
> #define GL_CLAMP_TO_BORDER_SGIS           0x812D
> #endif
> 
> #ifndef GL_EXT_blend_minmax
> #define GL_FUNC_ADD_EXT                   0x8006
> #define GL_MIN_EXT                        0x8007
> #define GL_MAX_EXT                        0x8008
> #define GL_BLEND_EQUATION_EXT             0x8009
> #endif
> 
> #ifndef GL_EXT_blend_subtract
> #define GL_FUNC_SUBTRACT_EXT              0x800A
> #define GL_FUNC_REVERSE_SUBTRACT_EXT      0x800B
> #endif
> 
> #ifndef GL_EXT_blend_logic_op
> #endif
> 
> #ifndef GL_SGIX_interlace
> #define GL_INTERLACE_SGIX                 0x8094
> #endif
> 
> #ifndef GL_SGIX_pixel_tiles
> #define GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX 0x813E
> #define GL_PIXEL_TILE_CACHE_INCREMENT_SGIX 0x813F
> #define GL_PIXEL_TILE_WIDTH_SGIX          0x8140
> #define GL_PIXEL_TILE_HEIGHT_SGIX         0x8141
> #define GL_PIXEL_TILE_GRID_WIDTH_SGIX     0x8142
> #define GL_PIXEL_TILE_GRID_HEIGHT_SGIX    0x8143
> #define GL_PIXEL_TILE_GRID_DEPTH_SGIX     0x8144
> #define GL_PIXEL_TILE_CACHE_SIZE_SGIX     0x8145
> #endif
> 
> #ifndef GL_SGIS_texture_select
> #define GL_DUAL_ALPHA4_SGIS               0x8110
> #define GL_DUAL_ALPHA8_SGIS               0x8111
> #define GL_DUAL_ALPHA12_SGIS              0x8112
> #define GL_DUAL_ALPHA16_SGIS              0x8113
> #define GL_DUAL_LUMINANCE4_SGIS           0x8114
> #define GL_DUAL_LUMINANCE8_SGIS           0x8115
> #define GL_DUAL_LUMINANCE12_SGIS          0x8116
> #define GL_DUAL_LUMINANCE16_SGIS          0x8117
> #define GL_DUAL_INTENSITY4_SGIS           0x8118
> #define GL_DUAL_INTENSITY8_SGIS           0x8119
> #define GL_DUAL_INTENSITY12_SGIS          0x811A
> #define GL_DUAL_INTENSITY16_SGIS          0x811B
> #define GL_DUAL_LUMINANCE_ALPHA4_SGIS     0x811C
> #define GL_DUAL_LUMINANCE_ALPHA8_SGIS     0x811D
> #define GL_QUAD_ALPHA4_SGIS               0x811E
> #define GL_QUAD_ALPHA8_SGIS               0x811F
> #define GL_QUAD_LUMINANCE4_SGIS           0x8120
> #define GL_QUAD_LUMINANCE8_SGIS           0x8121
> #define GL_QUAD_INTENSITY4_SGIS           0x8122
> #define GL_QUAD_INTENSITY8_SGIS           0x8123
> #define GL_DUAL_TEXTURE_SELECT_SGIS       0x8124
> #define GL_QUAD_TEXTURE_SELECT_SGIS       0x8125
> #endif
> 
> #ifndef GL_SGIX_sprite
> #define GL_SPRITE_SGIX                    0x8148
> #define GL_SPRITE_MODE_SGIX               0x8149
> #define GL_SPRITE_AXIS_SGIX               0x814A
> #define GL_SPRITE_TRANSLATION_SGIX        0x814B
> #define GL_SPRITE_AXIAL_SGIX              0x814C
> #define GL_SPRITE_OBJECT_ALIGNED_SGIX     0x814D
> #define GL_SPRITE_EYE_ALIGNED_SGIX        0x814E
> #endif
> 
> #ifndef GL_SGIX_texture_multi_buffer
> #define GL_TEXTURE_MULTI_BUFFER_HINT_SGIX 0x812E
> #endif
> 
> #ifndef GL_EXT_point_parameters
> #define GL_POINT_SIZE_MIN_EXT             0x8126
> #define GL_POINT_SIZE_MAX_EXT             0x8127
> #define GL_POINT_FADE_THRESHOLD_SIZE_EXT  0x8128
> #define GL_DISTANCE_ATTENUATION_EXT       0x8129
> #endif
> 
> #ifndef GL_SGIS_point_parameters
> #define GL_POINT_SIZE_MIN_SGIS            0x8126
> #define GL_POINT_SIZE_MAX_SGIS            0x8127
> #define GL_POINT_FADE_THRESHOLD_SIZE_SGIS 0x8128
> #define GL_DISTANCE_ATTENUATION_SGIS      0x8129
> #endif
> 
> #ifndef GL_SGIX_instruments
> #define GL_INSTRUMENT_BUFFER_POINTER_SGIX 0x8180
> #define GL_INSTRUMENT_MEASUREMENTS_SGIX   0x8181
> #endif
> 
> #ifndef GL_SGIX_texture_scale_bias
> #define GL_POST_TEXTURE_FILTER_BIAS_SGIX  0x8179
> #define GL_POST_TEXTURE_FILTER_SCALE_SGIX 0x817A
> #define GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX 0x817B
> #define GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX 0x817C
> #endif
> 
> #ifndef GL_SGIX_framezoom
> #define GL_FRAMEZOOM_SGIX                 0x818B
> #define GL_FRAMEZOOM_FACTOR_SGIX          0x818C
> #define GL_MAX_FRAMEZOOM_FACTOR_SGIX      0x818D
> #endif
> 
> #ifndef GL_SGIX_tag_sample_buffer
> #endif
> 
> #ifndef GL_FfdMaskSGIX
> #define GL_TEXTURE_DEFORMATION_BIT_SGIX   0x00000001
> #define GL_GEOMETRY_DEFORMATION_BIT_SGIX  0x00000002
> #endif
> 
> #ifndef GL_SGIX_polynomial_ffd
> #define GL_GEOMETRY_DEFORMATION_SGIX      0x8194
> #define GL_TEXTURE_DEFORMATION_SGIX       0x8195
> #define GL_DEFORMATIONS_MASK_SGIX         0x8196
> #define GL_MAX_DEFORMATION_ORDER_SGIX     0x8197
> #endif
> 
> #ifndef GL_SGIX_reference_plane
> #define GL_REFERENCE_PLANE_SGIX           0x817D
> #define GL_REFERENCE_PLANE_EQUATION_SGIX  0x817E
> #endif
> 
> #ifndef GL_SGIX_flush_raster
> #endif
> 
> #ifndef GL_SGIX_depth_texture
> #define GL_DEPTH_COMPONENT16_SGIX         0x81A5
> #define GL_DEPTH_COMPONENT24_SGIX         0x81A6
> #define GL_DEPTH_COMPONENT32_SGIX         0x81A7
> #endif
> 
> #ifndef GL_SGIS_fog_function
> #define GL_FOG_FUNC_SGIS                  0x812A
> #define GL_FOG_FUNC_POINTS_SGIS           0x812B
> #define GL_MAX_FOG_FUNC_POINTS_SGIS       0x812C
> #endif
> 
> #ifndef GL_SGIX_fog_offset
> #define GL_FOG_OFFSET_SGIX                0x8198
> #define GL_FOG_OFFSET_VALUE_SGIX          0x8199
> #endif
> 
> #ifndef GL_HP_image_transform
> #define GL_IMAGE_SCALE_X_HP               0x8155
> #define GL_IMAGE_SCALE_Y_HP               0x8156
> #define GL_IMAGE_TRANSLATE_X_HP           0x8157
> #define GL_IMAGE_TRANSLATE_Y_HP           0x8158
> #define GL_IMAGE_ROTATE_ANGLE_HP          0x8159
> #define GL_IMAGE_ROTATE_ORIGIN_X_HP       0x815A
> #define GL_IMAGE_ROTATE_ORIGIN_Y_HP       0x815B
> #define GL_IMAGE_MAG_FILTER_HP            0x815C
> #define GL_IMAGE_MIN_FILTER_HP            0x815D
> #define GL_IMAGE_CUBIC_WEIGHT_HP          0x815E
> #define GL_CUBIC_HP                       0x815F
> #define GL_AVERAGE_HP                     0x8160
> #define GL_IMAGE_TRANSFORM_2D_HP          0x8161
> #define GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8162
> #define GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP 0x8163
> #endif
> 
> #ifndef GL_HP_convolution_border_modes
> #define GL_IGNORE_BORDER_HP               0x8150
> #define GL_CONSTANT_BORDER_HP             0x8151
> #define GL_REPLICATE_BORDER_HP            0x8153
> #define GL_CONVOLUTION_BORDER_COLOR_HP    0x8154
> #endif
> 
> #ifndef GL_INGR_palette_buffer
> #endif
> 
> #ifndef GL_SGIX_texture_add_env
> #define GL_TEXTURE_ENV_BIAS_SGIX          0x80BE
> #endif
> 
> #ifndef GL_EXT_color_subtable
> #endif
> 
> #ifndef GL_PGI_vertex_hints
> #define GL_VERTEX_DATA_HINT_PGI           0x1A22A
> #define GL_VERTEX_CONSISTENT_HINT_PGI     0x1A22B
> #define GL_MATERIAL_SIDE_HINT_PGI         0x1A22C
> #define GL_MAX_VERTEX_HINT_PGI            0x1A22D
> #define GL_COLOR3_BIT_PGI                 0x00010000
> #define GL_COLOR4_BIT_PGI                 0x00020000
> #define GL_EDGEFLAG_BIT_PGI               0x00040000
> #define GL_INDEX_BIT_PGI                  0x00080000
> #define GL_MAT_AMBIENT_BIT_PGI            0x00100000
> #define GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
> #define GL_MAT_DIFFUSE_BIT_PGI            0x00400000
> #define GL_MAT_EMISSION_BIT_PGI           0x00800000
> #define GL_MAT_COLOR_INDEXES_BIT_PGI      0x01000000
> #define GL_MAT_SHININESS_BIT_PGI          0x02000000
> #define GL_MAT_SPECULAR_BIT_PGI           0x04000000
> #define GL_NORMAL_BIT_PGI                 0x08000000
> #define GL_TEXCOORD1_BIT_PGI              0x10000000
> #define GL_TEXCOORD2_BIT_PGI              0x20000000
> #define GL_TEXCOORD3_BIT_PGI              0x40000000
> #define GL_TEXCOORD4_BIT_PGI              0x80000000
> #define GL_VERTEX23_BIT_PGI               0x00000004
> #define GL_VERTEX4_BIT_PGI                0x00000008
> #endif
> 
> #ifndef GL_PGI_misc_hints
> #define GL_PREFER_DOUBLEBUFFER_HINT_PGI   0x1A1F8
> #define GL_CONSERVE_MEMORY_HINT_PGI       0x1A1FD
> #define GL_RECLAIM_MEMORY_HINT_PGI        0x1A1FE
> #define GL_NATIVE_GRAPHICS_HANDLE_PGI     0x1A202
> #define GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI 0x1A203
> #define GL_NATIVE_GRAPHICS_END_HINT_PGI   0x1A204
> #define GL_ALWAYS_FAST_HINT_PGI           0x1A20C
> #define GL_ALWAYS_SOFT_HINT_PGI           0x1A20D
> #define GL_ALLOW_DRAW_OBJ_HINT_PGI        0x1A20E
> #define GL_ALLOW_DRAW_WIN_HINT_PGI        0x1A20F
> #define GL_ALLOW_DRAW_FRG_HINT_PGI        0x1A210
> #define GL_ALLOW_DRAW_MEM_HINT_PGI        0x1A211
> #define GL_STRICT_DEPTHFUNC_HINT_PGI      0x1A216
> #define GL_STRICT_LIGHTING_HINT_PGI       0x1A217
> #define GL_STRICT_SCISSOR_HINT_PGI        0x1A218
> #define GL_FULL_STIPPLE_HINT_PGI          0x1A219
> #define GL_CLIP_NEAR_HINT_PGI             0x1A220
> #define GL_CLIP_FAR_HINT_PGI              0x1A221
> #define GL_WIDE_LINE_HINT_PGI             0x1A222
> #define GL_BACK_NORMALS_HINT_PGI          0x1A223
> #endif
> 
> #ifndef GL_EXT_paletted_texture
> #define GL_COLOR_INDEX1_EXT               0x80E2
> #define GL_COLOR_INDEX2_EXT               0x80E3
> #define GL_COLOR_INDEX4_EXT               0x80E4
> #define GL_COLOR_INDEX8_EXT               0x80E5
> #define GL_COLOR_INDEX12_EXT              0x80E6
> #define GL_COLOR_INDEX16_EXT              0x80E7
> #define GL_TEXTURE_INDEX_SIZE_EXT         0x80ED
> #endif
> 
> #ifndef GL_EXT_clip_volume_hint
> #define GL_CLIP_VOLUME_CLIPPING_HINT_EXT  0x80F0
> #endif
> 
> #ifndef GL_SGIX_list_priority
> #define GL_LIST_PRIORITY_SGIX             0x8182
> #endif
> 
> #ifndef GL_SGIX_ir_instrument1
> #define GL_IR_INSTRUMENT1_SGIX            0x817F
> #endif
> 
> #ifndef GL_SGIX_calligraphic_fragment
> #define GL_CALLIGRAPHIC_FRAGMENT_SGIX     0x8183
> #endif
> 
> #ifndef GL_SGIX_texture_lod_bias
> #define GL_TEXTURE_LOD_BIAS_S_SGIX        0x818E
> #define GL_TEXTURE_LOD_BIAS_T_SGIX        0x818F
> #define GL_TEXTURE_LOD_BIAS_R_SGIX        0x8190
> #endif
> 
> #ifndef GL_SGIX_shadow_ambient
> #define GL_SHADOW_AMBIENT_SGIX            0x80BF
> #endif
> 
> #ifndef GL_EXT_index_texture
> #endif
> 
> #ifndef GL_EXT_index_material
> #define GL_INDEX_MATERIAL_EXT             0x81B8
> #define GL_INDEX_MATERIAL_PARAMETER_EXT   0x81B9
> #define GL_INDEX_MATERIAL_FACE_EXT        0x81BA
> #endif
> 
> #ifndef GL_EXT_index_func
> #define GL_INDEX_TEST_EXT                 0x81B5
> #define GL_INDEX_TEST_FUNC_EXT            0x81B6
> #define GL_INDEX_TEST_REF_EXT             0x81B7
> #endif
> 
> #ifndef GL_EXT_index_array_formats
> #define GL_IUI_V2F_EXT                    0x81AD
> #define GL_IUI_V3F_EXT                    0x81AE
> #define GL_IUI_N3F_V2F_EXT                0x81AF
> #define GL_IUI_N3F_V3F_EXT                0x81B0
> #define GL_T2F_IUI_V2F_EXT                0x81B1
> #define GL_T2F_IUI_V3F_EXT                0x81B2
> #define GL_T2F_IUI_N3F_V2F_EXT            0x81B3
> #define GL_T2F_IUI_N3F_V3F_EXT            0x81B4
> #endif
> 
> #ifndef GL_EXT_compiled_vertex_array
> #define GL_ARRAY_ELEMENT_LOCK_FIRST_EXT   0x81A8
> #define GL_ARRAY_ELEMENT_LOCK_COUNT_EXT   0x81A9
> #endif
> 
> #ifndef GL_EXT_cull_vertex
> #define GL_CULL_VERTEX_EXT                0x81AA
> #define GL_CULL_VERTEX_EYE_POSITION_EXT   0x81AB
> #define GL_CULL_VERTEX_OBJECT_POSITION_EXT 0x81AC
> #endif
> 
> #ifndef GL_SGIX_ycrcb
> #define GL_YCRCB_422_SGIX                 0x81BB
> #define GL_YCRCB_444_SGIX                 0x81BC
> #endif
> 
> #ifndef GL_SGIX_fragment_lighting
> #define GL_FRAGMENT_LIGHTING_SGIX         0x8400
> #define GL_FRAGMENT_COLOR_MATERIAL_SGIX   0x8401
> #define GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX 0x8402
> #define GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX 0x8403
> #define GL_MAX_FRAGMENT_LIGHTS_SGIX       0x8404
> #define GL_MAX_ACTIVE_LIGHTS_SGIX         0x8405
> #define GL_CURRENT_RASTER_NORMAL_SGIX     0x8406
> #define GL_LIGHT_ENV_MODE_SGIX            0x8407
> #define GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX 0x8408
> #define GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX 0x8409
> #define GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX 0x840A
> #define GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX 0x840B
> #define GL_FRAGMENT_LIGHT0_SGIX           0x840C
> #define GL_FRAGMENT_LIGHT1_SGIX           0x840D
> #define GL_FRAGMENT_LIGHT2_SGIX           0x840E
> #define GL_FRAGMENT_LIGHT3_SGIX           0x840F
> #define GL_FRAGMENT_LIGHT4_SGIX           0x8410
> #define GL_FRAGMENT_LIGHT5_SGIX           0x8411
> #define GL_FRAGMENT_LIGHT6_SGIX           0x8412
> #define GL_FRAGMENT_LIGHT7_SGIX           0x8413
> #endif
> 
> #ifndef GL_IBM_rasterpos_clip
> #define GL_RASTER_POSITION_UNCLIPPED_IBM  0x19262
> #endif
> 
> #ifndef GL_HP_texture_lighting
> #define GL_TEXTURE_LIGHTING_MODE_HP       0x8167
> #define GL_TEXTURE_POST_SPECULAR_HP       0x8168
> #define GL_TEXTURE_PRE_SPECULAR_HP        0x8169
> #endif
> 
> #ifndef GL_EXT_draw_range_elements
> #define GL_MAX_ELEMENTS_VERTICES_EXT      0x80E8
> #define GL_MAX_ELEMENTS_INDICES_EXT       0x80E9
> #endif
> 
> #ifndef GL_WIN_phong_shading
> #define GL_PHONG_WIN                      0x80EA
> #define GL_PHONG_HINT_WIN                 0x80EB
> #endif
> 
> #ifndef GL_WIN_specular_fog
> #define GL_FOG_SPECULAR_TEXTURE_WIN       0x80EC
> #endif
> 
> #ifndef GL_EXT_light_texture
> #define GL_FRAGMENT_MATERIAL_EXT          0x8349
> #define GL_FRAGMENT_NORMAL_EXT            0x834A
> #define GL_FRAGMENT_COLOR_EXT             0x834C
> #define GL_ATTENUATION_EXT                0x834D
> #define GL_SHADOW_ATTENUATION_EXT         0x834E
> #define GL_TEXTURE_APPLICATION_MODE_EXT   0x834F
> #define GL_TEXTURE_LIGHT_EXT              0x8350
> #define GL_TEXTURE_MATERIAL_FACE_EXT      0x8351
> #define GL_TEXTURE_MATERIAL_PARAMETER_EXT 0x8352
> /* reuse GL_FRAGMENT_DEPTH_EXT */
> #endif
> 
> #ifndef GL_SGIX_blend_alpha_minmax
> #define GL_ALPHA_MIN_SGIX                 0x8320
> #define GL_ALPHA_MAX_SGIX                 0x8321
> #endif
> 
> #ifndef GL_SGIX_impact_pixel_texture
> #define GL_PIXEL_TEX_GEN_Q_CEILING_SGIX   0x8184
> #define GL_PIXEL_TEX_GEN_Q_ROUND_SGIX     0x8185
> #define GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX     0x8186
> #define GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX 0x8187
> #define GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX 0x8188
> #define GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX    0x8189
> #define GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX    0x818A
> #endif
> 
> #ifndef GL_EXT_bgra
> #define GL_BGR_EXT                        0x80E0
> #define GL_BGRA_EXT                       0x80E1
> #endif
> 
> #ifndef GL_SGIX_async
> #define GL_ASYNC_MARKER_SGIX              0x8329
> #endif
> 
> #ifndef GL_SGIX_async_pixel
> #define GL_ASYNC_TEX_IMAGE_SGIX           0x835C
> #define GL_ASYNC_DRAW_PIXELS_SGIX         0x835D
> #define GL_ASYNC_READ_PIXELS_SGIX         0x835E
> #define GL_MAX_ASYNC_TEX_IMAGE_SGIX       0x835F
> #define GL_MAX_ASYNC_DRAW_PIXELS_SGIX     0x8360
> #define GL_MAX_ASYNC_READ_PIXELS_SGIX     0x8361
> #endif
> 
> #ifndef GL_SGIX_async_histogram
> #define GL_ASYNC_HISTOGRAM_SGIX           0x832C
> #define GL_MAX_ASYNC_HISTOGRAM_SGIX       0x832D
> #endif
> 
> #ifndef GL_INTEL_texture_scissor
> #endif
> 
> #ifndef GL_INTEL_parallel_arrays
> #define GL_PARALLEL_ARRAYS_INTEL          0x83F4
> #define GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL 0x83F5
> #define GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL 0x83F6
> #define GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL 0x83F7
> #define GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL 0x83F8
> #endif
> 
> #ifndef GL_HP_occlusion_test
> #define GL_OCCLUSION_TEST_HP              0x8165
> #define GL_OCCLUSION_TEST_RESULT_HP       0x8166
> #endif
> 
> #ifndef GL_EXT_pixel_transform
> #define GL_PIXEL_TRANSFORM_2D_EXT         0x8330
> #define GL_PIXEL_MAG_FILTER_EXT           0x8331
> #define GL_PIXEL_MIN_FILTER_EXT           0x8332
> #define GL_PIXEL_CUBIC_WEIGHT_EXT         0x8333
> #define GL_CUBIC_EXT                      0x8334
> #define GL_AVERAGE_EXT                    0x8335
> #define GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8336
> #define GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT 0x8337
> #define GL_PIXEL_TRANSFORM_2D_MATRIX_EXT  0x8338
> #endif
> 
> #ifndef GL_EXT_pixel_transform_color_table
> #endif
> 
> #ifndef GL_EXT_shared_texture_palette
> #define GL_SHARED_TEXTURE_PALETTE_EXT     0x81FB
> #endif
> 
> #ifndef GL_EXT_separate_specular_color
> #define GL_LIGHT_MODEL_COLOR_CONTROL_EXT  0x81F8
> #define GL_SINGLE_COLOR_EXT               0x81F9
> #define GL_SEPARATE_SPECULAR_COLOR_EXT    0x81FA
> #endif
> 
> #ifndef GL_EXT_secondary_color
> #define GL_COLOR_SUM_EXT                  0x8458
> #define GL_CURRENT_SECONDARY_COLOR_EXT    0x8459
> #define GL_SECONDARY_COLOR_ARRAY_SIZE_EXT 0x845A
> #define GL_SECONDARY_COLOR_ARRAY_TYPE_EXT 0x845B
> #define GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT 0x845C
> #define GL_SECONDARY_COLOR_ARRAY_POINTER_EXT 0x845D
> #define GL_SECONDARY_COLOR_ARRAY_EXT      0x845E
> #endif
> 
> #ifndef GL_EXT_texture_perturb_normal
> #define GL_PERTURB_EXT                    0x85AE
> #define GL_TEXTURE_NORMAL_EXT             0x85AF
> #endif
> 
> #ifndef GL_EXT_multi_draw_arrays
> #endif
> 
> #ifndef GL_EXT_fog_coord
> #define GL_FOG_COORDINATE_SOURCE_EXT      0x8450
> #define GL_FOG_COORDINATE_EXT             0x8451
> #define GL_FRAGMENT_DEPTH_EXT             0x8452
> #define GL_CURRENT_FOG_COORDINATE_EXT     0x8453
> #define GL_FOG_COORDINATE_ARRAY_TYPE_EXT  0x8454
> #define GL_FOG_COORDINATE_ARRAY_STRIDE_EXT 0x8455
> #define GL_FOG_COORDINATE_ARRAY_POINTER_EXT 0x8456
> #define GL_FOG_COORDINATE_ARRAY_EXT       0x8457
> #endif
> 
> #ifndef GL_REND_screen_coordinates
> #define GL_SCREEN_COORDINATES_REND        0x8490
> #define GL_INVERTED_SCREEN_W_REND         0x8491
> #endif
> 
> #ifndef GL_EXT_coordinate_frame
> #define GL_TANGENT_ARRAY_EXT              0x8439
> #define GL_BINORMAL_ARRAY_EXT             0x843A
> #define GL_CURRENT_TANGENT_EXT            0x843B
> #define GL_CURRENT_BINORMAL_EXT           0x843C
> #define GL_TANGENT_ARRAY_TYPE_EXT         0x843E
> #define GL_TANGENT_ARRAY_STRIDE_EXT       0x843F
> #define GL_BINORMAL_ARRAY_TYPE_EXT        0x8440
> #define GL_BINORMAL_ARRAY_STRIDE_EXT      0x8441
> #define GL_TANGENT_ARRAY_POINTER_EXT      0x8442
> #define GL_BINORMAL_ARRAY_POINTER_EXT     0x8443
> #define GL_MAP1_TANGENT_EXT               0x8444
> #define GL_MAP2_TANGENT_EXT               0x8445
> #define GL_MAP1_BINORMAL_EXT              0x8446
> #define GL_MAP2_BINORMAL_EXT              0x8447
> #endif
> 
> #ifndef GL_EXT_texture_env_combine
> #define GL_COMBINE_EXT                    0x8570
> #define GL_COMBINE_RGB_EXT                0x8571
> #define GL_COMBINE_ALPHA_EXT              0x8572
> #define GL_RGB_SCALE_EXT                  0x8573
> #define GL_ADD_SIGNED_EXT                 0x8574
> #define GL_INTERPOLATE_EXT                0x8575
> #define GL_CONSTANT_EXT                   0x8576
> #define GL_PRIMARY_COLOR_EXT              0x8577
> #define GL_PREVIOUS_EXT                   0x8578
> #define GL_SOURCE0_RGB_EXT                0x8580
> #define GL_SOURCE1_RGB_EXT                0x8581
> #define GL_SOURCE2_RGB_EXT                0x8582
> #define GL_SOURCE0_ALPHA_EXT              0x8588
> #define GL_SOURCE1_ALPHA_EXT              0x8589
> #define GL_SOURCE2_ALPHA_EXT              0x858A
> #define GL_OPERAND0_RGB_EXT               0x8590
> #define GL_OPERAND1_RGB_EXT               0x8591
> #define GL_OPERAND2_RGB_EXT               0x8592
> #define GL_OPERAND0_ALPHA_EXT             0x8598
> #define GL_OPERAND1_ALPHA_EXT             0x8599
> #define GL_OPERAND2_ALPHA_EXT             0x859A
> #endif
> 
> #ifndef GL_APPLE_specular_vector
> #define GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE 0x85B0
> #endif
> 
> #ifndef GL_APPLE_transform_hint
> #define GL_TRANSFORM_HINT_APPLE           0x85B1
> #endif
> 
> #ifndef GL_SGIX_fog_scale
> #define GL_FOG_SCALE_SGIX                 0x81FC
> #define GL_FOG_SCALE_VALUE_SGIX           0x81FD
> #endif
> 
> #ifndef GL_SUNX_constant_data
> #define GL_UNPACK_CONSTANT_DATA_SUNX      0x81D5
> #define GL_TEXTURE_CONSTANT_DATA_SUNX     0x81D6
> #endif
> 
> #ifndef GL_SUN_global_alpha
> #define GL_GLOBAL_ALPHA_SUN               0x81D9
> #define GL_GLOBAL_ALPHA_FACTOR_SUN        0x81DA
> #endif
> 
> #ifndef GL_SUN_triangle_list
> #define GL_RESTART_SUN                    0x0001
> #define GL_REPLACE_MIDDLE_SUN             0x0002
> #define GL_REPLACE_OLDEST_SUN             0x0003
> #define GL_TRIANGLE_LIST_SUN              0x81D7
> #define GL_REPLACEMENT_CODE_SUN           0x81D8
> #define GL_REPLACEMENT_CODE_ARRAY_SUN     0x85C0
> #define GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN 0x85C1
> #define GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN 0x85C2
> #define GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN 0x85C3
> #define GL_R1UI_V3F_SUN                   0x85C4
> #define GL_R1UI_C4UB_V3F_SUN              0x85C5
> #define GL_R1UI_C3F_V3F_SUN               0x85C6
> #define GL_R1UI_N3F_V3F_SUN               0x85C7
> #define GL_R1UI_C4F_N3F_V3F_SUN           0x85C8
> #define GL_R1UI_T2F_V3F_SUN               0x85C9
> #define GL_R1UI_T2F_N3F_V3F_SUN           0x85CA
> #define GL_R1UI_T2F_C4F_N3F_V3F_SUN       0x85CB
> #endif
> 
> #ifndef GL_SUN_vertex
> #endif
> 
> #ifndef GL_EXT_blend_func_separate
> #define GL_BLEND_DST_RGB_EXT              0x80C8
> #define GL_BLEND_SRC_RGB_EXT              0x80C9
> #define GL_BLEND_DST_ALPHA_EXT            0x80CA
> #define GL_BLEND_SRC_ALPHA_EXT            0x80CB
> #endif
> 
> #ifndef GL_INGR_color_clamp
> #define GL_RED_MIN_CLAMP_INGR             0x8560
> #define GL_GREEN_MIN_CLAMP_INGR           0x8561
> #define GL_BLUE_MIN_CLAMP_INGR            0x8562
> #define GL_ALPHA_MIN_CLAMP_INGR           0x8563
> #define GL_RED_MAX_CLAMP_INGR             0x8564
> #define GL_GREEN_MAX_CLAMP_INGR           0x8565
> #define GL_BLUE_MAX_CLAMP_INGR            0x8566
> #define GL_ALPHA_MAX_CLAMP_INGR           0x8567
> #endif
> 
> #ifndef GL_INGR_interlace_read
> #define GL_INTERLACE_READ_INGR            0x8568
> #endif
> 
> #ifndef GL_EXT_stencil_wrap
> #define GL_INCR_WRAP_EXT                  0x8507
> #define GL_DECR_WRAP_EXT                  0x8508
> #endif
> 
> #ifndef GL_EXT_422_pixels
> #define GL_422_EXT                        0x80CC
> #define GL_422_REV_EXT                    0x80CD
> #define GL_422_AVERAGE_EXT                0x80CE
> #define GL_422_REV_AVERAGE_EXT            0x80CF
> #endif
> 
> #ifndef GL_NV_texgen_reflection
> #define GL_NORMAL_MAP_NV                  0x8511
> #define GL_REFLECTION_MAP_NV              0x8512
> #endif
> 
> #ifndef GL_EXT_texture_cube_map
> #define GL_NORMAL_MAP_EXT                 0x8511
> #define GL_REFLECTION_MAP_EXT             0x8512
> #define GL_TEXTURE_CUBE_MAP_EXT           0x8513
> #define GL_TEXTURE_BINDING_CUBE_MAP_EXT   0x8514
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT 0x8515
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT 0x8516
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT 0x8517
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT 0x8518
> #define GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT 0x8519
> #define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT 0x851A
> #define GL_PROXY_TEXTURE_CUBE_MAP_EXT     0x851B
> #define GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT  0x851C
> #endif
> 
> #ifndef GL_SUN_convolution_border_modes
> #define GL_WRAP_BORDER_SUN                0x81D4
> #endif
> 
> #ifndef GL_EXT_texture_env_add
> #endif
> 
> #ifndef GL_EXT_texture_lod_bias
> #define GL_MAX_TEXTURE_LOD_BIAS_EXT       0x84FD
> #define GL_TEXTURE_FILTER_CONTROL_EXT     0x8500
> #define GL_TEXTURE_LOD_BIAS_EXT           0x8501
> #endif
> 
> #ifndef GL_EXT_texture_filter_anisotropic
> #define GL_TEXTURE_MAX_ANISOTROPY_EXT     0x84FE
> #define GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT 0x84FF
> #endif
> 
> #ifndef GL_EXT_vertex_weighting
> #define GL_MODELVIEW0_STACK_DEPTH_EXT     GL_MODELVIEW_STACK_DEPTH
> #define GL_MODELVIEW1_STACK_DEPTH_EXT     0x8502
> #define GL_MODELVIEW0_MATRIX_EXT          GL_MODELVIEW_MATRIX
> #define GL_MODELVIEW1_MATRIX_EXT          0x8506
> #define GL_VERTEX_WEIGHTING_EXT           0x8509
> #define GL_MODELVIEW0_EXT                 GL_MODELVIEW
> #define GL_MODELVIEW1_EXT                 0x850A
> #define GL_CURRENT_VERTEX_WEIGHT_EXT      0x850B
> #define GL_VERTEX_WEIGHT_ARRAY_EXT        0x850C
> #define GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT   0x850D
> #define GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT   0x850E
> #define GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT 0x850F
> #define GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT 0x8510
> #endif
> 
> #ifndef GL_NV_light_max_exponent
> #define GL_MAX_SHININESS_NV               0x8504
> #define GL_MAX_SPOT_EXPONENT_NV           0x8505
> #endif
> 
> #ifndef GL_NV_vertex_array_range
> #define GL_VERTEX_ARRAY_RANGE_NV          0x851D
> #define GL_VERTEX_ARRAY_RANGE_LENGTH_NV   0x851E
> #define GL_VERTEX_ARRAY_RANGE_VALID_NV    0x851F
> #define GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV 0x8520
> #define GL_VERTEX_ARRAY_RANGE_POINTER_NV  0x8521
> #endif
> 
> #ifndef GL_NV_register_combiners
> #define GL_REGISTER_COMBINERS_NV          0x8522
> #define GL_VARIABLE_A_NV                  0x8523
> #define GL_VARIABLE_B_NV                  0x8524
> #define GL_VARIABLE_C_NV                  0x8525
> #define GL_VARIABLE_D_NV                  0x8526
> #define GL_VARIABLE_E_NV                  0x8527
> #define GL_VARIABLE_F_NV                  0x8528
> #define GL_VARIABLE_G_NV                  0x8529
> #define GL_CONSTANT_COLOR0_NV             0x852A
> #define GL_CONSTANT_COLOR1_NV             0x852B
> #define GL_PRIMARY_COLOR_NV               0x852C
> #define GL_SECONDARY_COLOR_NV             0x852D
> #define GL_SPARE0_NV                      0x852E
> #define GL_SPARE1_NV                      0x852F
> #define GL_DISCARD_NV                     0x8530
> #define GL_E_TIMES_F_NV                   0x8531
> #define GL_SPARE0_PLUS_SECONDARY_COLOR_NV 0x8532
> #define GL_UNSIGNED_IDENTITY_NV           0x8536
> #define GL_UNSIGNED_INVERT_NV             0x8537
> #define GL_EXPAND_NORMAL_NV               0x8538
> #define GL_EXPAND_NEGATE_NV               0x8539
> #define GL_HALF_BIAS_NORMAL_NV            0x853A
> #define GL_HALF_BIAS_NEGATE_NV            0x853B
> #define GL_SIGNED_IDENTITY_NV             0x853C
> #define GL_SIGNED_NEGATE_NV               0x853D
> #define GL_SCALE_BY_TWO_NV                0x853E
> #define GL_SCALE_BY_FOUR_NV               0x853F
> #define GL_SCALE_BY_ONE_HALF_NV           0x8540
> #define GL_BIAS_BY_NEGATIVE_ONE_HALF_NV   0x8541
> #define GL_COMBINER_INPUT_NV              0x8542
> #define GL_COMBINER_MAPPING_NV            0x8543
> #define GL_COMBINER_COMPONENT_USAGE_NV    0x8544
> #define GL_COMBINER_AB_DOT_PRODUCT_NV     0x8545
> #define GL_COMBINER_CD_DOT_PRODUCT_NV     0x8546
> #define GL_COMBINER_MUX_SUM_NV            0x8547
> #define GL_COMBINER_SCALE_NV              0x8548
> #define GL_COMBINER_BIAS_NV               0x8549
> #define GL_COMBINER_AB_OUTPUT_NV          0x854A
> #define GL_COMBINER_CD_OUTPUT_NV          0x854B
> #define GL_COMBINER_SUM_OUTPUT_NV         0x854C
> #define GL_MAX_GENERAL_COMBINERS_NV       0x854D
> #define GL_NUM_GENERAL_COMBINERS_NV       0x854E
> #define GL_COLOR_SUM_CLAMP_NV             0x854F
> #define GL_COMBINER0_NV                   0x8550
> #define GL_COMBINER1_NV                   0x8551
> #define GL_COMBINER2_NV                   0x8552
> #define GL_COMBINER3_NV                   0x8553
> #define GL_COMBINER4_NV                   0x8554
> #define GL_COMBINER5_NV                   0x8555
> #define GL_COMBINER6_NV                   0x8556
> #define GL_COMBINER7_NV                   0x8557
> /* reuse GL_TEXTURE0_ARB */
> /* reuse GL_TEXTURE1_ARB */
> /* reuse GL_ZERO */
> /* reuse GL_NONE */
> /* reuse GL_FOG */
> #endif
> 
> #ifndef GL_NV_fog_distance
> #define GL_FOG_DISTANCE_MODE_NV           0x855A
> #define GL_EYE_RADIAL_NV                  0x855B
> #define GL_EYE_PLANE_ABSOLUTE_NV          0x855C
> /* reuse GL_EYE_PLANE */
> #endif
> 
> #ifndef GL_NV_texgen_emboss
> #define GL_EMBOSS_LIGHT_NV                0x855D
> #define GL_EMBOSS_CONSTANT_NV             0x855E
> #define GL_EMBOSS_MAP_NV                  0x855F
> #endif
> 
> #ifndef GL_NV_blend_square
> #endif
> 
> #ifndef GL_NV_texture_env_combine4
> #define GL_COMBINE4_NV                    0x8503
> #define GL_SOURCE3_RGB_NV                 0x8583
> #define GL_SOURCE3_ALPHA_NV               0x858B
> #define GL_OPERAND3_RGB_NV                0x8593
> #define GL_OPERAND3_ALPHA_NV              0x859B
> #endif
> 
> #ifndef GL_MESA_resize_buffers
> #endif
> 
> #ifndef GL_MESA_window_pos
> #endif
> 
> #ifndef GL_EXT_texture_compression_s3tc
> #define GL_COMPRESSED_RGB_S3TC_DXT1_EXT   0x83F0
> #define GL_COMPRESSED_RGBA_S3TC_DXT1_EXT  0x83F1
> #define GL_COMPRESSED_RGBA_S3TC_DXT3_EXT  0x83F2
> #define GL_COMPRESSED_RGBA_S3TC_DXT5_EXT  0x83F3
> #endif
> 
> #ifndef GL_IBM_cull_vertex
> #define GL_CULL_VERTEX_IBM                103050
> #endif
> 
> #ifndef GL_IBM_multimode_draw_arrays
> #endif
> 
> #ifndef GL_IBM_vertex_array_lists
> #define GL_VERTEX_ARRAY_LIST_IBM          103070
> #define GL_NORMAL_ARRAY_LIST_IBM          103071
> #define GL_COLOR_ARRAY_LIST_IBM           103072
> #define GL_INDEX_ARRAY_LIST_IBM           103073
> #define GL_TEXTURE_COORD_ARRAY_LIST_IBM   103074
> #define GL_EDGE_FLAG_ARRAY_LIST_IBM       103075
> #define GL_FOG_COORDINATE_ARRAY_LIST_IBM  103076
> #define GL_SECONDARY_COLOR_ARRAY_LIST_IBM 103077
> #define GL_VERTEX_ARRAY_LIST_STRIDE_IBM   103080
> #define GL_NORMAL_ARRAY_LIST_STRIDE_IBM   103081
> #define GL_COLOR_ARRAY_LIST_STRIDE_IBM    103082
> #define GL_INDEX_ARRAY_LIST_STRIDE_IBM    103083
> #define GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM 103084
> #define GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM 103085
> #define GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM 103086
> #define GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM 103087
> #endif
> 
> #ifndef GL_SGIX_subsample
> #define GL_PACK_SUBSAMPLE_RATE_SGIX       0x85A0
> #define GL_UNPACK_SUBSAMPLE_RATE_SGIX     0x85A1
> #define GL_PIXEL_SUBSAMPLE_4444_SGIX      0x85A2
> #define GL_PIXEL_SUBSAMPLE_2424_SGIX      0x85A3
> #define GL_PIXEL_SUBSAMPLE_4242_SGIX      0x85A4
> #endif
> 
> #ifndef GL_SGIX_ycrcb_subsample
> #endif
> 
> #ifndef GL_SGIX_ycrcba
> #define GL_YCRCB_SGIX                     0x8318
> #define GL_YCRCBA_SGIX                    0x8319
> #endif
> 
> #ifndef GL_SGI_depth_pass_instrument
> #define GL_DEPTH_PASS_INSTRUMENT_SGIX     0x8310
> #define GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX 0x8311
> #define GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX 0x8312
> #endif
> 
> #ifndef GL_3DFX_texture_compression_FXT1
> #define GL_COMPRESSED_RGB_FXT1_3DFX       0x86B0
> #define GL_COMPRESSED_RGBA_FXT1_3DFX      0x86B1
> #endif
> 
> #ifndef GL_3DFX_multisample
> #define GL_MULTISAMPLE_3DFX               0x86B2
> #define GL_SAMPLE_BUFFERS_3DFX            0x86B3
> #define GL_SAMPLES_3DFX                   0x86B4
> #define GL_MULTISAMPLE_BIT_3DFX           0x20000000
> #endif
> 
> #ifndef GL_3DFX_tbuffer
> #endif
> 
> #ifndef GL_EXT_multisample
> #define GL_MULTISAMPLE_EXT                0x809D
> #define GL_SAMPLE_ALPHA_TO_MASK_EXT       0x809E
> #define GL_SAMPLE_ALPHA_TO_ONE_EXT        0x809F
> #define GL_SAMPLE_MASK_EXT                0x80A0
> #define GL_1PASS_EXT                      0x80A1
> #define GL_2PASS_0_EXT                    0x80A2
> #define GL_2PASS_1_EXT                    0x80A3
> #define GL_4PASS_0_EXT                    0x80A4
> #define GL_4PASS_1_EXT                    0x80A5
> #define GL_4PASS_2_EXT                    0x80A6
> #define GL_4PASS_3_EXT                    0x80A7
> #define GL_SAMPLE_BUFFERS_EXT             0x80A8
> #define GL_SAMPLES_EXT                    0x80A9
> #define GL_SAMPLE_MASK_VALUE_EXT          0x80AA
> #define GL_SAMPLE_MASK_INVERT_EXT         0x80AB
> #define GL_SAMPLE_PATTERN_EXT             0x80AC
> #define GL_MULTISAMPLE_BIT_EXT            0x20000000
> #endif
> 
> #ifndef GL_SGIX_vertex_preclip
> #define GL_VERTEX_PRECLIP_SGIX            0x83EE
> #define GL_VERTEX_PRECLIP_HINT_SGIX       0x83EF
> #endif
> 
> #ifndef GL_SGIX_convolution_accuracy
> #define GL_CONVOLUTION_HINT_SGIX          0x8316
> #endif
> 
> #ifndef GL_SGIX_resample
> #define GL_PACK_RESAMPLE_SGIX             0x842C
> #define GL_UNPACK_RESAMPLE_SGIX           0x842D
> #define GL_RESAMPLE_REPLICATE_SGIX        0x842E
> #define GL_RESAMPLE_ZERO_FILL_SGIX        0x842F
> #define GL_RESAMPLE_DECIMATE_SGIX         0x8430
> #endif
> 
> #ifndef GL_SGIS_point_line_texgen
> #define GL_EYE_DISTANCE_TO_POINT_SGIS     0x81F0
> #define GL_OBJECT_DISTANCE_TO_POINT_SGIS  0x81F1
> #define GL_EYE_DISTANCE_TO_LINE_SGIS      0x81F2
> #define GL_OBJECT_DISTANCE_TO_LINE_SGIS   0x81F3
> #define GL_EYE_POINT_SGIS                 0x81F4
> #define GL_OBJECT_POINT_SGIS              0x81F5
> #define GL_EYE_LINE_SGIS                  0x81F6
> #define GL_OBJECT_LINE_SGIS               0x81F7
> #endif
> 
> #ifndef GL_SGIS_texture_color_mask
> #define GL_TEXTURE_COLOR_WRITEMASK_SGIS   0x81EF
> #endif
> 
> #ifndef GL_EXT_texture_env_dot3
> #define GL_DOT3_RGB_EXT                   0x8740
> #define GL_DOT3_RGBA_EXT                  0x8741
> #endif
> 
> #ifndef GL_ATI_texture_mirror_once
> #define GL_MIRROR_CLAMP_ATI               0x8742
> #define GL_MIRROR_CLAMP_TO_EDGE_ATI       0x8743
> #endif
> 
> #ifndef GL_NV_fence
> #define GL_ALL_COMPLETED_NV               0x84F2
> #define GL_FENCE_STATUS_NV                0x84F3
> #define GL_FENCE_CONDITION_NV             0x84F4
> #endif
> 
> #ifndef GL_IBM_texture_mirrored_repeat
> #define GL_MIRRORED_REPEAT_IBM            0x8370
> #endif
> 
> #ifndef GL_NV_evaluators
> #define GL_EVAL_2D_NV                     0x86C0
> #define GL_EVAL_TRIANGULAR_2D_NV          0x86C1
> #define GL_MAP_TESSELLATION_NV            0x86C2
> #define GL_MAP_ATTRIB_U_ORDER_NV          0x86C3
> #define GL_MAP_ATTRIB_V_ORDER_NV          0x86C4
> #define GL_EVAL_FRACTIONAL_TESSELLATION_NV 0x86C5
> #define GL_EVAL_VERTEX_ATTRIB0_NV         0x86C6
> #define GL_EVAL_VERTEX_ATTRIB1_NV         0x86C7
> #define GL_EVAL_VERTEX_ATTRIB2_NV         0x86C8
> #define GL_EVAL_VERTEX_ATTRIB3_NV         0x86C9
> #define GL_EVAL_VERTEX_ATTRIB4_NV         0x86CA
> #define GL_EVAL_VERTEX_ATTRIB5_NV         0x86CB
> #define GL_EVAL_VERTEX_ATTRIB6_NV         0x86CC
> #define GL_EVAL_VERTEX_ATTRIB7_NV         0x86CD
> #define GL_EVAL_VERTEX_ATTRIB8_NV         0x86CE
> #define GL_EVAL_VERTEX_ATTRIB9_NV         0x86CF
> #define GL_EVAL_VERTEX_ATTRIB10_NV        0x86D0
> #define GL_EVAL_VERTEX_ATTRIB11_NV        0x86D1
> #define GL_EVAL_VERTEX_ATTRIB12_NV        0x86D2
> #define GL_EVAL_VERTEX_ATTRIB13_NV        0x86D3
> #define GL_EVAL_VERTEX_ATTRIB14_NV        0x86D4
> #define GL_EVAL_VERTEX_ATTRIB15_NV        0x86D5
> #define GL_MAX_MAP_TESSELLATION_NV        0x86D6
> #define GL_MAX_RATIONAL_EVAL_ORDER_NV     0x86D7
> #endif
> 
> #ifndef GL_NV_packed_depth_stencil
> #define GL_DEPTH_STENCIL_NV               0x84F9
> #define GL_UNSIGNED_INT_24_8_NV           0x84FA
> #endif
> 
> #ifndef GL_NV_register_combiners2
> #define GL_PER_STAGE_CONSTANTS_NV         0x8535
> #endif
> 
> #ifndef GL_NV_texture_compression_vtc
> #endif
> 
> #ifndef GL_NV_texture_rectangle
> #define GL_TEXTURE_RECTANGLE_NV           0x84F5
> #define GL_TEXTURE_BINDING_RECTANGLE_NV   0x84F6
> #define GL_PROXY_TEXTURE_RECTANGLE_NV     0x84F7
> #define GL_MAX_RECTANGLE_TEXTURE_SIZE_NV  0x84F8
> #endif
> 
> #ifndef GL_NV_texture_shader
> #define GL_OFFSET_TEXTURE_RECTANGLE_NV    0x864C
> #define GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV 0x864D
> #define GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV 0x864E
> #define GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV 0x86D9
> #define GL_UNSIGNED_INT_S8_S8_8_8_NV      0x86DA
> #define GL_UNSIGNED_INT_8_8_S8_S8_REV_NV  0x86DB
> #define GL_DSDT_MAG_INTENSITY_NV          0x86DC
> #define GL_SHADER_CONSISTENT_NV           0x86DD
> #define GL_TEXTURE_SHADER_NV              0x86DE
> #define GL_SHADER_OPERATION_NV            0x86DF
> #define GL_CULL_MODES_NV                  0x86E0
> #define GL_OFFSET_TEXTURE_MATRIX_NV       0x86E1
> #define GL_OFFSET_TEXTURE_SCALE_NV        0x86E2
> #define GL_OFFSET_TEXTURE_BIAS_NV         0x86E3
> #define GL_OFFSET_TEXTURE_2D_MATRIX_NV    GL_OFFSET_TEXTURE_MATRIX_NV
> #define GL_OFFSET_TEXTURE_2D_SCALE_NV     GL_OFFSET_TEXTURE_SCALE_NV
> #define GL_OFFSET_TEXTURE_2D_BIAS_NV      GL_OFFSET_TEXTURE_BIAS_NV
> #define GL_PREVIOUS_TEXTURE_INPUT_NV      0x86E4
> #define GL_CONST_EYE_NV                   0x86E5
> #define GL_PASS_THROUGH_NV                0x86E6
> #define GL_CULL_FRAGMENT_NV               0x86E7
> #define GL_OFFSET_TEXTURE_2D_NV           0x86E8
> #define GL_DEPENDENT_AR_TEXTURE_2D_NV     0x86E9
> #define GL_DEPENDENT_GB_TEXTURE_2D_NV     0x86EA
> #define GL_DOT_PRODUCT_NV                 0x86EC
> #define GL_DOT_PRODUCT_DEPTH_REPLACE_NV   0x86ED
> #define GL_DOT_PRODUCT_TEXTURE_2D_NV      0x86EE
> #define GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV 0x86F0
> #define GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV 0x86F1
> #define GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV 0x86F2
> #define GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV 0x86F3
> #define GL_HILO_NV                        0x86F4
> #define GL_DSDT_NV                        0x86F5
> #define GL_DSDT_MAG_NV                    0x86F6
> #define GL_DSDT_MAG_VIB_NV                0x86F7
> #define GL_HILO16_NV                      0x86F8
> #define GL_SIGNED_HILO_NV                 0x86F9
> #define GL_SIGNED_HILO16_NV               0x86FA
> #define GL_SIGNED_RGBA_NV                 0x86FB
> #define GL_SIGNED_RGBA8_NV                0x86FC
> #define GL_SIGNED_RGB_NV                  0x86FE
> #define GL_SIGNED_RGB8_NV                 0x86FF
> #define GL_SIGNED_LUMINANCE_NV            0x8701
> #define GL_SIGNED_LUMINANCE8_NV           0x8702
> #define GL_SIGNED_LUMINANCE_ALPHA_NV      0x8703
> #define GL_SIGNED_LUMINANCE8_ALPHA8_NV    0x8704
> #define GL_SIGNED_ALPHA_NV                0x8705
> #define GL_SIGNED_ALPHA8_NV               0x8706
> #define GL_SIGNED_INTENSITY_NV            0x8707
> #define GL_SIGNED_INTENSITY8_NV           0x8708
> #define GL_DSDT8_NV                       0x8709
> #define GL_DSDT8_MAG8_NV                  0x870A
> #define GL_DSDT8_MAG8_INTENSITY8_NV       0x870B
> #define GL_SIGNED_RGB_UNSIGNED_ALPHA_NV   0x870C
> #define GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV 0x870D
> #define GL_HI_SCALE_NV                    0x870E
> #define GL_LO_SCALE_NV                    0x870F
> #define GL_DS_SCALE_NV                    0x8710
> #define GL_DT_SCALE_NV                    0x8711
> #define GL_MAGNITUDE_SCALE_NV             0x8712
> #define GL_VIBRANCE_SCALE_NV              0x8713
> #define GL_HI_BIAS_NV                     0x8714
> #define GL_LO_BIAS_NV                     0x8715
> #define GL_DS_BIAS_NV                     0x8716
> #define GL_DT_BIAS_NV                     0x8717
> #define GL_MAGNITUDE_BIAS_NV              0x8718
> #define GL_VIBRANCE_BIAS_NV               0x8719
> #define GL_TEXTURE_BORDER_VALUES_NV       0x871A
> #define GL_TEXTURE_HI_SIZE_NV             0x871B
> #define GL_TEXTURE_LO_SIZE_NV             0x871C
> #define GL_TEXTURE_DS_SIZE_NV             0x871D
> #define GL_TEXTURE_DT_SIZE_NV             0x871E
> #define GL_TEXTURE_MAG_SIZE_NV            0x871F
> #endif
> 
> #ifndef GL_NV_texture_shader2
> #define GL_DOT_PRODUCT_TEXTURE_3D_NV      0x86EF
> #endif
> 
> #ifndef GL_NV_vertex_array_range2
> #define GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV 0x8533
> #endif
> 
> #ifndef GL_NV_vertex_program
> #define GL_VERTEX_PROGRAM_NV              0x8620
> #define GL_VERTEX_STATE_PROGRAM_NV        0x8621
> #define GL_ATTRIB_ARRAY_SIZE_NV           0x8623
> #define GL_ATTRIB_ARRAY_STRIDE_NV         0x8624
> #define GL_ATTRIB_ARRAY_TYPE_NV           0x8625
> #define GL_CURRENT_ATTRIB_NV              0x8626
> #define GL_PROGRAM_LENGTH_NV              0x8627
> #define GL_PROGRAM_STRING_NV              0x8628
> #define GL_MODELVIEW_PROJECTION_NV        0x8629
> #define GL_IDENTITY_NV                    0x862A
> #define GL_INVERSE_NV                     0x862B
> #define GL_TRANSPOSE_NV                   0x862C
> #define GL_INVERSE_TRANSPOSE_NV           0x862D
> #define GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV 0x862E
> #define GL_MAX_TRACK_MATRICES_NV          0x862F
> #define GL_MATRIX0_NV                     0x8630
> #define GL_MATRIX1_NV                     0x8631
> #define GL_MATRIX2_NV                     0x8632
> #define GL_MATRIX3_NV                     0x8633
> #define GL_MATRIX4_NV                     0x8634
> #define GL_MATRIX5_NV                     0x8635
> #define GL_MATRIX6_NV                     0x8636
> #define GL_MATRIX7_NV                     0x8637
> #define GL_CURRENT_MATRIX_STACK_DEPTH_NV  0x8640
> #define GL_CURRENT_MATRIX_NV              0x8641
> #define GL_VERTEX_PROGRAM_POINT_SIZE_NV   0x8642
> #define GL_VERTEX_PROGRAM_TWO_SIDE_NV     0x8643
> #define GL_PROGRAM_PARAMETER_NV           0x8644
> #define GL_ATTRIB_ARRAY_POINTER_NV        0x8645
> #define GL_PROGRAM_TARGET_NV              0x8646
> #define GL_PROGRAM_RESIDENT_NV            0x8647
> #define GL_TRACK_MATRIX_NV                0x8648
> #define GL_TRACK_MATRIX_TRANSFORM_NV      0x8649
> #define GL_VERTEX_PROGRAM_BINDING_NV      0x864A
> #define GL_PROGRAM_ERROR_POSITION_NV      0x864B
> #define GL_VERTEX_ATTRIB_ARRAY0_NV        0x8650
> #define GL_VERTEX_ATTRIB_ARRAY1_NV        0x8651
> #define GL_VERTEX_ATTRIB_ARRAY2_NV        0x8652
> #define GL_VERTEX_ATTRIB_ARRAY3_NV        0x8653
> #define GL_VERTEX_ATTRIB_ARRAY4_NV        0x8654
> #define GL_VERTEX_ATTRIB_ARRAY5_NV        0x8655
> #define GL_VERTEX_ATTRIB_ARRAY6_NV        0x8656
> #define GL_VERTEX_ATTRIB_ARRAY7_NV        0x8657
> #define GL_VERTEX_ATTRIB_ARRAY8_NV        0x8658
> #define GL_VERTEX_ATTRIB_ARRAY9_NV        0x8659
> #define GL_VERTEX_ATTRIB_ARRAY10_NV       0x865A
> #define GL_VERTEX_ATTRIB_ARRAY11_NV       0x865B
> #define GL_VERTEX_ATTRIB_ARRAY12_NV       0x865C
> #define GL_VERTEX_ATTRIB_ARRAY13_NV       0x865D
> #define GL_VERTEX_ATTRIB_ARRAY14_NV       0x865E
> #define GL_VERTEX_ATTRIB_ARRAY15_NV       0x865F
> #define GL_MAP1_VERTEX_ATTRIB0_4_NV       0x8660
> #define GL_MAP1_VERTEX_ATTRIB1_4_NV       0x8661
> #define GL_MAP1_VERTEX_ATTRIB2_4_NV       0x8662
> #define GL_MAP1_VERTEX_ATTRIB3_4_NV       0x8663
> #define GL_MAP1_VERTEX_ATTRIB4_4_NV       0x8664
> #define GL_MAP1_VERTEX_ATTRIB5_4_NV       0x8665
> #define GL_MAP1_VERTEX_ATTRIB6_4_NV       0x8666
> #define GL_MAP1_VERTEX_ATTRIB7_4_NV       0x8667
> #define GL_MAP1_VERTEX_ATTRIB8_4_NV       0x8668
> #define GL_MAP1_VERTEX_ATTRIB9_4_NV       0x8669
> #define GL_MAP1_VERTEX_ATTRIB10_4_NV      0x866A
> #define GL_MAP1_VERTEX_ATTRIB11_4_NV      0x866B
> #define GL_MAP1_VERTEX_ATTRIB12_4_NV      0x866C
> #define GL_MAP1_VERTEX_ATTRIB13_4_NV      0x866D
> #define GL_MAP1_VERTEX_ATTRIB14_4_NV      0x866E
> #define GL_MAP1_VERTEX_ATTRIB15_4_NV      0x866F
> #define GL_MAP2_VERTEX_ATTRIB0_4_NV       0x8670
> #define GL_MAP2_VERTEX_ATTRIB1_4_NV       0x8671
> #define GL_MAP2_VERTEX_ATTRIB2_4_NV       0x8672
> #define GL_MAP2_VERTEX_ATTRIB3_4_NV       0x8673
> #define GL_MAP2_VERTEX_ATTRIB4_4_NV       0x8674
> #define GL_MAP2_VERTEX_ATTRIB5_4_NV       0x8675
> #define GL_MAP2_VERTEX_ATTRIB6_4_NV       0x8676
> #define GL_MAP2_VERTEX_ATTRIB7_4_NV       0x8677
> #define GL_MAP2_VERTEX_ATTRIB8_4_NV       0x8678
> #define GL_MAP2_VERTEX_ATTRIB9_4_NV       0x8679
> #define GL_MAP2_VERTEX_ATTRIB10_4_NV      0x867A
> #define GL_MAP2_VERTEX_ATTRIB11_4_NV      0x867B
> #define GL_MAP2_VERTEX_ATTRIB12_4_NV      0x867C
> #define GL_MAP2_VERTEX_ATTRIB13_4_NV      0x867D
> #define GL_MAP2_VERTEX_ATTRIB14_4_NV      0x867E
> #define GL_MAP2_VERTEX_ATTRIB15_4_NV      0x867F
> #endif
> 
> #ifndef GL_SGIX_texture_coordinate_clamp
> #define GL_TEXTURE_MAX_CLAMP_S_SGIX       0x8369
> #define GL_TEXTURE_MAX_CLAMP_T_SGIX       0x836A
> #define GL_TEXTURE_MAX_CLAMP_R_SGIX       0x836B
> #endif
> 
> #ifndef GL_SGIX_scalebias_hint
> #define GL_SCALEBIAS_HINT_SGIX            0x8322
> #endif
> 
> #ifndef GL_OML_interlace
> #define GL_INTERLACE_OML                  0x8980
> #define GL_INTERLACE_READ_OML             0x8981
> #endif
> 
> #ifndef GL_OML_subsample
> #define GL_FORMAT_SUBSAMPLE_24_24_OML     0x8982
> #define GL_FORMAT_SUBSAMPLE_244_244_OML   0x8983
> #endif
> 
> #ifndef GL_OML_resample
> #define GL_PACK_RESAMPLE_OML              0x8984
> #define GL_UNPACK_RESAMPLE_OML            0x8985
> #define GL_RESAMPLE_REPLICATE_OML         0x8986
> #define GL_RESAMPLE_ZERO_FILL_OML         0x8987
> #define GL_RESAMPLE_AVERAGE_OML           0x8988
> #define GL_RESAMPLE_DECIMATE_OML          0x8989
> #endif
> 
> #ifndef GL_NV_copy_depth_to_color
> #define GL_DEPTH_STENCIL_TO_RGBA_NV       0x886E
> #define GL_DEPTH_STENCIL_TO_BGRA_NV       0x886F
> #endif
> 
> #ifndef GL_ATI_envmap_bumpmap
> #define GL_BUMP_ROT_MATRIX_ATI            0x8775
> #define GL_BUMP_ROT_MATRIX_SIZE_ATI       0x8776
> #define GL_BUMP_NUM_TEX_UNITS_ATI         0x8777
> #define GL_BUMP_TEX_UNITS_ATI             0x8778
> #define GL_DUDV_ATI                       0x8779
> #define GL_DU8DV8_ATI                     0x877A
> #define GL_BUMP_ENVMAP_ATI                0x877B
> #define GL_BUMP_TARGET_ATI                0x877C
> #endif
> 
> #ifndef GL_ATI_fragment_shader
> #define GL_FRAGMENT_SHADER_ATI            0x8920
> #define GL_REG_0_ATI                      0x8921
> #define GL_REG_1_ATI                      0x8922
> #define GL_REG_2_ATI                      0x8923
> #define GL_REG_3_ATI                      0x8924
> #define GL_REG_4_ATI                      0x8925
> #define GL_REG_5_ATI                      0x8926
> #define GL_REG_6_ATI                      0x8927
> #define GL_REG_7_ATI                      0x8928
> #define GL_REG_8_ATI                      0x8929
> #define GL_REG_9_ATI                      0x892A
> #define GL_REG_10_ATI                     0x892B
> #define GL_REG_11_ATI                     0x892C
> #define GL_REG_12_ATI                     0x892D
> #define GL_REG_13_ATI                     0x892E
> #define GL_REG_14_ATI                     0x892F
> #define GL_REG_15_ATI                     0x8930
> #define GL_REG_16_ATI                     0x8931
> #define GL_REG_17_ATI                     0x8932
> #define GL_REG_18_ATI                     0x8933
> #define GL_REG_19_ATI                     0x8934
> #define GL_REG_20_ATI                     0x8935
> #define GL_REG_21_ATI                     0x8936
> #define GL_REG_22_ATI                     0x8937
> #define GL_REG_23_ATI                     0x8938
> #define GL_REG_24_ATI                     0x8939
> #define GL_REG_25_ATI                     0x893A
> #define GL_REG_26_ATI                     0x893B
> #define GL_REG_27_ATI                     0x893C
> #define GL_REG_28_ATI                     0x893D
> #define GL_REG_29_ATI                     0x893E
> #define GL_REG_30_ATI                     0x893F
> #define GL_REG_31_ATI                     0x8940
> #define GL_CON_0_ATI                      0x8941
> #define GL_CON_1_ATI                      0x8942
> #define GL_CON_2_ATI                      0x8943
> #define GL_CON_3_ATI                      0x8944
> #define GL_CON_4_ATI                      0x8945
> #define GL_CON_5_ATI                      0x8946
> #define GL_CON_6_ATI                      0x8947
> #define GL_CON_7_ATI                      0x8948
> #define GL_CON_8_ATI                      0x8949
> #define GL_CON_9_ATI                      0x894A
> #define GL_CON_10_ATI                     0x894B
> #define GL_CON_11_ATI                     0x894C
> #define GL_CON_12_ATI                     0x894D
> #define GL_CON_13_ATI                     0x894E
> #define GL_CON_14_ATI                     0x894F
> #define GL_CON_15_ATI                     0x8950
> #define GL_CON_16_ATI                     0x8951
> #define GL_CON_17_ATI                     0x8952
> #define GL_CON_18_ATI                     0x8953
> #define GL_CON_19_ATI                     0x8954
> #define GL_CON_20_ATI                     0x8955
> #define GL_CON_21_ATI                     0x8956
> #define GL_CON_22_ATI                     0x8957
> #define GL_CON_23_ATI                     0x8958
> #define GL_CON_24_ATI                     0x8959
> #define GL_CON_25_ATI                     0x895A
> #define GL_CON_26_ATI                     0x895B
> #define GL_CON_27_ATI                     0x895C
> #define GL_CON_28_ATI                     0x895D
> #define GL_CON_29_ATI                     0x895E
> #define GL_CON_30_ATI                     0x895F
> #define GL_CON_31_ATI                     0x8960
> #define GL_MOV_ATI                        0x8961
> #define GL_ADD_ATI                        0x8963
> #define GL_MUL_ATI                        0x8964
> #define GL_SUB_ATI                        0x8965
> #define GL_DOT3_ATI                       0x8966
> #define GL_DOT4_ATI                       0x8967
> #define GL_MAD_ATI                        0x8968
> #define GL_LERP_ATI                       0x8969
> #define GL_CND_ATI                        0x896A
> #define GL_CND0_ATI                       0x896B
> #define GL_DOT2_ADD_ATI                   0x896C
> #define GL_SECONDARY_INTERPOLATOR_ATI     0x896D
> #define GL_NUM_FRAGMENT_REGISTERS_ATI     0x896E
> #define GL_NUM_FRAGMENT_CONSTANTS_ATI     0x896F
> #define GL_NUM_PASSES_ATI                 0x8970
> #define GL_NUM_INSTRUCTIONS_PER_PASS_ATI  0x8971
> #define GL_NUM_INSTRUCTIONS_TOTAL_ATI     0x8972
> #define GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI 0x8973
> #define GL_NUM_LOOPBACK_COMPONENTS_ATI    0x8974
> #define GL_COLOR_ALPHA_PAIRING_ATI        0x8975
> #define GL_SWIZZLE_STR_ATI                0x8976
> #define GL_SWIZZLE_STQ_ATI                0x8977
> #define GL_SWIZZLE_STR_DR_ATI             0x8978
> #define GL_SWIZZLE_STQ_DQ_ATI             0x8979
> #define GL_SWIZZLE_STRQ_ATI               0x897A
> #define GL_SWIZZLE_STRQ_DQ_ATI            0x897B
> #define GL_RED_BIT_ATI                    0x00000001
> #define GL_GREEN_BIT_ATI                  0x00000002
> #define GL_BLUE_BIT_ATI                   0x00000004
> #define GL_2X_BIT_ATI                     0x00000001
> #define GL_4X_BIT_ATI                     0x00000002
> #define GL_8X_BIT_ATI                     0x00000004
> #define GL_HALF_BIT_ATI                   0x00000008
> #define GL_QUARTER_BIT_ATI                0x00000010
> #define GL_EIGHTH_BIT_ATI                 0x00000020
> #define GL_SATURATE_BIT_ATI               0x00000040
> #define GL_COMP_BIT_ATI                   0x00000002
> #define GL_NEGATE_BIT_ATI                 0x00000004
> #define GL_BIAS_BIT_ATI                   0x00000008
> #endif
> 
> #ifndef GL_ATI_pn_triangles
> #define GL_PN_TRIANGLES_ATI               0x87F0
> #define GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F1
> #define GL_PN_TRIANGLES_POINT_MODE_ATI    0x87F2
> #define GL_PN_TRIANGLES_NORMAL_MODE_ATI   0x87F3
> #define GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI 0x87F4
> #define GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI 0x87F5
> #define GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI 0x87F6
> #define GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI 0x87F7
> #define GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI 0x87F8
> #endif
> 
> #ifndef GL_ATI_vertex_array_object
> #define GL_STATIC_ATI                     0x8760
> #define GL_DYNAMIC_ATI                    0x8761
> #define GL_PRESERVE_ATI                   0x8762
> #define GL_DISCARD_ATI                    0x8763
> #define GL_OBJECT_BUFFER_SIZE_ATI         0x8764
> #define GL_OBJECT_BUFFER_USAGE_ATI        0x8765
> #define GL_ARRAY_OBJECT_BUFFER_ATI        0x8766
> #define GL_ARRAY_OBJECT_OFFSET_ATI        0x8767
> #endif
> 
> #ifndef GL_EXT_vertex_shader
> #define GL_VERTEX_SHADER_EXT              0x8780
> #define GL_VERTEX_SHADER_BINDING_EXT      0x8781
> #define GL_OP_INDEX_EXT                   0x8782
> #define GL_OP_NEGATE_EXT                  0x8783
> #define GL_OP_DOT3_EXT                    0x8784
> #define GL_OP_DOT4_EXT                    0x8785
> #define GL_OP_MUL_EXT                     0x8786
> #define GL_OP_ADD_EXT                     0x8787
> #define GL_OP_MADD_EXT                    0x8788
> #define GL_OP_FRAC_EXT                    0x8789
> #define GL_OP_MAX_EXT                     0x878A
> #define GL_OP_MIN_EXT                     0x878B
> #define GL_OP_SET_GE_EXT                  0x878C
> #define GL_OP_SET_LT_EXT                  0x878D
> #define GL_OP_CLAMP_EXT                   0x878E
> #define GL_OP_FLOOR_EXT                   0x878F
> #define GL_OP_ROUND_EXT                   0x8790
> #define GL_OP_EXP_BASE_2_EXT              0x8791
> #define GL_OP_LOG_BASE_2_EXT              0x8792
> #define GL_OP_POWER_EXT                   0x8793
> #define GL_OP_RECIP_EXT                   0x8794
> #define GL_OP_RECIP_SQRT_EXT              0x8795
> #define GL_OP_SUB_EXT                     0x8796
> #define GL_OP_CROSS_PRODUCT_EXT           0x8797
> #define GL_OP_MULTIPLY_MATRIX_EXT         0x8798
> #define GL_OP_MOV_EXT                     0x8799
> #define GL_OUTPUT_VERTEX_EXT              0x879A
> #define GL_OUTPUT_COLOR0_EXT              0x879B
> #define GL_OUTPUT_COLOR1_EXT              0x879C
> #define GL_OUTPUT_TEXTURE_COORD0_EXT      0x879D
> #define GL_OUTPUT_TEXTURE_COORD1_EXT      0x879E
> #define GL_OUTPUT_TEXTURE_COORD2_EXT      0x879F
> #define GL_OUTPUT_TEXTURE_COORD3_EXT      0x87A0
> #define GL_OUTPUT_TEXTURE_COORD4_EXT      0x87A1
> #define GL_OUTPUT_TEXTURE_COORD5_EXT      0x87A2
> #define GL_OUTPUT_TEXTURE_COORD6_EXT      0x87A3
> #define GL_OUTPUT_TEXTURE_COORD7_EXT      0x87A4
> #define GL_OUTPUT_TEXTURE_COORD8_EXT      0x87A5
> #define GL_OUTPUT_TEXTURE_COORD9_EXT      0x87A6
> #define GL_OUTPUT_TEXTURE_COORD10_EXT     0x87A7
> #define GL_OUTPUT_TEXTURE_COORD11_EXT     0x87A8
> #define GL_OUTPUT_TEXTURE_COORD12_EXT     0x87A9
> #define GL_OUTPUT_TEXTURE_COORD13_EXT     0x87AA
> #define GL_OUTPUT_TEXTURE_COORD14_EXT     0x87AB
> #define GL_OUTPUT_TEXTURE_COORD15_EXT     0x87AC
> #define GL_OUTPUT_TEXTURE_COORD16_EXT     0x87AD
> #define GL_OUTPUT_TEXTURE_COORD17_EXT     0x87AE
> #define GL_OUTPUT_TEXTURE_COORD18_EXT     0x87AF
> #define GL_OUTPUT_TEXTURE_COORD19_EXT     0x87B0
> #define GL_OUTPUT_TEXTURE_COORD20_EXT     0x87B1
> #define GL_OUTPUT_TEXTURE_COORD21_EXT     0x87B2
> #define GL_OUTPUT_TEXTURE_COORD22_EXT     0x87B3
> #define GL_OUTPUT_TEXTURE_COORD23_EXT     0x87B4
> #define GL_OUTPUT_TEXTURE_COORD24_EXT     0x87B5
> #define GL_OUTPUT_TEXTURE_COORD25_EXT     0x87B6
> #define GL_OUTPUT_TEXTURE_COORD26_EXT     0x87B7
> #define GL_OUTPUT_TEXTURE_COORD27_EXT     0x87B8
> #define GL_OUTPUT_TEXTURE_COORD28_EXT     0x87B9
> #define GL_OUTPUT_TEXTURE_COORD29_EXT     0x87BA
> #define GL_OUTPUT_TEXTURE_COORD30_EXT     0x87BB
> #define GL_OUTPUT_TEXTURE_COORD31_EXT     0x87BC
> #define GL_OUTPUT_FOG_EXT                 0x87BD
> #define GL_SCALAR_EXT                     0x87BE
> #define GL_VECTOR_EXT                     0x87BF
> #define GL_MATRIX_EXT                     0x87C0
> #define GL_VARIANT_EXT                    0x87C1
> #define GL_INVARIANT_EXT                  0x87C2
> #define GL_LOCAL_CONSTANT_EXT             0x87C3
> #define GL_LOCAL_EXT                      0x87C4
> #define GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87C5
> #define GL_MAX_VERTEX_SHADER_VARIANTS_EXT 0x87C6
> #define GL_MAX_VERTEX_SHADER_INVARIANTS_EXT 0x87C7
> #define GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87C8
> #define GL_MAX_VERTEX_SHADER_LOCALS_EXT   0x87C9
> #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CA
> #define GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT 0x87CB
> #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87CC
> #define GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT 0x87CD
> #define GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT 0x87CE
> #define GL_VERTEX_SHADER_INSTRUCTIONS_EXT 0x87CF
> #define GL_VERTEX_SHADER_VARIANTS_EXT     0x87D0
> #define GL_VERTEX_SHADER_INVARIANTS_EXT   0x87D1
> #define GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT 0x87D2
> #define GL_VERTEX_SHADER_LOCALS_EXT       0x87D3
> #define GL_VERTEX_SHADER_OPTIMIZED_EXT    0x87D4
> #define GL_X_EXT                          0x87D5
> #define GL_Y_EXT                          0x87D6
> #define GL_Z_EXT                          0x87D7
> #define GL_W_EXT                          0x87D8
> #define GL_NEGATIVE_X_EXT                 0x87D9
> #define GL_NEGATIVE_Y_EXT                 0x87DA
> #define GL_NEGATIVE_Z_EXT                 0x87DB
> #define GL_NEGATIVE_W_EXT                 0x87DC
> #define GL_ZERO_EXT                       0x87DD
> #define GL_ONE_EXT                        0x87DE
> #define GL_NEGATIVE_ONE_EXT               0x87DF
> #define GL_NORMALIZED_RANGE_EXT           0x87E0
> #define GL_FULL_RANGE_EXT                 0x87E1
> #define GL_CURRENT_VERTEX_EXT             0x87E2
> #define GL_MVP_MATRIX_EXT                 0x87E3
> #define GL_VARIANT_VALUE_EXT              0x87E4
> #define GL_VARIANT_DATATYPE_EXT           0x87E5
> #define GL_VARIANT_ARRAY_STRIDE_EXT       0x87E6
> #define GL_VARIANT_ARRAY_TYPE_EXT         0x87E7
> #define GL_VARIANT_ARRAY_EXT              0x87E8
> #define GL_VARIANT_ARRAY_POINTER_EXT      0x87E9
> #define GL_INVARIANT_VALUE_EXT            0x87EA
> #define GL_INVARIANT_DATATYPE_EXT         0x87EB
> #define GL_LOCAL_CONSTANT_VALUE_EXT       0x87EC
> #define GL_LOCAL_CONSTANT_DATATYPE_EXT    0x87ED
> #endif
> 
> #ifndef GL_ATI_vertex_streams
> #define GL_MAX_VERTEX_STREAMS_ATI         0x876B
> #define GL_VERTEX_STREAM0_ATI             0x876C
> #define GL_VERTEX_STREAM1_ATI             0x876D
> #define GL_VERTEX_STREAM2_ATI             0x876E
> #define GL_VERTEX_STREAM3_ATI             0x876F
> #define GL_VERTEX_STREAM4_ATI             0x8770
> #define GL_VERTEX_STREAM5_ATI             0x8771
> #define GL_VERTEX_STREAM6_ATI             0x8772
> #define GL_VERTEX_STREAM7_ATI             0x8773
> #define GL_VERTEX_SOURCE_ATI              0x8774
> #endif
> 
> #ifndef GL_ATI_element_array
> #define GL_ELEMENT_ARRAY_ATI              0x8768
> #define GL_ELEMENT_ARRAY_TYPE_ATI         0x8769
> #define GL_ELEMENT_ARRAY_POINTER_ATI      0x876A
> #endif
> 
> #ifndef GL_SUN_mesh_array
> #define GL_QUAD_MESH_SUN                  0x8614
> #define GL_TRIANGLE_MESH_SUN              0x8615
> #endif
> 
> #ifndef GL_SUN_slice_accum
> #define GL_SLICE_ACCUM_SUN                0x85CC
> #endif
> 
> #ifndef GL_NV_multisample_filter_hint
> #define GL_MULTISAMPLE_FILTER_HINT_NV     0x8534
> #endif
> 
> #ifndef GL_NV_depth_clamp
> #define GL_DEPTH_CLAMP_NV                 0x864F
> #endif
> 
> #ifndef GL_NV_occlusion_query
> #define GL_PIXEL_COUNTER_BITS_NV          0x8864
> #define GL_CURRENT_OCCLUSION_QUERY_ID_NV  0x8865
> #define GL_PIXEL_COUNT_NV                 0x8866
> #define GL_PIXEL_COUNT_AVAILABLE_NV       0x8867
> #endif
> 
> #ifndef GL_NV_point_sprite
> #define GL_POINT_SPRITE_NV                0x8861
> #define GL_COORD_REPLACE_NV               0x8862
> #define GL_POINT_SPRITE_R_MODE_NV         0x8863
> #endif
> 
> #ifndef GL_NV_texture_shader3
> #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV 0x8850
> #define GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV 0x8851
> #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8852
> #define GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV 0x8853
> #define GL_OFFSET_HILO_TEXTURE_2D_NV      0x8854
> #define GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV 0x8855
> #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV 0x8856
> #define GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV 0x8857
> #define GL_DEPENDENT_HILO_TEXTURE_2D_NV   0x8858
> #define GL_DEPENDENT_RGB_TEXTURE_3D_NV    0x8859
> #define GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV 0x885A
> #define GL_DOT_PRODUCT_PASS_THROUGH_NV    0x885B
> #define GL_DOT_PRODUCT_TEXTURE_1D_NV      0x885C
> #define GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV 0x885D
> #define GL_HILO8_NV                       0x885E
> #define GL_SIGNED_HILO8_NV                0x885F
> #define GL_FORCE_BLUE_TO_ONE_NV           0x8860
> #endif
> 
> #ifndef GL_NV_vertex_program1_1
> #endif
> 
> #ifndef GL_EXT_shadow_funcs
> #endif
> 
> #ifndef GL_EXT_stencil_two_side
> #define GL_STENCIL_TEST_TWO_SIDE_EXT      0x8910
> #define GL_ACTIVE_STENCIL_FACE_EXT        0x8911
> #endif
> 
> #ifndef GL_ATI_text_fragment_shader
> #define GL_TEXT_FRAGMENT_SHADER_ATI       0x8200
> #endif
> 
> #ifndef GL_APPLE_client_storage
> #define GL_UNPACK_CLIENT_STORAGE_APPLE    0x85B2
> #endif
> 
> #ifndef GL_APPLE_element_array
> #define GL_ELEMENT_ARRAY_APPLE            0x8A0C
> #define GL_ELEMENT_ARRAY_TYPE_APPLE       0x8A0D
> #define GL_ELEMENT_ARRAY_POINTER_APPLE    0x8A0E
> #endif
> 
> #ifndef GL_APPLE_fence
> #define GL_DRAW_PIXELS_APPLE              0x8A0A
> #define GL_FENCE_APPLE                    0x8A0B
> #endif
> 
> #ifndef GL_APPLE_vertex_array_object
> #define GL_VERTEX_ARRAY_BINDING_APPLE     0x85B5
> #endif
> 
> #ifndef GL_APPLE_vertex_array_range
> #define GL_VERTEX_ARRAY_RANGE_APPLE       0x851D
> #define GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE 0x851E
> #define GL_VERTEX_ARRAY_STORAGE_HINT_APPLE 0x851F
> #define GL_VERTEX_ARRAY_RANGE_POINTER_APPLE 0x8521
> #define GL_STORAGE_CLIENT_APPLE           0x85B4
> #define GL_STORAGE_CACHED_APPLE           0x85BE
> #define GL_STORAGE_SHARED_APPLE           0x85BF
> #endif
> 
> #ifndef GL_APPLE_ycbcr_422
> #define GL_YCBCR_422_APPLE                0x85B9
> #define GL_UNSIGNED_SHORT_8_8_APPLE       0x85BA
> #define GL_UNSIGNED_SHORT_8_8_REV_APPLE   0x85BB
> #endif
> 
> #ifndef GL_S3_s3tc
> #define GL_RGB_S3TC                       0x83A0
> #define GL_RGB4_S3TC                      0x83A1
> #define GL_RGBA_S3TC                      0x83A2
> #define GL_RGBA4_S3TC                     0x83A3
> #endif
> 
> #ifndef GL_ATI_draw_buffers
> #define GL_MAX_DRAW_BUFFERS_ATI           0x8824
> #define GL_DRAW_BUFFER0_ATI               0x8825
> #define GL_DRAW_BUFFER1_ATI               0x8826
> #define GL_DRAW_BUFFER2_ATI               0x8827
> #define GL_DRAW_BUFFER3_ATI               0x8828
> #define GL_DRAW_BUFFER4_ATI               0x8829
> #define GL_DRAW_BUFFER5_ATI               0x882A
> #define GL_DRAW_BUFFER6_ATI               0x882B
> #define GL_DRAW_BUFFER7_ATI               0x882C
> #define GL_DRAW_BUFFER8_ATI               0x882D
> #define GL_DRAW_BUFFER9_ATI               0x882E
> #define GL_DRAW_BUFFER10_ATI              0x882F
> #define GL_DRAW_BUFFER11_ATI              0x8830
> #define GL_DRAW_BUFFER12_ATI              0x8831
> #define GL_DRAW_BUFFER13_ATI              0x8832
> #define GL_DRAW_BUFFER14_ATI              0x8833
> #define GL_DRAW_BUFFER15_ATI              0x8834
> #endif
> 
> #ifndef GL_ATI_pixel_format_float
> #define GL_TYPE_RGBA_FLOAT_ATI            0x8820
> #define GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI 0x8835
> #endif
> 
> #ifndef GL_ATI_texture_env_combine3
> #define GL_MODULATE_ADD_ATI               0x8744
> #define GL_MODULATE_SIGNED_ADD_ATI        0x8745
> #define GL_MODULATE_SUBTRACT_ATI          0x8746
> #endif
> 
> #ifndef GL_ATI_texture_float
> #define GL_RGBA_FLOAT32_ATI               0x8814
> #define GL_RGB_FLOAT32_ATI                0x8815
> #define GL_ALPHA_FLOAT32_ATI              0x8816
> #define GL_INTENSITY_FLOAT32_ATI          0x8817
> #define GL_LUMINANCE_FLOAT32_ATI          0x8818
> #define GL_LUMINANCE_ALPHA_FLOAT32_ATI    0x8819
> #define GL_RGBA_FLOAT16_ATI               0x881A
> #define GL_RGB_FLOAT16_ATI                0x881B
> #define GL_ALPHA_FLOAT16_ATI              0x881C
> #define GL_INTENSITY_FLOAT16_ATI          0x881D
> #define GL_LUMINANCE_FLOAT16_ATI          0x881E
> #define GL_LUMINANCE_ALPHA_FLOAT16_ATI    0x881F
> #endif
> 
> #ifndef GL_NV_float_buffer
> #define GL_FLOAT_R_NV                     0x8880
> #define GL_FLOAT_RG_NV                    0x8881
> #define GL_FLOAT_RGB_NV                   0x8882
> #define GL_FLOAT_RGBA_NV                  0x8883
> #define GL_FLOAT_R16_NV                   0x8884
> #define GL_FLOAT_R32_NV                   0x8885
> #define GL_FLOAT_RG16_NV                  0x8886
> #define GL_FLOAT_RG32_NV                  0x8887
> #define GL_FLOAT_RGB16_NV                 0x8888
> #define GL_FLOAT_RGB32_NV                 0x8889
> #define GL_FLOAT_RGBA16_NV                0x888A
> #define GL_FLOAT_RGBA32_NV                0x888B
> #define GL_TEXTURE_FLOAT_COMPONENTS_NV    0x888C
> #define GL_FLOAT_CLEAR_COLOR_VALUE_NV     0x888D
> #define GL_FLOAT_RGBA_MODE_NV             0x888E
> #endif
> 
> #ifndef GL_NV_fragment_program
> #define GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV 0x8868
> #define GL_FRAGMENT_PROGRAM_NV            0x8870
> #define GL_MAX_TEXTURE_COORDS_NV          0x8871
> #define GL_MAX_TEXTURE_IMAGE_UNITS_NV     0x8872
> #define GL_FRAGMENT_PROGRAM_BINDING_NV    0x8873
> #define GL_PROGRAM_ERROR_STRING_NV        0x8874
> #endif
> 
> #ifndef GL_NV_half_float
> #define GL_HALF_FLOAT_NV                  0x140B
> #endif
> 
> #ifndef GL_NV_pixel_data_range
> #define GL_WRITE_PIXEL_DATA_RANGE_NV      0x8878
> #define GL_READ_PIXEL_DATA_RANGE_NV       0x8879
> #define GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV 0x887A
> #define GL_READ_PIXEL_DATA_RANGE_LENGTH_NV 0x887B
> #define GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV 0x887C
> #define GL_READ_PIXEL_DATA_RANGE_POINTER_NV 0x887D
> #endif
> 
> #ifndef GL_NV_primitive_restart
> #define GL_PRIMITIVE_RESTART_NV           0x8558
> #define GL_PRIMITIVE_RESTART_INDEX_NV     0x8559
> #endif
> 
> #ifndef GL_NV_texture_expand_normal
> #define GL_TEXTURE_UNSIGNED_REMAP_MODE_NV 0x888F
> #endif
> 
> #ifndef GL_NV_vertex_program2
> #endif
> 
> #ifndef GL_ATI_map_object_buffer
> #endif
> 
> #ifndef GL_ATI_separate_stencil
> #define GL_STENCIL_BACK_FUNC_ATI          0x8800
> #define GL_STENCIL_BACK_FAIL_ATI          0x8801
> #define GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI 0x8802
> #define GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI 0x8803
> #endif
> 
> #ifndef GL_ATI_vertex_attrib_array_object
> #endif
> 
> #ifndef GL_OES_read_format
> #define GL_IMPLEMENTATION_COLOR_READ_TYPE_OES 0x8B9A
> #define GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES 0x8B9B
> #endif
> 
> #ifndef GL_EXT_depth_bounds_test
> #define GL_DEPTH_BOUNDS_TEST_EXT          0x8890
> #define GL_DEPTH_BOUNDS_EXT               0x8891
> #endif
> 
> #ifndef GL_EXT_texture_mirror_clamp
> #define GL_MIRROR_CLAMP_EXT               0x8742
> #define GL_MIRROR_CLAMP_TO_EDGE_EXT       0x8743
> #define GL_MIRROR_CLAMP_TO_BORDER_EXT     0x8912
> #endif
> 
> #ifndef GL_EXT_blend_equation_separate
> #define GL_BLEND_EQUATION_RGB_EXT         0x8009
> #define GL_BLEND_EQUATION_ALPHA_EXT       0x883D
> #endif
> 
> #ifndef GL_MESA_pack_invert
> #define GL_PACK_INVERT_MESA               0x8758
> #endif
> 
> #ifndef GL_MESA_ycbcr_texture
> #define GL_UNSIGNED_SHORT_8_8_MESA        0x85BA
> #define GL_UNSIGNED_SHORT_8_8_REV_MESA    0x85BB
> #define GL_YCBCR_MESA                     0x8757
> #endif
> 
> #ifndef GL_EXT_pixel_buffer_object
> #define GL_PIXEL_PACK_BUFFER_EXT          0x88EB
> #define GL_PIXEL_UNPACK_BUFFER_EXT        0x88EC
> #define GL_PIXEL_PACK_BUFFER_BINDING_EXT  0x88ED
> #define GL_PIXEL_UNPACK_BUFFER_BINDING_EXT 0x88EF
> #endif
> 
> #ifndef GL_NV_fragment_program_option
> #endif
> 
> #ifndef GL_NV_fragment_program2
> #define GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV 0x88F4
> #define GL_MAX_PROGRAM_CALL_DEPTH_NV      0x88F5
> #define GL_MAX_PROGRAM_IF_DEPTH_NV        0x88F6
> #define GL_MAX_PROGRAM_LOOP_DEPTH_NV      0x88F7
> #define GL_MAX_PROGRAM_LOOP_COUNT_NV      0x88F8
> #endif
> 
> #ifndef GL_NV_vertex_program2_option
> /* reuse GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV */
> /* reuse GL_MAX_PROGRAM_CALL_DEPTH_NV */
> #endif
> 
> #ifndef GL_NV_vertex_program3
> /* reuse GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB */
> #endif
> 
> #ifndef GL_EXT_framebuffer_object
> #define GL_INVALID_FRAMEBUFFER_OPERATION_EXT 0x0506
> #define GL_MAX_RENDERBUFFER_SIZE_EXT      0x84E8
> #define GL_FRAMEBUFFER_BINDING_EXT        0x8CA6
> #define GL_RENDERBUFFER_BINDING_EXT       0x8CA7
> #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT 0x8CD0
> #define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT 0x8CD1
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT 0x8CD2
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT 0x8CD3
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT 0x8CD4
> #define GL_FRAMEBUFFER_COMPLETE_EXT       0x8CD5
> #define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT 0x8CD6
> #define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT 0x8CD7
> #define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT 0x8CD9
> #define GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT 0x8CDA
> #define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT 0x8CDB
> #define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT 0x8CDC
> #define GL_FRAMEBUFFER_UNSUPPORTED_EXT    0x8CDD
> #define GL_MAX_COLOR_ATTACHMENTS_EXT      0x8CDF
> #define GL_COLOR_ATTACHMENT0_EXT          0x8CE0
> #define GL_COLOR_ATTACHMENT1_EXT          0x8CE1
> #define GL_COLOR_ATTACHMENT2_EXT          0x8CE2
> #define GL_COLOR_ATTACHMENT3_EXT          0x8CE3
> #define GL_COLOR_ATTACHMENT4_EXT          0x8CE4
> #define GL_COLOR_ATTACHMENT5_EXT          0x8CE5
> #define GL_COLOR_ATTACHMENT6_EXT          0x8CE6
> #define GL_COLOR_ATTACHMENT7_EXT          0x8CE7
> #define GL_COLOR_ATTACHMENT8_EXT          0x8CE8
> #define GL_COLOR_ATTACHMENT9_EXT          0x8CE9
> #define GL_COLOR_ATTACHMENT10_EXT         0x8CEA
> #define GL_COLOR_ATTACHMENT11_EXT         0x8CEB
> #define GL_COLOR_ATTACHMENT12_EXT         0x8CEC
> #define GL_COLOR_ATTACHMENT13_EXT         0x8CED
> #define GL_COLOR_ATTACHMENT14_EXT         0x8CEE
> #define GL_COLOR_ATTACHMENT15_EXT         0x8CEF
> #define GL_DEPTH_ATTACHMENT_EXT           0x8D00
> #define GL_STENCIL_ATTACHMENT_EXT         0x8D20
> #define GL_FRAMEBUFFER_EXT                0x8D40
> #define GL_RENDERBUFFER_EXT               0x8D41
> #define GL_RENDERBUFFER_WIDTH_EXT         0x8D42
> #define GL_RENDERBUFFER_HEIGHT_EXT        0x8D43
> #define GL_RENDERBUFFER_INTERNAL_FORMAT_EXT 0x8D44
> #define GL_STENCIL_INDEX1_EXT             0x8D46
> #define GL_STENCIL_INDEX4_EXT             0x8D47
> #define GL_STENCIL_INDEX8_EXT             0x8D48
> #define GL_STENCIL_INDEX16_EXT            0x8D49
> #define GL_RENDERBUFFER_RED_SIZE_EXT      0x8D50
> #define GL_RENDERBUFFER_GREEN_SIZE_EXT    0x8D51
> #define GL_RENDERBUFFER_BLUE_SIZE_EXT     0x8D52
> #define GL_RENDERBUFFER_ALPHA_SIZE_EXT    0x8D53
> #define GL_RENDERBUFFER_DEPTH_SIZE_EXT    0x8D54
> #define GL_RENDERBUFFER_STENCIL_SIZE_EXT  0x8D55
> #endif
> 
> #ifndef GL_GREMEDY_string_marker
> #endif
> 
> #ifndef GL_EXT_packed_depth_stencil
> #define GL_DEPTH_STENCIL_EXT              0x84F9
> #define GL_UNSIGNED_INT_24_8_EXT          0x84FA
> #define GL_DEPTH24_STENCIL8_EXT           0x88F0
> #define GL_TEXTURE_STENCIL_SIZE_EXT       0x88F1
> #endif
> 
> #ifndef GL_EXT_stencil_clear_tag
> #define GL_STENCIL_TAG_BITS_EXT           0x88F2
> #define GL_STENCIL_CLEAR_TAG_VALUE_EXT    0x88F3
> #endif
> 
> #ifndef GL_EXT_texture_sRGB
> #define GL_SRGB_EXT                       0x8C40
> #define GL_SRGB8_EXT                      0x8C41
> #define GL_SRGB_ALPHA_EXT                 0x8C42
> #define GL_SRGB8_ALPHA8_EXT               0x8C43
> #define GL_SLUMINANCE_ALPHA_EXT           0x8C44
> #define GL_SLUMINANCE8_ALPHA8_EXT         0x8C45
> #define GL_SLUMINANCE_EXT                 0x8C46
> #define GL_SLUMINANCE8_EXT                0x8C47
> #define GL_COMPRESSED_SRGB_EXT            0x8C48
> #define GL_COMPRESSED_SRGB_ALPHA_EXT      0x8C49
> #define GL_COMPRESSED_SLUMINANCE_EXT      0x8C4A
> #define GL_COMPRESSED_SLUMINANCE_ALPHA_EXT 0x8C4B
> #define GL_COMPRESSED_SRGB_S3TC_DXT1_EXT  0x8C4C
> #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT 0x8C4D
> #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT 0x8C4E
> #define GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT 0x8C4F
> #endif
> 
> #ifndef GL_EXT_framebuffer_blit
> #define GL_READ_FRAMEBUFFER_EXT           0x8CA8
> #define GL_DRAW_FRAMEBUFFER_EXT           0x8CA9
> #define GL_DRAW_FRAMEBUFFER_BINDING_EXT   GL_FRAMEBUFFER_BINDING_EXT
> #define GL_READ_FRAMEBUFFER_BINDING_EXT   0x8CAA
> #endif
> 
> #ifndef GL_EXT_framebuffer_multisample
> #define GL_RENDERBUFFER_SAMPLES_EXT       0x8CAB
> #define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT 0x8D56
> #define GL_MAX_SAMPLES_EXT                0x8D57
> #endif
> 
> #ifndef GL_MESAX_texture_stack
> #define GL_TEXTURE_1D_STACK_MESAX         0x8759
> #define GL_TEXTURE_2D_STACK_MESAX         0x875A
> #define GL_PROXY_TEXTURE_1D_STACK_MESAX   0x875B
> #define GL_PROXY_TEXTURE_2D_STACK_MESAX   0x875C
> #define GL_TEXTURE_1D_STACK_BINDING_MESAX 0x875D
> #define GL_TEXTURE_2D_STACK_BINDING_MESAX 0x875E
> #endif
> 
> #ifndef GL_EXT_timer_query
> #define GL_TIME_ELAPSED_EXT               0x88BF
> #endif
> 
> #ifndef GL_EXT_gpu_program_parameters
> #endif
> 
> #ifndef GL_APPLE_flush_buffer_range
> #define GL_BUFFER_SERIALIZED_MODIFY_APPLE 0x8A12
> #define GL_BUFFER_FLUSHING_UNMAP_APPLE    0x8A13
> #endif
> 
> #ifndef GL_NV_gpu_program4
> #define GL_MIN_PROGRAM_TEXEL_OFFSET_NV    0x8904
> #define GL_MAX_PROGRAM_TEXEL_OFFSET_NV    0x8905
> #define GL_PROGRAM_ATTRIB_COMPONENTS_NV   0x8906
> #define GL_PROGRAM_RESULT_COMPONENTS_NV   0x8907
> #define GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV 0x8908
> #define GL_MAX_PROGRAM_RESULT_COMPONENTS_NV 0x8909
> #define GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV 0x8DA5
> #define GL_MAX_PROGRAM_GENERIC_RESULTS_NV 0x8DA6
> #endif
> 
> #ifndef GL_NV_geometry_program4
> #define GL_LINES_ADJACENCY_EXT            0x000A
> #define GL_LINE_STRIP_ADJACENCY_EXT       0x000B
> #define GL_TRIANGLES_ADJACENCY_EXT        0x000C
> #define GL_TRIANGLE_STRIP_ADJACENCY_EXT   0x000D
> #define GL_GEOMETRY_PROGRAM_NV            0x8C26
> #define GL_MAX_PROGRAM_OUTPUT_VERTICES_NV 0x8C27
> #define GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV 0x8C28
> #define GL_GEOMETRY_VERTICES_OUT_EXT      0x8DDA
> #define GL_GEOMETRY_INPUT_TYPE_EXT        0x8DDB
> #define GL_GEOMETRY_OUTPUT_TYPE_EXT       0x8DDC
> #define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT 0x8C29
> #define GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT 0x8DA7
> #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT 0x8DA8
> #define GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT 0x8DA9
> #define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT 0x8CD4
> #define GL_PROGRAM_POINT_SIZE_EXT         0x8642
> #endif
> 
> #ifndef GL_EXT_geometry_shader4
> #define GL_GEOMETRY_SHADER_EXT            0x8DD9
> /* reuse GL_GEOMETRY_VERTICES_OUT_EXT */
> /* reuse GL_GEOMETRY_INPUT_TYPE_EXT */
> /* reuse GL_GEOMETRY_OUTPUT_TYPE_EXT */
> /* reuse GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT */
> #define GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT 0x8DDD
> #define GL_MAX_VERTEX_VARYING_COMPONENTS_EXT 0x8DDE
> #define GL_MAX_VARYING_COMPONENTS_EXT     0x8B4B
> #define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT 0x8DDF
> #define GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT 0x8DE0
> #define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT 0x8DE1
> /* reuse GL_LINES_ADJACENCY_EXT */
> /* reuse GL_LINE_STRIP_ADJACENCY_EXT */
> /* reuse GL_TRIANGLES_ADJACENCY_EXT */
> /* reuse GL_TRIANGLE_STRIP_ADJACENCY_EXT */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT */
> /* reuse GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT */
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
> /* reuse GL_PROGRAM_POINT_SIZE_EXT */
> #endif
> 
> #ifndef GL_NV_vertex_program4
> #define GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV 0x88FD
> #endif
> 
> #ifndef GL_EXT_gpu_shader4
> #define GL_SAMPLER_1D_ARRAY_EXT           0x8DC0
> #define GL_SAMPLER_2D_ARRAY_EXT           0x8DC1
> #define GL_SAMPLER_BUFFER_EXT             0x8DC2
> #define GL_SAMPLER_1D_ARRAY_SHADOW_EXT    0x8DC3
> #define GL_SAMPLER_2D_ARRAY_SHADOW_EXT    0x8DC4
> #define GL_SAMPLER_CUBE_SHADOW_EXT        0x8DC5
> #define GL_UNSIGNED_INT_VEC2_EXT          0x8DC6
> #define GL_UNSIGNED_INT_VEC3_EXT          0x8DC7
> #define GL_UNSIGNED_INT_VEC4_EXT          0x8DC8
> #define GL_INT_SAMPLER_1D_EXT             0x8DC9
> #define GL_INT_SAMPLER_2D_EXT             0x8DCA
> #define GL_INT_SAMPLER_3D_EXT             0x8DCB
> #define GL_INT_SAMPLER_CUBE_EXT           0x8DCC
> #define GL_INT_SAMPLER_2D_RECT_EXT        0x8DCD
> #define GL_INT_SAMPLER_1D_ARRAY_EXT       0x8DCE
> #define GL_INT_SAMPLER_2D_ARRAY_EXT       0x8DCF
> #define GL_INT_SAMPLER_BUFFER_EXT         0x8DD0
> #define GL_UNSIGNED_INT_SAMPLER_1D_EXT    0x8DD1
> #define GL_UNSIGNED_INT_SAMPLER_2D_EXT    0x8DD2
> #define GL_UNSIGNED_INT_SAMPLER_3D_EXT    0x8DD3
> #define GL_UNSIGNED_INT_SAMPLER_CUBE_EXT  0x8DD4
> #define GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT 0x8DD5
> #define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT 0x8DD6
> #define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT 0x8DD7
> #define GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT 0x8DD8
> #endif
> 
> #ifndef GL_EXT_draw_instanced
> #endif
> 
> #ifndef GL_EXT_packed_float
> #define GL_R11F_G11F_B10F_EXT             0x8C3A
> #define GL_UNSIGNED_INT_10F_11F_11F_REV_EXT 0x8C3B
> #define GL_RGBA_SIGNED_COMPONENTS_EXT     0x8C3C
> #endif
> 
> #ifndef GL_EXT_texture_array
> #define GL_TEXTURE_1D_ARRAY_EXT           0x8C18
> #define GL_PROXY_TEXTURE_1D_ARRAY_EXT     0x8C19
> #define GL_TEXTURE_2D_ARRAY_EXT           0x8C1A
> #define GL_PROXY_TEXTURE_2D_ARRAY_EXT     0x8C1B
> #define GL_TEXTURE_BINDING_1D_ARRAY_EXT   0x8C1C
> #define GL_TEXTURE_BINDING_2D_ARRAY_EXT   0x8C1D
> #define GL_MAX_ARRAY_TEXTURE_LAYERS_EXT   0x88FF
> #define GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT 0x884E
> /* reuse GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT */
> #endif
> 
> #ifndef GL_EXT_texture_buffer_object
> #define GL_TEXTURE_BUFFER_EXT             0x8C2A
> #define GL_MAX_TEXTURE_BUFFER_SIZE_EXT    0x8C2B
> #define GL_TEXTURE_BINDING_BUFFER_EXT     0x8C2C
> #define GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT 0x8C2D
> #define GL_TEXTURE_BUFFER_FORMAT_EXT      0x8C2E
> #endif
> 
> #ifndef GL_EXT_texture_compression_latc
> #define GL_COMPRESSED_LUMINANCE_LATC1_EXT 0x8C70
> #define GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT 0x8C71
> #define GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT 0x8C72
> #define GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT 0x8C73
> #endif
> 
> #ifndef GL_EXT_texture_compression_rgtc
> #define GL_COMPRESSED_RED_RGTC1_EXT       0x8DBB
> #define GL_COMPRESSED_SIGNED_RED_RGTC1_EXT 0x8DBC
> #define GL_COMPRESSED_RED_GREEN_RGTC2_EXT 0x8DBD
> #define GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT 0x8DBE
> #endif
> 
> #ifndef GL_EXT_texture_shared_exponent
> #define GL_RGB9_E5_EXT                    0x8C3D
> #define GL_UNSIGNED_INT_5_9_9_9_REV_EXT   0x8C3E
> #define GL_TEXTURE_SHARED_SIZE_EXT        0x8C3F
> #endif
> 
> #ifndef GL_NV_depth_buffer_float
> #define GL_DEPTH_COMPONENT32F_NV          0x8DAB
> #define GL_DEPTH32F_STENCIL8_NV           0x8DAC
> #define GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV 0x8DAD
> #define GL_DEPTH_BUFFER_FLOAT_MODE_NV     0x8DAF
> #endif
> 
> #ifndef GL_NV_fragment_program4
> #endif
> 
> #ifndef GL_NV_framebuffer_multisample_coverage
> #define GL_RENDERBUFFER_COVERAGE_SAMPLES_NV 0x8CAB
> #define GL_RENDERBUFFER_COLOR_SAMPLES_NV  0x8E10
> #define GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV 0x8E11
> #define GL_MULTISAMPLE_COVERAGE_MODES_NV  0x8E12
> #endif
> 
> #ifndef GL_EXT_framebuffer_sRGB
> #define GL_FRAMEBUFFER_SRGB_EXT           0x8DB9
> #define GL_FRAMEBUFFER_SRGB_CAPABLE_EXT   0x8DBA
> #endif
> 
> #ifndef GL_NV_geometry_shader4
> #endif
> 
> #ifndef GL_NV_parameter_buffer_object
> #define GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV 0x8DA0
> #define GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV 0x8DA1
> #define GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV 0x8DA2
> #define GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV 0x8DA3
> #define GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV 0x8DA4
> #endif
> 
> #ifndef GL_EXT_draw_buffers2
> #endif
> 
> #ifndef GL_NV_transform_feedback
> #define GL_BACK_PRIMARY_COLOR_NV          0x8C77
> #define GL_BACK_SECONDARY_COLOR_NV        0x8C78
> #define GL_TEXTURE_COORD_NV               0x8C79
> #define GL_CLIP_DISTANCE_NV               0x8C7A
> #define GL_VERTEX_ID_NV                   0x8C7B
> #define GL_PRIMITIVE_ID_NV                0x8C7C
> #define GL_GENERIC_ATTRIB_NV              0x8C7D
> #define GL_TRANSFORM_FEEDBACK_ATTRIBS_NV  0x8C7E
> #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV 0x8C7F
> #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV 0x8C80
> #define GL_ACTIVE_VARYINGS_NV             0x8C81
> #define GL_ACTIVE_VARYING_MAX_LENGTH_NV   0x8C82
> #define GL_TRANSFORM_FEEDBACK_VARYINGS_NV 0x8C83
> #define GL_TRANSFORM_FEEDBACK_BUFFER_START_NV 0x8C84
> #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV 0x8C85
> #define GL_TRANSFORM_FEEDBACK_RECORD_NV   0x8C86
> #define GL_PRIMITIVES_GENERATED_NV        0x8C87
> #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV 0x8C88
> #define GL_RASTERIZER_DISCARD_NV          0x8C89
> #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV 0x8C8A
> #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV 0x8C8B
> #define GL_INTERLEAVED_ATTRIBS_NV         0x8C8C
> #define GL_SEPARATE_ATTRIBS_NV            0x8C8D
> #define GL_TRANSFORM_FEEDBACK_BUFFER_NV   0x8C8E
> #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV 0x8C8F
> #define GL_LAYER_NV                       0x8DAA
> #define GL_NEXT_BUFFER_NV                 -2
> #define GL_SKIP_COMPONENTS4_NV            -3
> #define GL_SKIP_COMPONENTS3_NV            -4
> #define GL_SKIP_COMPONENTS2_NV            -5
> #define GL_SKIP_COMPONENTS1_NV            -6
> #endif
> 
> #ifndef GL_EXT_bindable_uniform
> #define GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT 0x8DE2
> #define GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT 0x8DE3
> #define GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT 0x8DE4
> #define GL_MAX_BINDABLE_UNIFORM_SIZE_EXT  0x8DED
> #define GL_UNIFORM_BUFFER_EXT             0x8DEE
> #define GL_UNIFORM_BUFFER_BINDING_EXT     0x8DEF
> #endif
> 
> #ifndef GL_EXT_texture_integer
> #define GL_RGBA32UI_EXT                   0x8D70
> #define GL_RGB32UI_EXT                    0x8D71
> #define GL_ALPHA32UI_EXT                  0x8D72
> #define GL_INTENSITY32UI_EXT              0x8D73
> #define GL_LUMINANCE32UI_EXT              0x8D74
> #define GL_LUMINANCE_ALPHA32UI_EXT        0x8D75
> #define GL_RGBA16UI_EXT                   0x8D76
> #define GL_RGB16UI_EXT                    0x8D77
> #define GL_ALPHA16UI_EXT                  0x8D78
> #define GL_INTENSITY16UI_EXT              0x8D79
> #define GL_LUMINANCE16UI_EXT              0x8D7A
> #define GL_LUMINANCE_ALPHA16UI_EXT        0x8D7B
> #define GL_RGBA8UI_EXT                    0x8D7C
> #define GL_RGB8UI_EXT                     0x8D7D
> #define GL_ALPHA8UI_EXT                   0x8D7E
> #define GL_INTENSITY8UI_EXT               0x8D7F
> #define GL_LUMINANCE8UI_EXT               0x8D80
> #define GL_LUMINANCE_ALPHA8UI_EXT         0x8D81
> #define GL_RGBA32I_EXT                    0x8D82
> #define GL_RGB32I_EXT                     0x8D83
> #define GL_ALPHA32I_EXT                   0x8D84
> #define GL_INTENSITY32I_EXT               0x8D85
> #define GL_LUMINANCE32I_EXT               0x8D86
> #define GL_LUMINANCE_ALPHA32I_EXT         0x8D87
> #define GL_RGBA16I_EXT                    0x8D88
> #define GL_RGB16I_EXT                     0x8D89
> #define GL_ALPHA16I_EXT                   0x8D8A
> #define GL_INTENSITY16I_EXT               0x8D8B
> #define GL_LUMINANCE16I_EXT               0x8D8C
> #define GL_LUMINANCE_ALPHA16I_EXT         0x8D8D
> #define GL_RGBA8I_EXT                     0x8D8E
> #define GL_RGB8I_EXT                      0x8D8F
> #define GL_ALPHA8I_EXT                    0x8D90
> #define GL_INTENSITY8I_EXT                0x8D91
> #define GL_LUMINANCE8I_EXT                0x8D92
> #define GL_LUMINANCE_ALPHA8I_EXT          0x8D93
> #define GL_RED_INTEGER_EXT                0x8D94
> #define GL_GREEN_INTEGER_EXT              0x8D95
> #define GL_BLUE_INTEGER_EXT               0x8D96
> #define GL_ALPHA_INTEGER_EXT              0x8D97
> #define GL_RGB_INTEGER_EXT                0x8D98
> #define GL_RGBA_INTEGER_EXT               0x8D99
> #define GL_BGR_INTEGER_EXT                0x8D9A
> #define GL_BGRA_INTEGER_EXT               0x8D9B
> #define GL_LUMINANCE_INTEGER_EXT          0x8D9C
> #define GL_LUMINANCE_ALPHA_INTEGER_EXT    0x8D9D
> #define GL_RGBA_INTEGER_MODE_EXT          0x8D9E
> #endif
> 
> #ifndef GL_GREMEDY_frame_terminator
> #endif
> 
> #ifndef GL_NV_conditional_render
> #define GL_QUERY_WAIT_NV                  0x8E13
> #define GL_QUERY_NO_WAIT_NV               0x8E14
> #define GL_QUERY_BY_REGION_WAIT_NV        0x8E15
> #define GL_QUERY_BY_REGION_NO_WAIT_NV     0x8E16
> #endif
> 
> #ifndef GL_NV_present_video
> #define GL_FRAME_NV                       0x8E26
> #define GL_FIELDS_NV                      0x8E27
> #define GL_CURRENT_TIME_NV                0x8E28
> #define GL_NUM_FILL_STREAMS_NV            0x8E29
> #define GL_PRESENT_TIME_NV                0x8E2A
> #define GL_PRESENT_DURATION_NV            0x8E2B
> #endif
> 
> #ifndef GL_EXT_transform_feedback
> #define GL_TRANSFORM_FEEDBACK_BUFFER_EXT  0x8C8E
> #define GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT 0x8C84
> #define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT 0x8C85
> #define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT 0x8C8F
> #define GL_INTERLEAVED_ATTRIBS_EXT        0x8C8C
> #define GL_SEPARATE_ATTRIBS_EXT           0x8C8D
> #define GL_PRIMITIVES_GENERATED_EXT       0x8C87
> #define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT 0x8C88
> #define GL_RASTERIZER_DISCARD_EXT         0x8C89
> #define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT 0x8C8A
> #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT 0x8C8B
> #define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT 0x8C80
> #define GL_TRANSFORM_FEEDBACK_VARYINGS_EXT 0x8C83
> #define GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT 0x8C7F
> #define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT 0x8C76
> #endif
> 
> #ifndef GL_EXT_direct_state_access
> #define GL_PROGRAM_MATRIX_EXT             0x8E2D
> #define GL_TRANSPOSE_PROGRAM_MATRIX_EXT   0x8E2E
> #define GL_PROGRAM_MATRIX_STACK_DEPTH_EXT 0x8E2F
> #endif
> 
> #ifndef GL_EXT_vertex_array_bgra
> /* reuse GL_BGRA */
> #endif
> 
> #ifndef GL_EXT_texture_swizzle
> #define GL_TEXTURE_SWIZZLE_R_EXT          0x8E42
> #define GL_TEXTURE_SWIZZLE_G_EXT          0x8E43
> #define GL_TEXTURE_SWIZZLE_B_EXT          0x8E44
> #define GL_TEXTURE_SWIZZLE_A_EXT          0x8E45
> #define GL_TEXTURE_SWIZZLE_RGBA_EXT       0x8E46
> #endif
> 
> #ifndef GL_NV_explicit_multisample
> #define GL_SAMPLE_POSITION_NV             0x8E50
> #define GL_SAMPLE_MASK_NV                 0x8E51
> #define GL_SAMPLE_MASK_VALUE_NV           0x8E52
> #define GL_TEXTURE_BINDING_RENDERBUFFER_NV 0x8E53
> #define GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV 0x8E54
> #define GL_TEXTURE_RENDERBUFFER_NV        0x8E55
> #define GL_SAMPLER_RENDERBUFFER_NV        0x8E56
> #define GL_INT_SAMPLER_RENDERBUFFER_NV    0x8E57
> #define GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV 0x8E58
> #define GL_MAX_SAMPLE_MASK_WORDS_NV       0x8E59
> #endif
> 
> #ifndef GL_NV_transform_feedback2
> #define GL_TRANSFORM_FEEDBACK_NV          0x8E22
> #define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV 0x8E23
> #define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV 0x8E24
> #define GL_TRANSFORM_FEEDBACK_BINDING_NV  0x8E25
> #endif
> 
> #ifndef GL_ATI_meminfo
> #define GL_VBO_FREE_MEMORY_ATI            0x87FB
> #define GL_TEXTURE_FREE_MEMORY_ATI        0x87FC
> #define GL_RENDERBUFFER_FREE_MEMORY_ATI   0x87FD
> #endif
> 
> #ifndef GL_AMD_performance_monitor
> #define GL_COUNTER_TYPE_AMD               0x8BC0
> #define GL_COUNTER_RANGE_AMD              0x8BC1
> #define GL_UNSIGNED_INT64_AMD             0x8BC2
> #define GL_PERCENTAGE_AMD                 0x8BC3
> #define GL_PERFMON_RESULT_AVAILABLE_AMD   0x8BC4
> #define GL_PERFMON_RESULT_SIZE_AMD        0x8BC5
> #define GL_PERFMON_RESULT_AMD             0x8BC6
> #endif
> 
> #ifndef GL_AMD_texture_texture4
> #endif
> 
> #ifndef GL_AMD_vertex_shader_tesselator
> #define GL_SAMPLER_BUFFER_AMD             0x9001
> #define GL_INT_SAMPLER_BUFFER_AMD         0x9002
> #define GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD 0x9003
> #define GL_TESSELLATION_MODE_AMD          0x9004
> #define GL_TESSELLATION_FACTOR_AMD        0x9005
> #define GL_DISCRETE_AMD                   0x9006
> #define GL_CONTINUOUS_AMD                 0x9007
> #endif
> 
> #ifndef GL_EXT_provoking_vertex
> #define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT 0x8E4C
> #define GL_FIRST_VERTEX_CONVENTION_EXT    0x8E4D
> #define GL_LAST_VERTEX_CONVENTION_EXT     0x8E4E
> #define GL_PROVOKING_VERTEX_EXT           0x8E4F
> #endif
> 
> #ifndef GL_EXT_texture_snorm
> #define GL_ALPHA_SNORM                    0x9010
> #define GL_LUMINANCE_SNORM                0x9011
> #define GL_LUMINANCE_ALPHA_SNORM          0x9012
> #define GL_INTENSITY_SNORM                0x9013
> #define GL_ALPHA8_SNORM                   0x9014
> #define GL_LUMINANCE8_SNORM               0x9015
> #define GL_LUMINANCE8_ALPHA8_SNORM        0x9016
> #define GL_INTENSITY8_SNORM               0x9017
> #define GL_ALPHA16_SNORM                  0x9018
> #define GL_LUMINANCE16_SNORM              0x9019
> #define GL_LUMINANCE16_ALPHA16_SNORM      0x901A
> #define GL_INTENSITY16_SNORM              0x901B
> /* reuse GL_RED_SNORM */
> /* reuse GL_RG_SNORM */
> /* reuse GL_RGB_SNORM */
> /* reuse GL_RGBA_SNORM */
> /* reuse GL_R8_SNORM */
> /* reuse GL_RG8_SNORM */
> /* reuse GL_RGB8_SNORM */
> /* reuse GL_RGBA8_SNORM */
> /* reuse GL_R16_SNORM */
> /* reuse GL_RG16_SNORM */
> /* reuse GL_RGB16_SNORM */
> /* reuse GL_RGBA16_SNORM */
> /* reuse GL_SIGNED_NORMALIZED */
> #endif
> 
> #ifndef GL_AMD_draw_buffers_blend
> #endif
> 
> #ifndef GL_APPLE_texture_range
> #define GL_TEXTURE_RANGE_LENGTH_APPLE     0x85B7
> #define GL_TEXTURE_RANGE_POINTER_APPLE    0x85B8
> #define GL_TEXTURE_STORAGE_HINT_APPLE     0x85BC
> #define GL_STORAGE_PRIVATE_APPLE          0x85BD
> /* reuse GL_STORAGE_CACHED_APPLE */
> /* reuse GL_STORAGE_SHARED_APPLE */
> #endif
> 
> #ifndef GL_APPLE_float_pixels
> #define GL_HALF_APPLE                     0x140B
> #define GL_RGBA_FLOAT32_APPLE             0x8814
> #define GL_RGB_FLOAT32_APPLE              0x8815
> #define GL_ALPHA_FLOAT32_APPLE            0x8816
> #define GL_INTENSITY_FLOAT32_APPLE        0x8817
> #define GL_LUMINANCE_FLOAT32_APPLE        0x8818
> #define GL_LUMINANCE_ALPHA_FLOAT32_APPLE  0x8819
> #define GL_RGBA_FLOAT16_APPLE             0x881A
> #define GL_RGB_FLOAT16_APPLE              0x881B
> #define GL_ALPHA_FLOAT16_APPLE            0x881C
> #define GL_INTENSITY_FLOAT16_APPLE        0x881D
> #define GL_LUMINANCE_FLOAT16_APPLE        0x881E
> #define GL_LUMINANCE_ALPHA_FLOAT16_APPLE  0x881F
> #define GL_COLOR_FLOAT_APPLE              0x8A0F
> #endif
> 
> #ifndef GL_APPLE_vertex_program_evaluators
> #define GL_VERTEX_ATTRIB_MAP1_APPLE       0x8A00
> #define GL_VERTEX_ATTRIB_MAP2_APPLE       0x8A01
> #define GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE  0x8A02
> #define GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE 0x8A03
> #define GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE 0x8A04
> #define GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE 0x8A05
> #define GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE  0x8A06
> #define GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE 0x8A07
> #define GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE 0x8A08
> #define GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE 0x8A09
> #endif
> 
> #ifndef GL_APPLE_aux_depth_stencil
> #define GL_AUX_DEPTH_STENCIL_APPLE        0x8A14
> #endif
> 
> #ifndef GL_APPLE_object_purgeable
> #define GL_BUFFER_OBJECT_APPLE            0x85B3
> #define GL_RELEASED_APPLE                 0x8A19
> #define GL_VOLATILE_APPLE                 0x8A1A
> #define GL_RETAINED_APPLE                 0x8A1B
> #define GL_UNDEFINED_APPLE                0x8A1C
> #define GL_PURGEABLE_APPLE                0x8A1D
> #endif
> 
> #ifndef GL_APPLE_row_bytes
> #define GL_PACK_ROW_BYTES_APPLE           0x8A15
> #define GL_UNPACK_ROW_BYTES_APPLE         0x8A16
> #endif
> 
> #ifndef GL_APPLE_rgb_422
> #define GL_RGB_422_APPLE                  0x8A1F
> /* reuse GL_UNSIGNED_SHORT_8_8_APPLE */
> /* reuse GL_UNSIGNED_SHORT_8_8_REV_APPLE */
> #endif
> 
> #ifndef GL_NV_video_capture
> #define GL_VIDEO_BUFFER_NV                0x9020
> #define GL_VIDEO_BUFFER_BINDING_NV        0x9021
> #define GL_FIELD_UPPER_NV                 0x9022
> #define GL_FIELD_LOWER_NV                 0x9023
> #define GL_NUM_VIDEO_CAPTURE_STREAMS_NV   0x9024
> #define GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV 0x9025
> #define GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV 0x9026
> #define GL_LAST_VIDEO_CAPTURE_STATUS_NV   0x9027
> #define GL_VIDEO_BUFFER_PITCH_NV          0x9028
> #define GL_VIDEO_COLOR_CONVERSION_MATRIX_NV 0x9029
> #define GL_VIDEO_COLOR_CONVERSION_MAX_NV  0x902A
> #define GL_VIDEO_COLOR_CONVERSION_MIN_NV  0x902B
> #define GL_VIDEO_COLOR_CONVERSION_OFFSET_NV 0x902C
> #define GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV 0x902D
> #define GL_PARTIAL_SUCCESS_NV             0x902E
> #define GL_SUCCESS_NV                     0x902F
> #define GL_FAILURE_NV                     0x9030
> #define GL_YCBYCR8_422_NV                 0x9031
> #define GL_YCBAYCR8A_4224_NV              0x9032
> #define GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV  0x9033
> #define GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV 0x9034
> #define GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV  0x9035
> #define GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV 0x9036
> #define GL_Z4Y12Z4CB12Z4CR12_444_NV       0x9037
> #define GL_VIDEO_CAPTURE_FRAME_WIDTH_NV   0x9038
> #define GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV  0x9039
> #define GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV 0x903A
> #define GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV 0x903B
> #define GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV 0x903C
> #endif
> 
> #ifndef GL_NV_copy_image
> #endif
> 
> #ifndef GL_EXT_separate_shader_objects
> #define GL_ACTIVE_PROGRAM_EXT             0x8B8D
> #endif
> 
> #ifndef GL_NV_parameter_buffer_object2
> #endif
> 
> #ifndef GL_NV_shader_buffer_load
> #define GL_BUFFER_GPU_ADDRESS_NV          0x8F1D
> #define GL_GPU_ADDRESS_NV                 0x8F34
> #define GL_MAX_SHADER_BUFFER_ADDRESS_NV   0x8F35
> #endif
> 
> #ifndef GL_NV_vertex_buffer_unified_memory
> #define GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV 0x8F1E
> #define GL_ELEMENT_ARRAY_UNIFIED_NV       0x8F1F
> #define GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV 0x8F20
> #define GL_VERTEX_ARRAY_ADDRESS_NV        0x8F21
> #define GL_NORMAL_ARRAY_ADDRESS_NV        0x8F22
> #define GL_COLOR_ARRAY_ADDRESS_NV         0x8F23
> #define GL_INDEX_ARRAY_ADDRESS_NV         0x8F24
> #define GL_TEXTURE_COORD_ARRAY_ADDRESS_NV 0x8F25
> #define GL_EDGE_FLAG_ARRAY_ADDRESS_NV     0x8F26
> #define GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV 0x8F27
> #define GL_FOG_COORD_ARRAY_ADDRESS_NV     0x8F28
> #define GL_ELEMENT_ARRAY_ADDRESS_NV       0x8F29
> #define GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV  0x8F2A
> #define GL_VERTEX_ARRAY_LENGTH_NV         0x8F2B
> #define GL_NORMAL_ARRAY_LENGTH_NV         0x8F2C
> #define GL_COLOR_ARRAY_LENGTH_NV          0x8F2D
> #define GL_INDEX_ARRAY_LENGTH_NV          0x8F2E
> #define GL_TEXTURE_COORD_ARRAY_LENGTH_NV  0x8F2F
> #define GL_EDGE_FLAG_ARRAY_LENGTH_NV      0x8F30
> #define GL_SECONDARY_COLOR_ARRAY_LENGTH_NV 0x8F31
> #define GL_FOG_COORD_ARRAY_LENGTH_NV      0x8F32
> #define GL_ELEMENT_ARRAY_LENGTH_NV        0x8F33
> #define GL_DRAW_INDIRECT_UNIFIED_NV       0x8F40
> #define GL_DRAW_INDIRECT_ADDRESS_NV       0x8F41
> #define GL_DRAW_INDIRECT_LENGTH_NV        0x8F42
> #endif
> 
> #ifndef GL_NV_texture_barrier
> #endif
> 
> #ifndef GL_AMD_shader_stencil_export
> #endif
> 
> #ifndef GL_AMD_seamless_cubemap_per_texture
> /* reuse GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB */
> #endif
> 
> #ifndef GL_AMD_conservative_depth
> #endif
> 
> #ifndef GL_EXT_shader_image_load_store
> #define GL_MAX_IMAGE_UNITS_EXT            0x8F38
> #define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT 0x8F39
> #define GL_IMAGE_BINDING_NAME_EXT         0x8F3A
> #define GL_IMAGE_BINDING_LEVEL_EXT        0x8F3B
> #define GL_IMAGE_BINDING_LAYERED_EXT      0x8F3C
> #define GL_IMAGE_BINDING_LAYER_EXT        0x8F3D
> #define GL_IMAGE_BINDING_ACCESS_EXT       0x8F3E
> #define GL_IMAGE_1D_EXT                   0x904C
> #define GL_IMAGE_2D_EXT                   0x904D
> #define GL_IMAGE_3D_EXT                   0x904E
> #define GL_IMAGE_2D_RECT_EXT              0x904F
> #define GL_IMAGE_CUBE_EXT                 0x9050
> #define GL_IMAGE_BUFFER_EXT               0x9051
> #define GL_IMAGE_1D_ARRAY_EXT             0x9052
> #define GL_IMAGE_2D_ARRAY_EXT             0x9053
> #define GL_IMAGE_CUBE_MAP_ARRAY_EXT       0x9054
> #define GL_IMAGE_2D_MULTISAMPLE_EXT       0x9055
> #define GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9056
> #define GL_INT_IMAGE_1D_EXT               0x9057
> #define GL_INT_IMAGE_2D_EXT               0x9058
> #define GL_INT_IMAGE_3D_EXT               0x9059
> #define GL_INT_IMAGE_2D_RECT_EXT          0x905A
> #define GL_INT_IMAGE_CUBE_EXT             0x905B
> #define GL_INT_IMAGE_BUFFER_EXT           0x905C
> #define GL_INT_IMAGE_1D_ARRAY_EXT         0x905D
> #define GL_INT_IMAGE_2D_ARRAY_EXT         0x905E
> #define GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT   0x905F
> #define GL_INT_IMAGE_2D_MULTISAMPLE_EXT   0x9060
> #define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x9061
> #define GL_UNSIGNED_INT_IMAGE_1D_EXT      0x9062
> #define GL_UNSIGNED_INT_IMAGE_2D_EXT      0x9063
> #define GL_UNSIGNED_INT_IMAGE_3D_EXT      0x9064
> #define GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT 0x9065
> #define GL_UNSIGNED_INT_IMAGE_CUBE_EXT    0x9066
> #define GL_UNSIGNED_INT_IMAGE_BUFFER_EXT  0x9067
> #define GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT 0x9068
> #define GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT 0x9069
> #define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT 0x906A
> #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT 0x906B
> #define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT 0x906C
> #define GL_MAX_IMAGE_SAMPLES_EXT          0x906D
> #define GL_IMAGE_BINDING_FORMAT_EXT       0x906E
> #define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT 0x00000001
> #define GL_ELEMENT_ARRAY_BARRIER_BIT_EXT  0x00000002
> #define GL_UNIFORM_BARRIER_BIT_EXT        0x00000004
> #define GL_TEXTURE_FETCH_BARRIER_BIT_EXT  0x00000008
> #define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT 0x00000020
> #define GL_COMMAND_BARRIER_BIT_EXT        0x00000040
> #define GL_PIXEL_BUFFER_BARRIER_BIT_EXT   0x00000080
> #define GL_TEXTURE_UPDATE_BARRIER_BIT_EXT 0x00000100
> #define GL_BUFFER_UPDATE_BARRIER_BIT_EXT  0x00000200
> #define GL_FRAMEBUFFER_BARRIER_BIT_EXT    0x00000400
> #define GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT 0x00000800
> #define GL_ATOMIC_COUNTER_BARRIER_BIT_EXT 0x00001000
> #define GL_ALL_BARRIER_BITS_EXT           0xFFFFFFFF
> #endif
> 
> #ifndef GL_EXT_vertex_attrib_64bit
> /* reuse GL_DOUBLE */
> #define GL_DOUBLE_VEC2_EXT                0x8FFC
> #define GL_DOUBLE_VEC3_EXT                0x8FFD
> #define GL_DOUBLE_VEC4_EXT                0x8FFE
> #define GL_DOUBLE_MAT2_EXT                0x8F46
> #define GL_DOUBLE_MAT3_EXT                0x8F47
> #define GL_DOUBLE_MAT4_EXT                0x8F48
> #define GL_DOUBLE_MAT2x3_EXT              0x8F49
> #define GL_DOUBLE_MAT2x4_EXT              0x8F4A
> #define GL_DOUBLE_MAT3x2_EXT              0x8F4B
> #define GL_DOUBLE_MAT3x4_EXT              0x8F4C
> #define GL_DOUBLE_MAT4x2_EXT              0x8F4D
> #define GL_DOUBLE_MAT4x3_EXT              0x8F4E
> #endif
> 
> #ifndef GL_NV_gpu_program5
> #define GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV 0x8E5A
> #define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5B
> #define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV 0x8E5C
> #define GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV 0x8E5D
> #define GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV 0x8F44
> #define GL_MAX_PROGRAM_SUBROUTINE_NUM_NV  0x8F45
> #endif
> 
> #ifndef GL_NV_gpu_shader5
> #define GL_INT64_NV                       0x140E
> #define GL_UNSIGNED_INT64_NV              0x140F
> #define GL_INT8_NV                        0x8FE0
> #define GL_INT8_VEC2_NV                   0x8FE1
> #define GL_INT8_VEC3_NV                   0x8FE2
> #define GL_INT8_VEC4_NV                   0x8FE3
> #define GL_INT16_NV                       0x8FE4
> #define GL_INT16_VEC2_NV                  0x8FE5
> #define GL_INT16_VEC3_NV                  0x8FE6
> #define GL_INT16_VEC4_NV                  0x8FE7
> #define GL_INT64_VEC2_NV                  0x8FE9
> #define GL_INT64_VEC3_NV                  0x8FEA
> #define GL_INT64_VEC4_NV                  0x8FEB
> #define GL_UNSIGNED_INT8_NV               0x8FEC
> #define GL_UNSIGNED_INT8_VEC2_NV          0x8FED
> #define GL_UNSIGNED_INT8_VEC3_NV          0x8FEE
> #define GL_UNSIGNED_INT8_VEC4_NV          0x8FEF
> #define GL_UNSIGNED_INT16_NV              0x8FF0
> #define GL_UNSIGNED_INT16_VEC2_NV         0x8FF1
> #define GL_UNSIGNED_INT16_VEC3_NV         0x8FF2
> #define GL_UNSIGNED_INT16_VEC4_NV         0x8FF3
> #define GL_UNSIGNED_INT64_VEC2_NV         0x8FF5
> #define GL_UNSIGNED_INT64_VEC3_NV         0x8FF6
> #define GL_UNSIGNED_INT64_VEC4_NV         0x8FF7
> #define GL_FLOAT16_NV                     0x8FF8
> #define GL_FLOAT16_VEC2_NV                0x8FF9
> #define GL_FLOAT16_VEC3_NV                0x8FFA
> #define GL_FLOAT16_VEC4_NV                0x8FFB
> /* reuse GL_PATCHES */
> #endif
> 
> #ifndef GL_NV_shader_buffer_store
> #define GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV 0x00000010
> /* reuse GL_READ_WRITE */
> /* reuse GL_WRITE_ONLY */
> #endif
> 
> #ifndef GL_NV_tessellation_program5
> #define GL_MAX_PROGRAM_PATCH_ATTRIBS_NV   0x86D8
> #define GL_TESS_CONTROL_PROGRAM_NV        0x891E
> #define GL_TESS_EVALUATION_PROGRAM_NV     0x891F
> #define GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV 0x8C74
> #define GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV 0x8C75
> #endif
> 
> #ifndef GL_NV_vertex_attrib_integer_64bit
> /* reuse GL_INT64_NV */
> /* reuse GL_UNSIGNED_INT64_NV */
> #endif
> 
> #ifndef GL_NV_multisample_coverage
> #define GL_COVERAGE_SAMPLES_NV            0x80A9
> #define GL_COLOR_SAMPLES_NV               0x8E20
> #endif
> 
> #ifndef GL_AMD_name_gen_delete
> #define GL_DATA_BUFFER_AMD                0x9151
> #define GL_PERFORMANCE_MONITOR_AMD        0x9152
> #define GL_QUERY_OBJECT_AMD               0x9153
> #define GL_VERTEX_ARRAY_OBJECT_AMD        0x9154
> #define GL_SAMPLER_OBJECT_AMD             0x9155
> #endif
> 
> #ifndef GL_AMD_debug_output
> #define GL_MAX_DEBUG_LOGGED_MESSAGES_AMD  0x9144
> #define GL_DEBUG_LOGGED_MESSAGES_AMD      0x9145
> #define GL_DEBUG_SEVERITY_HIGH_AMD        0x9146
> #define GL_DEBUG_SEVERITY_MEDIUM_AMD      0x9147
> #define GL_DEBUG_SEVERITY_LOW_AMD         0x9148
> #define GL_DEBUG_CATEGORY_API_ERROR_AMD   0x9149
> #define GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD 0x914A
> #define GL_DEBUG_CATEGORY_DEPRECATION_AMD 0x914B
> #define GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD 0x914C
> #define GL_DEBUG_CATEGORY_PERFORMANCE_AMD 0x914D
> #define GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD 0x914E
> #define GL_DEBUG_CATEGORY_APPLICATION_AMD 0x914F
> #define GL_DEBUG_CATEGORY_OTHER_AMD       0x9150
> #endif
> 
> #ifndef GL_NV_vdpau_interop
> #define GL_SURFACE_STATE_NV               0x86EB
> #define GL_SURFACE_REGISTERED_NV          0x86FD
> #define GL_SURFACE_MAPPED_NV              0x8700
> #define GL_WRITE_DISCARD_NV               0x88BE
> #endif
> 
> #ifndef GL_AMD_transform_feedback3_lines_triangles
> #endif
> 
> 
> /*************************************************************/
> 
> #include <stddef.h>
> #ifndef GL_VERSION_2_0
> /* GL type for program/shader text */
> typedef char GLchar;
> #endif
> 
> #ifndef GL_VERSION_1_5
> /* GL types for handling large vertex buffer objects */
> #if defined(__APPLE__)
> typedef long GLintptr;
> typedef long GLsizeiptr;
> #else
> typedef ptrdiff_t GLintptr;
> typedef ptrdiff_t GLsizeiptr;
> #endif
> #endif
> 
> #ifndef GL_ARB_vertex_buffer_object
> /* GL types for handling large vertex buffer objects */
> #if defined(__APPLE__)
> typedef long GLintptrARB;
> typedef long GLsizeiptrARB;
> #else
> typedef ptrdiff_t GLintptrARB;
> typedef ptrdiff_t GLsizeiptrARB;
> #endif
> #endif
> 
> #ifndef GL_ARB_shader_objects
> /* GL types for program/shader text and shader object handles */
> typedef char GLcharARB;
> #if defined(__APPLE__)
> typedef void *GLhandleARB;
> #else
> typedef unsigned int GLhandleARB;
> #endif
> #endif
> 
> /* GL type for "half" precision (s10e5) float data in host memory */
> #ifndef GL_ARB_half_float_pixel
> typedef unsigned short GLhalfARB;
> #endif
> 
> #ifndef GL_NV_half_float
> typedef unsigned short GLhalfNV;
> #endif
> 
> #ifndef GLEXT_64_TYPES_DEFINED
> /* This code block is duplicated in glxext.h, so must be protected */
> #define GLEXT_64_TYPES_DEFINED
> /* Define int32_t, int64_t, and uint64_t types for UST/MSC */
> /* (as used in the GL_EXT_timer_query extension). */
> #if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
> #include <inttypes.h>
> #elif defined(__sun__) || defined(__digital__)
> #include <inttypes.h>
> #if defined(__STDC__)
> #if defined(__arch64__) || defined(_LP64)
> typedef long int int64_t;
> typedef unsigned long int uint64_t;
> #else
> typedef long long int int64_t;
> typedef unsigned long long int uint64_t;
> #endif /* __arch64__ */
> #endif /* __STDC__ */
> #elif defined( __VMS ) || defined(__sgi)
> #include <inttypes.h>
> #elif defined(__SCO__) || defined(__USLC__)
> #include <stdint.h>
> #elif defined(__UNIXOS2__) || defined(__SOL64__)
> typedef long int int32_t;
> typedef long long int int64_t;
> typedef unsigned long long int uint64_t;
> #elif defined(_WIN32) && defined(__GNUC__)
> #include <stdint.h>
> #elif defined(_WIN32)
> typedef __int32 int32_t;
> typedef __int64 int64_t;
> typedef unsigned __int64 uint64_t;
> #else
> /* Fallback if nothing above works */
> #include <inttypes.h>
> #endif
> #endif
> 
> #ifndef GL_EXT_timer_query
> typedef int64_t GLint64EXT;
> typedef uint64_t GLuint64EXT;
> #endif
> 
> #ifndef GL_ARB_sync
> typedef int64_t GLint64;
> typedef uint64_t GLuint64;
> typedef struct __GLsync *GLsync;
> #endif
> 
> #ifndef GL_ARB_cl_event
> /* These incomplete types let us declare types compatible with OpenCL's cl_context and cl_event */
> struct _cl_context;
> struct _cl_event;
> #endif
> 
> #ifndef GL_ARB_debug_output
> typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
> #endif
> 
> #ifndef GL_AMD_debug_output
> typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,GLvoid *userParam);
> #endif
> 
> #ifndef GL_NV_vdpau_interop
> typedef GLintptr GLvdpauSurfaceNV;
> #endif
> 
> #ifndef GL_VERSION_1_2
> #define GL_VERSION_1_2 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendColor (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
> GLAPI void APIENTRY glBlendEquation (GLenum mode);
> GLAPI void APIENTRY glDrawRangeElements (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
> GLAPI void APIENTRY glTexImage3D (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glCopyTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDCOLORPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
> typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);
> typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
> typedef void (APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> #endif
> 
> #ifndef GL_VERSION_1_2_DEPRECATED
> #define GL_VERSION_1_2_DEPRECATED 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorTable (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
> GLAPI void APIENTRY glColorTableParameterfv (GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glColorTableParameteriv (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glCopyColorTable (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glGetColorTable (GLenum target, GLenum format, GLenum type, GLvoid *table);
> GLAPI void APIENTRY glGetColorTableParameterfv (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetColorTableParameteriv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glColorSubTable (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
> GLAPI void APIENTRY glCopyColorSubTable (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glConvolutionFilter1D (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
> GLAPI void APIENTRY glConvolutionFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
> GLAPI void APIENTRY glConvolutionParameterf (GLenum target, GLenum pname, GLfloat params);
> GLAPI void APIENTRY glConvolutionParameterfv (GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glConvolutionParameteri (GLenum target, GLenum pname, GLint params);
> GLAPI void APIENTRY glConvolutionParameteriv (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glCopyConvolutionFilter1D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glCopyConvolutionFilter2D (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetConvolutionFilter (GLenum target, GLenum format, GLenum type, GLvoid *image);
> GLAPI void APIENTRY glGetConvolutionParameterfv (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetConvolutionParameteriv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetSeparableFilter (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
> GLAPI void APIENTRY glSeparableFilter2D (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
> GLAPI void APIENTRY glGetHistogram (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> GLAPI void APIENTRY glGetHistogramParameterfv (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetHistogramParameteriv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMinmax (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> GLAPI void APIENTRY glGetMinmaxParameterfv (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMinmaxParameteriv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glHistogram (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
> GLAPI void APIENTRY glMinmax (GLenum target, GLenum internalformat, GLboolean sink);
> GLAPI void APIENTRY glResetHistogram (GLenum target);
> GLAPI void APIENTRY glResetMinmax (GLenum target);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
> typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLCOPYCOLORTABLEPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
> typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat params);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIPROC) (GLenum target, GLenum pname, GLint params);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
> typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETSEPARABLEFILTERPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
> typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
> typedef void (APIENTRYP PFNGLGETHISTOGRAMPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMINMAXPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLHISTOGRAMPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
> typedef void (APIENTRYP PFNGLMINMAXPROC) (GLenum target, GLenum internalformat, GLboolean sink);
> typedef void (APIENTRYP PFNGLRESETHISTOGRAMPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLRESETMINMAXPROC) (GLenum target);
> #endif
> 
> #ifndef GL_VERSION_1_3
> #define GL_VERSION_1_3 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glActiveTexture (GLenum texture);
> GLAPI void APIENTRY glSampleCoverage (GLclampf value, GLboolean invert);
> GLAPI void APIENTRY glCompressedTexImage3D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexImage2D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexImage1D (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexSubImage3D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexSubImage2D (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexSubImage1D (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glGetCompressedTexImage (GLenum target, GLint level, GLvoid *img);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);
> typedef void (APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);
> #endif
> 
> #ifndef GL_VERSION_1_3_DEPRECATED
> #define GL_VERSION_1_3_DEPRECATED 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glClientActiveTexture (GLenum texture);
> GLAPI void APIENTRY glMultiTexCoord1d (GLenum target, GLdouble s);
> GLAPI void APIENTRY glMultiTexCoord1dv (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord1f (GLenum target, GLfloat s);
> GLAPI void APIENTRY glMultiTexCoord1fv (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord1i (GLenum target, GLint s);
> GLAPI void APIENTRY glMultiTexCoord1iv (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord1s (GLenum target, GLshort s);
> GLAPI void APIENTRY glMultiTexCoord1sv (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glMultiTexCoord2d (GLenum target, GLdouble s, GLdouble t);
> GLAPI void APIENTRY glMultiTexCoord2dv (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord2f (GLenum target, GLfloat s, GLfloat t);
> GLAPI void APIENTRY glMultiTexCoord2fv (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord2i (GLenum target, GLint s, GLint t);
> GLAPI void APIENTRY glMultiTexCoord2iv (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord2s (GLenum target, GLshort s, GLshort t);
> GLAPI void APIENTRY glMultiTexCoord2sv (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glMultiTexCoord3d (GLenum target, GLdouble s, GLdouble t, GLdouble r);
> GLAPI void APIENTRY glMultiTexCoord3dv (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord3f (GLenum target, GLfloat s, GLfloat t, GLfloat r);
> GLAPI void APIENTRY glMultiTexCoord3fv (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord3i (GLenum target, GLint s, GLint t, GLint r);
> GLAPI void APIENTRY glMultiTexCoord3iv (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord3s (GLenum target, GLshort s, GLshort t, GLshort r);
> GLAPI void APIENTRY glMultiTexCoord3sv (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glMultiTexCoord4d (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
> GLAPI void APIENTRY glMultiTexCoord4dv (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord4f (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
> GLAPI void APIENTRY glMultiTexCoord4fv (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord4i (GLenum target, GLint s, GLint t, GLint r, GLint q);
> GLAPI void APIENTRY glMultiTexCoord4iv (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord4s (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
> GLAPI void APIENTRY glMultiTexCoord4sv (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glLoadTransposeMatrixf (const GLfloat *m);
> GLAPI void APIENTRY glLoadTransposeMatrixd (const GLdouble *m);
> GLAPI void APIENTRY glMultTransposeMatrixf (const GLfloat *m);
> GLAPI void APIENTRY glMultTransposeMatrixd (const GLdouble *m);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREPROC) (GLenum texture);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1DPROC) (GLenum target, GLdouble s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1FPROC) (GLenum target, GLfloat s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1IPROC) (GLenum target, GLint s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1SPROC) (GLenum target, GLshort s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2DPROC) (GLenum target, GLdouble s, GLdouble t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2FPROC) (GLenum target, GLfloat s, GLfloat t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2IPROC) (GLenum target, GLint s, GLint t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2SPROC) (GLenum target, GLshort s, GLshort t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3IPROC) (GLenum target, GLint s, GLint t, GLint r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3SPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4DPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4FPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4IPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4SPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFPROC) (const GLfloat *m);
> typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDPROC) (const GLdouble *m);
> typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFPROC) (const GLfloat *m);
> typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDPROC) (const GLdouble *m);
> #endif
> 
> #ifndef GL_VERSION_1_4
> #define GL_VERSION_1_4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendFuncSeparate (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
> GLAPI void APIENTRY glMultiDrawArrays (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
> GLAPI void APIENTRY glMultiDrawElements (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
> GLAPI void APIENTRY glPointParameterf (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glPointParameterfv (GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glPointParameteri (GLenum pname, GLint param);
> GLAPI void APIENTRY glPointParameteriv (GLenum pname, const GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
> typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
> typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);
> #endif
> 
> #ifndef GL_VERSION_1_4_DEPRECATED
> #define GL_VERSION_1_4_DEPRECATED 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFogCoordf (GLfloat coord);
> GLAPI void APIENTRY glFogCoordfv (const GLfloat *coord);
> GLAPI void APIENTRY glFogCoordd (GLdouble coord);
> GLAPI void APIENTRY glFogCoorddv (const GLdouble *coord);
> GLAPI void APIENTRY glFogCoordPointer (GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glSecondaryColor3b (GLbyte red, GLbyte green, GLbyte blue);
> GLAPI void APIENTRY glSecondaryColor3bv (const GLbyte *v);
> GLAPI void APIENTRY glSecondaryColor3d (GLdouble red, GLdouble green, GLdouble blue);
> GLAPI void APIENTRY glSecondaryColor3dv (const GLdouble *v);
> GLAPI void APIENTRY glSecondaryColor3f (GLfloat red, GLfloat green, GLfloat blue);
> GLAPI void APIENTRY glSecondaryColor3fv (const GLfloat *v);
> GLAPI void APIENTRY glSecondaryColor3i (GLint red, GLint green, GLint blue);
> GLAPI void APIENTRY glSecondaryColor3iv (const GLint *v);
> GLAPI void APIENTRY glSecondaryColor3s (GLshort red, GLshort green, GLshort blue);
> GLAPI void APIENTRY glSecondaryColor3sv (const GLshort *v);
> GLAPI void APIENTRY glSecondaryColor3ub (GLubyte red, GLubyte green, GLubyte blue);
> GLAPI void APIENTRY glSecondaryColor3ubv (const GLubyte *v);
> GLAPI void APIENTRY glSecondaryColor3ui (GLuint red, GLuint green, GLuint blue);
> GLAPI void APIENTRY glSecondaryColor3uiv (const GLuint *v);
> GLAPI void APIENTRY glSecondaryColor3us (GLushort red, GLushort green, GLushort blue);
> GLAPI void APIENTRY glSecondaryColor3usv (const GLushort *v);
> GLAPI void APIENTRY glSecondaryColorPointer (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glWindowPos2d (GLdouble x, GLdouble y);
> GLAPI void APIENTRY glWindowPos2dv (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos2f (GLfloat x, GLfloat y);
> GLAPI void APIENTRY glWindowPos2fv (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos2i (GLint x, GLint y);
> GLAPI void APIENTRY glWindowPos2iv (const GLint *v);
> GLAPI void APIENTRY glWindowPos2s (GLshort x, GLshort y);
> GLAPI void APIENTRY glWindowPos2sv (const GLshort *v);
> GLAPI void APIENTRY glWindowPos3d (GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glWindowPos3dv (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos3f (GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glWindowPos3fv (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos3i (GLint x, GLint y, GLint z);
> GLAPI void APIENTRY glWindowPos3iv (const GLint *v);
> GLAPI void APIENTRY glWindowPos3s (GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glWindowPos3sv (const GLshort *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFOGCOORDFPROC) (GLfloat coord);
> typedef void (APIENTRYP PFNGLFOGCOORDFVPROC) (const GLfloat *coord);
> typedef void (APIENTRYP PFNGLFOGCOORDDPROC) (GLdouble coord);
> typedef void (APIENTRYP PFNGLFOGCOORDDVPROC) (const GLdouble *coord);
> typedef void (APIENTRYP PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2IVPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2SVPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3IVPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3SVPROC) (const GLshort *v);
> #endif
> 
> #ifndef GL_VERSION_1_5
> #define GL_VERSION_1_5 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGenQueries (GLsizei n, GLuint *ids);
> GLAPI void APIENTRY glDeleteQueries (GLsizei n, const GLuint *ids);
> GLAPI GLboolean APIENTRY glIsQuery (GLuint id);
> GLAPI void APIENTRY glBeginQuery (GLenum target, GLuint id);
> GLAPI void APIENTRY glEndQuery (GLenum target);
> GLAPI void APIENTRY glGetQueryiv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetQueryObjectiv (GLuint id, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetQueryObjectuiv (GLuint id, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glBindBuffer (GLenum target, GLuint buffer);
> GLAPI void APIENTRY glDeleteBuffers (GLsizei n, const GLuint *buffers);
> GLAPI void APIENTRY glGenBuffers (GLsizei n, GLuint *buffers);
> GLAPI GLboolean APIENTRY glIsBuffer (GLuint buffer);
> GLAPI void APIENTRY glBufferData (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
> GLAPI void APIENTRY glBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
> GLAPI void APIENTRY glGetBufferSubData (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
> GLAPI GLvoid* APIENTRY glMapBuffer (GLenum target, GLenum access);
> GLAPI GLboolean APIENTRY glUnmapBuffer (GLenum target);
> GLAPI void APIENTRY glGetBufferParameteriv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetBufferPointerv (GLenum target, GLenum pname, GLvoid* *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);
> typedef void (APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);
> typedef GLboolean (APIENTRYP PFNGLISQUERYPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);
> typedef void (APIENTRYP PFNGLENDQUERYPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);
> typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);
> typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);
> typedef GLboolean (APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer);
> typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const GLvoid *data, GLenum usage);
> typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const GLvoid *data);
> typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data);
> typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);
> typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, GLvoid* *params);
> #endif
> 
> #ifndef GL_VERSION_2_0
> #define GL_VERSION_2_0 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendEquationSeparate (GLenum modeRGB, GLenum modeAlpha);
> GLAPI void APIENTRY glDrawBuffers (GLsizei n, const GLenum *bufs);
> GLAPI void APIENTRY glStencilOpSeparate (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
> GLAPI void APIENTRY glStencilFuncSeparate (GLenum face, GLenum func, GLint ref, GLuint mask);
> GLAPI void APIENTRY glStencilMaskSeparate (GLenum face, GLuint mask);
> GLAPI void APIENTRY glAttachShader (GLuint program, GLuint shader);
> GLAPI void APIENTRY glBindAttribLocation (GLuint program, GLuint index, const GLchar *name);
> GLAPI void APIENTRY glCompileShader (GLuint shader);
> GLAPI GLuint APIENTRY glCreateProgram (void);
> GLAPI GLuint APIENTRY glCreateShader (GLenum type);
> GLAPI void APIENTRY glDeleteProgram (GLuint program);
> GLAPI void APIENTRY glDeleteShader (GLuint shader);
> GLAPI void APIENTRY glDetachShader (GLuint program, GLuint shader);
> GLAPI void APIENTRY glDisableVertexAttribArray (GLuint index);
> GLAPI void APIENTRY glEnableVertexAttribArray (GLuint index);
> GLAPI void APIENTRY glGetActiveAttrib (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
> GLAPI void APIENTRY glGetActiveUniform (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
> GLAPI void APIENTRY glGetAttachedShaders (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
> GLAPI GLint APIENTRY glGetAttribLocation (GLuint program, const GLchar *name);
> GLAPI void APIENTRY glGetProgramiv (GLuint program, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetProgramInfoLog (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
> GLAPI void APIENTRY glGetShaderiv (GLuint shader, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetShaderInfoLog (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
> GLAPI void APIENTRY glGetShaderSource (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
> GLAPI GLint APIENTRY glGetUniformLocation (GLuint program, const GLchar *name);
> GLAPI void APIENTRY glGetUniformfv (GLuint program, GLint location, GLfloat *params);
> GLAPI void APIENTRY glGetUniformiv (GLuint program, GLint location, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribdv (GLuint index, GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glGetVertexAttribfv (GLuint index, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetVertexAttribiv (GLuint index, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribPointerv (GLuint index, GLenum pname, GLvoid* *pointer);
> GLAPI GLboolean APIENTRY glIsProgram (GLuint program);
> GLAPI GLboolean APIENTRY glIsShader (GLuint shader);
> GLAPI void APIENTRY glLinkProgram (GLuint program);
> GLAPI void APIENTRY glShaderSource (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
> GLAPI void APIENTRY glUseProgram (GLuint program);
> GLAPI void APIENTRY glUniform1f (GLint location, GLfloat v0);
> GLAPI void APIENTRY glUniform2f (GLint location, GLfloat v0, GLfloat v1);
> GLAPI void APIENTRY glUniform3f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> GLAPI void APIENTRY glUniform4f (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> GLAPI void APIENTRY glUniform1i (GLint location, GLint v0);
> GLAPI void APIENTRY glUniform2i (GLint location, GLint v0, GLint v1);
> GLAPI void APIENTRY glUniform3i (GLint location, GLint v0, GLint v1, GLint v2);
> GLAPI void APIENTRY glUniform4i (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> GLAPI void APIENTRY glUniform1fv (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform2fv (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform3fv (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform4fv (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform1iv (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniform2iv (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniform3iv (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniform4iv (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniformMatrix2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glValidateProgram (GLuint program);
> GLAPI void APIENTRY glVertexAttrib1d (GLuint index, GLdouble x);
> GLAPI void APIENTRY glVertexAttrib1dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib1f (GLuint index, GLfloat x);
> GLAPI void APIENTRY glVertexAttrib1fv (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib1s (GLuint index, GLshort x);
> GLAPI void APIENTRY glVertexAttrib1sv (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib2d (GLuint index, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glVertexAttrib2dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib2f (GLuint index, GLfloat x, GLfloat y);
> GLAPI void APIENTRY glVertexAttrib2fv (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib2s (GLuint index, GLshort x, GLshort y);
> GLAPI void APIENTRY glVertexAttrib2sv (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glVertexAttrib3dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib3f (GLuint index, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glVertexAttrib3fv (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib3s (GLuint index, GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glVertexAttrib3sv (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4Nbv (GLuint index, const GLbyte *v);
> GLAPI void APIENTRY glVertexAttrib4Niv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttrib4Nsv (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4Nub (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
> GLAPI void APIENTRY glVertexAttrib4Nubv (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttrib4Nuiv (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttrib4Nusv (GLuint index, const GLushort *v);
> GLAPI void APIENTRY glVertexAttrib4bv (GLuint index, const GLbyte *v);
> GLAPI void APIENTRY glVertexAttrib4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glVertexAttrib4dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib4f (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glVertexAttrib4fv (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib4iv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttrib4s (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
> GLAPI void APIENTRY glVertexAttrib4sv (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4ubv (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttrib4uiv (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttrib4usv (GLuint index, const GLushort *v);
> GLAPI void APIENTRY glVertexAttribPointer (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);
> typedef void (APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);
> typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
> typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);
> typedef void (APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);
> typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);
> typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);
> typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);
> typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);
> typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);
> typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);
> typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);
> typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);
> typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);
> typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);
> typedef void (APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
> typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
> typedef void (APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj);
> typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);
> typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
> typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
> typedef void (APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
> typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);
> typedef void (APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
> typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);
> typedef GLboolean (APIENTRYP PFNGLISSHADERPROC) (GLuint shader);
> typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);
> typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar* *string, const GLint *length);
> typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);
> typedef void (APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);
> typedef void (APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);
> typedef void (APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> typedef void (APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);
> typedef void (APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);
> typedef void (APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);
> typedef void (APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> typedef void (APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_VERSION_2_1
> #define GL_VERSION_2_1 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glUniformMatrix2x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix3x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix2x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix4x2fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix3x4fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix4x3fv (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> #endif
> 
> #ifndef GL_VERSION_3_0
> #define GL_VERSION_3_0 1
> /* OpenGL 3.0 also reuses entry points from these extensions: */
> /* ARB_framebuffer_object */
> /* ARB_map_buffer_range */
> /* ARB_vertex_array_object */
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorMaski (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
> GLAPI void APIENTRY glGetBooleani_v (GLenum target, GLuint index, GLboolean *data);
> GLAPI void APIENTRY glGetIntegeri_v (GLenum target, GLuint index, GLint *data);
> GLAPI void APIENTRY glEnablei (GLenum target, GLuint index);
> GLAPI void APIENTRY glDisablei (GLenum target, GLuint index);
> GLAPI GLboolean APIENTRY glIsEnabledi (GLenum target, GLuint index);
> GLAPI void APIENTRY glBeginTransformFeedback (GLenum primitiveMode);
> GLAPI void APIENTRY glEndTransformFeedback (void);
> GLAPI void APIENTRY glBindBufferRange (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
> GLAPI void APIENTRY glBindBufferBase (GLenum target, GLuint index, GLuint buffer);
> GLAPI void APIENTRY glTransformFeedbackVaryings (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
> GLAPI void APIENTRY glGetTransformFeedbackVarying (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
> GLAPI void APIENTRY glClampColor (GLenum target, GLenum clamp);
> GLAPI void APIENTRY glBeginConditionalRender (GLuint id, GLenum mode);
> GLAPI void APIENTRY glEndConditionalRender (void);
> GLAPI void APIENTRY glVertexAttribIPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glGetVertexAttribIiv (GLuint index, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribIuiv (GLuint index, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glVertexAttribI1i (GLuint index, GLint x);
> GLAPI void APIENTRY glVertexAttribI2i (GLuint index, GLint x, GLint y);
> GLAPI void APIENTRY glVertexAttribI3i (GLuint index, GLint x, GLint y, GLint z);
> GLAPI void APIENTRY glVertexAttribI4i (GLuint index, GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glVertexAttribI1ui (GLuint index, GLuint x);
> GLAPI void APIENTRY glVertexAttribI2ui (GLuint index, GLuint x, GLuint y);
> GLAPI void APIENTRY glVertexAttribI3ui (GLuint index, GLuint x, GLuint y, GLuint z);
> GLAPI void APIENTRY glVertexAttribI4ui (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> GLAPI void APIENTRY glVertexAttribI1iv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI2iv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI3iv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI4iv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI1uiv (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI2uiv (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI3uiv (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI4uiv (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI4bv (GLuint index, const GLbyte *v);
> GLAPI void APIENTRY glVertexAttribI4sv (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttribI4ubv (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttribI4usv (GLuint index, const GLushort *v);
> GLAPI void APIENTRY glGetUniformuiv (GLuint program, GLint location, GLuint *params);
> GLAPI void APIENTRY glBindFragDataLocation (GLuint program, GLuint color, const GLchar *name);
> GLAPI GLint APIENTRY glGetFragDataLocation (GLuint program, const GLchar *name);
> GLAPI void APIENTRY glUniform1ui (GLint location, GLuint v0);
> GLAPI void APIENTRY glUniform2ui (GLint location, GLuint v0, GLuint v1);
> GLAPI void APIENTRY glUniform3ui (GLint location, GLuint v0, GLuint v1, GLuint v2);
> GLAPI void APIENTRY glUniform4ui (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> GLAPI void APIENTRY glUniform1uiv (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glUniform2uiv (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glUniform3uiv (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glUniform4uiv (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glTexParameterIiv (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glTexParameterIuiv (GLenum target, GLenum pname, const GLuint *params);
> GLAPI void APIENTRY glGetTexParameterIiv (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetTexParameterIuiv (GLenum target, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glClearBufferiv (GLenum buffer, GLint drawbuffer, const GLint *value);
> GLAPI void APIENTRY glClearBufferuiv (GLenum buffer, GLint drawbuffer, const GLuint *value);
> GLAPI void APIENTRY glClearBufferfv (GLenum buffer, GLint drawbuffer, const GLfloat *value);
> GLAPI void APIENTRY glClearBufferfi (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
> GLAPI const GLubyte * APIENTRY glGetStringi (GLenum name, GLuint index);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
> typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);
> typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);
> typedef void (APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index);
> typedef void (APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index);
> typedef GLboolean (APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index);
> typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);
> typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void);
> typedef void (APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
> typedef void (APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);
> typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
> typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
> typedef void (APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);
> typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);
> typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);
> typedef void (APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);
> typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);
> typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);
> typedef void (APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);
> typedef void (APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);
> typedef void (APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
> typedef void (APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> typedef void (APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);
> typedef void (APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);
> typedef void (APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);
> typedef void (APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
> typedef const GLubyte * (APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);
> #endif
> 
> #ifndef GL_VERSION_3_1
> #define GL_VERSION_3_1 1
> /* OpenGL 3.1 also reuses entry points from these extensions: */
> /* ARB_copy_buffer */
> /* ARB_uniform_buffer_object */
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawArraysInstanced (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
> GLAPI void APIENTRY glDrawElementsInstanced (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
> GLAPI void APIENTRY glTexBuffer (GLenum target, GLenum internalformat, GLuint buffer);
> GLAPI void APIENTRY glPrimitiveRestartIndex (GLuint index);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
> typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
> typedef void (APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);
> typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);
> #endif
> 
> #ifndef GL_VERSION_3_2
> #define GL_VERSION_3_2 1
> /* OpenGL 3.2 also reuses entry points from these extensions: */
> /* ARB_draw_elements_base_vertex */
> /* ARB_provoking_vertex */
> /* ARB_sync */
> /* ARB_texture_multisample */
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetInteger64i_v (GLenum target, GLuint index, GLint64 *data);
> GLAPI void APIENTRY glGetBufferParameteri64v (GLenum target, GLenum pname, GLint64 *params);
> GLAPI void APIENTRY glFramebufferTexture (GLenum target, GLenum attachment, GLuint texture, GLint level);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);
> typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
> #endif
> 
> #ifndef GL_VERSION_3_3
> #define GL_VERSION_3_3 1
> /* OpenGL 3.3 also reuses entry points from these extensions: */
> /* ARB_blend_func_extended */
> /* ARB_sampler_objects */
> /* ARB_explicit_attrib_location, but it has none */
> /* ARB_occlusion_query2 (no entry points) */
> /* ARB_shader_bit_encoding (no entry points) */
> /* ARB_texture_rgb10_a2ui (no entry points) */
> /* ARB_texture_swizzle (no entry points) */
> /* ARB_timer_query */
> /* ARB_vertex_type_2_10_10_10_rev */
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribDivisor (GLuint index, GLuint divisor);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);
> #endif
> 
> #ifndef GL_VERSION_4_0
> #define GL_VERSION_4_0 1
> /* OpenGL 4.0 also reuses entry points from these extensions: */
> /* ARB_texture_query_lod (no entry points) */
> /* ARB_draw_indirect */
> /* ARB_gpu_shader5 (no entry points) */
> /* ARB_gpu_shader_fp64 */
> /* ARB_shader_subroutine */
> /* ARB_tessellation_shader */
> /* ARB_texture_buffer_object_rgb32 (no entry points) */
> /* ARB_texture_cube_map_array (no entry points) */
> /* ARB_texture_gather (no entry points) */
> /* ARB_transform_feedback2 */
> /* ARB_transform_feedback3 */
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glMinSampleShading (GLclampf value);
> GLAPI void APIENTRY glBlendEquationi (GLuint buf, GLenum mode);
> GLAPI void APIENTRY glBlendEquationSeparatei (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
> GLAPI void APIENTRY glBlendFunci (GLuint buf, GLenum src, GLenum dst);
> GLAPI void APIENTRY glBlendFuncSeparatei (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLclampf value);
> typedef void (APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);
> typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
> typedef void (APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);
> typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
> #endif
> 
> #ifndef GL_VERSION_4_1
> #define GL_VERSION_4_1 1
> /* OpenGL 4.1 also reuses entry points from these extensions: */
> /* ARB_ES2_compatibility */
> /* ARB_get_program_binary */
> /* ARB_separate_shader_objects */
> /* ARB_shader_precision (no entry points) */
> /* ARB_vertex_attrib_64bit */
> /* ARB_viewport_array */
> #endif
> 
> #ifndef GL_ARB_multitexture
> #define GL_ARB_multitexture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glActiveTextureARB (GLenum texture);
> GLAPI void APIENTRY glClientActiveTextureARB (GLenum texture);
> GLAPI void APIENTRY glMultiTexCoord1dARB (GLenum target, GLdouble s);
> GLAPI void APIENTRY glMultiTexCoord1dvARB (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord1fARB (GLenum target, GLfloat s);
> GLAPI void APIENTRY glMultiTexCoord1fvARB (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord1iARB (GLenum target, GLint s);
> GLAPI void APIENTRY glMultiTexCoord1ivARB (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord1sARB (GLenum target, GLshort s);
> GLAPI void APIENTRY glMultiTexCoord1svARB (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glMultiTexCoord2dARB (GLenum target, GLdouble s, GLdouble t);
> GLAPI void APIENTRY glMultiTexCoord2dvARB (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord2fARB (GLenum target, GLfloat s, GLfloat t);
> GLAPI void APIENTRY glMultiTexCoord2fvARB (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord2iARB (GLenum target, GLint s, GLint t);
> GLAPI void APIENTRY glMultiTexCoord2ivARB (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord2sARB (GLenum target, GLshort s, GLshort t);
> GLAPI void APIENTRY glMultiTexCoord2svARB (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glMultiTexCoord3dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r);
> GLAPI void APIENTRY glMultiTexCoord3dvARB (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord3fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r);
> GLAPI void APIENTRY glMultiTexCoord3fvARB (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord3iARB (GLenum target, GLint s, GLint t, GLint r);
> GLAPI void APIENTRY glMultiTexCoord3ivARB (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord3sARB (GLenum target, GLshort s, GLshort t, GLshort r);
> GLAPI void APIENTRY glMultiTexCoord3svARB (GLenum target, const GLshort *v);
> GLAPI void APIENTRY glMultiTexCoord4dARB (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
> GLAPI void APIENTRY glMultiTexCoord4dvARB (GLenum target, const GLdouble *v);
> GLAPI void APIENTRY glMultiTexCoord4fARB (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
> GLAPI void APIENTRY glMultiTexCoord4fvARB (GLenum target, const GLfloat *v);
> GLAPI void APIENTRY glMultiTexCoord4iARB (GLenum target, GLint s, GLint t, GLint r, GLint q);
> GLAPI void APIENTRY glMultiTexCoord4ivARB (GLenum target, const GLint *v);
> GLAPI void APIENTRY glMultiTexCoord4sARB (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
> GLAPI void APIENTRY glMultiTexCoord4svARB (GLenum target, const GLshort *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLACTIVETEXTUREARBPROC) (GLenum texture);
> typedef void (APIENTRYP PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);
> #endif
> 
> #ifndef GL_ARB_transpose_matrix
> #define GL_ARB_transpose_matrix 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glLoadTransposeMatrixfARB (const GLfloat *m);
> GLAPI void APIENTRY glLoadTransposeMatrixdARB (const GLdouble *m);
> GLAPI void APIENTRY glMultTransposeMatrixfARB (const GLfloat *m);
> GLAPI void APIENTRY glMultTransposeMatrixdARB (const GLdouble *m);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
> typedef void (APIENTRYP PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
> typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);
> typedef void (APIENTRYP PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);
> #endif
> 
> #ifndef GL_ARB_multisample
> #define GL_ARB_multisample 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glSampleCoverageARB (GLclampf value, GLboolean invert);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSAMPLECOVERAGEARBPROC) (GLclampf value, GLboolean invert);
> #endif
> 
> #ifndef GL_ARB_texture_env_add
> #define GL_ARB_texture_env_add 1
> #endif
> 
> #ifndef GL_ARB_texture_cube_map
> #define GL_ARB_texture_cube_map 1
> #endif
> 
> #ifndef GL_ARB_texture_compression
> #define GL_ARB_texture_compression 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCompressedTexImage3DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexImage2DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexImage1DARB (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexSubImage3DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexSubImage2DARB (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glCompressedTexSubImage1DARB (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
> GLAPI void APIENTRY glGetCompressedTexImageARB (GLenum target, GLint level, GLvoid *img);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);
> typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, GLvoid *img);
> #endif
> 
> #ifndef GL_ARB_texture_border_clamp
> #define GL_ARB_texture_border_clamp 1
> #endif
> 
> #ifndef GL_ARB_point_parameters
> #define GL_ARB_point_parameters 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPointParameterfARB (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glPointParameterfvARB (GLenum pname, const GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);
> #endif
> 
> #ifndef GL_ARB_vertex_blend
> #define GL_ARB_vertex_blend 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glWeightbvARB (GLint size, const GLbyte *weights);
> GLAPI void APIENTRY glWeightsvARB (GLint size, const GLshort *weights);
> GLAPI void APIENTRY glWeightivARB (GLint size, const GLint *weights);
> GLAPI void APIENTRY glWeightfvARB (GLint size, const GLfloat *weights);
> GLAPI void APIENTRY glWeightdvARB (GLint size, const GLdouble *weights);
> GLAPI void APIENTRY glWeightubvARB (GLint size, const GLubyte *weights);
> GLAPI void APIENTRY glWeightusvARB (GLint size, const GLushort *weights);
> GLAPI void APIENTRY glWeightuivARB (GLint size, const GLuint *weights);
> GLAPI void APIENTRY glWeightPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glVertexBlendARB (GLint count);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);
> typedef void (APIENTRYP PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);
> typedef void (APIENTRYP PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);
> typedef void (APIENTRYP PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);
> typedef void (APIENTRYP PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);
> typedef void (APIENTRYP PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);
> typedef void (APIENTRYP PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);
> typedef void (APIENTRYP PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);
> typedef void (APIENTRYP PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLVERTEXBLENDARBPROC) (GLint count);
> #endif
> 
> #ifndef GL_ARB_matrix_palette
> #define GL_ARB_matrix_palette 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCurrentPaletteMatrixARB (GLint index);
> GLAPI void APIENTRY glMatrixIndexubvARB (GLint size, const GLubyte *indices);
> GLAPI void APIENTRY glMatrixIndexusvARB (GLint size, const GLushort *indices);
> GLAPI void APIENTRY glMatrixIndexuivARB (GLint size, const GLuint *indices);
> GLAPI void APIENTRY glMatrixIndexPointerARB (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);
> typedef void (APIENTRYP PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);
> typedef void (APIENTRYP PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);
> typedef void (APIENTRYP PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);
> typedef void (APIENTRYP PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_ARB_texture_env_combine
> #define GL_ARB_texture_env_combine 1
> #endif
> 
> #ifndef GL_ARB_texture_env_crossbar
> #define GL_ARB_texture_env_crossbar 1
> #endif
> 
> #ifndef GL_ARB_texture_env_dot3
> #define GL_ARB_texture_env_dot3 1
> #endif
> 
> #ifndef GL_ARB_texture_mirrored_repeat
> #define GL_ARB_texture_mirrored_repeat 1
> #endif
> 
> #ifndef GL_ARB_depth_texture
> #define GL_ARB_depth_texture 1
> #endif
> 
> #ifndef GL_ARB_shadow
> #define GL_ARB_shadow 1
> #endif
> 
> #ifndef GL_ARB_shadow_ambient
> #define GL_ARB_shadow_ambient 1
> #endif
> 
> #ifndef GL_ARB_window_pos
> #define GL_ARB_window_pos 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glWindowPos2dARB (GLdouble x, GLdouble y);
> GLAPI void APIENTRY glWindowPos2dvARB (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos2fARB (GLfloat x, GLfloat y);
> GLAPI void APIENTRY glWindowPos2fvARB (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos2iARB (GLint x, GLint y);
> GLAPI void APIENTRY glWindowPos2ivARB (const GLint *v);
> GLAPI void APIENTRY glWindowPos2sARB (GLshort x, GLshort y);
> GLAPI void APIENTRY glWindowPos2svARB (const GLshort *v);
> GLAPI void APIENTRY glWindowPos3dARB (GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glWindowPos3dvARB (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos3fARB (GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glWindowPos3fvARB (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos3iARB (GLint x, GLint y, GLint z);
> GLAPI void APIENTRY glWindowPos3ivARB (const GLint *v);
> GLAPI void APIENTRY glWindowPos3sARB (GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glWindowPos3svARB (const GLshort *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);
> #endif
> 
> #ifndef GL_ARB_vertex_program
> #define GL_ARB_vertex_program 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttrib1dARB (GLuint index, GLdouble x);
> GLAPI void APIENTRY glVertexAttrib1dvARB (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib1fARB (GLuint index, GLfloat x);
> GLAPI void APIENTRY glVertexAttrib1fvARB (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib1sARB (GLuint index, GLshort x);
> GLAPI void APIENTRY glVertexAttrib1svARB (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib2dARB (GLuint index, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glVertexAttrib2dvARB (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib2fARB (GLuint index, GLfloat x, GLfloat y);
> GLAPI void APIENTRY glVertexAttrib2fvARB (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib2sARB (GLuint index, GLshort x, GLshort y);
> GLAPI void APIENTRY glVertexAttrib2svARB (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib3dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glVertexAttrib3dvARB (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib3fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glVertexAttrib3fvARB (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib3sARB (GLuint index, GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glVertexAttrib3svARB (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4NbvARB (GLuint index, const GLbyte *v);
> GLAPI void APIENTRY glVertexAttrib4NivARB (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttrib4NsvARB (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4NubARB (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
> GLAPI void APIENTRY glVertexAttrib4NubvARB (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttrib4NuivARB (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttrib4NusvARB (GLuint index, const GLushort *v);
> GLAPI void APIENTRY glVertexAttrib4bvARB (GLuint index, const GLbyte *v);
> GLAPI void APIENTRY glVertexAttrib4dARB (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glVertexAttrib4dvARB (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib4fARB (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glVertexAttrib4fvARB (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib4ivARB (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttrib4sARB (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
> GLAPI void APIENTRY glVertexAttrib4svARB (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4ubvARB (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttrib4uivARB (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttrib4usvARB (GLuint index, const GLushort *v);
> GLAPI void APIENTRY glVertexAttribPointerARB (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glEnableVertexAttribArrayARB (GLuint index);
> GLAPI void APIENTRY glDisableVertexAttribArrayARB (GLuint index);
> GLAPI void APIENTRY glProgramStringARB (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
> GLAPI void APIENTRY glBindProgramARB (GLenum target, GLuint program);
> GLAPI void APIENTRY glDeleteProgramsARB (GLsizei n, const GLuint *programs);
> GLAPI void APIENTRY glGenProgramsARB (GLsizei n, GLuint *programs);
> GLAPI void APIENTRY glProgramEnvParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glProgramEnvParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);
> GLAPI void APIENTRY glProgramEnvParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glProgramEnvParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);
> GLAPI void APIENTRY glProgramLocalParameter4dARB (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glProgramLocalParameter4dvARB (GLenum target, GLuint index, const GLdouble *params);
> GLAPI void APIENTRY glProgramLocalParameter4fARB (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glProgramLocalParameter4fvARB (GLenum target, GLuint index, const GLfloat *params);
> GLAPI void APIENTRY glGetProgramEnvParameterdvARB (GLenum target, GLuint index, GLdouble *params);
> GLAPI void APIENTRY glGetProgramEnvParameterfvARB (GLenum target, GLuint index, GLfloat *params);
> GLAPI void APIENTRY glGetProgramLocalParameterdvARB (GLenum target, GLuint index, GLdouble *params);
> GLAPI void APIENTRY glGetProgramLocalParameterfvARB (GLenum target, GLuint index, GLfloat *params);
> GLAPI void APIENTRY glGetProgramivARB (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetProgramStringARB (GLenum target, GLenum pname, GLvoid *string);
> GLAPI void APIENTRY glGetVertexAttribdvARB (GLuint index, GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glGetVertexAttribfvARB (GLuint index, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetVertexAttribivARB (GLuint index, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribPointervARB (GLuint index, GLenum pname, GLvoid* *pointer);
> GLAPI GLboolean APIENTRY glIsProgramARB (GLuint program);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
> typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);
> typedef void (APIENTRYP PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const GLvoid *string);
> typedef void (APIENTRYP PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);
> typedef void (APIENTRYP PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);
> typedef void (APIENTRYP PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, GLvoid *string);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
> typedef GLboolean (APIENTRYP PFNGLISPROGRAMARBPROC) (GLuint program);
> #endif
> 
> #ifndef GL_ARB_fragment_program
> #define GL_ARB_fragment_program 1
> /* All ARB_fragment_program entry points are shared with ARB_vertex_program. */
> #endif
> 
> #ifndef GL_ARB_vertex_buffer_object
> #define GL_ARB_vertex_buffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindBufferARB (GLenum target, GLuint buffer);
> GLAPI void APIENTRY glDeleteBuffersARB (GLsizei n, const GLuint *buffers);
> GLAPI void APIENTRY glGenBuffersARB (GLsizei n, GLuint *buffers);
> GLAPI GLboolean APIENTRY glIsBufferARB (GLuint buffer);
> GLAPI void APIENTRY glBufferDataARB (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
> GLAPI void APIENTRY glBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
> GLAPI void APIENTRY glGetBufferSubDataARB (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
> GLAPI GLvoid* APIENTRY glMapBufferARB (GLenum target, GLenum access);
> GLAPI GLboolean APIENTRY glUnmapBufferARB (GLenum target);
> GLAPI void APIENTRY glGetBufferParameterivARB (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetBufferPointervARB (GLenum target, GLenum pname, GLvoid* *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);
> typedef void (APIENTRYP PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);
> typedef void (APIENTRYP PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);
> typedef GLboolean (APIENTRYP PFNGLISBUFFERARBPROC) (GLuint buffer);
> typedef void (APIENTRYP PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const GLvoid *data, GLenum usage);
> typedef void (APIENTRYP PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const GLvoid *data);
> typedef void (APIENTRYP PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, GLvoid *data);
> typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);
> typedef GLboolean (APIENTRYP PFNGLUNMAPBUFFERARBPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, GLvoid* *params);
> #endif
> 
> #ifndef GL_ARB_occlusion_query
> #define GL_ARB_occlusion_query 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGenQueriesARB (GLsizei n, GLuint *ids);
> GLAPI void APIENTRY glDeleteQueriesARB (GLsizei n, const GLuint *ids);
> GLAPI GLboolean APIENTRY glIsQueryARB (GLuint id);
> GLAPI void APIENTRY glBeginQueryARB (GLenum target, GLuint id);
> GLAPI void APIENTRY glEndQueryARB (GLenum target);
> GLAPI void APIENTRY glGetQueryivARB (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetQueryObjectivARB (GLuint id, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetQueryObjectuivARB (GLuint id, GLenum pname, GLuint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);
> typedef void (APIENTRYP PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);
> typedef GLboolean (APIENTRYP PFNGLISQUERYARBPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);
> typedef void (APIENTRYP PFNGLENDQUERYARBPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);
> #endif
> 
> #ifndef GL_ARB_shader_objects
> #define GL_ARB_shader_objects 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDeleteObjectARB (GLhandleARB obj);
> GLAPI GLhandleARB APIENTRY glGetHandleARB (GLenum pname);
> GLAPI void APIENTRY glDetachObjectARB (GLhandleARB containerObj, GLhandleARB attachedObj);
> GLAPI GLhandleARB APIENTRY glCreateShaderObjectARB (GLenum shaderType);
> GLAPI void APIENTRY glShaderSourceARB (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
> GLAPI void APIENTRY glCompileShaderARB (GLhandleARB shaderObj);
> GLAPI GLhandleARB APIENTRY glCreateProgramObjectARB (void);
> GLAPI void APIENTRY glAttachObjectARB (GLhandleARB containerObj, GLhandleARB obj);
> GLAPI void APIENTRY glLinkProgramARB (GLhandleARB programObj);
> GLAPI void APIENTRY glUseProgramObjectARB (GLhandleARB programObj);
> GLAPI void APIENTRY glValidateProgramARB (GLhandleARB programObj);
> GLAPI void APIENTRY glUniform1fARB (GLint location, GLfloat v0);
> GLAPI void APIENTRY glUniform2fARB (GLint location, GLfloat v0, GLfloat v1);
> GLAPI void APIENTRY glUniform3fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> GLAPI void APIENTRY glUniform4fARB (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> GLAPI void APIENTRY glUniform1iARB (GLint location, GLint v0);
> GLAPI void APIENTRY glUniform2iARB (GLint location, GLint v0, GLint v1);
> GLAPI void APIENTRY glUniform3iARB (GLint location, GLint v0, GLint v1, GLint v2);
> GLAPI void APIENTRY glUniform4iARB (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> GLAPI void APIENTRY glUniform1fvARB (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform2fvARB (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform3fvARB (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform4fvARB (GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glUniform1ivARB (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniform2ivARB (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniform3ivARB (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniform4ivARB (GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glUniformMatrix2fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix3fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glUniformMatrix4fvARB (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glGetObjectParameterfvARB (GLhandleARB obj, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetObjectParameterivARB (GLhandleARB obj, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetInfoLogARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
> GLAPI void APIENTRY glGetAttachedObjectsARB (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
> GLAPI GLint APIENTRY glGetUniformLocationARB (GLhandleARB programObj, const GLcharARB *name);
> GLAPI void APIENTRY glGetActiveUniformARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
> GLAPI void APIENTRY glGetUniformfvARB (GLhandleARB programObj, GLint location, GLfloat *params);
> GLAPI void APIENTRY glGetUniformivARB (GLhandleARB programObj, GLint location, GLint *params);
> GLAPI void APIENTRY glGetShaderSourceARB (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);
> typedef GLhandleARB (APIENTRYP PFNGLGETHANDLEARBPROC) (GLenum pname);
> typedef void (APIENTRYP PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);
> typedef GLhandleARB (APIENTRYP PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);
> typedef void (APIENTRYP PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB* *string, const GLint *length);
> typedef void (APIENTRYP PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);
> typedef GLhandleARB (APIENTRYP PFNGLCREATEPROGRAMOBJECTARBPROC) (void);
> typedef void (APIENTRYP PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);
> typedef void (APIENTRYP PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);
> typedef void (APIENTRYP PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);
> typedef void (APIENTRYP PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);
> typedef void (APIENTRYP PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);
> typedef void (APIENTRYP PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);
> typedef void (APIENTRYP PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> typedef void (APIENTRYP PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> typedef void (APIENTRYP PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);
> typedef void (APIENTRYP PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);
> typedef void (APIENTRYP PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);
> typedef void (APIENTRYP PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> typedef void (APIENTRYP PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);
> typedef void (APIENTRYP PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);
> typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
> typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
> typedef void (APIENTRYP PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);
> typedef void (APIENTRYP PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);
> #endif
> 
> #ifndef GL_ARB_vertex_shader
> #define GL_ARB_vertex_shader 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindAttribLocationARB (GLhandleARB programObj, GLuint index, const GLcharARB *name);
> GLAPI void APIENTRY glGetActiveAttribARB (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
> GLAPI GLint APIENTRY glGetAttribLocationARB (GLhandleARB programObj, const GLcharARB *name);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);
> typedef void (APIENTRYP PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);
> typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);
> #endif
> 
> #ifndef GL_ARB_fragment_shader
> #define GL_ARB_fragment_shader 1
> #endif
> 
> #ifndef GL_ARB_shading_language_100
> #define GL_ARB_shading_language_100 1
> #endif
> 
> #ifndef GL_ARB_texture_non_power_of_two
> #define GL_ARB_texture_non_power_of_two 1
> #endif
> 
> #ifndef GL_ARB_point_sprite
> #define GL_ARB_point_sprite 1
> #endif
> 
> #ifndef GL_ARB_fragment_program_shadow
> #define GL_ARB_fragment_program_shadow 1
> #endif
> 
> #ifndef GL_ARB_draw_buffers
> #define GL_ARB_draw_buffers 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawBuffersARB (GLsizei n, const GLenum *bufs);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);
> #endif
> 
> #ifndef GL_ARB_texture_rectangle
> #define GL_ARB_texture_rectangle 1
> #endif
> 
> #ifndef GL_ARB_color_buffer_float
> #define GL_ARB_color_buffer_float 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glClampColorARB (GLenum target, GLenum clamp);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);
> #endif
> 
> #ifndef GL_ARB_half_float_pixel
> #define GL_ARB_half_float_pixel 1
> #endif
> 
> #ifndef GL_ARB_texture_float
> #define GL_ARB_texture_float 1
> #endif
> 
> #ifndef GL_ARB_pixel_buffer_object
> #define GL_ARB_pixel_buffer_object 1
> #endif
> 
> #ifndef GL_ARB_depth_buffer_float
> #define GL_ARB_depth_buffer_float 1
> #endif
> 
> #ifndef GL_ARB_draw_instanced
> #define GL_ARB_draw_instanced 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawArraysInstancedARB (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
> GLAPI void APIENTRY glDrawElementsInstancedARB (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);
> typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
> #endif
> 
> #ifndef GL_ARB_framebuffer_object
> #define GL_ARB_framebuffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLboolean APIENTRY glIsRenderbuffer (GLuint renderbuffer);
> GLAPI void APIENTRY glBindRenderbuffer (GLenum target, GLuint renderbuffer);
> GLAPI void APIENTRY glDeleteRenderbuffers (GLsizei n, const GLuint *renderbuffers);
> GLAPI void APIENTRY glGenRenderbuffers (GLsizei n, GLuint *renderbuffers);
> GLAPI void APIENTRY glRenderbufferStorage (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetRenderbufferParameteriv (GLenum target, GLenum pname, GLint *params);
> GLAPI GLboolean APIENTRY glIsFramebuffer (GLuint framebuffer);
> GLAPI void APIENTRY glBindFramebuffer (GLenum target, GLuint framebuffer);
> GLAPI void APIENTRY glDeleteFramebuffers (GLsizei n, const GLuint *framebuffers);
> GLAPI void APIENTRY glGenFramebuffers (GLsizei n, GLuint *framebuffers);
> GLAPI GLenum APIENTRY glCheckFramebufferStatus (GLenum target);
> GLAPI void APIENTRY glFramebufferTexture1D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> GLAPI void APIENTRY glFramebufferTexture2D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> GLAPI void APIENTRY glFramebufferTexture3D (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
> GLAPI void APIENTRY glFramebufferRenderbuffer (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
> GLAPI void APIENTRY glGetFramebufferAttachmentParameteriv (GLenum target, GLenum attachment, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGenerateMipmap (GLenum target);
> GLAPI void APIENTRY glBlitFramebuffer (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
> GLAPI void APIENTRY glRenderbufferStorageMultisample (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glFramebufferTextureLayer (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);
> typedef void (APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);
> typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);
> typedef void (APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);
> typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);
> typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);
> typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
> typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
> #endif
> 
> #ifndef GL_ARB_framebuffer_sRGB
> #define GL_ARB_framebuffer_sRGB 1
> #endif
> 
> #ifndef GL_ARB_geometry_shader4
> #define GL_ARB_geometry_shader4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramParameteriARB (GLuint program, GLenum pname, GLint value);
> GLAPI void APIENTRY glFramebufferTextureARB (GLenum target, GLenum attachment, GLuint texture, GLint level);
> GLAPI void APIENTRY glFramebufferTextureLayerARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
> GLAPI void APIENTRY glFramebufferTextureFaceARB (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
> #endif
> 
> #ifndef GL_ARB_half_float_vertex
> #define GL_ARB_half_float_vertex 1
> #endif
> 
> #ifndef GL_ARB_instanced_arrays
> #define GL_ARB_instanced_arrays 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribDivisorARB (GLuint index, GLuint divisor);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);
> #endif
> 
> #ifndef GL_ARB_map_buffer_range
> #define GL_ARB_map_buffer_range 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLvoid* APIENTRY glMapBufferRange (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
> GLAPI void APIENTRY glFlushMappedBufferRange (GLenum target, GLintptr offset, GLsizeiptr length);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLvoid* (APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);
> typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);
> #endif
> 
> #ifndef GL_ARB_texture_buffer_object
> #define GL_ARB_texture_buffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexBufferARB (GLenum target, GLenum internalformat, GLuint buffer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);
> #endif
> 
> #ifndef GL_ARB_texture_compression_rgtc
> #define GL_ARB_texture_compression_rgtc 1
> #endif
> 
> #ifndef GL_ARB_texture_rg
> #define GL_ARB_texture_rg 1
> #endif
> 
> #ifndef GL_ARB_vertex_array_object
> #define GL_ARB_vertex_array_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindVertexArray (GLuint array);
> GLAPI void APIENTRY glDeleteVertexArrays (GLsizei n, const GLuint *arrays);
> GLAPI void APIENTRY glGenVertexArrays (GLsizei n, GLuint *arrays);
> GLAPI GLboolean APIENTRY glIsVertexArray (GLuint array);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);
> typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);
> typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);
> typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array);
> #endif
> 
> #ifndef GL_ARB_uniform_buffer_object
> #define GL_ARB_uniform_buffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetUniformIndices (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
> GLAPI void APIENTRY glGetActiveUniformsiv (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetActiveUniformName (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
> GLAPI GLuint APIENTRY glGetUniformBlockIndex (GLuint program, const GLchar *uniformBlockName);
> GLAPI void APIENTRY glGetActiveUniformBlockiv (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetActiveUniformBlockName (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
> GLAPI void APIENTRY glUniformBlockBinding (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar* *uniformNames, GLuint *uniformIndices);
> typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
> typedef GLuint (APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);
> typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
> typedef void (APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
> #endif
> 
> #ifndef GL_ARB_compatibility
> #define GL_ARB_compatibility 1
> #endif
> 
> #ifndef GL_ARB_copy_buffer
> #define GL_ARB_copy_buffer 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCopyBufferSubData (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
> #endif
> 
> #ifndef GL_ARB_shader_texture_lod
> #define GL_ARB_shader_texture_lod 1
> #endif
> 
> #ifndef GL_ARB_depth_clamp
> #define GL_ARB_depth_clamp 1
> #endif
> 
> #ifndef GL_ARB_draw_elements_base_vertex
> #define GL_ARB_draw_elements_base_vertex 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawElementsBaseVertex (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
> GLAPI void APIENTRY glDrawRangeElementsBaseVertex (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
> GLAPI void APIENTRY glDrawElementsInstancedBaseVertex (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
> GLAPI void APIENTRY glMultiDrawElementsBaseVertex (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
> typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices, GLint basevertex);
> typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount, GLint basevertex);
> typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount, const GLint *basevertex);
> #endif
> 
> #ifndef GL_ARB_fragment_coord_conventions
> #define GL_ARB_fragment_coord_conventions 1
> #endif
> 
> #ifndef GL_ARB_provoking_vertex
> #define GL_ARB_provoking_vertex 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProvokingVertex (GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode);
> #endif
> 
> #ifndef GL_ARB_seamless_cube_map
> #define GL_ARB_seamless_cube_map 1
> #endif
> 
> #ifndef GL_ARB_sync
> #define GL_ARB_sync 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLsync APIENTRY glFenceSync (GLenum condition, GLbitfield flags);
> GLAPI GLboolean APIENTRY glIsSync (GLsync sync);
> GLAPI void APIENTRY glDeleteSync (GLsync sync);
> GLAPI GLenum APIENTRY glClientWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
> GLAPI void APIENTRY glWaitSync (GLsync sync, GLbitfield flags, GLuint64 timeout);
> GLAPI void APIENTRY glGetInteger64v (GLenum pname, GLint64 *params);
> GLAPI void APIENTRY glGetSynciv (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLsync (APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);
> typedef GLboolean (APIENTRYP PFNGLISSYNCPROC) (GLsync sync);
> typedef void (APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync);
> typedef GLenum (APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
> typedef void (APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);
> typedef void (APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *params);
> typedef void (APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
> #endif
> 
> #ifndef GL_ARB_texture_multisample
> #define GL_ARB_texture_multisample 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexImage2DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
> GLAPI void APIENTRY glTexImage3DMultisample (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
> GLAPI void APIENTRY glGetMultisamplefv (GLenum pname, GLuint index, GLfloat *val);
> GLAPI void APIENTRY glSampleMaski (GLuint index, GLbitfield mask);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
> typedef void (APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
> typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);
> typedef void (APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint index, GLbitfield mask);
> #endif
> 
> #ifndef GL_ARB_vertex_array_bgra
> #define GL_ARB_vertex_array_bgra 1
> #endif
> 
> #ifndef GL_ARB_draw_buffers_blend
> #define GL_ARB_draw_buffers_blend 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendEquationiARB (GLuint buf, GLenum mode);
> GLAPI void APIENTRY glBlendEquationSeparateiARB (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
> GLAPI void APIENTRY glBlendFunciARB (GLuint buf, GLenum src, GLenum dst);
> GLAPI void APIENTRY glBlendFuncSeparateiARB (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);
> typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
> typedef void (APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);
> typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
> #endif
> 
> #ifndef GL_ARB_sample_shading
> #define GL_ARB_sample_shading 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glMinSampleShadingARB (GLclampf value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLclampf value);
> #endif
> 
> #ifndef GL_ARB_texture_cube_map_array
> #define GL_ARB_texture_cube_map_array 1
> #endif
> 
> #ifndef GL_ARB_texture_gather
> #define GL_ARB_texture_gather 1
> #endif
> 
> #ifndef GL_ARB_texture_query_lod
> #define GL_ARB_texture_query_lod 1
> #endif
> 
> #ifndef GL_ARB_shading_language_include
> #define GL_ARB_shading_language_include 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glNamedStringARB (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
> GLAPI void APIENTRY glDeleteNamedStringARB (GLint namelen, const GLchar *name);
> GLAPI void APIENTRY glCompileShaderIncludeARB (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
> GLAPI GLboolean APIENTRY glIsNamedStringARB (GLint namelen, const GLchar *name);
> GLAPI void APIENTRY glGetNamedStringARB (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
> GLAPI void APIENTRY glGetNamedStringivARB (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);
> typedef void (APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
> typedef void (APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar* *path, const GLint *length);
> typedef GLboolean (APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);
> typedef void (APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);
> typedef void (APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_ARB_texture_compression_bptc
> #define GL_ARB_texture_compression_bptc 1
> #endif
> 
> #ifndef GL_ARB_blend_func_extended
> #define GL_ARB_blend_func_extended 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindFragDataLocationIndexed (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
> GLAPI GLint APIENTRY glGetFragDataIndex (GLuint program, const GLchar *name);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
> typedef GLint (APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);
> #endif
> 
> #ifndef GL_ARB_explicit_attrib_location
> #define GL_ARB_explicit_attrib_location 1
> #endif
> 
> #ifndef GL_ARB_occlusion_query2
> #define GL_ARB_occlusion_query2 1
> #endif
> 
> #ifndef GL_ARB_sampler_objects
> #define GL_ARB_sampler_objects 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGenSamplers (GLsizei count, GLuint *samplers);
> GLAPI void APIENTRY glDeleteSamplers (GLsizei count, const GLuint *samplers);
> GLAPI GLboolean APIENTRY glIsSampler (GLuint sampler);
> GLAPI void APIENTRY glBindSampler (GLuint unit, GLuint sampler);
> GLAPI void APIENTRY glSamplerParameteri (GLuint sampler, GLenum pname, GLint param);
> GLAPI void APIENTRY glSamplerParameteriv (GLuint sampler, GLenum pname, const GLint *param);
> GLAPI void APIENTRY glSamplerParameterf (GLuint sampler, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glSamplerParameterfv (GLuint sampler, GLenum pname, const GLfloat *param);
> GLAPI void APIENTRY glSamplerParameterIiv (GLuint sampler, GLenum pname, const GLint *param);
> GLAPI void APIENTRY glSamplerParameterIuiv (GLuint sampler, GLenum pname, const GLuint *param);
> GLAPI void APIENTRY glGetSamplerParameteriv (GLuint sampler, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetSamplerParameterIiv (GLuint sampler, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetSamplerParameterfv (GLuint sampler, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetSamplerParameterIuiv (GLuint sampler, GLenum pname, GLuint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);
> typedef void (APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);
> typedef GLboolean (APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler);
> typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);
> typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
> typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);
> typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);
> typedef void (APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);
> typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);
> #endif
> 
> #ifndef GL_ARB_texture_rgb10_a2ui
> #define GL_ARB_texture_rgb10_a2ui 1
> #endif
> 
> #ifndef GL_ARB_texture_swizzle
> #define GL_ARB_texture_swizzle 1
> #endif
> 
> #ifndef GL_ARB_timer_query
> #define GL_ARB_timer_query 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glQueryCounter (GLuint id, GLenum target);
> GLAPI void APIENTRY glGetQueryObjecti64v (GLuint id, GLenum pname, GLint64 *params);
> GLAPI void APIENTRY glGetQueryObjectui64v (GLuint id, GLenum pname, GLuint64 *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);
> #endif
> 
> #ifndef GL_ARB_vertex_type_2_10_10_10_rev
> #define GL_ARB_vertex_type_2_10_10_10_rev 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexP2ui (GLenum type, GLuint value);
> GLAPI void APIENTRY glVertexP2uiv (GLenum type, const GLuint *value);
> GLAPI void APIENTRY glVertexP3ui (GLenum type, GLuint value);
> GLAPI void APIENTRY glVertexP3uiv (GLenum type, const GLuint *value);
> GLAPI void APIENTRY glVertexP4ui (GLenum type, GLuint value);
> GLAPI void APIENTRY glVertexP4uiv (GLenum type, const GLuint *value);
> GLAPI void APIENTRY glTexCoordP1ui (GLenum type, GLuint coords);
> GLAPI void APIENTRY glTexCoordP1uiv (GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glTexCoordP2ui (GLenum type, GLuint coords);
> GLAPI void APIENTRY glTexCoordP2uiv (GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glTexCoordP3ui (GLenum type, GLuint coords);
> GLAPI void APIENTRY glTexCoordP3uiv (GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glTexCoordP4ui (GLenum type, GLuint coords);
> GLAPI void APIENTRY glTexCoordP4uiv (GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glMultiTexCoordP1ui (GLenum texture, GLenum type, GLuint coords);
> GLAPI void APIENTRY glMultiTexCoordP1uiv (GLenum texture, GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glMultiTexCoordP2ui (GLenum texture, GLenum type, GLuint coords);
> GLAPI void APIENTRY glMultiTexCoordP2uiv (GLenum texture, GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glMultiTexCoordP3ui (GLenum texture, GLenum type, GLuint coords);
> GLAPI void APIENTRY glMultiTexCoordP3uiv (GLenum texture, GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glMultiTexCoordP4ui (GLenum texture, GLenum type, GLuint coords);
> GLAPI void APIENTRY glMultiTexCoordP4uiv (GLenum texture, GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glNormalP3ui (GLenum type, GLuint coords);
> GLAPI void APIENTRY glNormalP3uiv (GLenum type, const GLuint *coords);
> GLAPI void APIENTRY glColorP3ui (GLenum type, GLuint color);
> GLAPI void APIENTRY glColorP3uiv (GLenum type, const GLuint *color);
> GLAPI void APIENTRY glColorP4ui (GLenum type, GLuint color);
> GLAPI void APIENTRY glColorP4uiv (GLenum type, const GLuint *color);
> GLAPI void APIENTRY glSecondaryColorP3ui (GLenum type, GLuint color);
> GLAPI void APIENTRY glSecondaryColorP3uiv (GLenum type, const GLuint *color);
> GLAPI void APIENTRY glVertexAttribP1ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> GLAPI void APIENTRY glVertexAttribP1uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> GLAPI void APIENTRY glVertexAttribP2ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> GLAPI void APIENTRY glVertexAttribP2uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> GLAPI void APIENTRY glVertexAttribP3ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> GLAPI void APIENTRY glVertexAttribP3uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> GLAPI void APIENTRY glVertexAttribP4ui (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> GLAPI void APIENTRY glVertexAttribP4uiv (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);
> typedef void (APIENTRYP PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);
> typedef void (APIENTRYP PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);
> typedef void (APIENTRYP PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);
> typedef void (APIENTRYP PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);
> typedef void (APIENTRYP PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);
> typedef void (APIENTRYP PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);
> typedef void (APIENTRYP PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);
> typedef void (APIENTRYP PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);
> typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);
> typedef void (APIENTRYP PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
> #endif
> 
> #ifndef GL_ARB_draw_indirect
> #define GL_ARB_draw_indirect 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawArraysIndirect (GLenum mode, const GLvoid *indirect);
> GLAPI void APIENTRY glDrawElementsIndirect (GLenum mode, GLenum type, const GLvoid *indirect);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const GLvoid *indirect);
> typedef void (APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const GLvoid *indirect);
> #endif
> 
> #ifndef GL_ARB_gpu_shader5
> #define GL_ARB_gpu_shader5 1
> #endif
> 
> #ifndef GL_ARB_gpu_shader_fp64
> #define GL_ARB_gpu_shader_fp64 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glUniform1d (GLint location, GLdouble x);
> GLAPI void APIENTRY glUniform2d (GLint location, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glUniform3d (GLint location, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glUniform4d (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glUniform1dv (GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glUniform2dv (GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glUniform3dv (GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glUniform4dv (GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix2x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix2x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix3x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix3x4dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix4x2dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glUniformMatrix4x3dv (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glGetUniformdv (GLuint program, GLint location, GLdouble *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);
> typedef void (APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);
> #endif
> 
> #ifndef GL_ARB_shader_subroutine
> #define GL_ARB_shader_subroutine 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLint APIENTRY glGetSubroutineUniformLocation (GLuint program, GLenum shadertype, const GLchar *name);
> GLAPI GLuint APIENTRY glGetSubroutineIndex (GLuint program, GLenum shadertype, const GLchar *name);
> GLAPI void APIENTRY glGetActiveSubroutineUniformiv (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
> GLAPI void APIENTRY glGetActiveSubroutineUniformName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
> GLAPI void APIENTRY glGetActiveSubroutineName (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
> GLAPI void APIENTRY glUniformSubroutinesuiv (GLenum shadertype, GLsizei count, const GLuint *indices);
> GLAPI void APIENTRY glGetUniformSubroutineuiv (GLenum shadertype, GLint location, GLuint *params);
> GLAPI void APIENTRY glGetProgramStageiv (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLint (APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);
> typedef GLuint (APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);
> typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
> typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
> typedef void (APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);
> typedef void (APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);
> typedef void (APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);
> #endif
> 
> #ifndef GL_ARB_tessellation_shader
> #define GL_ARB_tessellation_shader 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPatchParameteri (GLenum pname, GLint value);
> GLAPI void APIENTRY glPatchParameterfv (GLenum pname, const GLfloat *values);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);
> typedef void (APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);
> #endif
> 
> #ifndef GL_ARB_texture_buffer_object_rgb32
> #define GL_ARB_texture_buffer_object_rgb32 1
> #endif
> 
> #ifndef GL_ARB_transform_feedback2
> #define GL_ARB_transform_feedback2 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindTransformFeedback (GLenum target, GLuint id);
> GLAPI void APIENTRY glDeleteTransformFeedbacks (GLsizei n, const GLuint *ids);
> GLAPI void APIENTRY glGenTransformFeedbacks (GLsizei n, GLuint *ids);
> GLAPI GLboolean APIENTRY glIsTransformFeedback (GLuint id);
> GLAPI void APIENTRY glPauseTransformFeedback (void);
> GLAPI void APIENTRY glResumeTransformFeedback (void);
> GLAPI void APIENTRY glDrawTransformFeedback (GLenum mode, GLuint id);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);
> typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);
> typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);
> typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);
> typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);
> typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);
> #endif
> 
> #ifndef GL_ARB_transform_feedback3
> #define GL_ARB_transform_feedback3 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawTransformFeedbackStream (GLenum mode, GLuint id, GLuint stream);
> GLAPI void APIENTRY glBeginQueryIndexed (GLenum target, GLuint index, GLuint id);
> GLAPI void APIENTRY glEndQueryIndexed (GLenum target, GLuint index);
> GLAPI void APIENTRY glGetQueryIndexediv (GLenum target, GLuint index, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);
> typedef void (APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);
> typedef void (APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);
> typedef void (APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_ARB_ES2_compatibility
> #define GL_ARB_ES2_compatibility 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glReleaseShaderCompiler (void);
> GLAPI void APIENTRY glShaderBinary (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
> GLAPI void APIENTRY glGetShaderPrecisionFormat (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
> GLAPI void APIENTRY glDepthRangef (GLclampf n, GLclampf f);
> GLAPI void APIENTRY glClearDepthf (GLclampf d);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void);
> typedef void (APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const GLvoid *binary, GLsizei length);
> typedef void (APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
> typedef void (APIENTRYP PFNGLDEPTHRANGEFPROC) (GLclampf n, GLclampf f);
> typedef void (APIENTRYP PFNGLCLEARDEPTHFPROC) (GLclampf d);
> #endif
> 
> #ifndef GL_ARB_get_program_binary
> #define GL_ARB_get_program_binary 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetProgramBinary (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
> GLAPI void APIENTRY glProgramBinary (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
> GLAPI void APIENTRY glProgramParameteri (GLuint program, GLenum pname, GLint value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, GLvoid *binary);
> typedef void (APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const GLvoid *binary, GLsizei length);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);
> #endif
> 
> #ifndef GL_ARB_separate_shader_objects
> #define GL_ARB_separate_shader_objects 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glUseProgramStages (GLuint pipeline, GLbitfield stages, GLuint program);
> GLAPI void APIENTRY glActiveShaderProgram (GLuint pipeline, GLuint program);
> GLAPI GLuint APIENTRY glCreateShaderProgramv (GLenum type, GLsizei count, const GLchar* *strings);
> GLAPI void APIENTRY glBindProgramPipeline (GLuint pipeline);
> GLAPI void APIENTRY glDeleteProgramPipelines (GLsizei n, const GLuint *pipelines);
> GLAPI void APIENTRY glGenProgramPipelines (GLsizei n, GLuint *pipelines);
> GLAPI GLboolean APIENTRY glIsProgramPipeline (GLuint pipeline);
> GLAPI void APIENTRY glGetProgramPipelineiv (GLuint pipeline, GLenum pname, GLint *params);
> GLAPI void APIENTRY glProgramUniform1i (GLuint program, GLint location, GLint v0);
> GLAPI void APIENTRY glProgramUniform1iv (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform1f (GLuint program, GLint location, GLfloat v0);
> GLAPI void APIENTRY glProgramUniform1fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform1d (GLuint program, GLint location, GLdouble v0);
> GLAPI void APIENTRY glProgramUniform1dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform1ui (GLuint program, GLint location, GLuint v0);
> GLAPI void APIENTRY glProgramUniform1uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniform2i (GLuint program, GLint location, GLint v0, GLint v1);
> GLAPI void APIENTRY glProgramUniform2iv (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform2f (GLuint program, GLint location, GLfloat v0, GLfloat v1);
> GLAPI void APIENTRY glProgramUniform2fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform2d (GLuint program, GLint location, GLdouble v0, GLdouble v1);
> GLAPI void APIENTRY glProgramUniform2dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform2ui (GLuint program, GLint location, GLuint v0, GLuint v1);
> GLAPI void APIENTRY glProgramUniform2uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniform3i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
> GLAPI void APIENTRY glProgramUniform3iv (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform3f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> GLAPI void APIENTRY glProgramUniform3fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform3d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
> GLAPI void APIENTRY glProgramUniform3dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform3ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
> GLAPI void APIENTRY glProgramUniform3uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniform4i (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> GLAPI void APIENTRY glProgramUniform4iv (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform4f (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> GLAPI void APIENTRY glProgramUniform4fv (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform4d (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
> GLAPI void APIENTRY glProgramUniform4dv (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform4ui (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> GLAPI void APIENTRY glProgramUniform4uiv (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniformMatrix2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x2fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x4fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x3fv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x2dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x4dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x3dv (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glValidateProgramPipeline (GLuint pipeline);
> GLAPI void APIENTRY glGetProgramPipelineInfoLog (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);
> typedef void (APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);
> typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar* *strings);
> typedef void (APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);
> typedef void (APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);
> typedef void (APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);
> typedef GLboolean (APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);
> typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);
> typedef void (APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
> #endif
> 
> #ifndef GL_ARB_vertex_attrib_64bit
> #define GL_ARB_vertex_attrib_64bit 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribL1d (GLuint index, GLdouble x);
> GLAPI void APIENTRY glVertexAttribL2d (GLuint index, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glVertexAttribL3d (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glVertexAttribL4d (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glVertexAttribL1dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribL2dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribL3dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribL4dv (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribLPointer (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glGetVertexAttribLdv (GLuint index, GLenum pname, GLdouble *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);
> #endif
> 
> #ifndef GL_ARB_viewport_array
> #define GL_ARB_viewport_array 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glViewportArrayv (GLuint first, GLsizei count, const GLfloat *v);
> GLAPI void APIENTRY glViewportIndexedf (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
> GLAPI void APIENTRY glViewportIndexedfv (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glScissorArrayv (GLuint first, GLsizei count, const GLint *v);
> GLAPI void APIENTRY glScissorIndexed (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glScissorIndexedv (GLuint index, const GLint *v);
> GLAPI void APIENTRY glDepthRangeArrayv (GLuint first, GLsizei count, const GLclampd *v);
> GLAPI void APIENTRY glDepthRangeIndexed (GLuint index, GLclampd n, GLclampd f);
> GLAPI void APIENTRY glGetFloati_v (GLenum target, GLuint index, GLfloat *data);
> GLAPI void APIENTRY glGetDoublei_v (GLenum target, GLuint index, GLdouble *data);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
> typedef void (APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);
> typedef void (APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLclampd *v);
> typedef void (APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLclampd n, GLclampd f);
> typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);
> typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);
> #endif
> 
> #ifndef GL_ARB_cl_event
> #define GL_ARB_cl_event 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLsync APIENTRY glCreateSyncFromCLeventARB (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLsync (APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context * context, struct _cl_event * event, GLbitfield flags);
> #endif
> 
> #ifndef GL_ARB_debug_output
> #define GL_ARB_debug_output 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDebugMessageControlARB (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
> GLAPI void APIENTRY glDebugMessageInsertARB (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
> GLAPI void APIENTRY glDebugMessageCallbackARB (GLDEBUGPROCARB callback, const GLvoid *userParam);
> GLAPI GLuint APIENTRY glGetDebugMessageLogARB (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
> typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
> typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const GLvoid *userParam);
> typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufsize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);
> #endif
> 
> #ifndef GL_ARB_robustness
> #define GL_ARB_robustness 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLenum APIENTRY glGetGraphicsResetStatusARB (void);
> GLAPI void APIENTRY glGetnMapdvARB (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
> GLAPI void APIENTRY glGetnMapfvARB (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
> GLAPI void APIENTRY glGetnMapivARB (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
> GLAPI void APIENTRY glGetnPixelMapfvARB (GLenum map, GLsizei bufSize, GLfloat *values);
> GLAPI void APIENTRY glGetnPixelMapuivARB (GLenum map, GLsizei bufSize, GLuint *values);
> GLAPI void APIENTRY glGetnPixelMapusvARB (GLenum map, GLsizei bufSize, GLushort *values);
> GLAPI void APIENTRY glGetnPolygonStippleARB (GLsizei bufSize, GLubyte *pattern);
> GLAPI void APIENTRY glGetnColorTableARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
> GLAPI void APIENTRY glGetnConvolutionFilterARB (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
> GLAPI void APIENTRY glGetnSeparableFilterARB (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
> GLAPI void APIENTRY glGetnHistogramARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
> GLAPI void APIENTRY glGetnMinmaxARB (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
> GLAPI void APIENTRY glGetnTexImageARB (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
> GLAPI void APIENTRY glReadnPixelsARB (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
> GLAPI void APIENTRY glGetnCompressedTexImageARB (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
> GLAPI void APIENTRY glGetnUniformfvARB (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
> GLAPI void APIENTRY glGetnUniformivARB (GLuint program, GLint location, GLsizei bufSize, GLint *params);
> GLAPI void APIENTRY glGetnUniformuivARB (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
> GLAPI void APIENTRY glGetnUniformdvARB (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLenum (APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);
> typedef void (APIENTRYP PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
> typedef void (APIENTRYP PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
> typedef void (APIENTRYP PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);
> typedef void (APIENTRYP PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);
> typedef void (APIENTRYP PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);
> typedef void (APIENTRYP PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);
> typedef void (APIENTRYP PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);
> typedef void (APIENTRYP PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *table);
> typedef void (APIENTRYP PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, GLvoid *image);
> typedef void (APIENTRYP PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, GLvoid *row, GLsizei columnBufSize, GLvoid *column, GLvoid *span);
> typedef void (APIENTRYP PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
> typedef void (APIENTRYP PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, GLvoid *values);
> typedef void (APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, GLvoid *img);
> typedef void (APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, GLvoid *data);
> typedef void (APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, GLvoid *img);
> typedef void (APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);
> typedef void (APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);
> typedef void (APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
> #endif
> 
> #ifndef GL_ARB_shader_stencil_export
> #define GL_ARB_shader_stencil_export 1
> #endif
> 
> #ifndef GL_EXT_abgr
> #define GL_EXT_abgr 1
> #endif
> 
> #ifndef GL_EXT_blend_color
> #define GL_EXT_blend_color 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendColorEXT (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDCOLOREXTPROC) (GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
> #endif
> 
> #ifndef GL_EXT_polygon_offset
> #define GL_EXT_polygon_offset 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPolygonOffsetEXT (GLfloat factor, GLfloat bias);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);
> #endif
> 
> #ifndef GL_EXT_texture
> #define GL_EXT_texture 1
> #endif
> 
> #ifndef GL_EXT_texture3D
> #define GL_EXT_texture3D 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexImage3DEXT (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> #endif
> 
> #ifndef GL_SGIS_texture_filter4
> #define GL_SGIS_texture_filter4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetTexFilterFuncSGIS (GLenum target, GLenum filter, GLfloat *weights);
> GLAPI void APIENTRY glTexFilterFuncSGIS (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);
> typedef void (APIENTRYP PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);
> #endif
> 
> #ifndef GL_EXT_subtexture
> #define GL_EXT_subtexture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
> #endif
> 
> #ifndef GL_EXT_copy_texture
> #define GL_EXT_copy_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCopyTexImage1DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
> GLAPI void APIENTRY glCopyTexImage2DEXT (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
> GLAPI void APIENTRY glCopyTexSubImage1DEXT (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glCopyTexSubImage2DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glCopyTexSubImage3DEXT (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
> typedef void (APIENTRYP PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
> typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> #endif
> 
> #ifndef GL_EXT_histogram
> #define GL_EXT_histogram 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetHistogramEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> GLAPI void APIENTRY glGetHistogramParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetHistogramParameterivEXT (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMinmaxEXT (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> GLAPI void APIENTRY glGetMinmaxParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMinmaxParameterivEXT (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glHistogramEXT (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
> GLAPI void APIENTRY glMinmaxEXT (GLenum target, GLenum internalformat, GLboolean sink);
> GLAPI void APIENTRY glResetHistogramEXT (GLenum target);
> GLAPI void APIENTRY glResetMinmaxEXT (GLenum target);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *values);
> typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);
> typedef void (APIENTRYP PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);
> typedef void (APIENTRYP PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLRESETMINMAXEXTPROC) (GLenum target);
> #endif
> 
> #ifndef GL_EXT_convolution
> #define GL_EXT_convolution 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
> GLAPI void APIENTRY glConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
> GLAPI void APIENTRY glConvolutionParameterfEXT (GLenum target, GLenum pname, GLfloat params);
> GLAPI void APIENTRY glConvolutionParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glConvolutionParameteriEXT (GLenum target, GLenum pname, GLint params);
> GLAPI void APIENTRY glConvolutionParameterivEXT (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glCopyConvolutionFilter1DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glCopyConvolutionFilter2DEXT (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetConvolutionFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *image);
> GLAPI void APIENTRY glGetConvolutionParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetConvolutionParameterivEXT (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetSeparableFilterEXT (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
> GLAPI void APIENTRY glSeparableFilter2DEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *image);
> typedef void (APIENTRYP PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *image);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);
> typedef void (APIENTRYP PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *image);
> typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *row, GLvoid *column, GLvoid *span);
> typedef void (APIENTRYP PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *row, const GLvoid *column);
> #endif
> 
> #ifndef GL_SGI_color_matrix
> #define GL_SGI_color_matrix 1
> #endif
> 
> #ifndef GL_SGI_color_table
> #define GL_SGI_color_table 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorTableSGI (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
> GLAPI void APIENTRY glColorTableParameterfvSGI (GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glColorTableParameterivSGI (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glCopyColorTableSGI (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glGetColorTableSGI (GLenum target, GLenum format, GLenum type, GLvoid *table);
> GLAPI void APIENTRY glGetColorTableParameterfvSGI (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetColorTableParameterivSGI (GLenum target, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
> typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, GLvoid *table);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_SGIX_pixel_texture
> #define GL_SGIX_pixel_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPixelTexGenSGIX (GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);
> #endif
> 
> #ifndef GL_SGIS_pixel_texture
> #define GL_SGIS_pixel_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPixelTexGenParameteriSGIS (GLenum pname, GLint param);
> GLAPI void APIENTRY glPixelTexGenParameterivSGIS (GLenum pname, const GLint *params);
> GLAPI void APIENTRY glPixelTexGenParameterfSGIS (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glPixelTexGenParameterfvSGIS (GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glGetPixelTexGenParameterivSGIS (GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetPixelTexGenParameterfvSGIS (GLenum pname, GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);
> #endif
> 
> #ifndef GL_SGIS_texture4D
> #define GL_SGIS_texture4D 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexImage4DSGIS (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTexSubImage4DSGIS (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *pixels);
> #endif
> 
> #ifndef GL_SGI_texture_color_table
> #define GL_SGI_texture_color_table 1
> #endif
> 
> #ifndef GL_EXT_cmyka
> #define GL_EXT_cmyka 1
> #endif
> 
> #ifndef GL_EXT_texture_object
> #define GL_EXT_texture_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLboolean APIENTRY glAreTexturesResidentEXT (GLsizei n, const GLuint *textures, GLboolean *residences);
> GLAPI void APIENTRY glBindTextureEXT (GLenum target, GLuint texture);
> GLAPI void APIENTRY glDeleteTexturesEXT (GLsizei n, const GLuint *textures);
> GLAPI void APIENTRY glGenTexturesEXT (GLsizei n, GLuint *textures);
> GLAPI GLboolean APIENTRY glIsTextureEXT (GLuint texture);
> GLAPI void APIENTRY glPrioritizeTexturesEXT (GLsizei n, const GLuint *textures, const GLclampf *priorities);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLboolean (APIENTRYP PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);
> typedef void (APIENTRYP PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);
> typedef void (APIENTRYP PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);
> typedef void (APIENTRYP PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);
> typedef GLboolean (APIENTRYP PFNGLISTEXTUREEXTPROC) (GLuint texture);
> typedef void (APIENTRYP PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);
> #endif
> 
> #ifndef GL_SGIS_detail_texture
> #define GL_SGIS_detail_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDetailTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);
> GLAPI void APIENTRY glGetDetailTexFuncSGIS (GLenum target, GLfloat *points);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
> typedef void (APIENTRYP PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
> #endif
> 
> #ifndef GL_SGIS_sharpen_texture
> #define GL_SGIS_sharpen_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glSharpenTexFuncSGIS (GLenum target, GLsizei n, const GLfloat *points);
> GLAPI void APIENTRY glGetSharpenTexFuncSGIS (GLenum target, GLfloat *points);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);
> typedef void (APIENTRYP PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);
> #endif
> 
> #ifndef GL_EXT_packed_pixels
> #define GL_EXT_packed_pixels 1
> #endif
> 
> #ifndef GL_SGIS_texture_lod
> #define GL_SGIS_texture_lod 1
> #endif
> 
> #ifndef GL_SGIS_multisample
> #define GL_SGIS_multisample 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glSampleMaskSGIS (GLclampf value, GLboolean invert);
> GLAPI void APIENTRY glSamplePatternSGIS (GLenum pattern);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);
> typedef void (APIENTRYP PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);
> #endif
> 
> #ifndef GL_EXT_rescale_normal
> #define GL_EXT_rescale_normal 1
> #endif
> 
> #ifndef GL_EXT_vertex_array
> #define GL_EXT_vertex_array 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glArrayElementEXT (GLint i);
> GLAPI void APIENTRY glColorPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> GLAPI void APIENTRY glDrawArraysEXT (GLenum mode, GLint first, GLsizei count);
> GLAPI void APIENTRY glEdgeFlagPointerEXT (GLsizei stride, GLsizei count, const GLboolean *pointer);
> GLAPI void APIENTRY glGetPointervEXT (GLenum pname, GLvoid* *params);
> GLAPI void APIENTRY glIndexPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> GLAPI void APIENTRY glNormalPointerEXT (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> GLAPI void APIENTRY glTexCoordPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> GLAPI void APIENTRY glVertexPointerEXT (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLARRAYELEMENTEXTPROC) (GLint i);
> typedef void (APIENTRYP PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);
> typedef void (APIENTRYP PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);
> typedef void (APIENTRYP PFNGLGETPOINTERVEXTPROC) (GLenum pname, GLvoid* *params);
> typedef void (APIENTRYP PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_EXT_misc_attribute
> #define GL_EXT_misc_attribute 1
> #endif
> 
> #ifndef GL_SGIS_generate_mipmap
> #define GL_SGIS_generate_mipmap 1
> #endif
> 
> #ifndef GL_SGIX_clipmap
> #define GL_SGIX_clipmap 1
> #endif
> 
> #ifndef GL_SGIX_shadow
> #define GL_SGIX_shadow 1
> #endif
> 
> #ifndef GL_SGIS_texture_edge_clamp
> #define GL_SGIS_texture_edge_clamp 1
> #endif
> 
> #ifndef GL_SGIS_texture_border_clamp
> #define GL_SGIS_texture_border_clamp 1
> #endif
> 
> #ifndef GL_EXT_blend_minmax
> #define GL_EXT_blend_minmax 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendEquationEXT (GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);
> #endif
> 
> #ifndef GL_EXT_blend_subtract
> #define GL_EXT_blend_subtract 1
> #endif
> 
> #ifndef GL_EXT_blend_logic_op
> #define GL_EXT_blend_logic_op 1
> #endif
> 
> #ifndef GL_SGIX_interlace
> #define GL_SGIX_interlace 1
> #endif
> 
> #ifndef GL_SGIX_pixel_tiles
> #define GL_SGIX_pixel_tiles 1
> #endif
> 
> #ifndef GL_SGIX_texture_select
> #define GL_SGIX_texture_select 1
> #endif
> 
> #ifndef GL_SGIX_sprite
> #define GL_SGIX_sprite 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glSpriteParameterfSGIX (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glSpriteParameterfvSGIX (GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glSpriteParameteriSGIX (GLenum pname, GLint param);
> GLAPI void APIENTRY glSpriteParameterivSGIX (GLenum pname, const GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);
> #endif
> 
> #ifndef GL_SGIX_texture_multi_buffer
> #define GL_SGIX_texture_multi_buffer 1
> #endif
> 
> #ifndef GL_EXT_point_parameters
> #define GL_EXT_point_parameters 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPointParameterfEXT (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glPointParameterfvEXT (GLenum pname, const GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);
> #endif
> 
> #ifndef GL_SGIS_point_parameters
> #define GL_SGIS_point_parameters 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPointParameterfSGIS (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glPointParameterfvSGIS (GLenum pname, const GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);
> #endif
> 
> #ifndef GL_SGIX_instruments
> #define GL_SGIX_instruments 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLint APIENTRY glGetInstrumentsSGIX (void);
> GLAPI void APIENTRY glInstrumentsBufferSGIX (GLsizei size, GLint *buffer);
> GLAPI GLint APIENTRY glPollInstrumentsSGIX (GLint *marker_p);
> GLAPI void APIENTRY glReadInstrumentsSGIX (GLint marker);
> GLAPI void APIENTRY glStartInstrumentsSGIX (void);
> GLAPI void APIENTRY glStopInstrumentsSGIX (GLint marker);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLint (APIENTRYP PFNGLGETINSTRUMENTSSGIXPROC) (void);
> typedef void (APIENTRYP PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);
> typedef GLint (APIENTRYP PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);
> typedef void (APIENTRYP PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);
> typedef void (APIENTRYP PFNGLSTARTINSTRUMENTSSGIXPROC) (void);
> typedef void (APIENTRYP PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);
> #endif
> 
> #ifndef GL_SGIX_texture_scale_bias
> #define GL_SGIX_texture_scale_bias 1
> #endif
> 
> #ifndef GL_SGIX_framezoom
> #define GL_SGIX_framezoom 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFrameZoomSGIX (GLint factor);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFRAMEZOOMSGIXPROC) (GLint factor);
> #endif
> 
> #ifndef GL_SGIX_tag_sample_buffer
> #define GL_SGIX_tag_sample_buffer 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTagSampleBufferSGIX (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);
> #endif
> 
> #ifndef GL_SGIX_polynomial_ffd
> #define GL_SGIX_polynomial_ffd 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDeformationMap3dSGIX (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
> GLAPI void APIENTRY glDeformationMap3fSGIX (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
> GLAPI void APIENTRY glDeformSGIX (GLbitfield mask);
> GLAPI void APIENTRY glLoadIdentityDeformationMapSGIX (GLbitfield mask);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);
> typedef void (APIENTRYP PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);
> typedef void (APIENTRYP PFNGLDEFORMSGIXPROC) (GLbitfield mask);
> typedef void (APIENTRYP PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);
> #endif
> 
> #ifndef GL_SGIX_reference_plane
> #define GL_SGIX_reference_plane 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glReferencePlaneSGIX (const GLdouble *equation);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);
> #endif
> 
> #ifndef GL_SGIX_flush_raster
> #define GL_SGIX_flush_raster 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFlushRasterSGIX (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFLUSHRASTERSGIXPROC) (void);
> #endif
> 
> #ifndef GL_SGIX_depth_texture
> #define GL_SGIX_depth_texture 1
> #endif
> 
> #ifndef GL_SGIS_fog_function
> #define GL_SGIS_fog_function 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFogFuncSGIS (GLsizei n, const GLfloat *points);
> GLAPI void APIENTRY glGetFogFuncSGIS (GLfloat *points);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);
> typedef void (APIENTRYP PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);
> #endif
> 
> #ifndef GL_SGIX_fog_offset
> #define GL_SGIX_fog_offset 1
> #endif
> 
> #ifndef GL_HP_image_transform
> #define GL_HP_image_transform 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glImageTransformParameteriHP (GLenum target, GLenum pname, GLint param);
> GLAPI void APIENTRY glImageTransformParameterfHP (GLenum target, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glImageTransformParameterivHP (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glImageTransformParameterfvHP (GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glGetImageTransformParameterivHP (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetImageTransformParameterfvHP (GLenum target, GLenum pname, GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);
> #endif
> 
> #ifndef GL_HP_convolution_border_modes
> #define GL_HP_convolution_border_modes 1
> #endif
> 
> #ifndef GL_SGIX_texture_add_env
> #define GL_SGIX_texture_add_env 1
> #endif
> 
> #ifndef GL_EXT_color_subtable
> #define GL_EXT_color_subtable 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorSubTableEXT (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
> GLAPI void APIENTRY glCopyColorSubTableEXT (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *data);
> typedef void (APIENTRYP PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);
> #endif
> 
> #ifndef GL_PGI_vertex_hints
> #define GL_PGI_vertex_hints 1
> #endif
> 
> #ifndef GL_PGI_misc_hints
> #define GL_PGI_misc_hints 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glHintPGI (GLenum target, GLint mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLHINTPGIPROC) (GLenum target, GLint mode);
> #endif
> 
> #ifndef GL_EXT_paletted_texture
> #define GL_EXT_paletted_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorTableEXT (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
> GLAPI void APIENTRY glGetColorTableEXT (GLenum target, GLenum format, GLenum type, GLvoid *data);
> GLAPI void APIENTRY glGetColorTableParameterivEXT (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetColorTableParameterfvEXT (GLenum target, GLenum pname, GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const GLvoid *table);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, GLvoid *data);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);
> #endif
> 
> #ifndef GL_EXT_clip_volume_hint
> #define GL_EXT_clip_volume_hint 1
> #endif
> 
> #ifndef GL_SGIX_list_priority
> #define GL_SGIX_list_priority 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetListParameterfvSGIX (GLuint list, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetListParameterivSGIX (GLuint list, GLenum pname, GLint *params);
> GLAPI void APIENTRY glListParameterfSGIX (GLuint list, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glListParameterfvSGIX (GLuint list, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glListParameteriSGIX (GLuint list, GLenum pname, GLint param);
> GLAPI void APIENTRY glListParameterivSGIX (GLuint list, GLenum pname, const GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);
> #endif
> 
> #ifndef GL_SGIX_ir_instrument1
> #define GL_SGIX_ir_instrument1 1
> #endif
> 
> #ifndef GL_SGIX_calligraphic_fragment
> #define GL_SGIX_calligraphic_fragment 1
> #endif
> 
> #ifndef GL_SGIX_texture_lod_bias
> #define GL_SGIX_texture_lod_bias 1
> #endif
> 
> #ifndef GL_SGIX_shadow_ambient
> #define GL_SGIX_shadow_ambient 1
> #endif
> 
> #ifndef GL_EXT_index_texture
> #define GL_EXT_index_texture 1
> #endif
> 
> #ifndef GL_EXT_index_material
> #define GL_EXT_index_material 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glIndexMaterialEXT (GLenum face, GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);
> #endif
> 
> #ifndef GL_EXT_index_func
> #define GL_EXT_index_func 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glIndexFuncEXT (GLenum func, GLclampf ref);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);
> #endif
> 
> #ifndef GL_EXT_index_array_formats
> #define GL_EXT_index_array_formats 1
> #endif
> 
> #ifndef GL_EXT_compiled_vertex_array
> #define GL_EXT_compiled_vertex_array 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glLockArraysEXT (GLint first, GLsizei count);
> GLAPI void APIENTRY glUnlockArraysEXT (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);
> typedef void (APIENTRYP PFNGLUNLOCKARRAYSEXTPROC) (void);
> #endif
> 
> #ifndef GL_EXT_cull_vertex
> #define GL_EXT_cull_vertex 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCullParameterdvEXT (GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glCullParameterfvEXT (GLenum pname, GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);
> #endif
> 
> #ifndef GL_SGIX_ycrcb
> #define GL_SGIX_ycrcb 1
> #endif
> 
> #ifndef GL_SGIX_fragment_lighting
> #define GL_SGIX_fragment_lighting 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFragmentColorMaterialSGIX (GLenum face, GLenum mode);
> GLAPI void APIENTRY glFragmentLightfSGIX (GLenum light, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glFragmentLightfvSGIX (GLenum light, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glFragmentLightiSGIX (GLenum light, GLenum pname, GLint param);
> GLAPI void APIENTRY glFragmentLightivSGIX (GLenum light, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glFragmentLightModelfSGIX (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glFragmentLightModelfvSGIX (GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glFragmentLightModeliSGIX (GLenum pname, GLint param);
> GLAPI void APIENTRY glFragmentLightModelivSGIX (GLenum pname, const GLint *params);
> GLAPI void APIENTRY glFragmentMaterialfSGIX (GLenum face, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glFragmentMaterialfvSGIX (GLenum face, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glFragmentMaterialiSGIX (GLenum face, GLenum pname, GLint param);
> GLAPI void APIENTRY glFragmentMaterialivSGIX (GLenum face, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glGetFragmentLightfvSGIX (GLenum light, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetFragmentLightivSGIX (GLenum light, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetFragmentMaterialfvSGIX (GLenum face, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetFragmentMaterialivSGIX (GLenum face, GLenum pname, GLint *params);
> GLAPI void APIENTRY glLightEnviSGIX (GLenum pname, GLint param);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);
> #endif
> 
> #ifndef GL_IBM_rasterpos_clip
> #define GL_IBM_rasterpos_clip 1
> #endif
> 
> #ifndef GL_HP_texture_lighting
> #define GL_HP_texture_lighting 1
> #endif
> 
> #ifndef GL_EXT_draw_range_elements
> #define GL_EXT_draw_range_elements 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawRangeElementsEXT (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);
> #endif
> 
> #ifndef GL_WIN_phong_shading
> #define GL_WIN_phong_shading 1
> #endif
> 
> #ifndef GL_WIN_specular_fog
> #define GL_WIN_specular_fog 1
> #endif
> 
> #ifndef GL_EXT_light_texture
> #define GL_EXT_light_texture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glApplyTextureEXT (GLenum mode);
> GLAPI void APIENTRY glTextureLightEXT (GLenum pname);
> GLAPI void APIENTRY glTextureMaterialEXT (GLenum face, GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);
> typedef void (APIENTRYP PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);
> typedef void (APIENTRYP PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);
> #endif
> 
> #ifndef GL_SGIX_blend_alpha_minmax
> #define GL_SGIX_blend_alpha_minmax 1
> #endif
> 
> #ifndef GL_EXT_bgra
> #define GL_EXT_bgra 1
> #endif
> 
> #ifndef GL_SGIX_async
> #define GL_SGIX_async 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glAsyncMarkerSGIX (GLuint marker);
> GLAPI GLint APIENTRY glFinishAsyncSGIX (GLuint *markerp);
> GLAPI GLint APIENTRY glPollAsyncSGIX (GLuint *markerp);
> GLAPI GLuint APIENTRY glGenAsyncMarkersSGIX (GLsizei range);
> GLAPI void APIENTRY glDeleteAsyncMarkersSGIX (GLuint marker, GLsizei range);
> GLAPI GLboolean APIENTRY glIsAsyncMarkerSGIX (GLuint marker);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLASYNCMARKERSGIXPROC) (GLuint marker);
> typedef GLint (APIENTRYP PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);
> typedef GLint (APIENTRYP PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);
> typedef GLuint (APIENTRYP PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);
> typedef void (APIENTRYP PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);
> typedef GLboolean (APIENTRYP PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);
> #endif
> 
> #ifndef GL_SGIX_async_pixel
> #define GL_SGIX_async_pixel 1
> #endif
> 
> #ifndef GL_SGIX_async_histogram
> #define GL_SGIX_async_histogram 1
> #endif
> 
> #ifndef GL_INTEL_parallel_arrays
> #define GL_INTEL_parallel_arrays 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
> GLAPI void APIENTRY glNormalPointervINTEL (GLenum type, const GLvoid* *pointer);
> GLAPI void APIENTRY glColorPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
> GLAPI void APIENTRY glTexCoordPointervINTEL (GLint size, GLenum type, const GLvoid* *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
> typedef void (APIENTRYP PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const GLvoid* *pointer);
> typedef void (APIENTRYP PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
> typedef void (APIENTRYP PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const GLvoid* *pointer);
> #endif
> 
> #ifndef GL_HP_occlusion_test
> #define GL_HP_occlusion_test 1
> #endif
> 
> #ifndef GL_EXT_pixel_transform
> #define GL_EXT_pixel_transform 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPixelTransformParameteriEXT (GLenum target, GLenum pname, GLint param);
> GLAPI void APIENTRY glPixelTransformParameterfEXT (GLenum target, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glPixelTransformParameterivEXT (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glPixelTransformParameterfvEXT (GLenum target, GLenum pname, const GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);
> #endif
> 
> #ifndef GL_EXT_pixel_transform_color_table
> #define GL_EXT_pixel_transform_color_table 1
> #endif
> 
> #ifndef GL_EXT_shared_texture_palette
> #define GL_EXT_shared_texture_palette 1
> #endif
> 
> #ifndef GL_EXT_separate_specular_color
> #define GL_EXT_separate_specular_color 1
> #endif
> 
> #ifndef GL_EXT_secondary_color
> #define GL_EXT_secondary_color 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glSecondaryColor3bEXT (GLbyte red, GLbyte green, GLbyte blue);
> GLAPI void APIENTRY glSecondaryColor3bvEXT (const GLbyte *v);
> GLAPI void APIENTRY glSecondaryColor3dEXT (GLdouble red, GLdouble green, GLdouble blue);
> GLAPI void APIENTRY glSecondaryColor3dvEXT (const GLdouble *v);
> GLAPI void APIENTRY glSecondaryColor3fEXT (GLfloat red, GLfloat green, GLfloat blue);
> GLAPI void APIENTRY glSecondaryColor3fvEXT (const GLfloat *v);
> GLAPI void APIENTRY glSecondaryColor3iEXT (GLint red, GLint green, GLint blue);
> GLAPI void APIENTRY glSecondaryColor3ivEXT (const GLint *v);
> GLAPI void APIENTRY glSecondaryColor3sEXT (GLshort red, GLshort green, GLshort blue);
> GLAPI void APIENTRY glSecondaryColor3svEXT (const GLshort *v);
> GLAPI void APIENTRY glSecondaryColor3ubEXT (GLubyte red, GLubyte green, GLubyte blue);
> GLAPI void APIENTRY glSecondaryColor3ubvEXT (const GLubyte *v);
> GLAPI void APIENTRY glSecondaryColor3uiEXT (GLuint red, GLuint green, GLuint blue);
> GLAPI void APIENTRY glSecondaryColor3uivEXT (const GLuint *v);
> GLAPI void APIENTRY glSecondaryColor3usEXT (GLushort red, GLushort green, GLushort blue);
> GLAPI void APIENTRY glSecondaryColor3usvEXT (const GLushort *v);
> GLAPI void APIENTRY glSecondaryColorPointerEXT (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);
> typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_EXT_texture_perturb_normal
> #define GL_EXT_texture_perturb_normal 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTextureNormalEXT (GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXTURENORMALEXTPROC) (GLenum mode);
> #endif
> 
> #ifndef GL_EXT_multi_draw_arrays
> #define GL_EXT_multi_draw_arrays 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glMultiDrawArraysEXT (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
> GLAPI void APIENTRY glMultiDrawElementsEXT (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
> typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const GLvoid* *indices, GLsizei primcount);
> #endif
> 
> #ifndef GL_EXT_fog_coord
> #define GL_EXT_fog_coord 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFogCoordfEXT (GLfloat coord);
> GLAPI void APIENTRY glFogCoordfvEXT (const GLfloat *coord);
> GLAPI void APIENTRY glFogCoorddEXT (GLdouble coord);
> GLAPI void APIENTRY glFogCoorddvEXT (const GLdouble *coord);
> GLAPI void APIENTRY glFogCoordPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFOGCOORDFEXTPROC) (GLfloat coord);
> typedef void (APIENTRYP PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);
> typedef void (APIENTRYP PFNGLFOGCOORDDEXTPROC) (GLdouble coord);
> typedef void (APIENTRYP PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);
> typedef void (APIENTRYP PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_REND_screen_coordinates
> #define GL_REND_screen_coordinates 1
> #endif
> 
> #ifndef GL_EXT_coordinate_frame
> #define GL_EXT_coordinate_frame 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTangent3bEXT (GLbyte tx, GLbyte ty, GLbyte tz);
> GLAPI void APIENTRY glTangent3bvEXT (const GLbyte *v);
> GLAPI void APIENTRY glTangent3dEXT (GLdouble tx, GLdouble ty, GLdouble tz);
> GLAPI void APIENTRY glTangent3dvEXT (const GLdouble *v);
> GLAPI void APIENTRY glTangent3fEXT (GLfloat tx, GLfloat ty, GLfloat tz);
> GLAPI void APIENTRY glTangent3fvEXT (const GLfloat *v);
> GLAPI void APIENTRY glTangent3iEXT (GLint tx, GLint ty, GLint tz);
> GLAPI void APIENTRY glTangent3ivEXT (const GLint *v);
> GLAPI void APIENTRY glTangent3sEXT (GLshort tx, GLshort ty, GLshort tz);
> GLAPI void APIENTRY glTangent3svEXT (const GLshort *v);
> GLAPI void APIENTRY glBinormal3bEXT (GLbyte bx, GLbyte by, GLbyte bz);
> GLAPI void APIENTRY glBinormal3bvEXT (const GLbyte *v);
> GLAPI void APIENTRY glBinormal3dEXT (GLdouble bx, GLdouble by, GLdouble bz);
> GLAPI void APIENTRY glBinormal3dvEXT (const GLdouble *v);
> GLAPI void APIENTRY glBinormal3fEXT (GLfloat bx, GLfloat by, GLfloat bz);
> GLAPI void APIENTRY glBinormal3fvEXT (const GLfloat *v);
> GLAPI void APIENTRY glBinormal3iEXT (GLint bx, GLint by, GLint bz);
> GLAPI void APIENTRY glBinormal3ivEXT (const GLint *v);
> GLAPI void APIENTRY glBinormal3sEXT (GLshort bx, GLshort by, GLshort bz);
> GLAPI void APIENTRY glBinormal3svEXT (const GLshort *v);
> GLAPI void APIENTRY glTangentPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glBinormalPointerEXT (GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);
> typedef void (APIENTRYP PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);
> typedef void (APIENTRYP PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);
> typedef void (APIENTRYP PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);
> typedef void (APIENTRYP PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);
> typedef void (APIENTRYP PFNGLTANGENT3IVEXTPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);
> typedef void (APIENTRYP PFNGLTANGENT3SVEXTPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);
> typedef void (APIENTRYP PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);
> typedef void (APIENTRYP PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);
> typedef void (APIENTRYP PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);
> typedef void (APIENTRYP PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);
> typedef void (APIENTRYP PFNGLBINORMAL3IVEXTPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);
> typedef void (APIENTRYP PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_EXT_texture_env_combine
> #define GL_EXT_texture_env_combine 1
> #endif
> 
> #ifndef GL_APPLE_specular_vector
> #define GL_APPLE_specular_vector 1
> #endif
> 
> #ifndef GL_APPLE_transform_hint
> #define GL_APPLE_transform_hint 1
> #endif
> 
> #ifndef GL_SGIX_fog_scale
> #define GL_SGIX_fog_scale 1
> #endif
> 
> #ifndef GL_SUNX_constant_data
> #define GL_SUNX_constant_data 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFinishTextureSUNX (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFINISHTEXTURESUNXPROC) (void);
> #endif
> 
> #ifndef GL_SUN_global_alpha
> #define GL_SUN_global_alpha 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGlobalAlphaFactorbSUN (GLbyte factor);
> GLAPI void APIENTRY glGlobalAlphaFactorsSUN (GLshort factor);
> GLAPI void APIENTRY glGlobalAlphaFactoriSUN (GLint factor);
> GLAPI void APIENTRY glGlobalAlphaFactorfSUN (GLfloat factor);
> GLAPI void APIENTRY glGlobalAlphaFactordSUN (GLdouble factor);
> GLAPI void APIENTRY glGlobalAlphaFactorubSUN (GLubyte factor);
> GLAPI void APIENTRY glGlobalAlphaFactorusSUN (GLushort factor);
> GLAPI void APIENTRY glGlobalAlphaFactoruiSUN (GLuint factor);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);
> typedef void (APIENTRYP PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);
> #endif
> 
> #ifndef GL_SUN_triangle_list
> #define GL_SUN_triangle_list 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glReplacementCodeuiSUN (GLuint code);
> GLAPI void APIENTRY glReplacementCodeusSUN (GLushort code);
> GLAPI void APIENTRY glReplacementCodeubSUN (GLubyte code);
> GLAPI void APIENTRY glReplacementCodeuivSUN (const GLuint *code);
> GLAPI void APIENTRY glReplacementCodeusvSUN (const GLushort *code);
> GLAPI void APIENTRY glReplacementCodeubvSUN (const GLubyte *code);
> GLAPI void APIENTRY glReplacementCodePointerSUN (GLenum type, GLsizei stride, const GLvoid* *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const GLvoid* *pointer);
> #endif
> 
> #ifndef GL_SUN_vertex
> #define GL_SUN_vertex 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColor4ubVertex2fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
> GLAPI void APIENTRY glColor4ubVertex2fvSUN (const GLubyte *c, const GLfloat *v);
> GLAPI void APIENTRY glColor4ubVertex3fSUN (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glColor4ubVertex3fvSUN (const GLubyte *c, const GLfloat *v);
> GLAPI void APIENTRY glColor3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glColor3fVertex3fvSUN (const GLfloat *c, const GLfloat *v);
> GLAPI void APIENTRY glNormal3fVertex3fSUN (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glNormal3fVertex3fvSUN (const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glColor4fNormal3fVertex3fSUN (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glColor4fNormal3fVertex3fvSUN (const GLfloat *c, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord2fVertex3fSUN (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glTexCoord2fVertex3fvSUN (const GLfloat *tc, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord4fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glTexCoord4fVertex4fvSUN (const GLfloat *tc, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fSUN (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glTexCoord2fColor4ubVertex3fvSUN (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord2fColor3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glTexCoord2fColor3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glTexCoord2fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fSUN (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glTexCoord2fColor4fNormal3fVertex3fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fSUN (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glTexCoord4fColor4fNormal3fVertex4fvSUN (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiVertex3fSUN (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiVertex3fvSUN (const GLuint *rc, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fSUN (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiColor4ubVertex3fvSUN (const GLuint *rc, const GLubyte *c, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiColor3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fSUN (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiTexCoord2fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
> GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);
> #endif
> 
> #ifndef GL_EXT_blend_func_separate
> #define GL_EXT_blend_func_separate 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendFuncSeparateEXT (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
> #endif
> 
> #ifndef GL_INGR_blend_func_separate
> #define GL_INGR_blend_func_separate 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendFuncSeparateINGR (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
> #endif
> 
> #ifndef GL_INGR_color_clamp
> #define GL_INGR_color_clamp 1
> #endif
> 
> #ifndef GL_INGR_interlace_read
> #define GL_INGR_interlace_read 1
> #endif
> 
> #ifndef GL_EXT_stencil_wrap
> #define GL_EXT_stencil_wrap 1
> #endif
> 
> #ifndef GL_EXT_422_pixels
> #define GL_EXT_422_pixels 1
> #endif
> 
> #ifndef GL_NV_texgen_reflection
> #define GL_NV_texgen_reflection 1
> #endif
> 
> #ifndef GL_SUN_convolution_border_modes
> #define GL_SUN_convolution_border_modes 1
> #endif
> 
> #ifndef GL_EXT_texture_env_add
> #define GL_EXT_texture_env_add 1
> #endif
> 
> #ifndef GL_EXT_texture_lod_bias
> #define GL_EXT_texture_lod_bias 1
> #endif
> 
> #ifndef GL_EXT_texture_filter_anisotropic
> #define GL_EXT_texture_filter_anisotropic 1
> #endif
> 
> #ifndef GL_EXT_vertex_weighting
> #define GL_EXT_vertex_weighting 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexWeightfEXT (GLfloat weight);
> GLAPI void APIENTRY glVertexWeightfvEXT (const GLfloat *weight);
> GLAPI void APIENTRY glVertexWeightPointerEXT (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);
> typedef void (APIENTRYP PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);
> typedef void (APIENTRYP PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLsizei size, GLenum type, GLsizei stride, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_NV_light_max_exponent
> #define GL_NV_light_max_exponent 1
> #endif
> 
> #ifndef GL_NV_vertex_array_range
> #define GL_NV_vertex_array_range 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFlushVertexArrayRangeNV (void);
> GLAPI void APIENTRY glVertexArrayRangeNV (GLsizei length, const GLvoid *pointer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);
> typedef void (APIENTRYP PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const GLvoid *pointer);
> #endif
> 
> #ifndef GL_NV_register_combiners
> #define GL_NV_register_combiners 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCombinerParameterfvNV (GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glCombinerParameterfNV (GLenum pname, GLfloat param);
> GLAPI void APIENTRY glCombinerParameterivNV (GLenum pname, const GLint *params);
> GLAPI void APIENTRY glCombinerParameteriNV (GLenum pname, GLint param);
> GLAPI void APIENTRY glCombinerInputNV (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
> GLAPI void APIENTRY glCombinerOutputNV (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
> GLAPI void APIENTRY glFinalCombinerInputNV (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
> GLAPI void APIENTRY glGetCombinerInputParameterfvNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetCombinerInputParameterivNV (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetCombinerOutputParameterfvNV (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetCombinerOutputParameterivNV (GLenum stage, GLenum portion, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetFinalCombinerInputParameterfvNV (GLenum variable, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetFinalCombinerInputParameterivNV (GLenum variable, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
> typedef void (APIENTRYP PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);
> typedef void (APIENTRYP PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);
> typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_NV_fog_distance
> #define GL_NV_fog_distance 1
> #endif
> 
> #ifndef GL_NV_texgen_emboss
> #define GL_NV_texgen_emboss 1
> #endif
> 
> #ifndef GL_NV_blend_square
> #define GL_NV_blend_square 1
> #endif
> 
> #ifndef GL_NV_texture_env_combine4
> #define GL_NV_texture_env_combine4 1
> #endif
> 
> #ifndef GL_MESA_resize_buffers
> #define GL_MESA_resize_buffers 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glResizeBuffersMESA (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLRESIZEBUFFERSMESAPROC) (void);
> #endif
> 
> #ifndef GL_MESA_window_pos
> #define GL_MESA_window_pos 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glWindowPos2dMESA (GLdouble x, GLdouble y);
> GLAPI void APIENTRY glWindowPos2dvMESA (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos2fMESA (GLfloat x, GLfloat y);
> GLAPI void APIENTRY glWindowPos2fvMESA (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos2iMESA (GLint x, GLint y);
> GLAPI void APIENTRY glWindowPos2ivMESA (const GLint *v);
> GLAPI void APIENTRY glWindowPos2sMESA (GLshort x, GLshort y);
> GLAPI void APIENTRY glWindowPos2svMESA (const GLshort *v);
> GLAPI void APIENTRY glWindowPos3dMESA (GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glWindowPos3dvMESA (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos3fMESA (GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glWindowPos3fvMESA (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos3iMESA (GLint x, GLint y, GLint z);
> GLAPI void APIENTRY glWindowPos3ivMESA (const GLint *v);
> GLAPI void APIENTRY glWindowPos3sMESA (GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glWindowPos3svMESA (const GLshort *v);
> GLAPI void APIENTRY glWindowPos4dMESA (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glWindowPos4dvMESA (const GLdouble *v);
> GLAPI void APIENTRY glWindowPos4fMESA (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glWindowPos4fvMESA (const GLfloat *v);
> GLAPI void APIENTRY glWindowPos4iMESA (GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glWindowPos4ivMESA (const GLint *v);
> GLAPI void APIENTRY glWindowPos4sMESA (GLshort x, GLshort y, GLshort z, GLshort w);
> GLAPI void APIENTRY glWindowPos4svMESA (const GLshort *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);
> typedef void (APIENTRYP PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);
> typedef void (APIENTRYP PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);
> #endif
> 
> #ifndef GL_IBM_cull_vertex
> #define GL_IBM_cull_vertex 1
> #endif
> 
> #ifndef GL_IBM_multimode_draw_arrays
> #define GL_IBM_multimode_draw_arrays 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glMultiModeDrawArraysIBM (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
> GLAPI void APIENTRY glMultiModeDrawElementsIBM (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);
> typedef void (APIENTRYP PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const GLvoid* const *indices, GLsizei primcount, GLint modestride);
> #endif
> 
> #ifndef GL_IBM_vertex_array_lists
> #define GL_IBM_vertex_array_lists 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glSecondaryColorPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glEdgeFlagPointerListIBM (GLint stride, const GLboolean* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glFogCoordPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glIndexPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glNormalPointerListIBM (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glTexCoordPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> GLAPI void APIENTRY glVertexPointerListIBM (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> typedef void (APIENTRYP PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const GLvoid* *pointer, GLint ptrstride);
> #endif
> 
> #ifndef GL_SGIX_subsample
> #define GL_SGIX_subsample 1
> #endif
> 
> #ifndef GL_SGIX_ycrcba
> #define GL_SGIX_ycrcba 1
> #endif
> 
> #ifndef GL_SGIX_ycrcb_subsample
> #define GL_SGIX_ycrcb_subsample 1
> #endif
> 
> #ifndef GL_SGIX_depth_pass_instrument
> #define GL_SGIX_depth_pass_instrument 1
> #endif
> 
> #ifndef GL_3DFX_texture_compression_FXT1
> #define GL_3DFX_texture_compression_FXT1 1
> #endif
> 
> #ifndef GL_3DFX_multisample
> #define GL_3DFX_multisample 1
> #endif
> 
> #ifndef GL_3DFX_tbuffer
> #define GL_3DFX_tbuffer 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTbufferMask3DFX (GLuint mask);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);
> #endif
> 
> #ifndef GL_EXT_multisample
> #define GL_EXT_multisample 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glSampleMaskEXT (GLclampf value, GLboolean invert);
> GLAPI void APIENTRY glSamplePatternEXT (GLenum pattern);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);
> typedef void (APIENTRYP PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);
> #endif
> 
> #ifndef GL_SGIX_vertex_preclip
> #define GL_SGIX_vertex_preclip 1
> #endif
> 
> #ifndef GL_SGIX_convolution_accuracy
> #define GL_SGIX_convolution_accuracy 1
> #endif
> 
> #ifndef GL_SGIX_resample
> #define GL_SGIX_resample 1
> #endif
> 
> #ifndef GL_SGIS_point_line_texgen
> #define GL_SGIS_point_line_texgen 1
> #endif
> 
> #ifndef GL_SGIS_texture_color_mask
> #define GL_SGIS_texture_color_mask 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTextureColorMaskSGIS (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
> #endif
> 
> #ifndef GL_SGIX_igloo_interface
> #define GL_SGIX_igloo_interface 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glIglooInterfaceSGIX (GLenum pname, const GLvoid *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const GLvoid *params);
> #endif
> 
> #ifndef GL_EXT_texture_env_dot3
> #define GL_EXT_texture_env_dot3 1
> #endif
> 
> #ifndef GL_ATI_texture_mirror_once
> #define GL_ATI_texture_mirror_once 1
> #endif
> 
> #ifndef GL_NV_fence
> #define GL_NV_fence 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDeleteFencesNV (GLsizei n, const GLuint *fences);
> GLAPI void APIENTRY glGenFencesNV (GLsizei n, GLuint *fences);
> GLAPI GLboolean APIENTRY glIsFenceNV (GLuint fence);
> GLAPI GLboolean APIENTRY glTestFenceNV (GLuint fence);
> GLAPI void APIENTRY glGetFenceivNV (GLuint fence, GLenum pname, GLint *params);
> GLAPI void APIENTRY glFinishFenceNV (GLuint fence);
> GLAPI void APIENTRY glSetFenceNV (GLuint fence, GLenum condition);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);
> typedef void (APIENTRYP PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);
> typedef GLboolean (APIENTRYP PFNGLISFENCENVPROC) (GLuint fence);
> typedef GLboolean (APIENTRYP PFNGLTESTFENCENVPROC) (GLuint fence);
> typedef void (APIENTRYP PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLFINISHFENCENVPROC) (GLuint fence);
> typedef void (APIENTRYP PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);
> #endif
> 
> #ifndef GL_NV_evaluators
> #define GL_NV_evaluators 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
> GLAPI void APIENTRY glMapParameterivNV (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glMapParameterfvNV (GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glGetMapControlPointsNV (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
> GLAPI void APIENTRY glGetMapParameterivNV (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMapParameterfvNV (GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMapAttribParameterivNV (GLenum target, GLuint index, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMapAttribParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glEvalMapsNV (GLenum target, GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *points);
> typedef void (APIENTRYP PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *points);
> typedef void (APIENTRYP PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);
> #endif
> 
> #ifndef GL_NV_packed_depth_stencil
> #define GL_NV_packed_depth_stencil 1
> #endif
> 
> #ifndef GL_NV_register_combiners2
> #define GL_NV_register_combiners2 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCombinerStageParameterfvNV (GLenum stage, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glGetCombinerStageParameterfvNV (GLenum stage, GLenum pname, GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);
> #endif
> 
> #ifndef GL_NV_texture_compression_vtc
> #define GL_NV_texture_compression_vtc 1
> #endif
> 
> #ifndef GL_NV_texture_rectangle
> #define GL_NV_texture_rectangle 1
> #endif
> 
> #ifndef GL_NV_texture_shader
> #define GL_NV_texture_shader 1
> #endif
> 
> #ifndef GL_NV_texture_shader2
> #define GL_NV_texture_shader2 1
> #endif
> 
> #ifndef GL_NV_vertex_array_range2
> #define GL_NV_vertex_array_range2 1
> #endif
> 
> #ifndef GL_NV_vertex_program
> #define GL_NV_vertex_program 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLboolean APIENTRY glAreProgramsResidentNV (GLsizei n, const GLuint *programs, GLboolean *residences);
> GLAPI void APIENTRY glBindProgramNV (GLenum target, GLuint id);
> GLAPI void APIENTRY glDeleteProgramsNV (GLsizei n, const GLuint *programs);
> GLAPI void APIENTRY glExecuteProgramNV (GLenum target, GLuint id, const GLfloat *params);
> GLAPI void APIENTRY glGenProgramsNV (GLsizei n, GLuint *programs);
> GLAPI void APIENTRY glGetProgramParameterdvNV (GLenum target, GLuint index, GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glGetProgramParameterfvNV (GLenum target, GLuint index, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetProgramivNV (GLuint id, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetProgramStringNV (GLuint id, GLenum pname, GLubyte *program);
> GLAPI void APIENTRY glGetTrackMatrixivNV (GLenum target, GLuint address, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribdvNV (GLuint index, GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glGetVertexAttribfvNV (GLuint index, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetVertexAttribivNV (GLuint index, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribPointervNV (GLuint index, GLenum pname, GLvoid* *pointer);
> GLAPI GLboolean APIENTRY glIsProgramNV (GLuint id);
> GLAPI void APIENTRY glLoadProgramNV (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
> GLAPI void APIENTRY glProgramParameter4dNV (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glProgramParameter4dvNV (GLenum target, GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glProgramParameter4fNV (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glProgramParameter4fvNV (GLenum target, GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glProgramParameters4dvNV (GLenum target, GLuint index, GLuint count, const GLdouble *v);
> GLAPI void APIENTRY glProgramParameters4fvNV (GLenum target, GLuint index, GLuint count, const GLfloat *v);
> GLAPI void APIENTRY glRequestResidentProgramsNV (GLsizei n, const GLuint *programs);
> GLAPI void APIENTRY glTrackMatrixNV (GLenum target, GLuint address, GLenum matrix, GLenum transform);
> GLAPI void APIENTRY glVertexAttribPointerNV (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glVertexAttrib1dNV (GLuint index, GLdouble x);
> GLAPI void APIENTRY glVertexAttrib1dvNV (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib1fNV (GLuint index, GLfloat x);
> GLAPI void APIENTRY glVertexAttrib1fvNV (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib1sNV (GLuint index, GLshort x);
> GLAPI void APIENTRY glVertexAttrib1svNV (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib2dNV (GLuint index, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glVertexAttrib2dvNV (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib2fNV (GLuint index, GLfloat x, GLfloat y);
> GLAPI void APIENTRY glVertexAttrib2fvNV (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib2sNV (GLuint index, GLshort x, GLshort y);
> GLAPI void APIENTRY glVertexAttrib2svNV (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib3dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glVertexAttrib3dvNV (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib3fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glVertexAttrib3fvNV (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib3sNV (GLuint index, GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glVertexAttrib3svNV (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4dNV (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glVertexAttrib4dvNV (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttrib4fNV (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glVertexAttrib4fvNV (GLuint index, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttrib4sNV (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
> GLAPI void APIENTRY glVertexAttrib4svNV (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttrib4ubNV (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
> GLAPI void APIENTRY glVertexAttrib4ubvNV (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttribs1dvNV (GLuint index, GLsizei count, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribs1fvNV (GLuint index, GLsizei count, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttribs1svNV (GLuint index, GLsizei count, const GLshort *v);
> GLAPI void APIENTRY glVertexAttribs2dvNV (GLuint index, GLsizei count, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribs2fvNV (GLuint index, GLsizei count, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttribs2svNV (GLuint index, GLsizei count, const GLshort *v);
> GLAPI void APIENTRY glVertexAttribs3dvNV (GLuint index, GLsizei count, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribs3fvNV (GLuint index, GLsizei count, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttribs3svNV (GLuint index, GLsizei count, const GLshort *v);
> GLAPI void APIENTRY glVertexAttribs4dvNV (GLuint index, GLsizei count, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribs4fvNV (GLuint index, GLsizei count, const GLfloat *v);
> GLAPI void APIENTRY glVertexAttribs4svNV (GLuint index, GLsizei count, const GLshort *v);
> GLAPI void APIENTRY glVertexAttribs4ubvNV (GLuint index, GLsizei count, const GLubyte *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLboolean (APIENTRYP PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);
> typedef void (APIENTRYP PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);
> typedef void (APIENTRYP PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
> typedef void (APIENTRYP PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);
> typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);
> typedef void (APIENTRYP PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, GLvoid* *pointer);
> typedef GLboolean (APIENTRYP PFNGLISPROGRAMNVPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLuint count, const GLdouble *v);
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLuint count, const GLfloat *v);
> typedef void (APIENTRYP PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);
> typedef void (APIENTRYP PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);
> #endif
> 
> #ifndef GL_SGIX_texture_coordinate_clamp
> #define GL_SGIX_texture_coordinate_clamp 1
> #endif
> 
> #ifndef GL_SGIX_scalebias_hint
> #define GL_SGIX_scalebias_hint 1
> #endif
> 
> #ifndef GL_OML_interlace
> #define GL_OML_interlace 1
> #endif
> 
> #ifndef GL_OML_subsample
> #define GL_OML_subsample 1
> #endif
> 
> #ifndef GL_OML_resample
> #define GL_OML_resample 1
> #endif
> 
> #ifndef GL_NV_copy_depth_to_color
> #define GL_NV_copy_depth_to_color 1
> #endif
> 
> #ifndef GL_ATI_envmap_bumpmap
> #define GL_ATI_envmap_bumpmap 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexBumpParameterivATI (GLenum pname, const GLint *param);
> GLAPI void APIENTRY glTexBumpParameterfvATI (GLenum pname, const GLfloat *param);
> GLAPI void APIENTRY glGetTexBumpParameterivATI (GLenum pname, GLint *param);
> GLAPI void APIENTRY glGetTexBumpParameterfvATI (GLenum pname, GLfloat *param);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);
> typedef void (APIENTRYP PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);
> typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);
> typedef void (APIENTRYP PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);
> #endif
> 
> #ifndef GL_ATI_fragment_shader
> #define GL_ATI_fragment_shader 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLuint APIENTRY glGenFragmentShadersATI (GLuint range);
> GLAPI void APIENTRY glBindFragmentShaderATI (GLuint id);
> GLAPI void APIENTRY glDeleteFragmentShaderATI (GLuint id);
> GLAPI void APIENTRY glBeginFragmentShaderATI (void);
> GLAPI void APIENTRY glEndFragmentShaderATI (void);
> GLAPI void APIENTRY glPassTexCoordATI (GLuint dst, GLuint coord, GLenum swizzle);
> GLAPI void APIENTRY glSampleMapATI (GLuint dst, GLuint interp, GLenum swizzle);
> GLAPI void APIENTRY glColorFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
> GLAPI void APIENTRY glColorFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
> GLAPI void APIENTRY glColorFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
> GLAPI void APIENTRY glAlphaFragmentOp1ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
> GLAPI void APIENTRY glAlphaFragmentOp2ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
> GLAPI void APIENTRY glAlphaFragmentOp3ATI (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
> GLAPI void APIENTRY glSetFragmentShaderConstantATI (GLuint dst, const GLfloat *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLuint (APIENTRYP PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);
> typedef void (APIENTRYP PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLBEGINFRAGMENTSHADERATIPROC) (void);
> typedef void (APIENTRYP PFNGLENDFRAGMENTSHADERATIPROC) (void);
> typedef void (APIENTRYP PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);
> typedef void (APIENTRYP PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);
> typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
> typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
> typedef void (APIENTRYP PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
> typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);
> typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);
> typedef void (APIENTRYP PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);
> typedef void (APIENTRYP PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);
> #endif
> 
> #ifndef GL_ATI_pn_triangles
> #define GL_ATI_pn_triangles 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPNTrianglesiATI (GLenum pname, GLint param);
> GLAPI void APIENTRY glPNTrianglesfATI (GLenum pname, GLfloat param);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);
> #endif
> 
> #ifndef GL_ATI_vertex_array_object
> #define GL_ATI_vertex_array_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLuint APIENTRY glNewObjectBufferATI (GLsizei size, const GLvoid *pointer, GLenum usage);
> GLAPI GLboolean APIENTRY glIsObjectBufferATI (GLuint buffer);
> GLAPI void APIENTRY glUpdateObjectBufferATI (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
> GLAPI void APIENTRY glGetObjectBufferfvATI (GLuint buffer, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetObjectBufferivATI (GLuint buffer, GLenum pname, GLint *params);
> GLAPI void APIENTRY glFreeObjectBufferATI (GLuint buffer);
> GLAPI void APIENTRY glArrayObjectATI (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
> GLAPI void APIENTRY glGetArrayObjectfvATI (GLenum array, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetArrayObjectivATI (GLenum array, GLenum pname, GLint *params);
> GLAPI void APIENTRY glVariantArrayObjectATI (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
> GLAPI void APIENTRY glGetVariantArrayObjectfvATI (GLuint id, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetVariantArrayObjectivATI (GLuint id, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLuint (APIENTRYP PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const GLvoid *pointer, GLenum usage);
> typedef GLboolean (APIENTRYP PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);
> typedef void (APIENTRYP PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const GLvoid *pointer, GLenum preserve);
> typedef void (APIENTRYP PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);
> typedef void (APIENTRYP PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
> typedef void (APIENTRYP PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);
> typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_EXT_vertex_shader
> #define GL_EXT_vertex_shader 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBeginVertexShaderEXT (void);
> GLAPI void APIENTRY glEndVertexShaderEXT (void);
> GLAPI void APIENTRY glBindVertexShaderEXT (GLuint id);
> GLAPI GLuint APIENTRY glGenVertexShadersEXT (GLuint range);
> GLAPI void APIENTRY glDeleteVertexShaderEXT (GLuint id);
> GLAPI void APIENTRY glShaderOp1EXT (GLenum op, GLuint res, GLuint arg1);
> GLAPI void APIENTRY glShaderOp2EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
> GLAPI void APIENTRY glShaderOp3EXT (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
> GLAPI void APIENTRY glSwizzleEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
> GLAPI void APIENTRY glWriteMaskEXT (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
> GLAPI void APIENTRY glInsertComponentEXT (GLuint res, GLuint src, GLuint num);
> GLAPI void APIENTRY glExtractComponentEXT (GLuint res, GLuint src, GLuint num);
> GLAPI GLuint APIENTRY glGenSymbolsEXT (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
> GLAPI void APIENTRY glSetInvariantEXT (GLuint id, GLenum type, const GLvoid *addr);
> GLAPI void APIENTRY glSetLocalConstantEXT (GLuint id, GLenum type, const GLvoid *addr);
> GLAPI void APIENTRY glVariantbvEXT (GLuint id, const GLbyte *addr);
> GLAPI void APIENTRY glVariantsvEXT (GLuint id, const GLshort *addr);
> GLAPI void APIENTRY glVariantivEXT (GLuint id, const GLint *addr);
> GLAPI void APIENTRY glVariantfvEXT (GLuint id, const GLfloat *addr);
> GLAPI void APIENTRY glVariantdvEXT (GLuint id, const GLdouble *addr);
> GLAPI void APIENTRY glVariantubvEXT (GLuint id, const GLubyte *addr);
> GLAPI void APIENTRY glVariantusvEXT (GLuint id, const GLushort *addr);
> GLAPI void APIENTRY glVariantuivEXT (GLuint id, const GLuint *addr);
> GLAPI void APIENTRY glVariantPointerEXT (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
> GLAPI void APIENTRY glEnableVariantClientStateEXT (GLuint id);
> GLAPI void APIENTRY glDisableVariantClientStateEXT (GLuint id);
> GLAPI GLuint APIENTRY glBindLightParameterEXT (GLenum light, GLenum value);
> GLAPI GLuint APIENTRY glBindMaterialParameterEXT (GLenum face, GLenum value);
> GLAPI GLuint APIENTRY glBindTexGenParameterEXT (GLenum unit, GLenum coord, GLenum value);
> GLAPI GLuint APIENTRY glBindTextureUnitParameterEXT (GLenum unit, GLenum value);
> GLAPI GLuint APIENTRY glBindParameterEXT (GLenum value);
> GLAPI GLboolean APIENTRY glIsVariantEnabledEXT (GLuint id, GLenum cap);
> GLAPI void APIENTRY glGetVariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
> GLAPI void APIENTRY glGetVariantIntegervEXT (GLuint id, GLenum value, GLint *data);
> GLAPI void APIENTRY glGetVariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
> GLAPI void APIENTRY glGetVariantPointervEXT (GLuint id, GLenum value, GLvoid* *data);
> GLAPI void APIENTRY glGetInvariantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
> GLAPI void APIENTRY glGetInvariantIntegervEXT (GLuint id, GLenum value, GLint *data);
> GLAPI void APIENTRY glGetInvariantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
> GLAPI void APIENTRY glGetLocalConstantBooleanvEXT (GLuint id, GLenum value, GLboolean *data);
> GLAPI void APIENTRY glGetLocalConstantIntegervEXT (GLuint id, GLenum value, GLint *data);
> GLAPI void APIENTRY glGetLocalConstantFloatvEXT (GLuint id, GLenum value, GLfloat *data);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBEGINVERTEXSHADEREXTPROC) (void);
> typedef void (APIENTRYP PFNGLENDVERTEXSHADEREXTPROC) (void);
> typedef void (APIENTRYP PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);
> typedef GLuint (APIENTRYP PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);
> typedef void (APIENTRYP PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);
> typedef void (APIENTRYP PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);
> typedef void (APIENTRYP PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);
> typedef void (APIENTRYP PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
> typedef void (APIENTRYP PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);
> typedef void (APIENTRYP PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
> typedef void (APIENTRYP PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);
> typedef GLuint (APIENTRYP PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);
> typedef void (APIENTRYP PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
> typedef void (APIENTRYP PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const GLvoid *addr);
> typedef void (APIENTRYP PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);
> typedef void (APIENTRYP PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);
> typedef void (APIENTRYP PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);
> typedef void (APIENTRYP PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);
> typedef void (APIENTRYP PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);
> typedef void (APIENTRYP PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);
> typedef void (APIENTRYP PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);
> typedef void (APIENTRYP PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);
> typedef void (APIENTRYP PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const GLvoid *addr);
> typedef void (APIENTRYP PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);
> typedef GLuint (APIENTRYP PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);
> typedef GLuint (APIENTRYP PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);
> typedef GLuint (APIENTRYP PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);
> typedef GLuint (APIENTRYP PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);
> typedef GLuint (APIENTRYP PFNGLBINDPARAMETEREXTPROC) (GLenum value);
> typedef GLboolean (APIENTRYP PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);
> typedef void (APIENTRYP PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
> typedef void (APIENTRYP PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
> typedef void (APIENTRYP PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
> typedef void (APIENTRYP PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, GLvoid* *data);
> typedef void (APIENTRYP PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
> typedef void (APIENTRYP PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
> typedef void (APIENTRYP PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
> typedef void (APIENTRYP PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);
> typedef void (APIENTRYP PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);
> typedef void (APIENTRYP PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);
> #endif
> 
> #ifndef GL_ATI_vertex_streams
> #define GL_ATI_vertex_streams 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexStream1sATI (GLenum stream, GLshort x);
> GLAPI void APIENTRY glVertexStream1svATI (GLenum stream, const GLshort *coords);
> GLAPI void APIENTRY glVertexStream1iATI (GLenum stream, GLint x);
> GLAPI void APIENTRY glVertexStream1ivATI (GLenum stream, const GLint *coords);
> GLAPI void APIENTRY glVertexStream1fATI (GLenum stream, GLfloat x);
> GLAPI void APIENTRY glVertexStream1fvATI (GLenum stream, const GLfloat *coords);
> GLAPI void APIENTRY glVertexStream1dATI (GLenum stream, GLdouble x);
> GLAPI void APIENTRY glVertexStream1dvATI (GLenum stream, const GLdouble *coords);
> GLAPI void APIENTRY glVertexStream2sATI (GLenum stream, GLshort x, GLshort y);
> GLAPI void APIENTRY glVertexStream2svATI (GLenum stream, const GLshort *coords);
> GLAPI void APIENTRY glVertexStream2iATI (GLenum stream, GLint x, GLint y);
> GLAPI void APIENTRY glVertexStream2ivATI (GLenum stream, const GLint *coords);
> GLAPI void APIENTRY glVertexStream2fATI (GLenum stream, GLfloat x, GLfloat y);
> GLAPI void APIENTRY glVertexStream2fvATI (GLenum stream, const GLfloat *coords);
> GLAPI void APIENTRY glVertexStream2dATI (GLenum stream, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glVertexStream2dvATI (GLenum stream, const GLdouble *coords);
> GLAPI void APIENTRY glVertexStream3sATI (GLenum stream, GLshort x, GLshort y, GLshort z);
> GLAPI void APIENTRY glVertexStream3svATI (GLenum stream, const GLshort *coords);
> GLAPI void APIENTRY glVertexStream3iATI (GLenum stream, GLint x, GLint y, GLint z);
> GLAPI void APIENTRY glVertexStream3ivATI (GLenum stream, const GLint *coords);
> GLAPI void APIENTRY glVertexStream3fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glVertexStream3fvATI (GLenum stream, const GLfloat *coords);
> GLAPI void APIENTRY glVertexStream3dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glVertexStream3dvATI (GLenum stream, const GLdouble *coords);
> GLAPI void APIENTRY glVertexStream4sATI (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
> GLAPI void APIENTRY glVertexStream4svATI (GLenum stream, const GLshort *coords);
> GLAPI void APIENTRY glVertexStream4iATI (GLenum stream, GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glVertexStream4ivATI (GLenum stream, const GLint *coords);
> GLAPI void APIENTRY glVertexStream4fATI (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glVertexStream4fvATI (GLenum stream, const GLfloat *coords);
> GLAPI void APIENTRY glVertexStream4dATI (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glVertexStream4dvATI (GLenum stream, const GLdouble *coords);
> GLAPI void APIENTRY glNormalStream3bATI (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
> GLAPI void APIENTRY glNormalStream3bvATI (GLenum stream, const GLbyte *coords);
> GLAPI void APIENTRY glNormalStream3sATI (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
> GLAPI void APIENTRY glNormalStream3svATI (GLenum stream, const GLshort *coords);
> GLAPI void APIENTRY glNormalStream3iATI (GLenum stream, GLint nx, GLint ny, GLint nz);
> GLAPI void APIENTRY glNormalStream3ivATI (GLenum stream, const GLint *coords);
> GLAPI void APIENTRY glNormalStream3fATI (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
> GLAPI void APIENTRY glNormalStream3fvATI (GLenum stream, const GLfloat *coords);
> GLAPI void APIENTRY glNormalStream3dATI (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
> GLAPI void APIENTRY glNormalStream3dvATI (GLenum stream, const GLdouble *coords);
> GLAPI void APIENTRY glClientActiveVertexStreamATI (GLenum stream);
> GLAPI void APIENTRY glVertexBlendEnviATI (GLenum pname, GLint param);
> GLAPI void APIENTRY glVertexBlendEnvfATI (GLenum pname, GLfloat param);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);
> typedef void (APIENTRYP PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);
> typedef void (APIENTRYP PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);
> typedef void (APIENTRYP PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);
> #endif
> 
> #ifndef GL_ATI_element_array
> #define GL_ATI_element_array 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glElementPointerATI (GLenum type, const GLvoid *pointer);
> GLAPI void APIENTRY glDrawElementArrayATI (GLenum mode, GLsizei count);
> GLAPI void APIENTRY glDrawRangeElementArrayATI (GLenum mode, GLuint start, GLuint end, GLsizei count);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLELEMENTPOINTERATIPROC) (GLenum type, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);
> typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);
> #endif
> 
> #ifndef GL_SUN_mesh_array
> #define GL_SUN_mesh_array 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawMeshArraysSUN (GLenum mode, GLint first, GLsizei count, GLsizei width);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);
> #endif
> 
> #ifndef GL_SUN_slice_accum
> #define GL_SUN_slice_accum 1
> #endif
> 
> #ifndef GL_NV_multisample_filter_hint
> #define GL_NV_multisample_filter_hint 1
> #endif
> 
> #ifndef GL_NV_depth_clamp
> #define GL_NV_depth_clamp 1
> #endif
> 
> #ifndef GL_NV_occlusion_query
> #define GL_NV_occlusion_query 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGenOcclusionQueriesNV (GLsizei n, GLuint *ids);
> GLAPI void APIENTRY glDeleteOcclusionQueriesNV (GLsizei n, const GLuint *ids);
> GLAPI GLboolean APIENTRY glIsOcclusionQueryNV (GLuint id);
> GLAPI void APIENTRY glBeginOcclusionQueryNV (GLuint id);
> GLAPI void APIENTRY glEndOcclusionQueryNV (void);
> GLAPI void APIENTRY glGetOcclusionQueryivNV (GLuint id, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetOcclusionQueryuivNV (GLuint id, GLenum pname, GLuint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);
> typedef void (APIENTRYP PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);
> typedef GLboolean (APIENTRYP PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLENDOCCLUSIONQUERYNVPROC) (void);
> typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);
> #endif
> 
> #ifndef GL_NV_point_sprite
> #define GL_NV_point_sprite 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPointParameteriNV (GLenum pname, GLint param);
> GLAPI void APIENTRY glPointParameterivNV (GLenum pname, const GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);
> #endif
> 
> #ifndef GL_NV_texture_shader3
> #define GL_NV_texture_shader3 1
> #endif
> 
> #ifndef GL_NV_vertex_program1_1
> #define GL_NV_vertex_program1_1 1
> #endif
> 
> #ifndef GL_EXT_shadow_funcs
> #define GL_EXT_shadow_funcs 1
> #endif
> 
> #ifndef GL_EXT_stencil_two_side
> #define GL_EXT_stencil_two_side 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glActiveStencilFaceEXT (GLenum face);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);
> #endif
> 
> #ifndef GL_ATI_text_fragment_shader
> #define GL_ATI_text_fragment_shader 1
> #endif
> 
> #ifndef GL_APPLE_client_storage
> #define GL_APPLE_client_storage 1
> #endif
> 
> #ifndef GL_APPLE_element_array
> #define GL_APPLE_element_array 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glElementPointerAPPLE (GLenum type, const GLvoid *pointer);
> GLAPI void APIENTRY glDrawElementArrayAPPLE (GLenum mode, GLint first, GLsizei count);
> GLAPI void APIENTRY glDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
> GLAPI void APIENTRY glMultiDrawElementArrayAPPLE (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
> GLAPI void APIENTRY glMultiDrawRangeElementArrayAPPLE (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);
> typedef void (APIENTRYP PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);
> typedef void (APIENTRYP PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);
> typedef void (APIENTRYP PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);
> #endif
> 
> #ifndef GL_APPLE_fence
> #define GL_APPLE_fence 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGenFencesAPPLE (GLsizei n, GLuint *fences);
> GLAPI void APIENTRY glDeleteFencesAPPLE (GLsizei n, const GLuint *fences);
> GLAPI void APIENTRY glSetFenceAPPLE (GLuint fence);
> GLAPI GLboolean APIENTRY glIsFenceAPPLE (GLuint fence);
> GLAPI GLboolean APIENTRY glTestFenceAPPLE (GLuint fence);
> GLAPI void APIENTRY glFinishFenceAPPLE (GLuint fence);
> GLAPI GLboolean APIENTRY glTestObjectAPPLE (GLenum object, GLuint name);
> GLAPI void APIENTRY glFinishObjectAPPLE (GLenum object, GLint name);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);
> typedef void (APIENTRYP PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);
> typedef void (APIENTRYP PFNGLSETFENCEAPPLEPROC) (GLuint fence);
> typedef GLboolean (APIENTRYP PFNGLISFENCEAPPLEPROC) (GLuint fence);
> typedef GLboolean (APIENTRYP PFNGLTESTFENCEAPPLEPROC) (GLuint fence);
> typedef void (APIENTRYP PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);
> typedef GLboolean (APIENTRYP PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);
> typedef void (APIENTRYP PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);
> #endif
> 
> #ifndef GL_APPLE_vertex_array_object
> #define GL_APPLE_vertex_array_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindVertexArrayAPPLE (GLuint array);
> GLAPI void APIENTRY glDeleteVertexArraysAPPLE (GLsizei n, const GLuint *arrays);
> GLAPI void APIENTRY glGenVertexArraysAPPLE (GLsizei n, GLuint *arrays);
> GLAPI GLboolean APIENTRY glIsVertexArrayAPPLE (GLuint array);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);
> typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);
> typedef void (APIENTRYP PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);
> typedef GLboolean (APIENTRYP PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);
> #endif
> 
> #ifndef GL_APPLE_vertex_array_range
> #define GL_APPLE_vertex_array_range 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);
> GLAPI void APIENTRY glFlushVertexArrayRangeAPPLE (GLsizei length, GLvoid *pointer);
> GLAPI void APIENTRY glVertexArrayParameteriAPPLE (GLenum pname, GLint param);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
> typedef void (APIENTRYP PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, GLvoid *pointer);
> typedef void (APIENTRYP PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);
> #endif
> 
> #ifndef GL_APPLE_ycbcr_422
> #define GL_APPLE_ycbcr_422 1
> #endif
> 
> #ifndef GL_S3_s3tc
> #define GL_S3_s3tc 1
> #endif
> 
> #ifndef GL_ATI_draw_buffers
> #define GL_ATI_draw_buffers 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawBuffersATI (GLsizei n, const GLenum *bufs);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);
> #endif
> 
> #ifndef GL_ATI_pixel_format_float
> #define GL_ATI_pixel_format_float 1
> /* This is really a WGL extension, but defines some associated GL enums.
>  * ATI does not export "GL_ATI_pixel_format_float" in the GL_EXTENSIONS string.
>  */
> #endif
> 
> #ifndef GL_ATI_texture_env_combine3
> #define GL_ATI_texture_env_combine3 1
> #endif
> 
> #ifndef GL_ATI_texture_float
> #define GL_ATI_texture_float 1
> #endif
> 
> #ifndef GL_NV_float_buffer
> #define GL_NV_float_buffer 1
> #endif
> 
> #ifndef GL_NV_fragment_program
> #define GL_NV_fragment_program 1
> /* Some NV_fragment_program entry points are shared with ARB_vertex_program. */
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramNamedParameter4fNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glProgramNamedParameter4dNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glProgramNamedParameter4fvNV (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
> GLAPI void APIENTRY glProgramNamedParameter4dvNV (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
> GLAPI void APIENTRY glGetProgramNamedParameterfvNV (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
> GLAPI void APIENTRY glGetProgramNamedParameterdvNV (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);
> typedef void (APIENTRYP PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);
> typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);
> #endif
> 
> #ifndef GL_NV_half_float
> #define GL_NV_half_float 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertex2hNV (GLhalfNV x, GLhalfNV y);
> GLAPI void APIENTRY glVertex2hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glVertex3hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z);
> GLAPI void APIENTRY glVertex3hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glVertex4hNV (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
> GLAPI void APIENTRY glVertex4hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glNormal3hNV (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
> GLAPI void APIENTRY glNormal3hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
> GLAPI void APIENTRY glColor3hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glColor4hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
> GLAPI void APIENTRY glColor4hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glTexCoord1hNV (GLhalfNV s);
> GLAPI void APIENTRY glTexCoord1hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glTexCoord2hNV (GLhalfNV s, GLhalfNV t);
> GLAPI void APIENTRY glTexCoord2hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glTexCoord3hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r);
> GLAPI void APIENTRY glTexCoord3hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glTexCoord4hNV (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
> GLAPI void APIENTRY glTexCoord4hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glMultiTexCoord1hNV (GLenum target, GLhalfNV s);
> GLAPI void APIENTRY glMultiTexCoord1hvNV (GLenum target, const GLhalfNV *v);
> GLAPI void APIENTRY glMultiTexCoord2hNV (GLenum target, GLhalfNV s, GLhalfNV t);
> GLAPI void APIENTRY glMultiTexCoord2hvNV (GLenum target, const GLhalfNV *v);
> GLAPI void APIENTRY glMultiTexCoord3hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
> GLAPI void APIENTRY glMultiTexCoord3hvNV (GLenum target, const GLhalfNV *v);
> GLAPI void APIENTRY glMultiTexCoord4hNV (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
> GLAPI void APIENTRY glMultiTexCoord4hvNV (GLenum target, const GLhalfNV *v);
> GLAPI void APIENTRY glFogCoordhNV (GLhalfNV fog);
> GLAPI void APIENTRY glFogCoordhvNV (const GLhalfNV *fog);
> GLAPI void APIENTRY glSecondaryColor3hNV (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
> GLAPI void APIENTRY glSecondaryColor3hvNV (const GLhalfNV *v);
> GLAPI void APIENTRY glVertexWeighthNV (GLhalfNV weight);
> GLAPI void APIENTRY glVertexWeighthvNV (const GLhalfNV *weight);
> GLAPI void APIENTRY glVertexAttrib1hNV (GLuint index, GLhalfNV x);
> GLAPI void APIENTRY glVertexAttrib1hvNV (GLuint index, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttrib2hNV (GLuint index, GLhalfNV x, GLhalfNV y);
> GLAPI void APIENTRY glVertexAttrib2hvNV (GLuint index, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttrib3hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
> GLAPI void APIENTRY glVertexAttrib3hvNV (GLuint index, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttrib4hNV (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
> GLAPI void APIENTRY glVertexAttrib4hvNV (GLuint index, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttribs1hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttribs2hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttribs3hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
> GLAPI void APIENTRY glVertexAttribs4hvNV (GLuint index, GLsizei n, const GLhalfNV *v);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);
> typedef void (APIENTRYP PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);
> typedef void (APIENTRYP PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
> typedef void (APIENTRYP PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);
> typedef void (APIENTRYP PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
> typedef void (APIENTRYP PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);
> typedef void (APIENTRYP PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);
> typedef void (APIENTRYP PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);
> typedef void (APIENTRYP PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);
> typedef void (APIENTRYP PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
> typedef void (APIENTRYP PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);
> typedef void (APIENTRYP PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);
> typedef void (APIENTRYP PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);
> typedef void (APIENTRYP PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);
> typedef void (APIENTRYP PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);
> #endif
> 
> #ifndef GL_NV_pixel_data_range
> #define GL_NV_pixel_data_range 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPixelDataRangeNV (GLenum target, GLsizei length, GLvoid *pointer);
> GLAPI void APIENTRY glFlushPixelDataRangeNV (GLenum target);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, GLvoid *pointer);
> typedef void (APIENTRYP PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);
> #endif
> 
> #ifndef GL_NV_primitive_restart
> #define GL_NV_primitive_restart 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPrimitiveRestartNV (void);
> GLAPI void APIENTRY glPrimitiveRestartIndexNV (GLuint index);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPRIMITIVERESTARTNVPROC) (void);
> typedef void (APIENTRYP PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);
> #endif
> 
> #ifndef GL_NV_texture_expand_normal
> #define GL_NV_texture_expand_normal 1
> #endif
> 
> #ifndef GL_NV_vertex_program2
> #define GL_NV_vertex_program2 1
> #endif
> 
> #ifndef GL_ATI_map_object_buffer
> #define GL_ATI_map_object_buffer 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLvoid* APIENTRY glMapObjectBufferATI (GLuint buffer);
> GLAPI void APIENTRY glUnmapObjectBufferATI (GLuint buffer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLvoid* (APIENTRYP PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);
> typedef void (APIENTRYP PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);
> #endif
> 
> #ifndef GL_ATI_separate_stencil
> #define GL_ATI_separate_stencil 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glStencilOpSeparateATI (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
> GLAPI void APIENTRY glStencilFuncSeparateATI (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
> typedef void (APIENTRYP PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);
> #endif
> 
> #ifndef GL_ATI_vertex_attrib_array_object
> #define GL_ATI_vertex_attrib_array_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribArrayObjectATI (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
> GLAPI void APIENTRY glGetVertexAttribArrayObjectfvATI (GLuint index, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetVertexAttribArrayObjectivATI (GLuint index, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_OES_read_format
> #define GL_OES_read_format 1
> #endif
> 
> #ifndef GL_EXT_depth_bounds_test
> #define GL_EXT_depth_bounds_test 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDepthBoundsEXT (GLclampd zmin, GLclampd zmax);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);
> #endif
> 
> #ifndef GL_EXT_texture_mirror_clamp
> #define GL_EXT_texture_mirror_clamp 1
> #endif
> 
> #ifndef GL_EXT_blend_equation_separate
> #define GL_EXT_blend_equation_separate 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendEquationSeparateEXT (GLenum modeRGB, GLenum modeAlpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);
> #endif
> 
> #ifndef GL_MESA_pack_invert
> #define GL_MESA_pack_invert 1
> #endif
> 
> #ifndef GL_MESA_ycbcr_texture
> #define GL_MESA_ycbcr_texture 1
> #endif
> 
> #ifndef GL_EXT_pixel_buffer_object
> #define GL_EXT_pixel_buffer_object 1
> #endif
> 
> #ifndef GL_NV_fragment_program_option
> #define GL_NV_fragment_program_option 1
> #endif
> 
> #ifndef GL_NV_fragment_program2
> #define GL_NV_fragment_program2 1
> #endif
> 
> #ifndef GL_NV_vertex_program2_option
> #define GL_NV_vertex_program2_option 1
> #endif
> 
> #ifndef GL_NV_vertex_program3
> #define GL_NV_vertex_program3 1
> #endif
> 
> #ifndef GL_EXT_framebuffer_object
> #define GL_EXT_framebuffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLboolean APIENTRY glIsRenderbufferEXT (GLuint renderbuffer);
> GLAPI void APIENTRY glBindRenderbufferEXT (GLenum target, GLuint renderbuffer);
> GLAPI void APIENTRY glDeleteRenderbuffersEXT (GLsizei n, const GLuint *renderbuffers);
> GLAPI void APIENTRY glGenRenderbuffersEXT (GLsizei n, GLuint *renderbuffers);
> GLAPI void APIENTRY glRenderbufferStorageEXT (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetRenderbufferParameterivEXT (GLenum target, GLenum pname, GLint *params);
> GLAPI GLboolean APIENTRY glIsFramebufferEXT (GLuint framebuffer);
> GLAPI void APIENTRY glBindFramebufferEXT (GLenum target, GLuint framebuffer);
> GLAPI void APIENTRY glDeleteFramebuffersEXT (GLsizei n, const GLuint *framebuffers);
> GLAPI void APIENTRY glGenFramebuffersEXT (GLsizei n, GLuint *framebuffers);
> GLAPI GLenum APIENTRY glCheckFramebufferStatusEXT (GLenum target);
> GLAPI void APIENTRY glFramebufferTexture1DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> GLAPI void APIENTRY glFramebufferTexture2DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> GLAPI void APIENTRY glFramebufferTexture3DEXT (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
> GLAPI void APIENTRY glFramebufferRenderbufferEXT (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
> GLAPI void APIENTRY glGetFramebufferAttachmentParameterivEXT (GLenum target, GLenum attachment, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGenerateMipmapEXT (GLenum target);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLboolean (APIENTRYP PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);
> typedef void (APIENTRYP PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);
> typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
> typedef GLboolean (APIENTRYP PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);
> typedef void (APIENTRYP PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);
> typedef void (APIENTRYP PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);
> typedef void (APIENTRYP PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);
> typedef GLenum (APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);
> #endif
> 
> #ifndef GL_GREMEDY_string_marker
> #define GL_GREMEDY_string_marker 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glStringMarkerGREMEDY (GLsizei len, const GLvoid *string);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const GLvoid *string);
> #endif
> 
> #ifndef GL_EXT_packed_depth_stencil
> #define GL_EXT_packed_depth_stencil 1
> #endif
> 
> #ifndef GL_EXT_stencil_clear_tag
> #define GL_EXT_stencil_clear_tag 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glStencilClearTagEXT (GLsizei stencilTagBits, GLuint stencilClearTag);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);
> #endif
> 
> #ifndef GL_EXT_texture_sRGB
> #define GL_EXT_texture_sRGB 1
> #endif
> 
> #ifndef GL_EXT_framebuffer_blit
> #define GL_EXT_framebuffer_blit 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlitFramebufferEXT (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
> #endif
> 
> #ifndef GL_EXT_framebuffer_multisample
> #define GL_EXT_framebuffer_multisample 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glRenderbufferStorageMultisampleEXT (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
> #endif
> 
> #ifndef GL_MESAX_texture_stack
> #define GL_MESAX_texture_stack 1
> #endif
> 
> #ifndef GL_EXT_timer_query
> #define GL_EXT_timer_query 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetQueryObjecti64vEXT (GLuint id, GLenum pname, GLint64EXT *params);
> GLAPI void APIENTRY glGetQueryObjectui64vEXT (GLuint id, GLenum pname, GLuint64EXT *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64EXT *params);
> typedef void (APIENTRYP PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64EXT *params);
> #endif
> 
> #ifndef GL_EXT_gpu_program_parameters
> #define GL_EXT_gpu_program_parameters 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramEnvParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
> GLAPI void APIENTRY glProgramLocalParameters4fvEXT (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);
> #endif
> 
> #ifndef GL_APPLE_flush_buffer_range
> #define GL_APPLE_flush_buffer_range 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBufferParameteriAPPLE (GLenum target, GLenum pname, GLint param);
> GLAPI void APIENTRY glFlushMappedBufferRangeAPPLE (GLenum target, GLintptr offset, GLsizeiptr size);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);
> #endif
> 
> #ifndef GL_NV_gpu_program4
> #define GL_NV_gpu_program4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramLocalParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glProgramLocalParameterI4ivNV (GLenum target, GLuint index, const GLint *params);
> GLAPI void APIENTRY glProgramLocalParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);
> GLAPI void APIENTRY glProgramLocalParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> GLAPI void APIENTRY glProgramLocalParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);
> GLAPI void APIENTRY glProgramLocalParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);
> GLAPI void APIENTRY glProgramEnvParameterI4iNV (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glProgramEnvParameterI4ivNV (GLenum target, GLuint index, const GLint *params);
> GLAPI void APIENTRY glProgramEnvParametersI4ivNV (GLenum target, GLuint index, GLsizei count, const GLint *params);
> GLAPI void APIENTRY glProgramEnvParameterI4uiNV (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> GLAPI void APIENTRY glProgramEnvParameterI4uivNV (GLenum target, GLuint index, const GLuint *params);
> GLAPI void APIENTRY glProgramEnvParametersI4uivNV (GLenum target, GLuint index, GLsizei count, const GLuint *params);
> GLAPI void APIENTRY glGetProgramLocalParameterIivNV (GLenum target, GLuint index, GLint *params);
> GLAPI void APIENTRY glGetProgramLocalParameterIuivNV (GLenum target, GLuint index, GLuint *params);
> GLAPI void APIENTRY glGetProgramEnvParameterIivNV (GLenum target, GLuint index, GLint *params);
> GLAPI void APIENTRY glGetProgramEnvParameterIuivNV (GLenum target, GLuint index, GLuint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
> typedef void (APIENTRYP PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);
> typedef void (APIENTRYP PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);
> #endif
> 
> #ifndef GL_NV_geometry_program4
> #define GL_NV_geometry_program4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramVertexLimitNV (GLenum target, GLint limit);
> GLAPI void APIENTRY glFramebufferTextureEXT (GLenum target, GLenum attachment, GLuint texture, GLint level);
> GLAPI void APIENTRY glFramebufferTextureLayerEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
> GLAPI void APIENTRY glFramebufferTextureFaceEXT (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);
> #endif
> 
> #ifndef GL_EXT_geometry_shader4
> #define GL_EXT_geometry_shader4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramParameteriEXT (GLuint program, GLenum pname, GLint value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);
> #endif
> 
> #ifndef GL_NV_vertex_program4
> #define GL_NV_vertex_program4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribI1iEXT (GLuint index, GLint x);
> GLAPI void APIENTRY glVertexAttribI2iEXT (GLuint index, GLint x, GLint y);
> GLAPI void APIENTRY glVertexAttribI3iEXT (GLuint index, GLint x, GLint y, GLint z);
> GLAPI void APIENTRY glVertexAttribI4iEXT (GLuint index, GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glVertexAttribI1uiEXT (GLuint index, GLuint x);
> GLAPI void APIENTRY glVertexAttribI2uiEXT (GLuint index, GLuint x, GLuint y);
> GLAPI void APIENTRY glVertexAttribI3uiEXT (GLuint index, GLuint x, GLuint y, GLuint z);
> GLAPI void APIENTRY glVertexAttribI4uiEXT (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> GLAPI void APIENTRY glVertexAttribI1ivEXT (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI2ivEXT (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI3ivEXT (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI4ivEXT (GLuint index, const GLint *v);
> GLAPI void APIENTRY glVertexAttribI1uivEXT (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI2uivEXT (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI3uivEXT (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI4uivEXT (GLuint index, const GLuint *v);
> GLAPI void APIENTRY glVertexAttribI4bvEXT (GLuint index, const GLbyte *v);
> GLAPI void APIENTRY glVertexAttribI4svEXT (GLuint index, const GLshort *v);
> GLAPI void APIENTRY glVertexAttribI4ubvEXT (GLuint index, const GLubyte *v);
> GLAPI void APIENTRY glVertexAttribI4usvEXT (GLuint index, const GLushort *v);
> GLAPI void APIENTRY glVertexAttribIPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glGetVertexAttribIivEXT (GLuint index, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVertexAttribIuivEXT (GLuint index, GLenum pname, GLuint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);
> #endif
> 
> #ifndef GL_EXT_gpu_shader4
> #define GL_EXT_gpu_shader4 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetUniformuivEXT (GLuint program, GLint location, GLuint *params);
> GLAPI void APIENTRY glBindFragDataLocationEXT (GLuint program, GLuint color, const GLchar *name);
> GLAPI GLint APIENTRY glGetFragDataLocationEXT (GLuint program, const GLchar *name);
> GLAPI void APIENTRY glUniform1uiEXT (GLint location, GLuint v0);
> GLAPI void APIENTRY glUniform2uiEXT (GLint location, GLuint v0, GLuint v1);
> GLAPI void APIENTRY glUniform3uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2);
> GLAPI void APIENTRY glUniform4uiEXT (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> GLAPI void APIENTRY glUniform1uivEXT (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glUniform2uivEXT (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glUniform3uivEXT (GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glUniform4uivEXT (GLint location, GLsizei count, const GLuint *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);
> typedef void (APIENTRYP PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);
> typedef GLint (APIENTRYP PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);
> typedef void (APIENTRYP PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);
> typedef void (APIENTRYP PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);
> typedef void (APIENTRYP PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);
> typedef void (APIENTRYP PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> typedef void (APIENTRYP PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);
> #endif
> 
> #ifndef GL_EXT_draw_instanced
> #define GL_EXT_draw_instanced 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDrawArraysInstancedEXT (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
> GLAPI void APIENTRY glDrawElementsInstancedEXT (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);
> typedef void (APIENTRYP PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const GLvoid *indices, GLsizei primcount);
> #endif
> 
> #ifndef GL_EXT_packed_float
> #define GL_EXT_packed_float 1
> #endif
> 
> #ifndef GL_EXT_texture_array
> #define GL_EXT_texture_array 1
> #endif
> 
> #ifndef GL_EXT_texture_buffer_object
> #define GL_EXT_texture_buffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexBufferEXT (GLenum target, GLenum internalformat, GLuint buffer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);
> #endif
> 
> #ifndef GL_EXT_texture_compression_latc
> #define GL_EXT_texture_compression_latc 1
> #endif
> 
> #ifndef GL_EXT_texture_compression_rgtc
> #define GL_EXT_texture_compression_rgtc 1
> #endif
> 
> #ifndef GL_EXT_texture_shared_exponent
> #define GL_EXT_texture_shared_exponent 1
> #endif
> 
> #ifndef GL_NV_depth_buffer_float
> #define GL_NV_depth_buffer_float 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDepthRangedNV (GLdouble zNear, GLdouble zFar);
> GLAPI void APIENTRY glClearDepthdNV (GLdouble depth);
> GLAPI void APIENTRY glDepthBoundsdNV (GLdouble zmin, GLdouble zmax);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);
> typedef void (APIENTRYP PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);
> typedef void (APIENTRYP PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);
> #endif
> 
> #ifndef GL_NV_fragment_program4
> #define GL_NV_fragment_program4 1
> #endif
> 
> #ifndef GL_NV_framebuffer_multisample_coverage
> #define GL_NV_framebuffer_multisample_coverage 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glRenderbufferStorageMultisampleCoverageNV (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
> #endif
> 
> #ifndef GL_EXT_framebuffer_sRGB
> #define GL_EXT_framebuffer_sRGB 1
> #endif
> 
> #ifndef GL_NV_geometry_shader4
> #define GL_NV_geometry_shader4 1
> #endif
> 
> #ifndef GL_NV_parameter_buffer_object
> #define GL_NV_parameter_buffer_object 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramBufferParametersfvNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
> GLAPI void APIENTRY glProgramBufferParametersIivNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
> GLAPI void APIENTRY glProgramBufferParametersIuivNV (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *params);
> typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *params);
> typedef void (APIENTRYP PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *params);
> #endif
> 
> #ifndef GL_EXT_draw_buffers2
> #define GL_EXT_draw_buffers2 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glColorMaskIndexedEXT (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
> GLAPI void APIENTRY glGetBooleanIndexedvEXT (GLenum target, GLuint index, GLboolean *data);
> GLAPI void APIENTRY glGetIntegerIndexedvEXT (GLenum target, GLuint index, GLint *data);
> GLAPI void APIENTRY glEnableIndexedEXT (GLenum target, GLuint index);
> GLAPI void APIENTRY glDisableIndexedEXT (GLenum target, GLuint index);
> GLAPI GLboolean APIENTRY glIsEnabledIndexedEXT (GLenum target, GLuint index);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
> typedef void (APIENTRYP PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);
> typedef void (APIENTRYP PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);
> typedef void (APIENTRYP PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
> typedef void (APIENTRYP PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);
> typedef GLboolean (APIENTRYP PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);
> #endif
> 
> #ifndef GL_NV_transform_feedback
> #define GL_NV_transform_feedback 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBeginTransformFeedbackNV (GLenum primitiveMode);
> GLAPI void APIENTRY glEndTransformFeedbackNV (void);
> GLAPI void APIENTRY glTransformFeedbackAttribsNV (GLuint count, const GLint *attribs, GLenum bufferMode);
> GLAPI void APIENTRY glBindBufferRangeNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
> GLAPI void APIENTRY glBindBufferOffsetNV (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
> GLAPI void APIENTRY glBindBufferBaseNV (GLenum target, GLuint index, GLuint buffer);
> GLAPI void APIENTRY glTransformFeedbackVaryingsNV (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
> GLAPI void APIENTRY glActiveVaryingNV (GLuint program, const GLchar *name);
> GLAPI GLint APIENTRY glGetVaryingLocationNV (GLuint program, const GLchar *name);
> GLAPI void APIENTRY glGetActiveVaryingNV (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
> GLAPI void APIENTRY glGetTransformFeedbackVaryingNV (GLuint program, GLuint index, GLint *location);
> GLAPI void APIENTRY glTransformFeedbackStreamAttribsNV (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);
> typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);
> typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);
> typedef void (APIENTRYP PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
> typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
> typedef void (APIENTRYP PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);
> typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);
> typedef void (APIENTRYP PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);
> typedef GLint (APIENTRYP PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);
> typedef void (APIENTRYP PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
> typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);
> typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);
> #endif
> 
> #ifndef GL_EXT_bindable_uniform
> #define GL_EXT_bindable_uniform 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glUniformBufferEXT (GLuint program, GLint location, GLuint buffer);
> GLAPI GLint APIENTRY glGetUniformBufferSizeEXT (GLuint program, GLint location);
> GLAPI GLintptr APIENTRY glGetUniformOffsetEXT (GLuint program, GLint location);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);
> typedef GLint (APIENTRYP PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);
> typedef GLintptr (APIENTRYP PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);
> #endif
> 
> #ifndef GL_EXT_texture_integer
> #define GL_EXT_texture_integer 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTexParameterIivEXT (GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glTexParameterIuivEXT (GLenum target, GLenum pname, const GLuint *params);
> GLAPI void APIENTRY glGetTexParameterIivEXT (GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetTexParameterIuivEXT (GLenum target, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glClearColorIiEXT (GLint red, GLint green, GLint blue, GLint alpha);
> GLAPI void APIENTRY glClearColorIuiEXT (GLuint red, GLuint green, GLuint blue, GLuint alpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);
> typedef void (APIENTRYP PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);
> #endif
> 
> #ifndef GL_GREMEDY_frame_terminator
> #define GL_GREMEDY_frame_terminator 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glFrameTerminatorGREMEDY (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLFRAMETERMINATORGREMEDYPROC) (void);
> #endif
> 
> #ifndef GL_NV_conditional_render
> #define GL_NV_conditional_render 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBeginConditionalRenderNV (GLuint id, GLenum mode);
> GLAPI void APIENTRY glEndConditionalRenderNV (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);
> typedef void (APIENTRYP PFNGLENDCONDITIONALRENDERNVPROC) (void);
> #endif
> 
> #ifndef GL_NV_present_video
> #define GL_NV_present_video 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glPresentFrameKeyedNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
> GLAPI void APIENTRY glPresentFrameDualFillNV (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
> GLAPI void APIENTRY glGetVideoivNV (GLuint video_slot, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVideouivNV (GLuint video_slot, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glGetVideoi64vNV (GLuint video_slot, GLenum pname, GLint64EXT *params);
> GLAPI void APIENTRY glGetVideoui64vNV (GLuint video_slot, GLenum pname, GLuint64EXT *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);
> typedef void (APIENTRYP PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);
> typedef void (APIENTRYP PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);
> typedef void (APIENTRYP PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);
> #endif
> 
> #ifndef GL_EXT_transform_feedback
> #define GL_EXT_transform_feedback 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBeginTransformFeedbackEXT (GLenum primitiveMode);
> GLAPI void APIENTRY glEndTransformFeedbackEXT (void);
> GLAPI void APIENTRY glBindBufferRangeEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
> GLAPI void APIENTRY glBindBufferOffsetEXT (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
> GLAPI void APIENTRY glBindBufferBaseEXT (GLenum target, GLuint index, GLuint buffer);
> GLAPI void APIENTRY glTransformFeedbackVaryingsEXT (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
> GLAPI void APIENTRY glGetTransformFeedbackVaryingEXT (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);
> typedef void (APIENTRYP PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);
> typedef void (APIENTRYP PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
> typedef void (APIENTRYP PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);
> typedef void (APIENTRYP PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);
> typedef void (APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar* *varyings, GLenum bufferMode);
> typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
> #endif
> 
> #ifndef GL_EXT_direct_state_access
> #define GL_EXT_direct_state_access 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glClientAttribDefaultEXT (GLbitfield mask);
> GLAPI void APIENTRY glPushClientAttribDefaultEXT (GLbitfield mask);
> GLAPI void APIENTRY glMatrixLoadfEXT (GLenum mode, const GLfloat *m);
> GLAPI void APIENTRY glMatrixLoaddEXT (GLenum mode, const GLdouble *m);
> GLAPI void APIENTRY glMatrixMultfEXT (GLenum mode, const GLfloat *m);
> GLAPI void APIENTRY glMatrixMultdEXT (GLenum mode, const GLdouble *m);
> GLAPI void APIENTRY glMatrixLoadIdentityEXT (GLenum mode);
> GLAPI void APIENTRY glMatrixRotatefEXT (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glMatrixRotatedEXT (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glMatrixScalefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glMatrixScaledEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glMatrixTranslatefEXT (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
> GLAPI void APIENTRY glMatrixTranslatedEXT (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glMatrixFrustumEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
> GLAPI void APIENTRY glMatrixOrthoEXT (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
> GLAPI void APIENTRY glMatrixPopEXT (GLenum mode);
> GLAPI void APIENTRY glMatrixPushEXT (GLenum mode);
> GLAPI void APIENTRY glMatrixLoadTransposefEXT (GLenum mode, const GLfloat *m);
> GLAPI void APIENTRY glMatrixLoadTransposedEXT (GLenum mode, const GLdouble *m);
> GLAPI void APIENTRY glMatrixMultTransposefEXT (GLenum mode, const GLfloat *m);
> GLAPI void APIENTRY glMatrixMultTransposedEXT (GLenum mode, const GLdouble *m);
> GLAPI void APIENTRY glTextureParameterfEXT (GLuint texture, GLenum target, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glTextureParameteriEXT (GLuint texture, GLenum target, GLenum pname, GLint param);
> GLAPI void APIENTRY glTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glCopyTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
> GLAPI void APIENTRY glCopyTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
> GLAPI void APIENTRY glCopyTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glCopyTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetTextureImageEXT (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
> GLAPI void APIENTRY glGetTextureParameterfvEXT (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetTextureParameterivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetTextureLevelParameterfvEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetTextureLevelParameterivEXT (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
> GLAPI void APIENTRY glTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glCopyTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glMultiTexParameterfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glMultiTexParameteriEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
> GLAPI void APIENTRY glMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glCopyMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
> GLAPI void APIENTRY glCopyMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
> GLAPI void APIENTRY glCopyMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
> GLAPI void APIENTRY glCopyMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetMultiTexImageEXT (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
> GLAPI void APIENTRY glGetMultiTexParameterfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMultiTexParameterivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMultiTexLevelParameterfvEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMultiTexLevelParameterivEXT (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
> GLAPI void APIENTRY glMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> GLAPI void APIENTRY glCopyMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glBindMultiTextureEXT (GLenum texunit, GLenum target, GLuint texture);
> GLAPI void APIENTRY glEnableClientStateIndexedEXT (GLenum array, GLuint index);
> GLAPI void APIENTRY glDisableClientStateIndexedEXT (GLenum array, GLuint index);
> GLAPI void APIENTRY glMultiTexCoordPointerEXT (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glMultiTexEnvfEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glMultiTexEnviEXT (GLenum texunit, GLenum target, GLenum pname, GLint param);
> GLAPI void APIENTRY glMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glMultiTexGendEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
> GLAPI void APIENTRY glMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
> GLAPI void APIENTRY glMultiTexGenfEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
> GLAPI void APIENTRY glMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glMultiTexGeniEXT (GLenum texunit, GLenum coord, GLenum pname, GLint param);
> GLAPI void APIENTRY glMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glGetMultiTexEnvfvEXT (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMultiTexEnvivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMultiTexGendvEXT (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glGetMultiTexGenfvEXT (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetMultiTexGenivEXT (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetFloatIndexedvEXT (GLenum target, GLuint index, GLfloat *data);
> GLAPI void APIENTRY glGetDoubleIndexedvEXT (GLenum target, GLuint index, GLdouble *data);
> GLAPI void APIENTRY glGetPointerIndexedvEXT (GLenum target, GLuint index, GLvoid* *data);
> GLAPI void APIENTRY glCompressedTextureImage3DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedTextureImage2DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedTextureImage1DEXT (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedTextureSubImage3DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedTextureSubImage2DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedTextureSubImage1DEXT (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glGetCompressedTextureImageEXT (GLuint texture, GLenum target, GLint lod, GLvoid *img);
> GLAPI void APIENTRY glCompressedMultiTexImage3DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedMultiTexImage2DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedMultiTexImage1DEXT (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedMultiTexSubImage3DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedMultiTexSubImage2DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glCompressedMultiTexSubImage1DEXT (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
> GLAPI void APIENTRY glGetCompressedMultiTexImageEXT (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
> GLAPI void APIENTRY glNamedProgramStringEXT (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
> GLAPI void APIENTRY glNamedProgramLocalParameter4dEXT (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glNamedProgramLocalParameter4dvEXT (GLuint program, GLenum target, GLuint index, const GLdouble *params);
> GLAPI void APIENTRY glNamedProgramLocalParameter4fEXT (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> GLAPI void APIENTRY glNamedProgramLocalParameter4fvEXT (GLuint program, GLenum target, GLuint index, const GLfloat *params);
> GLAPI void APIENTRY glGetNamedProgramLocalParameterdvEXT (GLuint program, GLenum target, GLuint index, GLdouble *params);
> GLAPI void APIENTRY glGetNamedProgramLocalParameterfvEXT (GLuint program, GLenum target, GLuint index, GLfloat *params);
> GLAPI void APIENTRY glGetNamedProgramivEXT (GLuint program, GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetNamedProgramStringEXT (GLuint program, GLenum target, GLenum pname, GLvoid *string);
> GLAPI void APIENTRY glNamedProgramLocalParameters4fvEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
> GLAPI void APIENTRY glNamedProgramLocalParameterI4iEXT (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
> GLAPI void APIENTRY glNamedProgramLocalParameterI4ivEXT (GLuint program, GLenum target, GLuint index, const GLint *params);
> GLAPI void APIENTRY glNamedProgramLocalParametersI4ivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
> GLAPI void APIENTRY glNamedProgramLocalParameterI4uiEXT (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> GLAPI void APIENTRY glNamedProgramLocalParameterI4uivEXT (GLuint program, GLenum target, GLuint index, const GLuint *params);
> GLAPI void APIENTRY glNamedProgramLocalParametersI4uivEXT (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
> GLAPI void APIENTRY glGetNamedProgramLocalParameterIivEXT (GLuint program, GLenum target, GLuint index, GLint *params);
> GLAPI void APIENTRY glGetNamedProgramLocalParameterIuivEXT (GLuint program, GLenum target, GLuint index, GLuint *params);
> GLAPI void APIENTRY glTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
> GLAPI void APIENTRY glGetTextureParameterIivEXT (GLuint texture, GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetTextureParameterIuivEXT (GLuint texture, GLenum target, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
> GLAPI void APIENTRY glGetMultiTexParameterIivEXT (GLenum texunit, GLenum target, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetMultiTexParameterIuivEXT (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
> GLAPI void APIENTRY glProgramUniform1fEXT (GLuint program, GLint location, GLfloat v0);
> GLAPI void APIENTRY glProgramUniform2fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1);
> GLAPI void APIENTRY glProgramUniform3fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> GLAPI void APIENTRY glProgramUniform4fEXT (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> GLAPI void APIENTRY glProgramUniform1iEXT (GLuint program, GLint location, GLint v0);
> GLAPI void APIENTRY glProgramUniform2iEXT (GLuint program, GLint location, GLint v0, GLint v1);
> GLAPI void APIENTRY glProgramUniform3iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
> GLAPI void APIENTRY glProgramUniform4iEXT (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> GLAPI void APIENTRY glProgramUniform1fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform2fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform3fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform4fvEXT (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform1ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform2ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform3ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniform4ivEXT (GLuint program, GLint location, GLsizei count, const GLint *value);
> GLAPI void APIENTRY glProgramUniformMatrix2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x2fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x4fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x3fvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> GLAPI void APIENTRY glProgramUniform1uiEXT (GLuint program, GLint location, GLuint v0);
> GLAPI void APIENTRY glProgramUniform2uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1);
> GLAPI void APIENTRY glProgramUniform3uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
> GLAPI void APIENTRY glProgramUniform4uiEXT (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> GLAPI void APIENTRY glProgramUniform1uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniform2uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniform3uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glProgramUniform4uivEXT (GLuint program, GLint location, GLsizei count, const GLuint *value);
> GLAPI void APIENTRY glNamedBufferDataEXT (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
> GLAPI void APIENTRY glNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
> GLAPI GLvoid* APIENTRY glMapNamedBufferEXT (GLuint buffer, GLenum access);
> GLAPI GLboolean APIENTRY glUnmapNamedBufferEXT (GLuint buffer);
> GLAPI GLvoid* APIENTRY glMapNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
> GLAPI void APIENTRY glFlushMappedNamedBufferRangeEXT (GLuint buffer, GLintptr offset, GLsizeiptr length);
> GLAPI void APIENTRY glNamedCopyBufferSubDataEXT (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
> GLAPI void APIENTRY glGetNamedBufferParameterivEXT (GLuint buffer, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetNamedBufferPointervEXT (GLuint buffer, GLenum pname, GLvoid* *params);
> GLAPI void APIENTRY glGetNamedBufferSubDataEXT (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
> GLAPI void APIENTRY glTextureBufferEXT (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
> GLAPI void APIENTRY glMultiTexBufferEXT (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
> GLAPI void APIENTRY glNamedRenderbufferStorageEXT (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glGetNamedRenderbufferParameterivEXT (GLuint renderbuffer, GLenum pname, GLint *params);
> GLAPI GLenum APIENTRY glCheckNamedFramebufferStatusEXT (GLuint framebuffer, GLenum target);
> GLAPI void APIENTRY glNamedFramebufferTexture1DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> GLAPI void APIENTRY glNamedFramebufferTexture2DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> GLAPI void APIENTRY glNamedFramebufferTexture3DEXT (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
> GLAPI void APIENTRY glNamedFramebufferRenderbufferEXT (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
> GLAPI void APIENTRY glGetNamedFramebufferAttachmentParameterivEXT (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGenerateTextureMipmapEXT (GLuint texture, GLenum target);
> GLAPI void APIENTRY glGenerateMultiTexMipmapEXT (GLenum texunit, GLenum target);
> GLAPI void APIENTRY glFramebufferDrawBufferEXT (GLuint framebuffer, GLenum mode);
> GLAPI void APIENTRY glFramebufferDrawBuffersEXT (GLuint framebuffer, GLsizei n, const GLenum *bufs);
> GLAPI void APIENTRY glFramebufferReadBufferEXT (GLuint framebuffer, GLenum mode);
> GLAPI void APIENTRY glGetFramebufferParameterivEXT (GLuint framebuffer, GLenum pname, GLint *params);
> GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleEXT (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glNamedRenderbufferStorageMultisampleCoverageEXT (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
> GLAPI void APIENTRY glNamedFramebufferTextureEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
> GLAPI void APIENTRY glNamedFramebufferTextureLayerEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
> GLAPI void APIENTRY glNamedFramebufferTextureFaceEXT (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
> GLAPI void APIENTRY glTextureRenderbufferEXT (GLuint texture, GLenum target, GLuint renderbuffer);
> GLAPI void APIENTRY glMultiTexRenderbufferEXT (GLenum texunit, GLenum target, GLuint renderbuffer);
> GLAPI void APIENTRY glProgramUniform1dEXT (GLuint program, GLint location, GLdouble x);
> GLAPI void APIENTRY glProgramUniform2dEXT (GLuint program, GLint location, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glProgramUniform3dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glProgramUniform4dEXT (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glProgramUniform1dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform2dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform3dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniform4dvEXT (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix2x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix3x4dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x2dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> GLAPI void APIENTRY glProgramUniformMatrix4x3dvEXT (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
> typedef void (APIENTRYP PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);
> typedef void (APIENTRYP PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);
> typedef void (APIENTRYP PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);
> typedef void (APIENTRYP PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);
> typedef void (APIENTRYP PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);
> typedef void (APIENTRYP PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);
> typedef void (APIENTRYP PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);
> typedef void (APIENTRYP PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
> typedef void (APIENTRYP PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);
> typedef void (APIENTRYP PFNGLMATRIXPOPEXTPROC) (GLenum mode);
> typedef void (APIENTRYP PFNGLMATRIXPUSHEXTPROC) (GLenum mode);
> typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
> typedef void (APIENTRYP PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
> typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);
> typedef void (APIENTRYP PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);
> typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
> typedef void (APIENTRYP PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
> typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
> typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
> typedef void (APIENTRYP PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
> typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
> typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels);
> typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);
> typedef void (APIENTRYP PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);
> typedef void (APIENTRYP PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
> typedef void (APIENTRYP PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);
> typedef void (APIENTRYP PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);
> typedef void (APIENTRYP PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);
> typedef void (APIENTRYP PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);
> typedef void (APIENTRYP PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);
> typedef void (APIENTRYP PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);
> typedef void (APIENTRYP PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);
> typedef void (APIENTRYP PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLvoid* *data);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, GLvoid *img);
> typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *bits);
> typedef void (APIENTRYP PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, GLvoid *img);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const GLvoid *string);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);
> typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);
> typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, GLvoid *string);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);
> typedef void (APIENTRYP PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);
> typedef void (APIENTRYP PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);
> typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);
> typedef void (APIENTRYP PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const GLvoid *data, GLenum usage);
> typedef void (APIENTRYP PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const GLvoid *data);
> typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);
> typedef GLboolean (APIENTRYP PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);
> typedef GLvoid* (APIENTRYP PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);
> typedef void (APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);
> typedef void (APIENTRYP PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
> typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, GLvoid* *params);
> typedef void (APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLvoid *data);
> typedef void (APIENTRYP PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);
> typedef void (APIENTRYP PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);
> typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);
> typedef GLenum (APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);
> typedef void (APIENTRYP PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);
> typedef void (APIENTRYP PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);
> typedef void (APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
> typedef void (APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);
> typedef void (APIENTRYP PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
> #endif
> 
> #ifndef GL_EXT_vertex_array_bgra
> #define GL_EXT_vertex_array_bgra 1
> #endif
> 
> #ifndef GL_EXT_texture_swizzle
> #define GL_EXT_texture_swizzle 1
> #endif
> 
> #ifndef GL_NV_explicit_multisample
> #define GL_NV_explicit_multisample 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetMultisamplefvNV (GLenum pname, GLuint index, GLfloat *val);
> GLAPI void APIENTRY glSampleMaskIndexedNV (GLuint index, GLbitfield mask);
> GLAPI void APIENTRY glTexRenderbufferNV (GLenum target, GLuint renderbuffer);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);
> typedef void (APIENTRYP PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);
> typedef void (APIENTRYP PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);
> #endif
> 
> #ifndef GL_NV_transform_feedback2
> #define GL_NV_transform_feedback2 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindTransformFeedbackNV (GLenum target, GLuint id);
> GLAPI void APIENTRY glDeleteTransformFeedbacksNV (GLsizei n, const GLuint *ids);
> GLAPI void APIENTRY glGenTransformFeedbacksNV (GLsizei n, GLuint *ids);
> GLAPI GLboolean APIENTRY glIsTransformFeedbackNV (GLuint id);
> GLAPI void APIENTRY glPauseTransformFeedbackNV (void);
> GLAPI void APIENTRY glResumeTransformFeedbackNV (void);
> GLAPI void APIENTRY glDrawTransformFeedbackNV (GLenum mode, GLuint id);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);
> typedef void (APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);
> typedef void (APIENTRYP PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);
> typedef GLboolean (APIENTRYP PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);
> typedef void (APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);
> typedef void (APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);
> typedef void (APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);
> #endif
> 
> #ifndef GL_ATI_meminfo
> #define GL_ATI_meminfo 1
> #endif
> 
> #ifndef GL_AMD_performance_monitor
> #define GL_AMD_performance_monitor 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGetPerfMonitorGroupsAMD (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
> GLAPI void APIENTRY glGetPerfMonitorCountersAMD (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
> GLAPI void APIENTRY glGetPerfMonitorGroupStringAMD (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
> GLAPI void APIENTRY glGetPerfMonitorCounterStringAMD (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
> GLAPI void APIENTRY glGetPerfMonitorCounterInfoAMD (GLuint group, GLuint counter, GLenum pname, GLvoid *data);
> GLAPI void APIENTRY glGenPerfMonitorsAMD (GLsizei n, GLuint *monitors);
> GLAPI void APIENTRY glDeletePerfMonitorsAMD (GLsizei n, GLuint *monitors);
> GLAPI void APIENTRY glSelectPerfMonitorCountersAMD (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
> GLAPI void APIENTRY glBeginPerfMonitorAMD (GLuint monitor);
> GLAPI void APIENTRY glEndPerfMonitorAMD (GLuint monitor);
> GLAPI void APIENTRY glGetPerfMonitorCounterDataAMD (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);
> typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);
> typedef void (APIENTRYP PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);
> typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);
> typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, GLvoid *data);
> typedef void (APIENTRYP PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
> typedef void (APIENTRYP PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);
> typedef void (APIENTRYP PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);
> typedef void (APIENTRYP PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);
> typedef void (APIENTRYP PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);
> typedef void (APIENTRYP PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);
> #endif
> 
> #ifndef GL_AMD_texture_texture4
> #define GL_AMD_texture_texture4 1
> #endif
> 
> #ifndef GL_AMD_vertex_shader_tesselator
> #define GL_AMD_vertex_shader_tesselator 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTessellationFactorAMD (GLfloat factor);
> GLAPI void APIENTRY glTessellationModeAMD (GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);
> typedef void (APIENTRYP PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);
> #endif
> 
> #ifndef GL_EXT_provoking_vertex
> #define GL_EXT_provoking_vertex 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProvokingVertexEXT (GLenum mode);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);
> #endif
> 
> #ifndef GL_EXT_texture_snorm
> #define GL_EXT_texture_snorm 1
> #endif
> 
> #ifndef GL_AMD_draw_buffers_blend
> #define GL_AMD_draw_buffers_blend 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBlendFuncIndexedAMD (GLuint buf, GLenum src, GLenum dst);
> GLAPI void APIENTRY glBlendFuncSeparateIndexedAMD (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
> GLAPI void APIENTRY glBlendEquationIndexedAMD (GLuint buf, GLenum mode);
> GLAPI void APIENTRY glBlendEquationSeparateIndexedAMD (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);
> typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
> typedef void (APIENTRYP PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);
> typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);
> #endif
> 
> #ifndef GL_APPLE_texture_range
> #define GL_APPLE_texture_range 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTextureRangeAPPLE (GLenum target, GLsizei length, const GLvoid *pointer);
> GLAPI void APIENTRY glGetTexParameterPointervAPPLE (GLenum target, GLenum pname, GLvoid* *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, GLvoid* *params);
> #endif
> 
> #ifndef GL_APPLE_float_pixels
> #define GL_APPLE_float_pixels 1
> #endif
> 
> #ifndef GL_APPLE_vertex_program_evaluators
> #define GL_APPLE_vertex_program_evaluators 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glEnableVertexAttribAPPLE (GLuint index, GLenum pname);
> GLAPI void APIENTRY glDisableVertexAttribAPPLE (GLuint index, GLenum pname);
> GLAPI GLboolean APIENTRY glIsVertexAttribEnabledAPPLE (GLuint index, GLenum pname);
> GLAPI void APIENTRY glMapVertexAttrib1dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
> GLAPI void APIENTRY glMapVertexAttrib1fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
> GLAPI void APIENTRY glMapVertexAttrib2dAPPLE (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
> GLAPI void APIENTRY glMapVertexAttrib2fAPPLE (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
> typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);
> typedef GLboolean (APIENTRYP PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);
> typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);
> typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);
> typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);
> typedef void (APIENTRYP PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);
> #endif
> 
> #ifndef GL_APPLE_aux_depth_stencil
> #define GL_APPLE_aux_depth_stencil 1
> #endif
> 
> #ifndef GL_APPLE_object_purgeable
> #define GL_APPLE_object_purgeable 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI GLenum APIENTRY glObjectPurgeableAPPLE (GLenum objectType, GLuint name, GLenum option);
> GLAPI GLenum APIENTRY glObjectUnpurgeableAPPLE (GLenum objectType, GLuint name, GLenum option);
> GLAPI void APIENTRY glGetObjectParameterivAPPLE (GLenum objectType, GLuint name, GLenum pname, GLint *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef GLenum (APIENTRYP PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
> typedef GLenum (APIENTRYP PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);
> typedef void (APIENTRYP PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);
> #endif
> 
> #ifndef GL_APPLE_row_bytes
> #define GL_APPLE_row_bytes 1
> #endif
> 
> #ifndef GL_APPLE_rgb_422
> #define GL_APPLE_rgb_422 1
> #endif
> 
> #ifndef GL_NV_video_capture
> #define GL_NV_video_capture 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBeginVideoCaptureNV (GLuint video_capture_slot);
> GLAPI void APIENTRY glBindVideoCaptureStreamBufferNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
> GLAPI void APIENTRY glBindVideoCaptureStreamTextureNV (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
> GLAPI void APIENTRY glEndVideoCaptureNV (GLuint video_capture_slot);
> GLAPI void APIENTRY glGetVideoCaptureivNV (GLuint video_capture_slot, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVideoCaptureStreamivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
> GLAPI void APIENTRY glGetVideoCaptureStreamfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
> GLAPI void APIENTRY glGetVideoCaptureStreamdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
> GLAPI GLenum APIENTRY glVideoCaptureNV (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
> GLAPI void APIENTRY glVideoCaptureStreamParameterivNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
> GLAPI void APIENTRY glVideoCaptureStreamParameterfvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
> GLAPI void APIENTRY glVideoCaptureStreamParameterdvNV (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
> typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);
> typedef void (APIENTRYP PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);
> typedef void (APIENTRYP PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);
> typedef void (APIENTRYP PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);
> typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);
> typedef void (APIENTRYP PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);
> typedef GLenum (APIENTRYP PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);
> typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);
> typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);
> typedef void (APIENTRYP PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);
> #endif
> 
> #ifndef GL_NV_copy_image
> #define GL_NV_copy_image 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glCopyImageSubDataNV (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);
> #endif
> 
> #ifndef GL_EXT_separate_shader_objects
> #define GL_EXT_separate_shader_objects 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glUseShaderProgramEXT (GLenum type, GLuint program);
> GLAPI void APIENTRY glActiveProgramEXT (GLuint program);
> GLAPI GLuint APIENTRY glCreateShaderProgramEXT (GLenum type, const GLchar *string);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);
> typedef void (APIENTRYP PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);
> typedef GLuint (APIENTRYP PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);
> #endif
> 
> #ifndef GL_NV_parameter_buffer_object2
> #define GL_NV_parameter_buffer_object2 1
> #endif
> 
> #ifndef GL_NV_shader_buffer_load
> #define GL_NV_shader_buffer_load 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glMakeBufferResidentNV (GLenum target, GLenum access);
> GLAPI void APIENTRY glMakeBufferNonResidentNV (GLenum target);
> GLAPI GLboolean APIENTRY glIsBufferResidentNV (GLenum target);
> GLAPI void APIENTRY glMakeNamedBufferResidentNV (GLuint buffer, GLenum access);
> GLAPI void APIENTRY glMakeNamedBufferNonResidentNV (GLuint buffer);
> GLAPI GLboolean APIENTRY glIsNamedBufferResidentNV (GLuint buffer);
> GLAPI void APIENTRY glGetBufferParameterui64vNV (GLenum target, GLenum pname, GLuint64EXT *params);
> GLAPI void APIENTRY glGetNamedBufferParameterui64vNV (GLuint buffer, GLenum pname, GLuint64EXT *params);
> GLAPI void APIENTRY glGetIntegerui64vNV (GLenum value, GLuint64EXT *result);
> GLAPI void APIENTRY glUniformui64NV (GLint location, GLuint64EXT value);
> GLAPI void APIENTRY glUniformui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glGetUniformui64vNV (GLuint program, GLint location, GLuint64EXT *params);
> GLAPI void APIENTRY glProgramUniformui64NV (GLuint program, GLint location, GLuint64EXT value);
> GLAPI void APIENTRY glProgramUniformui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);
> typedef void (APIENTRYP PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);
> typedef GLboolean (APIENTRYP PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);
> typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);
> typedef void (APIENTRYP PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);
> typedef GLboolean (APIENTRYP PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);
> typedef void (APIENTRYP PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);
> typedef void (APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);
> typedef void (APIENTRYP PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);
> typedef void (APIENTRYP PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);
> typedef void (APIENTRYP PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> #endif
> 
> #ifndef GL_NV_vertex_buffer_unified_memory
> #define GL_NV_vertex_buffer_unified_memory 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBufferAddressRangeNV (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
> GLAPI void APIENTRY glVertexFormatNV (GLint size, GLenum type, GLsizei stride);
> GLAPI void APIENTRY glNormalFormatNV (GLenum type, GLsizei stride);
> GLAPI void APIENTRY glColorFormatNV (GLint size, GLenum type, GLsizei stride);
> GLAPI void APIENTRY glIndexFormatNV (GLenum type, GLsizei stride);
> GLAPI void APIENTRY glTexCoordFormatNV (GLint size, GLenum type, GLsizei stride);
> GLAPI void APIENTRY glEdgeFlagFormatNV (GLsizei stride);
> GLAPI void APIENTRY glSecondaryColorFormatNV (GLint size, GLenum type, GLsizei stride);
> GLAPI void APIENTRY glFogCoordFormatNV (GLenum type, GLsizei stride);
> GLAPI void APIENTRY glVertexAttribFormatNV (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
> GLAPI void APIENTRY glVertexAttribIFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
> GLAPI void APIENTRY glGetIntegerui64i_vNV (GLenum value, GLuint index, GLuint64EXT *result);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);
> typedef void (APIENTRYP PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);
> typedef void (APIENTRYP PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
> typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);
> #endif
> 
> #ifndef GL_NV_texture_barrier
> #define GL_NV_texture_barrier 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glTextureBarrierNV (void);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLTEXTUREBARRIERNVPROC) (void);
> #endif
> 
> #ifndef GL_AMD_shader_stencil_export
> #define GL_AMD_shader_stencil_export 1
> #endif
> 
> #ifndef GL_AMD_seamless_cubemap_per_texture
> #define GL_AMD_seamless_cubemap_per_texture 1
> #endif
> 
> #ifndef GL_AMD_conservative_depth
> #define GL_AMD_conservative_depth 1
> #endif
> 
> #ifndef GL_EXT_shader_image_load_store
> #define GL_EXT_shader_image_load_store 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glBindImageTextureEXT (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
> GLAPI void APIENTRY glMemoryBarrierEXT (GLbitfield barriers);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);
> typedef void (APIENTRYP PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);
> #endif
> 
> #ifndef GL_EXT_vertex_attrib_64bit
> #define GL_EXT_vertex_attrib_64bit 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribL1dEXT (GLuint index, GLdouble x);
> GLAPI void APIENTRY glVertexAttribL2dEXT (GLuint index, GLdouble x, GLdouble y);
> GLAPI void APIENTRY glVertexAttribL3dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> GLAPI void APIENTRY glVertexAttribL4dEXT (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> GLAPI void APIENTRY glVertexAttribL1dvEXT (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribL2dvEXT (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribL3dvEXT (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribL4dvEXT (GLuint index, const GLdouble *v);
> GLAPI void APIENTRY glVertexAttribLPointerEXT (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> GLAPI void APIENTRY glGetVertexAttribLdvEXT (GLuint index, GLenum pname, GLdouble *params);
> GLAPI void APIENTRY glVertexArrayVertexAttribLOffsetEXT (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *pointer);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);
> typedef void (APIENTRYP PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);
> #endif
> 
> #ifndef GL_NV_gpu_program5
> #define GL_NV_gpu_program5 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glProgramSubroutineParametersuivNV (GLenum target, GLsizei count, const GLuint *params);
> GLAPI void APIENTRY glGetProgramSubroutineParameteruivNV (GLenum target, GLuint index, GLuint *param);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);
> typedef void (APIENTRYP PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);
> #endif
> 
> #ifndef GL_NV_gpu_shader5
> #define GL_NV_gpu_shader5 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glUniform1i64NV (GLint location, GLint64EXT x);
> GLAPI void APIENTRY glUniform2i64NV (GLint location, GLint64EXT x, GLint64EXT y);
> GLAPI void APIENTRY glUniform3i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
> GLAPI void APIENTRY glUniform4i64NV (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
> GLAPI void APIENTRY glUniform1i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glUniform2i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glUniform3i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glUniform4i64vNV (GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glUniform1ui64NV (GLint location, GLuint64EXT x);
> GLAPI void APIENTRY glUniform2ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y);
> GLAPI void APIENTRY glUniform3ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
> GLAPI void APIENTRY glUniform4ui64NV (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
> GLAPI void APIENTRY glUniform1ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glUniform2ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glUniform3ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glUniform4ui64vNV (GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glGetUniformi64vNV (GLuint program, GLint location, GLint64EXT *params);
> GLAPI void APIENTRY glProgramUniform1i64NV (GLuint program, GLint location, GLint64EXT x);
> GLAPI void APIENTRY glProgramUniform2i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
> GLAPI void APIENTRY glProgramUniform3i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
> GLAPI void APIENTRY glProgramUniform4i64NV (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
> GLAPI void APIENTRY glProgramUniform1i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glProgramUniform2i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glProgramUniform3i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glProgramUniform4i64vNV (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> GLAPI void APIENTRY glProgramUniform1ui64NV (GLuint program, GLint location, GLuint64EXT x);
> GLAPI void APIENTRY glProgramUniform2ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
> GLAPI void APIENTRY glProgramUniform3ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
> GLAPI void APIENTRY glProgramUniform4ui64NV (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
> GLAPI void APIENTRY glProgramUniform1ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glProgramUniform2ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glProgramUniform3ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> GLAPI void APIENTRY glProgramUniform4ui64vNV (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);
> typedef void (APIENTRYP PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);
> typedef void (APIENTRYP PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
> typedef void (APIENTRYP PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
> typedef void (APIENTRYP PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);
> typedef void (APIENTRYP PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);
> typedef void (APIENTRYP PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
> typedef void (APIENTRYP PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
> typedef void (APIENTRYP PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> typedef void (APIENTRYP PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);
> #endif
> 
> #ifndef GL_NV_shader_buffer_store
> #define GL_NV_shader_buffer_store 1
> #endif
> 
> #ifndef GL_NV_tessellation_program5
> #define GL_NV_tessellation_program5 1
> #endif
> 
> #ifndef GL_NV_vertex_attrib_integer_64bit
> #define GL_NV_vertex_attrib_integer_64bit 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVertexAttribL1i64NV (GLuint index, GLint64EXT x);
> GLAPI void APIENTRY glVertexAttribL2i64NV (GLuint index, GLint64EXT x, GLint64EXT y);
> GLAPI void APIENTRY glVertexAttribL3i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
> GLAPI void APIENTRY glVertexAttribL4i64NV (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
> GLAPI void APIENTRY glVertexAttribL1i64vNV (GLuint index, const GLint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL2i64vNV (GLuint index, const GLint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL3i64vNV (GLuint index, const GLint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL4i64vNV (GLuint index, const GLint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL1ui64NV (GLuint index, GLuint64EXT x);
> GLAPI void APIENTRY glVertexAttribL2ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y);
> GLAPI void APIENTRY glVertexAttribL3ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
> GLAPI void APIENTRY glVertexAttribL4ui64NV (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
> GLAPI void APIENTRY glVertexAttribL1ui64vNV (GLuint index, const GLuint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL2ui64vNV (GLuint index, const GLuint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL3ui64vNV (GLuint index, const GLuint64EXT *v);
> GLAPI void APIENTRY glVertexAttribL4ui64vNV (GLuint index, const GLuint64EXT *v);
> GLAPI void APIENTRY glGetVertexAttribLi64vNV (GLuint index, GLenum pname, GLint64EXT *params);
> GLAPI void APIENTRY glGetVertexAttribLui64vNV (GLuint index, GLenum pname, GLuint64EXT *params);
> GLAPI void APIENTRY glVertexAttribLFormatNV (GLuint index, GLint size, GLenum type, GLsizei stride);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);
> typedef void (APIENTRYP PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);
> typedef void (APIENTRYP PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);
> #endif
> 
> #ifndef GL_NV_multisample_coverage
> #define GL_NV_multisample_coverage 1
> #endif
> 
> #ifndef GL_AMD_name_gen_delete
> #define GL_AMD_name_gen_delete 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glGenNamesAMD (GLenum identifier, GLuint num, GLuint *names);
> GLAPI void APIENTRY glDeleteNamesAMD (GLenum identifier, GLuint num, const GLuint *names);
> GLAPI GLboolean APIENTRY glIsNameAMD (GLenum identifier, GLuint name);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);
> typedef void (APIENTRYP PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);
> typedef GLboolean (APIENTRYP PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);
> #endif
> 
> #ifndef GL_AMD_debug_output
> #define GL_AMD_debug_output 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glDebugMessageEnableAMD (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
> GLAPI void APIENTRY glDebugMessageInsertAMD (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
> GLAPI void APIENTRY glDebugMessageCallbackAMD (GLDEBUGPROCAMD callback, GLvoid *userParam);
> GLAPI GLuint APIENTRY glGetDebugMessageLogAMD (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
> typedef void (APIENTRYP PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);
> typedef void (APIENTRYP PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, GLvoid *userParam);
> typedef GLuint (APIENTRYP PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);
> #endif
> 
> #ifndef GL_NV_vdpau_interop
> #define GL_NV_vdpau_interop 1
> #ifdef GL_GLEXT_PROTOTYPES
> GLAPI void APIENTRY glVDPAUInitNV (const GLvoid *vdpDevice, const GLvoid *getProcAddress);
> GLAPI void APIENTRY glVDPAUFiniNV (void);
> GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterVideoSurfaceNV (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
> GLAPI GLvdpauSurfaceNV APIENTRY glVDPAURegisterOutputSurfaceNV (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
> GLAPI void APIENTRY glVDPAUIsSurfaceNV (GLvdpauSurfaceNV surface);
> GLAPI void APIENTRY glVDPAUUnregisterSurfaceNV (GLvdpauSurfaceNV surface);
> GLAPI void APIENTRY glVDPAUGetSurfaceivNV (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
> GLAPI void APIENTRY glVDPAUSurfaceAccessNV (GLvdpauSurfaceNV surface, GLenum access);
> GLAPI void APIENTRY glVDPAUMapSurfacesNV (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
> GLAPI void APIENTRY glVDPAUUnmapSurfacesNV (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
> #endif /* GL_GLEXT_PROTOTYPES */
> typedef void (APIENTRYP PFNGLVDPAUINITNVPROC) (const GLvoid *vdpDevice, const GLvoid *getProcAddress);
> typedef void (APIENTRYP PFNGLVDPAUFININVPROC) (void);
> typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
> typedef GLvdpauSurfaceNV (APIENTRYP PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (GLvoid *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);
> typedef void (APIENTRYP PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);
> typedef void (APIENTRYP PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);
> typedef void (APIENTRYP PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);
> typedef void (APIENTRYP PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);
> typedef void (APIENTRYP PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);
> typedef void (APIENTRYP PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);
> #endif
> 
> #ifndef GL_AMD_transform_feedback3_lines_triangles
> #define GL_AMD_transform_feedback3_lines_triangles 1
> #endif
> 
> 
> #ifdef __cplusplus
> }
> #endif
> 
> #endif
> #endif /* NO_SDL_GLEXT */
> 
> #endif /* !__IPHONEOS__ */
> 
> #endif /* _SDL_opengl_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_opengles.h ../android-sdl/jni/SDL2/include/SDL_opengles.h
1,38c1,38
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_opengles.h
<  *
<  *  This is a simple file to encapsulate the OpenGL ES 1.X API headers.
<  */
< 
< #ifdef __IPHONEOS__
< #include <OpenGLES/ES1/gl.h>
< #include <OpenGLES/ES1/glext.h>
< #else
< #include <GLES/gl.h>
< #include <GLES/glext.h>
< #endif
< 
< #ifndef APIENTRY
< #define APIENTRY
< #endif
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_opengles.h
>  *
>  *  This is a simple file to encapsulate the OpenGL ES 1.X API headers.
>  */
> 
> #ifdef __IPHONEOS__
> #include <OpenGLES/ES1/gl.h>
> #include <OpenGLES/ES1/glext.h>
> #else
> #include <GLES/gl.h>
> #include <GLES/glext.h>
> #endif
> 
> #ifndef APIENTRY
> #define APIENTRY
> #endif
diff jni/SDL/include/SDL_opengles2.h ../android-sdl/jni/SDL2/include/SDL_opengles2.h
1,38c1,38
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_opengles.h
<  *
<  *  This is a simple file to encapsulate the OpenGL ES 2.0 API headers.
<  */
< 
< #ifdef __IPHONEOS__
< #include <OpenGLES/ES2/gl.h>
< #include <OpenGLES/ES2/glext.h>
< #else
< #include <GLES2/gl2.h>
< #include <GLES2/gl2ext.h>
< #endif
< 
< #ifndef APIENTRY
< #define APIENTRY
< #endif
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_opengles.h
>  *
>  *  This is a simple file to encapsulate the OpenGL ES 2.0 API headers.
>  */
> 
> #ifdef __IPHONEOS__
> #include <OpenGLES/ES2/gl.h>
> #include <OpenGLES/ES2/glext.h>
> #else
> #include <GLES2/gl2.h>
> #include <GLES2/gl2ext.h>
> #endif
> 
> #ifndef APIENTRY
> #define APIENTRY
> #endif
diff jni/SDL/include/SDL_pixels.h ../android-sdl/jni/SDL2/include/SDL_pixels.h
1,427c1,427
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_pixels.h
<  *
<  *  Header for the enumerated pixel format definitions.
<  */
< 
< #ifndef _SDL_pixels_h
< #define _SDL_pixels_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \name Transparency definitions
<  *
<  *  These define alpha as the opacity of a surface.
<  */
< /* @{ */
< #define SDL_ALPHA_OPAQUE 255
< #define SDL_ALPHA_TRANSPARENT 0
< /* @} */
< 
< /** Pixel type. */
< enum
< {
<     SDL_PIXELTYPE_UNKNOWN,
<     SDL_PIXELTYPE_INDEX1,
<     SDL_PIXELTYPE_INDEX4,
<     SDL_PIXELTYPE_INDEX8,
<     SDL_PIXELTYPE_PACKED8,
<     SDL_PIXELTYPE_PACKED16,
<     SDL_PIXELTYPE_PACKED32,
<     SDL_PIXELTYPE_ARRAYU8,
<     SDL_PIXELTYPE_ARRAYU16,
<     SDL_PIXELTYPE_ARRAYU32,
<     SDL_PIXELTYPE_ARRAYF16,
<     SDL_PIXELTYPE_ARRAYF32
< };
< 
< /** Bitmap pixel order, high bit -> low bit. */
< enum
< {
<     SDL_BITMAPORDER_NONE,
<     SDL_BITMAPORDER_4321,
<     SDL_BITMAPORDER_1234
< };
< 
< /** Packed component order, high bit -> low bit. */
< enum
< {
<     SDL_PACKEDORDER_NONE,
<     SDL_PACKEDORDER_XRGB,
<     SDL_PACKEDORDER_RGBX,
<     SDL_PACKEDORDER_ARGB,
<     SDL_PACKEDORDER_RGBA,
<     SDL_PACKEDORDER_XBGR,
<     SDL_PACKEDORDER_BGRX,
<     SDL_PACKEDORDER_ABGR,
<     SDL_PACKEDORDER_BGRA
< };
< 
< /** Array component order, low byte -> high byte. */
< enum
< {
<     SDL_ARRAYORDER_NONE,
<     SDL_ARRAYORDER_RGB,
<     SDL_ARRAYORDER_RGBA,
<     SDL_ARRAYORDER_ARGB,
<     SDL_ARRAYORDER_BGR,
<     SDL_ARRAYORDER_BGRA,
<     SDL_ARRAYORDER_ABGR
< };
< 
< /** Packed component layout. */
< enum
< {
<     SDL_PACKEDLAYOUT_NONE,
<     SDL_PACKEDLAYOUT_332,
<     SDL_PACKEDLAYOUT_4444,
<     SDL_PACKEDLAYOUT_1555,
<     SDL_PACKEDLAYOUT_5551,
<     SDL_PACKEDLAYOUT_565,
<     SDL_PACKEDLAYOUT_8888,
<     SDL_PACKEDLAYOUT_2101010,
<     SDL_PACKEDLAYOUT_1010102
< };
< 
< #define SDL_DEFINE_PIXELFOURCC(A, B, C, D) SDL_FOURCC(A, B, C, D)
< 
< #define SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes) \
<     ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | \
<      ((bits) << 8) | ((bytes) << 0))
< 
< #define SDL_PIXELFLAG(X)    (((X) >> 28) & 0x0F)
< #define SDL_PIXELTYPE(X)    (((X) >> 24) & 0x0F)
< #define SDL_PIXELORDER(X)   (((X) >> 20) & 0x0F)
< #define SDL_PIXELLAYOUT(X)  (((X) >> 16) & 0x0F)
< #define SDL_BITSPERPIXEL(X) (((X) >> 8) & 0xFF)
< #define SDL_BYTESPERPIXEL(X) \
<     (SDL_ISPIXELFORMAT_FOURCC(X) ? \
<         ((((X) == SDL_PIXELFORMAT_YUY2) || \
<           ((X) == SDL_PIXELFORMAT_UYVY) || \
<           ((X) == SDL_PIXELFORMAT_YVYU)) ? 2 : 1) : (((X) >> 0) & 0xFF))
< 
< #define SDL_ISPIXELFORMAT_INDEXED(format)   \
<     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
<      ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || \
<       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || \
<       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)))
< 
< #define SDL_ISPIXELFORMAT_ALPHA(format)   \
<     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
<      ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || \
<       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || \
<       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || \
<       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA)))
< 
< /* The flag is set to 1 because 0x1? is not in the printable ASCII range */
< #define SDL_ISPIXELFORMAT_FOURCC(format)    \
<     ((format) && (SDL_PIXELFLAG(format) != 1))
< 
< /* Note: If you modify this list, update SDL_GetPixelFormatName() */
< enum
< {
<     SDL_PIXELFORMAT_UNKNOWN,
<     SDL_PIXELFORMAT_INDEX1LSB =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0,
<                                1, 0),
<     SDL_PIXELFORMAT_INDEX1MSB =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0,
<                                1, 0),
<     SDL_PIXELFORMAT_INDEX4LSB =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0,
<                                4, 0),
<     SDL_PIXELFORMAT_INDEX4MSB =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0,
<                                4, 0),
<     SDL_PIXELFORMAT_INDEX8 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1),
<     SDL_PIXELFORMAT_RGB332 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB,
<                                SDL_PACKEDLAYOUT_332, 8, 1),
<     SDL_PIXELFORMAT_RGB444 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
<                                SDL_PACKEDLAYOUT_4444, 12, 2),
<     SDL_PIXELFORMAT_RGB555 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
<                                SDL_PACKEDLAYOUT_1555, 15, 2),
<     SDL_PIXELFORMAT_BGR555 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR,
<                                SDL_PACKEDLAYOUT_1555, 15, 2),
<     SDL_PIXELFORMAT_ARGB4444 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB,
<                                SDL_PACKEDLAYOUT_4444, 16, 2),
<     SDL_PIXELFORMAT_RGBA4444 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA,
<                                SDL_PACKEDLAYOUT_4444, 16, 2),
<     SDL_PIXELFORMAT_ABGR4444 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR,
<                                SDL_PACKEDLAYOUT_4444, 16, 2),
<     SDL_PIXELFORMAT_BGRA4444 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA,
<                                SDL_PACKEDLAYOUT_4444, 16, 2),
<     SDL_PIXELFORMAT_ARGB1555 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB,
<                                SDL_PACKEDLAYOUT_1555, 16, 2),
<     SDL_PIXELFORMAT_RGBA5551 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA,
<                                SDL_PACKEDLAYOUT_5551, 16, 2),
<     SDL_PIXELFORMAT_ABGR1555 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR,
<                                SDL_PACKEDLAYOUT_1555, 16, 2),
<     SDL_PIXELFORMAT_BGRA5551 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA,
<                                SDL_PACKEDLAYOUT_5551, 16, 2),
<     SDL_PIXELFORMAT_RGB565 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
<                                SDL_PACKEDLAYOUT_565, 16, 2),
<     SDL_PIXELFORMAT_BGR565 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR,
<                                SDL_PACKEDLAYOUT_565, 16, 2),
<     SDL_PIXELFORMAT_RGB24 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0,
<                                24, 3),
<     SDL_PIXELFORMAT_BGR24 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0,
<                                24, 3),
<     SDL_PIXELFORMAT_RGB888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB,
<                                SDL_PACKEDLAYOUT_8888, 24, 4),
<     SDL_PIXELFORMAT_RGBX8888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX,
<                                SDL_PACKEDLAYOUT_8888, 24, 4),
<     SDL_PIXELFORMAT_BGR888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR,
<                                SDL_PACKEDLAYOUT_8888, 24, 4),
<     SDL_PIXELFORMAT_BGRX8888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX,
<                                SDL_PACKEDLAYOUT_8888, 24, 4),
<     SDL_PIXELFORMAT_ARGB8888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB,
<                                SDL_PACKEDLAYOUT_8888, 32, 4),
<     SDL_PIXELFORMAT_RGBA8888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA,
<                                SDL_PACKEDLAYOUT_8888, 32, 4),
<     SDL_PIXELFORMAT_ABGR8888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR,
<                                SDL_PACKEDLAYOUT_8888, 32, 4),
<     SDL_PIXELFORMAT_BGRA8888 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA,
<                                SDL_PACKEDLAYOUT_8888, 32, 4),
<     SDL_PIXELFORMAT_ARGB2101010 =
<         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB,
<                                SDL_PACKEDLAYOUT_2101010, 32, 4),
< 
<     SDL_PIXELFORMAT_YV12 =      /**< Planar mode: Y + V + U  (3 planes) */
<         SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2'),
<     SDL_PIXELFORMAT_IYUV =      /**< Planar mode: Y + U + V  (3 planes) */
<         SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V'),
<     SDL_PIXELFORMAT_YUY2 =      /**< Packed mode: Y0+U0+Y1+V0 (1 plane) */
<         SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2'),
<     SDL_PIXELFORMAT_UYVY =      /**< Packed mode: U0+Y0+V0+Y1 (1 plane) */
<         SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y'),
<     SDL_PIXELFORMAT_YVYU =      /**< Packed mode: Y0+V0+Y1+U0 (1 plane) */
<         SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U')
< };
< 
< typedef struct SDL_Color
< {
<     Uint8 r;
<     Uint8 g;
<     Uint8 b;
<     Uint8 a;
< } SDL_Color;
< #define SDL_Colour SDL_Color
< 
< typedef struct SDL_Palette
< {
<     int ncolors;
<     SDL_Color *colors;
<     Uint32 version;
<     int refcount;
< } SDL_Palette;
< 
< /**
<  *  \note Everything in the pixel format structure is read-only.
<  */
< typedef struct SDL_PixelFormat
< {
<     Uint32 format;
<     SDL_Palette *palette;
<     Uint8 BitsPerPixel;
<     Uint8 BytesPerPixel;
<     Uint8 padding[2];
<     Uint32 Rmask;
<     Uint32 Gmask;
<     Uint32 Bmask;
<     Uint32 Amask;
<     Uint8 Rloss;
<     Uint8 Gloss;
<     Uint8 Bloss;
<     Uint8 Aloss;
<     Uint8 Rshift;
<     Uint8 Gshift;
<     Uint8 Bshift;
<     Uint8 Ashift;
<     int refcount;
<     struct SDL_PixelFormat *next;
< } SDL_PixelFormat;
< 
< /**
<  * \brief Get the human readable name of a pixel format
<  */
< extern DECLSPEC const char* SDLCALL SDL_GetPixelFormatName(Uint32 format);
< 
< /**
<  *  \brief Convert one of the enumerated pixel formats to a bpp and RGBA masks.
<  *
<  *  \return SDL_TRUE, or SDL_FALSE if the conversion wasn't possible.
<  *
<  *  \sa SDL_MasksToPixelFormatEnum()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_PixelFormatEnumToMasks(Uint32 format,
<                                                             int *bpp,
<                                                             Uint32 * Rmask,
<                                                             Uint32 * Gmask,
<                                                             Uint32 * Bmask,
<                                                             Uint32 * Amask);
< 
< /**
<  *  \brief Convert a bpp and RGBA masks to an enumerated pixel format.
<  *
<  *  \return The pixel format, or ::SDL_PIXELFORMAT_UNKNOWN if the conversion
<  *          wasn't possible.
<  *
<  *  \sa SDL_PixelFormatEnumToMasks()
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_MasksToPixelFormatEnum(int bpp,
<                                                           Uint32 Rmask,
<                                                           Uint32 Gmask,
<                                                           Uint32 Bmask,
<                                                           Uint32 Amask);
< 
< /**
<  *  \brief Create an SDL_PixelFormat structure from a pixel format enum.
<  */
< extern DECLSPEC SDL_PixelFormat * SDLCALL SDL_AllocFormat(Uint32 pixel_format);
< 
< /**
<  *  \brief Free an SDL_PixelFormat structure.
<  */
< extern DECLSPEC void SDLCALL SDL_FreeFormat(SDL_PixelFormat *format);
< 
< /**
<  *  \brief Create a palette structure with the specified number of color
<  *         entries.
<  *
<  *  \return A new palette, or NULL if there wasn't enough memory.
<  *
<  *  \note The palette entries are initialized to white.
<  *
<  *  \sa SDL_FreePalette()
<  */
< extern DECLSPEC SDL_Palette *SDLCALL SDL_AllocPalette(int ncolors);
< 
< /**
<  *  \brief Set the palette for a pixel format structure.
<  */
< extern DECLSPEC int SDLCALL SDL_SetPixelFormatPalette(SDL_PixelFormat * format,
<                                                       SDL_Palette *palette);
< 
< /**
<  *  \brief Set a range of colors in a palette.
<  *
<  *  \param palette    The palette to modify.
<  *  \param colors     An array of colors to copy into the palette.
<  *  \param firstcolor The index of the first palette entry to modify.
<  *  \param ncolors    The number of entries to modify.
<  *
<  *  \return 0 on success, or -1 if not all of the colors could be set.
<  */
< extern DECLSPEC int SDLCALL SDL_SetPaletteColors(SDL_Palette * palette,
<                                                  const SDL_Color * colors,
<                                                  int firstcolor, int ncolors);
< 
< /**
<  *  \brief Free a palette created with SDL_AllocPalette().
<  *
<  *  \sa SDL_AllocPalette()
<  */
< extern DECLSPEC void SDLCALL SDL_FreePalette(SDL_Palette * palette);
< 
< /**
<  *  \brief Maps an RGB triple to an opaque pixel value for a given pixel format.
<  *
<  *  \sa SDL_MapRGBA
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_MapRGB(const SDL_PixelFormat * format,
<                                           Uint8 r, Uint8 g, Uint8 b);
< 
< /**
<  *  \brief Maps an RGBA quadruple to a pixel value for a given pixel format.
<  *
<  *  \sa SDL_MapRGB
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_MapRGBA(const SDL_PixelFormat * format,
<                                            Uint8 r, Uint8 g, Uint8 b,
<                                            Uint8 a);
< 
< /**
<  *  \brief Get the RGB components from a pixel of the specified format.
<  *
<  *  \sa SDL_GetRGBA
<  */
< extern DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel,
<                                         const SDL_PixelFormat * format,
<                                         Uint8 * r, Uint8 * g, Uint8 * b);
< 
< /**
<  *  \brief Get the RGBA components from a pixel of the specified format.
<  *
<  *  \sa SDL_GetRGB
<  */
< extern DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixel,
<                                          const SDL_PixelFormat * format,
<                                          Uint8 * r, Uint8 * g, Uint8 * b,
<                                          Uint8 * a);
< 
< /**
<  *  \brief Calculate a 256 entry gamma ramp for a gamma value.
<  */
< extern DECLSPEC void SDLCALL SDL_CalculateGammaRamp(float gamma, Uint16 * ramp);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_pixels_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_pixels.h
>  *
>  *  Header for the enumerated pixel format definitions.
>  */
> 
> #ifndef _SDL_pixels_h
> #define _SDL_pixels_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \name Transparency definitions
>  *
>  *  These define alpha as the opacity of a surface.
>  */
> /*@{*/
> #define SDL_ALPHA_OPAQUE 255
> #define SDL_ALPHA_TRANSPARENT 0
> /*@}*/
> 
> /** Pixel type. */
> enum
> {
>     SDL_PIXELTYPE_UNKNOWN,
>     SDL_PIXELTYPE_INDEX1,
>     SDL_PIXELTYPE_INDEX4,
>     SDL_PIXELTYPE_INDEX8,
>     SDL_PIXELTYPE_PACKED8,
>     SDL_PIXELTYPE_PACKED16,
>     SDL_PIXELTYPE_PACKED32,
>     SDL_PIXELTYPE_ARRAYU8,
>     SDL_PIXELTYPE_ARRAYU16,
>     SDL_PIXELTYPE_ARRAYU32,
>     SDL_PIXELTYPE_ARRAYF16,
>     SDL_PIXELTYPE_ARRAYF32
> };
> 
> /** Bitmap pixel order, high bit -> low bit. */
> enum
> {
>     SDL_BITMAPORDER_NONE,
>     SDL_BITMAPORDER_4321,
>     SDL_BITMAPORDER_1234
> };
> 
> /** Packed component order, high bit -> low bit. */
> enum
> {
>     SDL_PACKEDORDER_NONE,
>     SDL_PACKEDORDER_XRGB,
>     SDL_PACKEDORDER_RGBX,
>     SDL_PACKEDORDER_ARGB,
>     SDL_PACKEDORDER_RGBA,
>     SDL_PACKEDORDER_XBGR,
>     SDL_PACKEDORDER_BGRX,
>     SDL_PACKEDORDER_ABGR,
>     SDL_PACKEDORDER_BGRA
> };
> 
> /** Array component order, low byte -> high byte. */
> enum
> {
>     SDL_ARRAYORDER_NONE,
>     SDL_ARRAYORDER_RGB,
>     SDL_ARRAYORDER_RGBA,
>     SDL_ARRAYORDER_ARGB,
>     SDL_ARRAYORDER_BGR,
>     SDL_ARRAYORDER_BGRA,
>     SDL_ARRAYORDER_ABGR
> };
> 
> /** Packed component layout. */
> enum
> {
>     SDL_PACKEDLAYOUT_NONE,
>     SDL_PACKEDLAYOUT_332,
>     SDL_PACKEDLAYOUT_4444,
>     SDL_PACKEDLAYOUT_1555,
>     SDL_PACKEDLAYOUT_5551,
>     SDL_PACKEDLAYOUT_565,
>     SDL_PACKEDLAYOUT_8888,
>     SDL_PACKEDLAYOUT_2101010,
>     SDL_PACKEDLAYOUT_1010102
> };
> 
> #define SDL_DEFINE_PIXELFOURCC(A, B, C, D) SDL_FOURCC(A, B, C, D)
> 
> #define SDL_DEFINE_PIXELFORMAT(type, order, layout, bits, bytes) \
>     ((1 << 28) | ((type) << 24) | ((order) << 20) | ((layout) << 16) | \
>      ((bits) << 8) | ((bytes) << 0))
> 
> #define SDL_PIXELFLAG(X)    (((X) >> 28) & 0x0F)
> #define SDL_PIXELTYPE(X)    (((X) >> 24) & 0x0F)
> #define SDL_PIXELORDER(X)   (((X) >> 20) & 0x0F)
> #define SDL_PIXELLAYOUT(X)  (((X) >> 16) & 0x0F)
> #define SDL_BITSPERPIXEL(X) (((X) >> 8) & 0xFF)
> #define SDL_BYTESPERPIXEL(X) \
>     (SDL_ISPIXELFORMAT_FOURCC(X) ? \
>         ((((X) == SDL_PIXELFORMAT_YUY2) || \
>           ((X) == SDL_PIXELFORMAT_UYVY) || \
>           ((X) == SDL_PIXELFORMAT_YVYU)) ? 2 : 1) : (((X) >> 0) & 0xFF))
> 
> #define SDL_ISPIXELFORMAT_INDEXED(format)   \
>     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
>      ((SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX1) || \
>       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX4) || \
>       (SDL_PIXELTYPE(format) == SDL_PIXELTYPE_INDEX8)))
> 
> #define SDL_ISPIXELFORMAT_ALPHA(format)   \
>     (!SDL_ISPIXELFORMAT_FOURCC(format) && \
>      ((SDL_PIXELORDER(format) == SDL_PACKEDORDER_ARGB) || \
>       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_RGBA) || \
>       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_ABGR) || \
>       (SDL_PIXELORDER(format) == SDL_PACKEDORDER_BGRA)))
> 
> /* The flag is set to 1 because 0x1? is not in the printable ASCII range */
> #define SDL_ISPIXELFORMAT_FOURCC(format)    \
>     ((format) && (SDL_PIXELFLAG(format) != 1))
> 
> /* Note: If you modify this list, update SDL_GetPixelFormatName() */
> enum
> {
>     SDL_PIXELFORMAT_UNKNOWN,
>     SDL_PIXELFORMAT_INDEX1LSB =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_4321, 0,
>                                1, 0),
>     SDL_PIXELFORMAT_INDEX1MSB =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX1, SDL_BITMAPORDER_1234, 0,
>                                1, 0),
>     SDL_PIXELFORMAT_INDEX4LSB =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_4321, 0,
>                                4, 0),
>     SDL_PIXELFORMAT_INDEX4MSB =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX4, SDL_BITMAPORDER_1234, 0,
>                                4, 0),
>     SDL_PIXELFORMAT_INDEX8 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_INDEX8, 0, 0, 8, 1),
>     SDL_PIXELFORMAT_RGB332 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED8, SDL_PACKEDORDER_XRGB,
>                                SDL_PACKEDLAYOUT_332, 8, 1),
>     SDL_PIXELFORMAT_RGB444 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
>                                SDL_PACKEDLAYOUT_4444, 12, 2),
>     SDL_PIXELFORMAT_RGB555 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
>                                SDL_PACKEDLAYOUT_1555, 15, 2),
>     SDL_PIXELFORMAT_BGR555 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR,
>                                SDL_PACKEDLAYOUT_1555, 15, 2),
>     SDL_PIXELFORMAT_ARGB4444 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB,
>                                SDL_PACKEDLAYOUT_4444, 16, 2),
>     SDL_PIXELFORMAT_RGBA4444 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA,
>                                SDL_PACKEDLAYOUT_4444, 16, 2),
>     SDL_PIXELFORMAT_ABGR4444 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR,
>                                SDL_PACKEDLAYOUT_4444, 16, 2),
>     SDL_PIXELFORMAT_BGRA4444 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA,
>                                SDL_PACKEDLAYOUT_4444, 16, 2),
>     SDL_PIXELFORMAT_ARGB1555 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ARGB,
>                                SDL_PACKEDLAYOUT_1555, 16, 2),
>     SDL_PIXELFORMAT_RGBA5551 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_RGBA,
>                                SDL_PACKEDLAYOUT_5551, 16, 2),
>     SDL_PIXELFORMAT_ABGR1555 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_ABGR,
>                                SDL_PACKEDLAYOUT_1555, 16, 2),
>     SDL_PIXELFORMAT_BGRA5551 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_BGRA,
>                                SDL_PACKEDLAYOUT_5551, 16, 2),
>     SDL_PIXELFORMAT_RGB565 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XRGB,
>                                SDL_PACKEDLAYOUT_565, 16, 2),
>     SDL_PIXELFORMAT_BGR565 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED16, SDL_PACKEDORDER_XBGR,
>                                SDL_PACKEDLAYOUT_565, 16, 2),
>     SDL_PIXELFORMAT_RGB24 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_RGB, 0,
>                                24, 3),
>     SDL_PIXELFORMAT_BGR24 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_ARRAYU8, SDL_ARRAYORDER_BGR, 0,
>                                24, 3),
>     SDL_PIXELFORMAT_RGB888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XRGB,
>                                SDL_PACKEDLAYOUT_8888, 24, 4),
>     SDL_PIXELFORMAT_RGBX8888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBX,
>                                SDL_PACKEDLAYOUT_8888, 24, 4),
>     SDL_PIXELFORMAT_BGR888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_XBGR,
>                                SDL_PACKEDLAYOUT_8888, 24, 4),
>     SDL_PIXELFORMAT_BGRX8888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRX,
>                                SDL_PACKEDLAYOUT_8888, 24, 4),
>     SDL_PIXELFORMAT_ARGB8888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB,
>                                SDL_PACKEDLAYOUT_8888, 32, 4),
>     SDL_PIXELFORMAT_RGBA8888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_RGBA,
>                                SDL_PACKEDLAYOUT_8888, 32, 4),
>     SDL_PIXELFORMAT_ABGR8888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ABGR,
>                                SDL_PACKEDLAYOUT_8888, 32, 4),
>     SDL_PIXELFORMAT_BGRA8888 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_BGRA,
>                                SDL_PACKEDLAYOUT_8888, 32, 4),
>     SDL_PIXELFORMAT_ARGB2101010 =
>         SDL_DEFINE_PIXELFORMAT(SDL_PIXELTYPE_PACKED32, SDL_PACKEDORDER_ARGB,
>                                SDL_PACKEDLAYOUT_2101010, 32, 4),
> 
>     SDL_PIXELFORMAT_YV12 =      /**< Planar mode: Y + V + U  (3 planes) */
>         SDL_DEFINE_PIXELFOURCC('Y', 'V', '1', '2'),
>     SDL_PIXELFORMAT_IYUV =      /**< Planar mode: Y + U + V  (3 planes) */
>         SDL_DEFINE_PIXELFOURCC('I', 'Y', 'U', 'V'),
>     SDL_PIXELFORMAT_YUY2 =      /**< Packed mode: Y0+U0+Y1+V0 (1 plane) */
>         SDL_DEFINE_PIXELFOURCC('Y', 'U', 'Y', '2'),
>     SDL_PIXELFORMAT_UYVY =      /**< Packed mode: U0+Y0+V0+Y1 (1 plane) */
>         SDL_DEFINE_PIXELFOURCC('U', 'Y', 'V', 'Y'),
>     SDL_PIXELFORMAT_YVYU =      /**< Packed mode: Y0+V0+Y1+U0 (1 plane) */
>         SDL_DEFINE_PIXELFOURCC('Y', 'V', 'Y', 'U')
> };
> 
> typedef struct SDL_Color
> {
>     Uint8 r;
>     Uint8 g;
>     Uint8 b;
>     Uint8 a;
> } SDL_Color;
> #define SDL_Colour SDL_Color
> 
> typedef struct SDL_Palette
> {
>     int ncolors;
>     SDL_Color *colors;
>     Uint32 version;
>     int refcount;
> } SDL_Palette;
> 
> /**
>  *  \note Everything in the pixel format structure is read-only.
>  */
> typedef struct SDL_PixelFormat
> {
>     Uint32 format;
>     SDL_Palette *palette;
>     Uint8 BitsPerPixel;
>     Uint8 BytesPerPixel;
>     Uint8 padding[2];
>     Uint32 Rmask;
>     Uint32 Gmask;
>     Uint32 Bmask;
>     Uint32 Amask;
>     Uint8 Rloss;
>     Uint8 Gloss;
>     Uint8 Bloss;
>     Uint8 Aloss;
>     Uint8 Rshift;
>     Uint8 Gshift;
>     Uint8 Bshift;
>     Uint8 Ashift;
>     int refcount;
>     struct SDL_PixelFormat *next;
> } SDL_PixelFormat;
> 
> /**
>  * \brief Get the human readable name of a pixel format
>  */
> extern DECLSPEC const char* SDLCALL SDL_GetPixelFormatName(Uint32 format);
> 
> /**
>  *  \brief Convert one of the enumerated pixel formats to a bpp and RGBA masks.
>  *
>  *  \return SDL_TRUE, or SDL_FALSE if the conversion wasn't possible.
>  *
>  *  \sa SDL_MasksToPixelFormatEnum()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_PixelFormatEnumToMasks(Uint32 format,
>                                                             int *bpp,
>                                                             Uint32 * Rmask,
>                                                             Uint32 * Gmask,
>                                                             Uint32 * Bmask,
>                                                             Uint32 * Amask);
> 
> /**
>  *  \brief Convert a bpp and RGBA masks to an enumerated pixel format.
>  *
>  *  \return The pixel format, or ::SDL_PIXELFORMAT_UNKNOWN if the conversion
>  *          wasn't possible.
>  *
>  *  \sa SDL_PixelFormatEnumToMasks()
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_MasksToPixelFormatEnum(int bpp,
>                                                           Uint32 Rmask,
>                                                           Uint32 Gmask,
>                                                           Uint32 Bmask,
>                                                           Uint32 Amask);
> 
> /**
>  *  \brief Create an SDL_PixelFormat structure from a pixel format enum.
>  */
> extern DECLSPEC SDL_PixelFormat * SDLCALL SDL_AllocFormat(Uint32 pixel_format);
> 
> /**
>  *  \brief Free an SDL_PixelFormat structure.
>  */
> extern DECLSPEC void SDLCALL SDL_FreeFormat(SDL_PixelFormat *format);
> 
> /**
>  *  \brief Create a palette structure with the specified number of color
>  *         entries.
>  *
>  *  \return A new palette, or NULL if there wasn't enough memory.
>  *
>  *  \note The palette entries are initialized to white.
>  *
>  *  \sa SDL_FreePalette()
>  */
> extern DECLSPEC SDL_Palette *SDLCALL SDL_AllocPalette(int ncolors);
> 
> /**
>  *  \brief Set the palette for a pixel format structure.
>  */
> extern DECLSPEC int SDLCALL SDL_SetPixelFormatPalette(SDL_PixelFormat * format,
>                                                       SDL_Palette *palette);
> 
> /**
>  *  \brief Set a range of colors in a palette.
>  *
>  *  \param palette    The palette to modify.
>  *  \param colors     An array of colors to copy into the palette.
>  *  \param firstcolor The index of the first palette entry to modify.
>  *  \param ncolors    The number of entries to modify.
>  *
>  *  \return 0 on success, or -1 if not all of the colors could be set.
>  */
> extern DECLSPEC int SDLCALL SDL_SetPaletteColors(SDL_Palette * palette,
>                                                  const SDL_Color * colors,
>                                                  int firstcolor, int ncolors);
> 
> /**
>  *  \brief Free a palette created with SDL_AllocPalette().
>  *
>  *  \sa SDL_AllocPalette()
>  */
> extern DECLSPEC void SDLCALL SDL_FreePalette(SDL_Palette * palette);
> 
> /**
>  *  \brief Maps an RGB triple to an opaque pixel value for a given pixel format.
>  *
>  *  \sa SDL_MapRGBA
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_MapRGB(const SDL_PixelFormat * format,
>                                           Uint8 r, Uint8 g, Uint8 b);
> 
> /**
>  *  \brief Maps an RGBA quadruple to a pixel value for a given pixel format.
>  *
>  *  \sa SDL_MapRGB
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_MapRGBA(const SDL_PixelFormat * format,
>                                            Uint8 r, Uint8 g, Uint8 b,
>                                            Uint8 a);
> 
> /**
>  *  \brief Get the RGB components from a pixel of the specified format.
>  *
>  *  \sa SDL_GetRGBA
>  */
> extern DECLSPEC void SDLCALL SDL_GetRGB(Uint32 pixel,
>                                         const SDL_PixelFormat * format,
>                                         Uint8 * r, Uint8 * g, Uint8 * b);
> 
> /**
>  *  \brief Get the RGBA components from a pixel of the specified format.
>  *
>  *  \sa SDL_GetRGB
>  */
> extern DECLSPEC void SDLCALL SDL_GetRGBA(Uint32 pixel,
>                                          const SDL_PixelFormat * format,
>                                          Uint8 * r, Uint8 * g, Uint8 * b,
>                                          Uint8 * a);
> 
> /**
>  *  \brief Calculate a 256 entry gamma ramp for a gamma value.
>  */
> extern DECLSPEC void SDLCALL SDL_CalculateGammaRamp(float gamma, Uint16 * ramp);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_pixels_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_platform.h ../android-sdl/jni/SDL2/include/SDL_platform.h
1,155c1,151
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_platform.h
<  *
<  *  Try to get a standard set of platform defines.
<  */
< 
< #ifndef _SDL_platform_h
< #define _SDL_platform_h
< 
< #if defined(_AIX)
< #undef __AIX__
< #define __AIX__     1
< #endif
< #if defined(__BEOS__)
< #undef __BEOS__
< #define __BEOS__    1
< #endif
< #if defined(__HAIKU__)
< #undef __HAIKU__
< #define __HAIKU__   1
< #endif
< #if defined(bsdi) || defined(__bsdi) || defined(__bsdi__)
< #undef __BSDI__
< #define __BSDI__    1
< #endif
< #if defined(_arch_dreamcast)
< #undef __DREAMCAST__
< #define __DREAMCAST__   1
< #endif
< #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
< #undef __FREEBSD__
< #define __FREEBSD__ 1
< #endif
< #if defined(hpux) || defined(__hpux) || defined(__hpux__)
< #undef __HPUX__
< #define __HPUX__    1
< #endif
< #if defined(sgi) || defined(__sgi) || defined(__sgi__) || defined(_SGI_SOURCE)
< #undef __IRIX__
< #define __IRIX__    1
< #endif
< #if defined(linux) || defined(__linux) || defined(__linux__)
< #undef __LINUX__
< #define __LINUX__   1
< #endif
< #if defined(ANDROID)
< #undef __ANDROID__
< #undef __LINUX__ /* do we need to do this? */
< #define __ANDROID__ 1
< #endif
< 
< #if defined(__APPLE__)
< /* lets us know what version of Mac OS X we're compiling on */
< #include "AvailabilityMacros.h"
< #include "TargetConditionals.h"
< #if TARGET_OS_IPHONE
< /* if compiling for iPhone */
< #undef __IPHONEOS__
< #define __IPHONEOS__ 1
< #undef __MACOSX__
< #else
< /* if not compiling for iPhone */
< #undef __MACOSX__
< #define __MACOSX__  1
< #if MAC_OS_X_VERSION_MIN_REQUIRED < 1050
< # error SDL for Mac OS X only supports deploying on 10.5 and above.
< #endif /* MAC_OS_X_VERSION_MIN_REQUIRED < 1050 */
< #if MAC_OS_X_VERSION_MAX_ALLOWED < 1060
< # error SDL for Mac OS X must be built with a 10.6 SDK or above.
< #endif /* MAC_OS_X_VERSION_MAX_ALLOWED < 1060 */
< #endif /* TARGET_OS_IPHONE */
< #endif /* defined(__APPLE__) */
< 
< #if defined(__NetBSD__)
< #undef __NETBSD__
< #define __NETBSD__  1
< #endif
< #if defined(__OpenBSD__)
< #undef __OPENBSD__
< #define __OPENBSD__ 1
< #endif
< #if defined(__OS2__)
< #undef __OS2__
< #define __OS2__     1
< #endif
< #if defined(osf) || defined(__osf) || defined(__osf__) || defined(_OSF_SOURCE)
< #undef __OSF__
< #define __OSF__     1
< #endif
< #if defined(__QNXNTO__)
< #undef __QNXNTO__
< #define __QNXNTO__  1
< #endif
< #if defined(riscos) || defined(__riscos) || defined(__riscos__)
< #undef __RISCOS__
< #define __RISCOS__  1
< #endif
< #if defined(__SVR4)
< #undef __SOLARIS__
< #define __SOLARIS__ 1
< #endif
< #if defined(WIN32) || defined(_WIN32) || defined(__CYGWIN__)
< #undef __WINDOWS__
< #define __WINDOWS__   1
< #endif
< #if defined(__WINDOWS__)
< #undef __WIN32__
< #define __WIN32__ 1
< #endif
< #if defined(__PSP__)
< #undef __PSP__
< #define __PSP__ 1
< #endif
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief Gets the name of the platform.
<  */
< extern DECLSPEC const char * SDLCALL SDL_GetPlatform (void);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_platform_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_platform.h
>  *
>  *  Try to get a standard set of platform defines.
>  */
> 
> #ifndef _SDL_platform_h
> #define _SDL_platform_h
> 
> #if defined(_AIX)
> #undef __AIX__
> #define __AIX__     1
> #endif
> #if defined(__BEOS__)
> #undef __BEOS__
> #define __BEOS__    1
> #endif
> #if defined(__HAIKU__)
> #undef __HAIKU__
> #define __HAIKU__   1
> #endif
> #if defined(bsdi) || defined(__bsdi) || defined(__bsdi__)
> #undef __BSDI__
> #define __BSDI__    1
> #endif
> #if defined(_arch_dreamcast)
> #undef __DREAMCAST__
> #define __DREAMCAST__   1
> #endif
> #if defined(__FreeBSD__) || defined(__FreeBSD_kernel__) || defined(__DragonFly__)
> #undef __FREEBSD__
> #define __FREEBSD__ 1
> #endif
> #if defined(hpux) || defined(__hpux) || defined(__hpux__)
> #undef __HPUX__
> #define __HPUX__    1
> #endif
> #if defined(sgi) || defined(__sgi) || defined(__sgi__) || defined(_SGI_SOURCE)
> #undef __IRIX__
> #define __IRIX__    1
> #endif
> #if defined(linux) || defined(__linux) || defined(__linux__)
> #undef __LINUX__
> #define __LINUX__   1
> #endif
> #if defined(ANDROID)
> #undef __ANDROID__
> #undef __LINUX__ /*do we need to do this?*/
> #define __ANDROID__ 1
> #endif
> 
> #if defined(__APPLE__)
> /* lets us know what version of Mac OS X we're compiling on */
> #include "AvailabilityMacros.h"
> #include "TargetConditionals.h"
> #if TARGET_OS_IPHONE
> /* if compiling for iPhone */
> #undef __IPHONEOS__
> #define __IPHONEOS__ 1
> #undef __MACOSX__
> #else
> /* if not compiling for iPhone */
> #undef __MACOSX__
> #define __MACOSX__  1
> #if MAC_OS_X_VERSION_MIN_REQUIRED < 1050
> # error SDL for Mac OS X only supports deploying on 10.5 and above.
> #endif /* MAC_OS_X_VERSION_MIN_REQUIRED < 1050 */
> #if MAC_OS_X_VERSION_MAX_ALLOWED < 1060
> # error SDL for Mac OS X must be built with a 10.6 SDK or above.
> #endif /* MAC_OS_X_VERSION_MAX_ALLOWED < 1060 */
> #endif /* TARGET_OS_IPHONE */
> #endif /* defined(__APPLE__) */
> 
> #if defined(__NetBSD__)
> #undef __NETBSD__
> #define __NETBSD__  1
> #endif
> #if defined(__OpenBSD__)
> #undef __OPENBSD__
> #define __OPENBSD__ 1
> #endif
> #if defined(__OS2__)
> #undef __OS2__
> #define __OS2__     1
> #endif
> #if defined(osf) || defined(__osf) || defined(__osf__) || defined(_OSF_SOURCE)
> #undef __OSF__
> #define __OSF__     1
> #endif
> #if defined(__QNXNTO__)
> #undef __QNXNTO__
> #define __QNXNTO__  1
> #endif
> #if defined(riscos) || defined(__riscos) || defined(__riscos__)
> #undef __RISCOS__
> #define __RISCOS__  1
> #endif
> #if defined(__SVR4)
> #undef __SOLARIS__
> #define __SOLARIS__ 1
> #endif
> #if defined(WIN32) || defined(_WIN32) || defined(__CYGWIN__)
> #undef __WIN32__
> #define __WIN32__   1
> #endif
> #if defined(__PSP__)
> #undef __PSP__
> #define __PSP__ 1
> #endif
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief Gets the name of the platform.
>  */
> extern DECLSPEC const char * SDLCALL SDL_GetPlatform (void);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_platform_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_power.h ../android-sdl/jni/SDL2/include/SDL_power.h
1,75c1,75
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_power_h
< #define _SDL_power_h
< 
< /**
<  *  \file SDL_power.h
<  *
<  *  Header for the SDL power management routines.
<  */
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief The basic state for the system's power supply.
<  */
< typedef enum
< {
<     SDL_POWERSTATE_UNKNOWN,      /**< cannot determine power status */
<     SDL_POWERSTATE_ON_BATTERY,   /**< Not plugged in, running on the battery */
<     SDL_POWERSTATE_NO_BATTERY,   /**< Plugged in, no battery available */
<     SDL_POWERSTATE_CHARGING,     /**< Plugged in, charging battery */
<     SDL_POWERSTATE_CHARGED       /**< Plugged in, battery charged */
< } SDL_PowerState;
< 
< 
< /**
<  *  \brief Get the current power supply details.
<  *
<  *  \param secs Seconds of battery life left. You can pass a NULL here if
<  *              you don't care. Will return -1 if we can't determine a
<  *              value, or we're not running on a battery.
<  *
<  *  \param pct Percentage of battery life left, between 0 and 100. You can
<  *             pass a NULL here if you don't care. Will return -1 if we
<  *             can't determine a value, or we're not running on a battery.
<  *
<  *  \return The state of the battery (if any).
<  */
< extern DECLSPEC SDL_PowerState SDLCALL SDL_GetPowerInfo(int *secs, int *pct);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_power_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_power_h
> #define _SDL_power_h
> 
> /**
>  *  \file SDL_power.h
>  *
>  *  Header for the SDL power management routines.
>  */
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief The basic state for the system's power supply.
>  */
> typedef enum
> {
>     SDL_POWERSTATE_UNKNOWN,      /**< cannot determine power status */
>     SDL_POWERSTATE_ON_BATTERY,   /**< Not plugged in, running on the battery */
>     SDL_POWERSTATE_NO_BATTERY,   /**< Plugged in, no battery available */
>     SDL_POWERSTATE_CHARGING,     /**< Plugged in, charging battery */
>     SDL_POWERSTATE_CHARGED       /**< Plugged in, battery charged */
> } SDL_PowerState;
> 
> 
> /**
>  *  \brief Get the current power supply details.
>  *
>  *  \param secs Seconds of battery life left. You can pass a NULL here if
>  *              you don't care. Will return -1 if we can't determine a
>  *              value, or we're not running on a battery.
>  *
>  *  \param pct Percentage of battery life left, between 0 and 100. You can
>  *             pass a NULL here if you don't care. Will return -1 if we
>  *             can't determine a value, or we're not running on a battery.
>  *
>  *  \return The state of the battery (if any).
>  */
> extern DECLSPEC SDL_PowerState SDLCALL SDL_GetPowerInfo(int *secs, int *pct);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_power_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_quit.h ../android-sdl/jni/SDL2/include/SDL_quit.h
1,58c1,58
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_quit.h
<  *
<  *  Include file for SDL quit event handling.
<  */
< 
< #ifndef _SDL_quit_h
< #define _SDL_quit_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< /**
<  *  \file SDL_quit.h
<  *
<  *  An ::SDL_QUIT event is generated when the user tries to close the application
<  *  window.  If it is ignored or filtered out, the window will remain open.
<  *  If it is not ignored or filtered, it is queued normally and the window
<  *  is allowed to close.  When the window is closed, screen updates will
<  *  complete, but have no effect.
<  *
<  *  SDL_Init() installs signal handlers for SIGINT (keyboard interrupt)
<  *  and SIGTERM (system termination request), if handlers do not already
<  *  exist, that generate ::SDL_QUIT events as well.  There is no way
<  *  to determine the cause of an ::SDL_QUIT event, but setting a signal
<  *  handler in your application will override the default generation of
<  *  quit events for that signal.
<  *
<  *  \sa SDL_Quit()
<  */
< 
< /* There are no functions directly affecting the quit event */
< 
< #define SDL_QuitRequested() \
<         (SDL_PumpEvents(), (SDL_PeepEvents(NULL,0,SDL_PEEKEVENT,SDL_QUIT,SDL_QUIT) > 0))
< 
< #endif /* _SDL_quit_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_quit.h
>  *
>  *  Include file for SDL quit event handling.
>  */
> 
> #ifndef _SDL_quit_h
> #define _SDL_quit_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> /**
>  *  \file SDL_quit.h
>  *
>  *  An ::SDL_QUIT event is generated when the user tries to close the application
>  *  window.  If it is ignored or filtered out, the window will remain open.
>  *  If it is not ignored or filtered, it is queued normally and the window
>  *  is allowed to close.  When the window is closed, screen updates will
>  *  complete, but have no effect.
>  *
>  *  SDL_Init() installs signal handlers for SIGINT (keyboard interrupt)
>  *  and SIGTERM (system termination request), if handlers do not already
>  *  exist, that generate ::SDL_QUIT events as well.  There is no way
>  *  to determine the cause of an ::SDL_QUIT event, but setting a signal
>  *  handler in your application will override the default generation of
>  *  quit events for that signal.
>  *
>  *  \sa SDL_Quit()
>  */
> 
> /* There are no functions directly affecting the quit event */
> 
> #define SDL_QuitRequested() \
>         (SDL_PumpEvents(), (SDL_PeepEvents(NULL,0,SDL_PEEKEVENT,SDL_QUIT,SDL_QUIT) > 0))
> 
> #endif /* _SDL_quit_h */
diff jni/SDL/include/SDL_rect.h ../android-sdl/jni/SDL2/include/SDL_rect.h
1,138c1,138
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_rect.h
<  *
<  *  Header file for SDL_rect definition and management functions.
<  */
< 
< #ifndef _SDL_rect_h
< #define _SDL_rect_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_pixels.h"
< #include "SDL_rwops.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief  The structure that defines a point
<  *
<  *  \sa SDL_EnclosePoints
<  */
< typedef struct SDL_Point
< {
<     int x;
<     int y;
< } SDL_Point;
< 
< /**
<  *  \brief A rectangle, with the origin at the upper left.
<  *
<  *  \sa SDL_RectEmpty
<  *  \sa SDL_RectEquals
<  *  \sa SDL_HasIntersection
<  *  \sa SDL_IntersectRect
<  *  \sa SDL_UnionRect
<  *  \sa SDL_EnclosePoints
<  */
< typedef struct SDL_Rect
< {
<     int x, y;
<     int w, h;
< } SDL_Rect;
< 
< /**
<  *  \brief Returns true if the rectangle has no area.
<  */
< SDL_FORCE_INLINE SDL_bool SDL_RectEmpty(const SDL_Rect *r)
< {
<     return ((!r) || (r->w <= 0) || (r->h <= 0)) ? SDL_TRUE : SDL_FALSE;
< }
< 
< /**
<  *  \brief Returns true if the two rectangles are equal.
<  */
< SDL_FORCE_INLINE SDL_bool SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b)
< {
<     return (a && b && (a->x == b->x) && (a->y == b->y) &&
<             (a->w == b->w) && (a->h == b->h)) ? SDL_TRUE : SDL_FALSE;
< }
< 
< /**
<  *  \brief Determine whether two rectangles intersect.
<  *
<  *  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_HasIntersection(const SDL_Rect * A,
<                                                      const SDL_Rect * B);
< 
< /**
<  *  \brief Calculate the intersection of two rectangles.
<  *
<  *  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IntersectRect(const SDL_Rect * A,
<                                                    const SDL_Rect * B,
<                                                    SDL_Rect * result);
< 
< /**
<  *  \brief Calculate the union of two rectangles.
<  */
< extern DECLSPEC void SDLCALL SDL_UnionRect(const SDL_Rect * A,
<                                            const SDL_Rect * B,
<                                            SDL_Rect * result);
< 
< /**
<  *  \brief Calculate a minimal rectangle enclosing a set of points
<  *
<  *  \return SDL_TRUE if any points were within the clipping rect
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_EnclosePoints(const SDL_Point * points,
<                                                    int count,
<                                                    const SDL_Rect * clip,
<                                                    SDL_Rect * result);
< 
< /**
<  *  \brief Calculate the intersection of a rectangle and line segment.
<  *
<  *  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IntersectRectAndLine(const SDL_Rect *
<                                                           rect, int *X1,
<                                                           int *Y1, int *X2,
<                                                           int *Y2);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_rect_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_rect.h
>  *
>  *  Header file for SDL_rect definition and management functions.
>  */
> 
> #ifndef _SDL_rect_h
> #define _SDL_rect_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_pixels.h"
> #include "SDL_rwops.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief  The structure that defines a point
>  *
>  *  \sa SDL_EnclosePoints
>  */
> typedef struct
> {
>     int x;
>     int y;
> } SDL_Point;
> 
> /**
>  *  \brief A rectangle, with the origin at the upper left.
>  *
>  *  \sa SDL_RectEmpty
>  *  \sa SDL_RectEquals
>  *  \sa SDL_HasIntersection
>  *  \sa SDL_IntersectRect
>  *  \sa SDL_UnionRect
>  *  \sa SDL_EnclosePoints
>  */
> typedef struct SDL_Rect
> {
>     int x, y;
>     int w, h;
> } SDL_Rect;
> 
> /**
>  *  \brief Returns true if the rectangle has no area.
>  */
> SDL_FORCE_INLINE SDL_bool SDL_RectEmpty(const SDL_Rect *r)
> {
>     return ((!r) || (r->w <= 0) || (r->h <= 0)) ? SDL_TRUE : SDL_FALSE;
> }
> 
> /**
>  *  \brief Returns true if the two rectangles are equal.
>  */
> SDL_FORCE_INLINE SDL_bool SDL_RectEquals(const SDL_Rect *a, const SDL_Rect *b)
> {
>     return (a && b && (a->x == b->x) && (a->y == b->y) &&
>             (a->w == b->w) && (a->h == b->h)) ? SDL_TRUE : SDL_FALSE;
> }
> 
> /**
>  *  \brief Determine whether two rectangles intersect.
>  *
>  *  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_HasIntersection(const SDL_Rect * A,
>                                                      const SDL_Rect * B);
> 
> /**
>  *  \brief Calculate the intersection of two rectangles.
>  *
>  *  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IntersectRect(const SDL_Rect * A,
>                                                    const SDL_Rect * B,
>                                                    SDL_Rect * result);
> 
> /**
>  *  \brief Calculate the union of two rectangles.
>  */
> extern DECLSPEC void SDLCALL SDL_UnionRect(const SDL_Rect * A,
>                                            const SDL_Rect * B,
>                                            SDL_Rect * result);
> 
> /**
>  *  \brief Calculate a minimal rectangle enclosing a set of points
>  *
>  *  \return SDL_TRUE if any points were within the clipping rect
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_EnclosePoints(const SDL_Point * points,
>                                                    int count,
>                                                    const SDL_Rect * clip,
>                                                    SDL_Rect * result);
> 
> /**
>  *  \brief Calculate the intersection of a rectangle and line segment.
>  *
>  *  \return SDL_TRUE if there is an intersection, SDL_FALSE otherwise.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IntersectRectAndLine(const SDL_Rect *
>                                                           rect, int *X1,
>                                                           int *Y1, int *X2,
>                                                           int *Y2);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_rect_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_render.h ../android-sdl/jni/SDL2/include/SDL_render.h
1,870c1,845
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_render.h
<  *
<  *  Header file for SDL 2D rendering functions.
<  *
<  *  This API supports the following features:
<  *      * single pixel points
<  *      * single pixel lines
<  *      * filled rectangles
<  *      * texture images
<  *
<  *  The primitives may be drawn in opaque, blended, or additive modes.
<  *
<  *  The texture images may be drawn in opaque, blended, or additive modes.
<  *  They can have an additional color tint or alpha modulation applied to
<  *  them, and may also be stretched with linear interpolation.
<  *
<  *  This API is designed to accelerate simple 2D operations. You may
<  *  want more functionality such as polygons and particle effects and
<  *  in that case you should use SDL's OpenGL/Direct3D support or one
<  *  of the many good 3D engines.
<  *
<  *  These functions must be called from the main thread.
<  *  See this bug for details: http://bugzilla.libsdl.org/show_bug.cgi?id=1995
<  */
< 
< #ifndef _SDL_render_h
< #define _SDL_render_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_rect.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief Flags used when creating a rendering context
<  */
< typedef enum
< {
<     SDL_RENDERER_SOFTWARE = 0x00000001,         /**< The renderer is a software fallback */
<     SDL_RENDERER_ACCELERATED = 0x00000002,      /**< The renderer uses hardware
<                                                      acceleration */
<     SDL_RENDERER_PRESENTVSYNC = 0x00000004,     /**< Present is synchronized
<                                                      with the refresh rate */
<     SDL_RENDERER_TARGETTEXTURE = 0x00000008     /**< The renderer supports
<                                                      rendering to texture */
< } SDL_RendererFlags;
< 
< /**
<  *  \brief Information on the capabilities of a render driver or context.
<  */
< typedef struct SDL_RendererInfo
< {
<     const char *name;           /**< The name of the renderer */
<     Uint32 flags;               /**< Supported ::SDL_RendererFlags */
<     Uint32 num_texture_formats; /**< The number of available texture formats */
<     Uint32 texture_formats[16]; /**< The available texture formats */
<     int max_texture_width;      /**< The maximimum texture width */
<     int max_texture_height;     /**< The maximimum texture height */
< } SDL_RendererInfo;
< 
< /**
<  *  \brief The access pattern allowed for a texture.
<  */
< typedef enum
< {
<     SDL_TEXTUREACCESS_STATIC,    /**< Changes rarely, not lockable */
<     SDL_TEXTUREACCESS_STREAMING, /**< Changes frequently, lockable */
<     SDL_TEXTUREACCESS_TARGET     /**< Texture can be used as a render target */
< } SDL_TextureAccess;
< 
< /**
<  *  \brief The texture channel modulation used in SDL_RenderCopy().
<  */
< typedef enum
< {
<     SDL_TEXTUREMODULATE_NONE = 0x00000000,     /**< No modulation */
<     SDL_TEXTUREMODULATE_COLOR = 0x00000001,    /**< srcC = srcC * color */
<     SDL_TEXTUREMODULATE_ALPHA = 0x00000002     /**< srcA = srcA * alpha */
< } SDL_TextureModulate;
< 
< /**
<  *  \brief Flip constants for SDL_RenderCopyEx
<  */
< typedef enum
< {
<     SDL_FLIP_NONE = 0x00000000,     /**< Do not flip */
<     SDL_FLIP_HORIZONTAL = 0x00000001,    /**< flip horizontally */
<     SDL_FLIP_VERTICAL = 0x00000002     /**< flip vertically */
< } SDL_RendererFlip;
< 
< /**
<  *  \brief A structure representing rendering state
<  */
< struct SDL_Renderer;
< typedef struct SDL_Renderer SDL_Renderer;
< 
< /**
<  *  \brief An efficient driver-specific representation of pixel data
<  */
< struct SDL_Texture;
< typedef struct SDL_Texture SDL_Texture;
< 
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Get the number of 2D rendering drivers available for the current
<  *         display.
<  *
<  *  A render driver is a set of code that handles rendering and texture
<  *  management on a particular display.  Normally there is only one, but
<  *  some drivers may have several available with different capabilities.
<  *
<  *  \sa SDL_GetRenderDriverInfo()
<  *  \sa SDL_CreateRenderer()
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumRenderDrivers(void);
< 
< /**
<  *  \brief Get information about a specific 2D rendering driver for the current
<  *         display.
<  *
<  *  \param index The index of the driver to query information about.
<  *  \param info  A pointer to an SDL_RendererInfo struct to be filled with
<  *               information on the rendering driver.
<  *
<  *  \return 0 on success, -1 if the index was out of range.
<  *
<  *  \sa SDL_CreateRenderer()
<  */
< extern DECLSPEC int SDLCALL SDL_GetRenderDriverInfo(int index,
<                                                     SDL_RendererInfo * info);
< 
< /**
<  *  \brief Create a window and default renderer
<  *
<  *  \param width    The width of the window
<  *  \param height   The height of the window
<  *  \param window_flags The flags used to create the window
<  *  \param window   A pointer filled with the window, or NULL on error
<  *  \param renderer A pointer filled with the renderer, or NULL on error
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_CreateWindowAndRenderer(
<                                 int width, int height, Uint32 window_flags,
<                                 SDL_Window **window, SDL_Renderer **renderer);
< 
< 
< /**
<  *  \brief Create a 2D rendering context for a window.
<  *
<  *  \param window The window where rendering is displayed.
<  *  \param index    The index of the rendering driver to initialize, or -1 to
<  *                  initialize the first one supporting the requested flags.
<  *  \param flags    ::SDL_RendererFlags.
<  *
<  *  \return A valid rendering context or NULL if there was an error.
<  *
<  *  \sa SDL_CreateSoftwareRenderer()
<  *  \sa SDL_GetRendererInfo()
<  *  \sa SDL_DestroyRenderer()
<  */
< extern DECLSPEC SDL_Renderer * SDLCALL SDL_CreateRenderer(SDL_Window * window,
<                                                int index, Uint32 flags);
< 
< /**
<  *  \brief Create a 2D software rendering context for a surface.
<  *
<  *  \param surface The surface where rendering is done.
<  *
<  *  \return A valid rendering context or NULL if there was an error.
<  *
<  *  \sa SDL_CreateRenderer()
<  *  \sa SDL_DestroyRenderer()
<  */
< extern DECLSPEC SDL_Renderer * SDLCALL SDL_CreateSoftwareRenderer(SDL_Surface * surface);
< 
< /**
<  *  \brief Get the renderer associated with a window.
<  */
< extern DECLSPEC SDL_Renderer * SDLCALL SDL_GetRenderer(SDL_Window * window);
< 
< /**
<  *  \brief Get information about a rendering context.
<  */
< extern DECLSPEC int SDLCALL SDL_GetRendererInfo(SDL_Renderer * renderer,
<                                                 SDL_RendererInfo * info);
< 
< /**
<  *  \brief Get the output size of a rendering context.
<  */
< extern DECLSPEC int SDLCALL SDL_GetRendererOutputSize(SDL_Renderer * renderer,
<                                                       int *w, int *h);
< 
< /**
<  *  \brief Create a texture for a rendering context.
<  *
<  *  \param renderer The renderer.
<  *  \param format The format of the texture.
<  *  \param access One of the enumerated values in ::SDL_TextureAccess.
<  *  \param w      The width of the texture in pixels.
<  *  \param h      The height of the texture in pixels.
<  *
<  *  \return The created texture is returned, or 0 if no rendering context was
<  *          active,  the format was unsupported, or the width or height were out
<  *          of range.
<  *
<  *  \sa SDL_QueryTexture()
<  *  \sa SDL_UpdateTexture()
<  *  \sa SDL_DestroyTexture()
<  */
< extern DECLSPEC SDL_Texture * SDLCALL SDL_CreateTexture(SDL_Renderer * renderer,
<                                                         Uint32 format,
<                                                         int access, int w,
<                                                         int h);
< 
< /**
<  *  \brief Create a texture from an existing surface.
<  *
<  *  \param renderer The renderer.
<  *  \param surface The surface containing pixel data used to fill the texture.
<  *
<  *  \return The created texture is returned, or 0 on error.
<  *
<  *  \note The surface is not modified or freed by this function.
<  *
<  *  \sa SDL_QueryTexture()
<  *  \sa SDL_DestroyTexture()
<  */
< extern DECLSPEC SDL_Texture * SDLCALL SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);
< 
< /**
<  *  \brief Query the attributes of a texture
<  *
<  *  \param texture A texture to be queried.
<  *  \param format  A pointer filled in with the raw format of the texture.  The
<  *                 actual format may differ, but pixel transfers will use this
<  *                 format.
<  *  \param access  A pointer filled in with the actual access to the texture.
<  *  \param w       A pointer filled in with the width of the texture in pixels.
<  *  \param h       A pointer filled in with the height of the texture in pixels.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid.
<  */
< extern DECLSPEC int SDLCALL SDL_QueryTexture(SDL_Texture * texture,
<                                              Uint32 * format, int *access,
<                                              int *w, int *h);
< 
< /**
<  *  \brief Set an additional color value used in render copy operations.
<  *
<  *  \param texture The texture to update.
<  *  \param r       The red color value multiplied into copy operations.
<  *  \param g       The green color value multiplied into copy operations.
<  *  \param b       The blue color value multiplied into copy operations.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid or color modulation
<  *          is not supported.
<  *
<  *  \sa SDL_GetTextureColorMod()
<  */
< extern DECLSPEC int SDLCALL SDL_SetTextureColorMod(SDL_Texture * texture,
<                                                    Uint8 r, Uint8 g, Uint8 b);
< 
< 
< /**
<  *  \brief Get the additional color value used in render copy operations.
<  *
<  *  \param texture The texture to query.
<  *  \param r         A pointer filled in with the current red color value.
<  *  \param g         A pointer filled in with the current green color value.
<  *  \param b         A pointer filled in with the current blue color value.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid.
<  *
<  *  \sa SDL_SetTextureColorMod()
<  */
< extern DECLSPEC int SDLCALL SDL_GetTextureColorMod(SDL_Texture * texture,
<                                                    Uint8 * r, Uint8 * g,
<                                                    Uint8 * b);
< 
< /**
<  *  \brief Set an additional alpha value used in render copy operations.
<  *
<  *  \param texture The texture to update.
<  *  \param alpha     The alpha value multiplied into copy operations.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid or alpha modulation
<  *          is not supported.
<  *
<  *  \sa SDL_GetTextureAlphaMod()
<  */
< extern DECLSPEC int SDLCALL SDL_SetTextureAlphaMod(SDL_Texture * texture,
<                                                    Uint8 alpha);
< 
< /**
<  *  \brief Get the additional alpha value used in render copy operations.
<  *
<  *  \param texture The texture to query.
<  *  \param alpha     A pointer filled in with the current alpha value.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid.
<  *
<  *  \sa SDL_SetTextureAlphaMod()
<  */
< extern DECLSPEC int SDLCALL SDL_GetTextureAlphaMod(SDL_Texture * texture,
<                                                    Uint8 * alpha);
< 
< /**
<  *  \brief Set the blend mode used for texture copy operations.
<  *
<  *  \param texture The texture to update.
<  *  \param blendMode ::SDL_BlendMode to use for texture blending.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid or the blend mode is
<  *          not supported.
<  *
<  *  \note If the blend mode is not supported, the closest supported mode is
<  *        chosen.
<  *
<  *  \sa SDL_GetTextureBlendMode()
<  */
< extern DECLSPEC int SDLCALL SDL_SetTextureBlendMode(SDL_Texture * texture,
<                                                     SDL_BlendMode blendMode);
< 
< /**
<  *  \brief Get the blend mode used for texture copy operations.
<  *
<  *  \param texture   The texture to query.
<  *  \param blendMode A pointer filled in with the current blend mode.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid.
<  *
<  *  \sa SDL_SetTextureBlendMode()
<  */
< extern DECLSPEC int SDLCALL SDL_GetTextureBlendMode(SDL_Texture * texture,
<                                                     SDL_BlendMode *blendMode);
< 
< /**
<  *  \brief Update the given texture rectangle with new pixel data.
<  *
<  *  \param texture   The texture to update
<  *  \param rect      A pointer to the rectangle of pixels to update, or NULL to
<  *                   update the entire texture.
<  *  \param pixels    The raw pixel data.
<  *  \param pitch     The number of bytes between rows of pixel data.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid.
<  *
<  *  \note This is a fairly slow function.
<  */
< extern DECLSPEC int SDLCALL SDL_UpdateTexture(SDL_Texture * texture,
<                                               const SDL_Rect * rect,
<                                               const void *pixels, int pitch);
< 
< /**
<  *  \brief Update a rectangle within a planar YV12 or IYUV texture with new pixel data.
<  *
<  *  \param texture   The texture to update
<  *  \param rect      A pointer to the rectangle of pixels to update, or NULL to
<  *                   update the entire texture.
<  *  \param Yplane    The raw pixel data for the Y plane.
<  *  \param Ypitch    The number of bytes between rows of pixel data for the Y plane.
<  *  \param Uplane    The raw pixel data for the U plane.
<  *  \param Upitch    The number of bytes between rows of pixel data for the U plane.
<  *  \param Vplane    The raw pixel data for the V plane.
<  *  \param Vpitch    The number of bytes between rows of pixel data for the V plane.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid.
<  *
<  *  \note You can use SDL_UpdateTexture() as long as your pixel data is
<  *        a contiguous block of Y and U/V planes in the proper order, but
<  *        this function is available if your pixel data is not contiguous.
<  */
< extern DECLSPEC int SDLCALL SDL_UpdateYUVTexture(SDL_Texture * texture,
<                                                  const SDL_Rect * rect,
<                                                  const Uint8 *Yplane, int Ypitch,
<                                                  const Uint8 *Uplane, int Upitch,
<                                                  const Uint8 *Vplane, int Vpitch);
< 
< /**
<  *  \brief Lock a portion of the texture for write-only pixel access.
<  *
<  *  \param texture   The texture to lock for access, which was created with
<  *                   ::SDL_TEXTUREACCESS_STREAMING.
<  *  \param rect      A pointer to the rectangle to lock for access. If the rect
<  *                   is NULL, the entire texture will be locked.
<  *  \param pixels    This is filled in with a pointer to the locked pixels,
<  *                   appropriately offset by the locked area.
<  *  \param pitch     This is filled in with the pitch of the locked pixels.
<  *
<  *  \return 0 on success, or -1 if the texture is not valid or was not created with ::SDL_TEXTUREACCESS_STREAMING.
<  *
<  *  \sa SDL_UnlockTexture()
<  */
< extern DECLSPEC int SDLCALL SDL_LockTexture(SDL_Texture * texture,
<                                             const SDL_Rect * rect,
<                                             void **pixels, int *pitch);
< 
< /**
<  *  \brief Unlock a texture, uploading the changes to video memory, if needed.
<  *
<  *  \sa SDL_LockTexture()
<  */
< extern DECLSPEC void SDLCALL SDL_UnlockTexture(SDL_Texture * texture);
< 
< /**
<  * \brief Determines whether a window supports the use of render targets
<  *
<  * \param renderer The renderer that will be checked
<  *
<  * \return SDL_TRUE if supported, SDL_FALSE if not.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_RenderTargetSupported(SDL_Renderer *renderer);
< 
< /**
<  * \brief Set a texture as the current rendering target.
<  *
<  * \param renderer The renderer.
<  * \param texture The targeted texture, which must be created with the SDL_TEXTUREACCESS_TARGET flag, or NULL for the default render target
<  *
<  * \return 0 on success, or -1 on error
<  *
<  *  \sa SDL_GetRenderTarget()
<  */
< extern DECLSPEC int SDLCALL SDL_SetRenderTarget(SDL_Renderer *renderer,
<                                                 SDL_Texture *texture);
< 
< /**
<  * \brief Get the current render target or NULL for the default render target.
<  *
<  * \return The current render target
<  *
<  *  \sa SDL_SetRenderTarget()
<  */
< extern DECLSPEC SDL_Texture * SDLCALL SDL_GetRenderTarget(SDL_Renderer *renderer);
< 
< /**
<  *  \brief Set device independent resolution for rendering
<  *
<  *  \param renderer The renderer for which resolution should be set.
<  *  \param w      The width of the logical resolution
<  *  \param h      The height of the logical resolution
<  *
<  *  This function uses the viewport and scaling functionality to allow a fixed logical
<  *  resolution for rendering, regardless of the actual output resolution.  If the actual
<  *  output resolution doesn't have the same aspect ratio the output rendering will be
<  *  centered within the output display.
<  *
<  *  If the output display is a window, mouse events in the window will be filtered
<  *  and scaled so they seem to arrive within the logical resolution.
<  *
<  *  \note If this function results in scaling or subpixel drawing by the
<  *        rendering backend, it will be handled using the appropriate
<  *        quality hints.
<  *
<  *  \sa SDL_RenderGetLogicalSize()
<  *  \sa SDL_RenderSetScale()
<  *  \sa SDL_RenderSetViewport()
<  */
< extern DECLSPEC int SDLCALL SDL_RenderSetLogicalSize(SDL_Renderer * renderer, int w, int h);
< 
< /**
<  *  \brief Get device independent resolution for rendering
<  *
<  *  \param renderer The renderer from which resolution should be queried.
<  *  \param w      A pointer filled with the width of the logical resolution
<  *  \param h      A pointer filled with the height of the logical resolution
<  *
<  *  \sa SDL_RenderSetLogicalSize()
<  */
< extern DECLSPEC void SDLCALL SDL_RenderGetLogicalSize(SDL_Renderer * renderer, int *w, int *h);
< 
< /**
<  *  \brief Set the drawing area for rendering on the current target.
<  *
<  *  \param renderer The renderer for which the drawing area should be set.
<  *  \param rect The rectangle representing the drawing area, or NULL to set the viewport to the entire target.
<  *
<  *  The x,y of the viewport rect represents the origin for rendering.
<  *
<  *  \return 0 on success, or -1 on error
<  *
<  *  \note If the window associated with the renderer is resized, the viewport is automatically reset.
<  *
<  *  \sa SDL_RenderGetViewport()
<  *  \sa SDL_RenderSetLogicalSize()
<  */
< extern DECLSPEC int SDLCALL SDL_RenderSetViewport(SDL_Renderer * renderer,
<                                                   const SDL_Rect * rect);
< 
< /**
<  *  \brief Get the drawing area for the current target.
<  *
<  *  \sa SDL_RenderSetViewport()
<  */
< extern DECLSPEC void SDLCALL SDL_RenderGetViewport(SDL_Renderer * renderer,
<                                                    SDL_Rect * rect);
< 
< /**
<  *  \brief Set the clip rectangle for the current target.
<  *
<  *  \param renderer The renderer for which clip rectangle should be set.
<  *  \param rect   A pointer to the rectangle to set as the clip rectangle, or
<  *                NULL to disable clipping.
<  *
<  *  \return 0 on success, or -1 on error
<  *
<  *  \sa SDL_RenderGetClipRect()
<  */
< extern DECLSPEC int SDLCALL SDL_RenderSetClipRect(SDL_Renderer * renderer,
<                                                   const SDL_Rect * rect);
< 
< /**
<  *  \brief Get the clip rectangle for the current target.
<  *
<  *  \param renderer The renderer from which clip rectangle should be queried.
<  *  \param rect   A pointer filled in with the current clip rectangle, or
<  *                an empty rectangle if clipping is disabled.
<  *
<  *  \sa SDL_RenderSetClipRect()
<  */
< extern DECLSPEC void SDLCALL SDL_RenderGetClipRect(SDL_Renderer * renderer,
<                                                    SDL_Rect * rect);
< 
< /**
<  *  \brief Set the drawing scale for rendering on the current target.
<  *
<  *  \param renderer The renderer for which the drawing scale should be set.
<  *  \param scaleX The horizontal scaling factor
<  *  \param scaleY The vertical scaling factor
<  *
<  *  The drawing coordinates are scaled by the x/y scaling factors
<  *  before they are used by the renderer.  This allows resolution
<  *  independent drawing with a single coordinate system.
<  *
<  *  \note If this results in scaling or subpixel drawing by the
<  *        rendering backend, it will be handled using the appropriate
<  *        quality hints.  For best results use integer scaling factors.
<  *
<  *  \sa SDL_RenderGetScale()
<  *  \sa SDL_RenderSetLogicalSize()
<  */
< extern DECLSPEC int SDLCALL SDL_RenderSetScale(SDL_Renderer * renderer,
<                                                float scaleX, float scaleY);
< 
< /**
<  *  \brief Get the drawing scale for the current target.
<  *
<  *  \param renderer The renderer from which drawing scale should be queried.
<  *  \param scaleX A pointer filled in with the horizontal scaling factor
<  *  \param scaleY A pointer filled in with the vertical scaling factor
<  *
<  *  \sa SDL_RenderSetScale()
<  */
< extern DECLSPEC void SDLCALL SDL_RenderGetScale(SDL_Renderer * renderer,
<                                                float *scaleX, float *scaleY);
< 
< /**
<  *  \brief Set the color used for drawing operations (Rect, Line and Clear).
<  *
<  *  \param renderer The renderer for which drawing color should be set.
<  *  \param r The red value used to draw on the rendering target.
<  *  \param g The green value used to draw on the rendering target.
<  *  \param b The blue value used to draw on the rendering target.
<  *  \param a The alpha value used to draw on the rendering target, usually
<  *           ::SDL_ALPHA_OPAQUE (255).
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDL_SetRenderDrawColor(SDL_Renderer * renderer,
<                                            Uint8 r, Uint8 g, Uint8 b,
<                                            Uint8 a);
< 
< /**
<  *  \brief Get the color used for drawing operations (Rect, Line and Clear).
<  *
<  *  \param renderer The renderer from which drawing color should be queried.
<  *  \param r A pointer to the red value used to draw on the rendering target.
<  *  \param g A pointer to the green value used to draw on the rendering target.
<  *  \param b A pointer to the blue value used to draw on the rendering target.
<  *  \param a A pointer to the alpha value used to draw on the rendering target,
<  *           usually ::SDL_ALPHA_OPAQUE (255).
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDL_GetRenderDrawColor(SDL_Renderer * renderer,
<                                            Uint8 * r, Uint8 * g, Uint8 * b,
<                                            Uint8 * a);
< 
< /**
<  *  \brief Set the blend mode used for drawing operations (Fill and Line).
<  *
<  *  \param renderer The renderer for which blend mode should be set.
<  *  \param blendMode ::SDL_BlendMode to use for blending.
<  *
<  *  \return 0 on success, or -1 on error
<  *
<  *  \note If the blend mode is not supported, the closest supported mode is
<  *        chosen.
<  *
<  *  \sa SDL_GetRenderDrawBlendMode()
<  */
< extern DECLSPEC int SDLCALL SDL_SetRenderDrawBlendMode(SDL_Renderer * renderer,
<                                                        SDL_BlendMode blendMode);
< 
< /**
<  *  \brief Get the blend mode used for drawing operations.
<  *
<  *  \param renderer The renderer from which blend mode should be queried.
<  *  \param blendMode A pointer filled in with the current blend mode.
<  *
<  *  \return 0 on success, or -1 on error
<  *
<  *  \sa SDL_SetRenderDrawBlendMode()
<  */
< extern DECLSPEC int SDLCALL SDL_GetRenderDrawBlendMode(SDL_Renderer * renderer,
<                                                        SDL_BlendMode *blendMode);
< 
< /**
<  *  \brief Clear the current rendering target with the drawing color
<  *
<  *  This function clears the entire rendering target, ignoring the viewport.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderClear(SDL_Renderer * renderer);
< 
< /**
<  *  \brief Draw a point on the current rendering target.
<  *
<  *  \param renderer The renderer which should draw a point.
<  *  \param x The x coordinate of the point.
<  *  \param y The y coordinate of the point.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderDrawPoint(SDL_Renderer * renderer,
<                                                 int x, int y);
< 
< /**
<  *  \brief Draw multiple points on the current rendering target.
<  *
<  *  \param renderer The renderer which should draw multiple points.
<  *  \param points The points to draw
<  *  \param count The number of points to draw
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderDrawPoints(SDL_Renderer * renderer,
<                                                  const SDL_Point * points,
<                                                  int count);
< 
< /**
<  *  \brief Draw a line on the current rendering target.
<  *
<  *  \param renderer The renderer which should draw a line.
<  *  \param x1 The x coordinate of the start point.
<  *  \param y1 The y coordinate of the start point.
<  *  \param x2 The x coordinate of the end point.
<  *  \param y2 The y coordinate of the end point.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderDrawLine(SDL_Renderer * renderer,
<                                                int x1, int y1, int x2, int y2);
< 
< /**
<  *  \brief Draw a series of connected lines on the current rendering target.
<  *
<  *  \param renderer The renderer which should draw multiple lines.
<  *  \param points The points along the lines
<  *  \param count The number of points, drawing count-1 lines
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderDrawLines(SDL_Renderer * renderer,
<                                                 const SDL_Point * points,
<                                                 int count);
< 
< /**
<  *  \brief Draw a rectangle on the current rendering target.
<  *
<  *  \param renderer The renderer which should draw a rectangle.
<  *  \param rect A pointer to the destination rectangle, or NULL to outline the entire rendering target.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderDrawRect(SDL_Renderer * renderer,
<                                                const SDL_Rect * rect);
< 
< /**
<  *  \brief Draw some number of rectangles on the current rendering target.
<  *
<  *  \param renderer The renderer which should draw multiple rectangles.
<  *  \param rects A pointer to an array of destination rectangles.
<  *  \param count The number of rectangles.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderDrawRects(SDL_Renderer * renderer,
<                                                 const SDL_Rect * rects,
<                                                 int count);
< 
< /**
<  *  \brief Fill a rectangle on the current rendering target with the drawing color.
<  *
<  *  \param renderer The renderer which should fill a rectangle.
<  *  \param rect A pointer to the destination rectangle, or NULL for the entire
<  *              rendering target.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderFillRect(SDL_Renderer * renderer,
<                                                const SDL_Rect * rect);
< 
< /**
<  *  \brief Fill some number of rectangles on the current rendering target with the drawing color.
<  *
<  *  \param renderer The renderer which should fill multiple rectangles.
<  *  \param rects A pointer to an array of destination rectangles.
<  *  \param count The number of rectangles.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderFillRects(SDL_Renderer * renderer,
<                                                 const SDL_Rect * rects,
<                                                 int count);
< 
< /**
<  *  \brief Copy a portion of the texture to the current rendering target.
<  *
<  *  \param renderer The renderer which should copy parts of a texture.
<  *  \param texture The source texture.
<  *  \param srcrect   A pointer to the source rectangle, or NULL for the entire
<  *                   texture.
<  *  \param dstrect   A pointer to the destination rectangle, or NULL for the
<  *                   entire rendering target.
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderCopy(SDL_Renderer * renderer,
<                                            SDL_Texture * texture,
<                                            const SDL_Rect * srcrect,
<                                            const SDL_Rect * dstrect);
< 
< /**
<  *  \brief Copy a portion of the source texture to the current rendering target, rotating it by angle around the given center
<  *
<  *  \param renderer The renderer which should copy parts of a texture.
<  *  \param texture The source texture.
<  *  \param srcrect   A pointer to the source rectangle, or NULL for the entire
<  *                   texture.
<  *  \param dstrect   A pointer to the destination rectangle, or NULL for the
<  *                   entire rendering target.
<  *  \param angle    An angle in degrees that indicates the rotation that will be applied to dstrect
<  *  \param center   A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done aroud dstrect.w/2, dstrect.h/2)
<  *  \param flip     An SDL_RendererFlip value stating which flipping actions should be performed on the texture
<  *
<  *  \return 0 on success, or -1 on error
<  */
< extern DECLSPEC int SDLCALL SDL_RenderCopyEx(SDL_Renderer * renderer,
<                                            SDL_Texture * texture,
<                                            const SDL_Rect * srcrect,
<                                            const SDL_Rect * dstrect,
<                                            const double angle,
<                                            const SDL_Point *center,
<                                            const SDL_RendererFlip flip);
< 
< /**
<  *  \brief Read pixels from the current rendering target.
<  *
<  *  \param renderer The renderer from which pixels should be read.
<  *  \param rect   A pointer to the rectangle to read, or NULL for the entire
<  *                render target.
<  *  \param format The desired format of the pixel data, or 0 to use the format
<  *                of the rendering target
<  *  \param pixels A pointer to be filled in with the pixel data
<  *  \param pitch  The pitch of the pixels parameter.
<  *
<  *  \return 0 on success, or -1 if pixel reading is not supported.
<  *
<  *  \warning This is a very slow operation, and should not be used frequently.
<  */
< extern DECLSPEC int SDLCALL SDL_RenderReadPixels(SDL_Renderer * renderer,
<                                                  const SDL_Rect * rect,
<                                                  Uint32 format,
<                                                  void *pixels, int pitch);
< 
< /**
<  *  \brief Update the screen with rendering performed.
<  */
< extern DECLSPEC void SDLCALL SDL_RenderPresent(SDL_Renderer * renderer);
< 
< /**
<  *  \brief Destroy the specified texture.
<  *
<  *  \sa SDL_CreateTexture()
<  *  \sa SDL_CreateTextureFromSurface()
<  */
< extern DECLSPEC void SDLCALL SDL_DestroyTexture(SDL_Texture * texture);
< 
< /**
<  *  \brief Destroy the rendering context for a window and free associated
<  *         textures.
<  *
<  *  \sa SDL_CreateRenderer()
<  */
< extern DECLSPEC void SDLCALL SDL_DestroyRenderer(SDL_Renderer * renderer);
< 
< 
< /**
<  *  \brief Bind the texture to the current OpenGL/ES/ES2 context for use with
<  *         OpenGL instructions.
<  *
<  *  \param texture  The SDL texture to bind
<  *  \param texw     A pointer to a float that will be filled with the texture width
<  *  \param texh     A pointer to a float that will be filled with the texture height
<  *
<  *  \return 0 on success, or -1 if the operation is not supported
<  */
< extern DECLSPEC int SDLCALL SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);
< 
< /**
<  *  \brief Unbind a texture from the current OpenGL/ES/ES2 context.
<  *
<  *  \param texture  The SDL texture to unbind
<  *
<  *  \return 0 on success, or -1 if the operation is not supported
<  */
< extern DECLSPEC int SDLCALL SDL_GL_UnbindTexture(SDL_Texture *texture);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_render_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_render.h
>  *
>  *  Header file for SDL 2D rendering functions.
>  *
>  *  This API supports the following features:
>  *      * single pixel points
>  *      * single pixel lines
>  *      * filled rectangles
>  *      * texture images
>  *
>  *  The primitives may be drawn in opaque, blended, or additive modes.
>  *
>  *  The texture images may be drawn in opaque, blended, or additive modes.
>  *  They can have an additional color tint or alpha modulation applied to
>  *  them, and may also be stretched with linear interpolation.
>  *
>  *  This API is designed to accelerate simple 2D operations. You may
>  *  want more functionality such as polygons and particle effects and
>  *  in that case you should use SDL's OpenGL/Direct3D support or one
>  *  of the many good 3D engines.
>  *
>  *  These functions must be called from the main thread.
>  *  See this bug for details: http://bugzilla.libsdl.org/show_bug.cgi?id=1995
>  */
> 
> #ifndef _SDL_render_h
> #define _SDL_render_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_rect.h"
> #include "SDL_video.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief Flags used when creating a rendering context
>  */
> typedef enum
> {
>     SDL_RENDERER_SOFTWARE = 0x00000001,         /**< The renderer is a software fallback */
>     SDL_RENDERER_ACCELERATED = 0x00000002,      /**< The renderer uses hardware
>                                                      acceleration */
>     SDL_RENDERER_PRESENTVSYNC = 0x00000004,     /**< Present is synchronized
>                                                      with the refresh rate */
>     SDL_RENDERER_TARGETTEXTURE = 0x00000008     /**< The renderer supports
>                                                      rendering to texture */
> } SDL_RendererFlags;
> 
> /**
>  *  \brief Information on the capabilities of a render driver or context.
>  */
> typedef struct SDL_RendererInfo
> {
>     const char *name;           /**< The name of the renderer */
>     Uint32 flags;               /**< Supported ::SDL_RendererFlags */
>     Uint32 num_texture_formats; /**< The number of available texture formats */
>     Uint32 texture_formats[16]; /**< The available texture formats */
>     int max_texture_width;      /**< The maximimum texture width */
>     int max_texture_height;     /**< The maximimum texture height */
> } SDL_RendererInfo;
> 
> /**
>  *  \brief The access pattern allowed for a texture.
>  */
> typedef enum
> {
>     SDL_TEXTUREACCESS_STATIC,    /**< Changes rarely, not lockable */
>     SDL_TEXTUREACCESS_STREAMING, /**< Changes frequently, lockable */
>     SDL_TEXTUREACCESS_TARGET     /**< Texture can be used as a render target */
> } SDL_TextureAccess;
> 
> /**
>  *  \brief The texture channel modulation used in SDL_RenderCopy().
>  */
> typedef enum
> {
>     SDL_TEXTUREMODULATE_NONE = 0x00000000,     /**< No modulation */
>     SDL_TEXTUREMODULATE_COLOR = 0x00000001,    /**< srcC = srcC * color */
>     SDL_TEXTUREMODULATE_ALPHA = 0x00000002     /**< srcA = srcA * alpha */
> } SDL_TextureModulate;
> 
> /**
>  *  \brief Flip constants for SDL_RenderCopyEx
>  */
> typedef enum
> {
>     SDL_FLIP_NONE = 0x00000000,     /**< Do not flip */
>     SDL_FLIP_HORIZONTAL = 0x00000001,    /**< flip horizontally */
>     SDL_FLIP_VERTICAL = 0x00000002     /**< flip vertically */
> } SDL_RendererFlip;
> 
> /**
>  *  \brief A structure representing rendering state
>  */
> struct SDL_Renderer;
> typedef struct SDL_Renderer SDL_Renderer;
> 
> /**
>  *  \brief An efficient driver-specific representation of pixel data
>  */
> struct SDL_Texture;
> typedef struct SDL_Texture SDL_Texture;
> 
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Get the number of 2D rendering drivers available for the current
>  *         display.
>  *
>  *  A render driver is a set of code that handles rendering and texture
>  *  management on a particular display.  Normally there is only one, but
>  *  some drivers may have several available with different capabilities.
>  *
>  *  \sa SDL_GetRenderDriverInfo()
>  *  \sa SDL_CreateRenderer()
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumRenderDrivers(void);
> 
> /**
>  *  \brief Get information about a specific 2D rendering driver for the current
>  *         display.
>  *
>  *  \param index The index of the driver to query information about.
>  *  \param info  A pointer to an SDL_RendererInfo struct to be filled with
>  *               information on the rendering driver.
>  *
>  *  \return 0 on success, -1 if the index was out of range.
>  *
>  *  \sa SDL_CreateRenderer()
>  */
> extern DECLSPEC int SDLCALL SDL_GetRenderDriverInfo(int index,
>                                                     SDL_RendererInfo * info);
> 
> /**
>  *  \brief Create a window and default renderer
>  *
>  *  \param width    The width of the window
>  *  \param height   The height of the window
>  *  \param window_flags The flags used to create the window
>  *  \param window   A pointer filled with the window, or NULL on error
>  *  \param renderer A pointer filled with the renderer, or NULL on error
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_CreateWindowAndRenderer(
>                                 int width, int height, Uint32 window_flags,
>                                 SDL_Window **window, SDL_Renderer **renderer);
> 
> 
> /**
>  *  \brief Create a 2D rendering context for a window.
>  *
>  *  \param window The window where rendering is displayed.
>  *  \param index    The index of the rendering driver to initialize, or -1 to
>  *                  initialize the first one supporting the requested flags.
>  *  \param flags    ::SDL_RendererFlags.
>  *
>  *  \return A valid rendering context or NULL if there was an error.
>  *
>  *  \sa SDL_CreateSoftwareRenderer()
>  *  \sa SDL_GetRendererInfo()
>  *  \sa SDL_DestroyRenderer()
>  */
> extern DECLSPEC SDL_Renderer * SDLCALL SDL_CreateRenderer(SDL_Window * window,
>                                                int index, Uint32 flags);
> 
> /**
>  *  \brief Create a 2D software rendering context for a surface.
>  *
>  *  \param surface The surface where rendering is done.
>  *
>  *  \return A valid rendering context or NULL if there was an error.
>  *
>  *  \sa SDL_CreateRenderer()
>  *  \sa SDL_DestroyRenderer()
>  */
> extern DECLSPEC SDL_Renderer * SDLCALL SDL_CreateSoftwareRenderer(SDL_Surface * surface);
> 
> /**
>  *  \brief Get the renderer associated with a window.
>  */
> extern DECLSPEC SDL_Renderer * SDLCALL SDL_GetRenderer(SDL_Window * window);
> 
> /**
>  *  \brief Get information about a rendering context.
>  */
> extern DECLSPEC int SDLCALL SDL_GetRendererInfo(SDL_Renderer * renderer,
>                                                 SDL_RendererInfo * info);
> 
> /**
>  *  \brief Get the output size of a rendering context.
>  */
> extern DECLSPEC int SDLCALL SDL_GetRendererOutputSize(SDL_Renderer * renderer,
>                                                       int *w, int *h);
> 
> /**
>  *  \brief Create a texture for a rendering context.
>  *
>  *  \param renderer The renderer.
>  *  \param format The format of the texture.
>  *  \param access One of the enumerated values in ::SDL_TextureAccess.
>  *  \param w      The width of the texture in pixels.
>  *  \param h      The height of the texture in pixels.
>  *
>  *  \return The created texture is returned, or 0 if no rendering context was
>  *          active,  the format was unsupported, or the width or height were out
>  *          of range.
>  *
>  *  \sa SDL_QueryTexture()
>  *  \sa SDL_UpdateTexture()
>  *  \sa SDL_DestroyTexture()
>  */
> extern DECLSPEC SDL_Texture * SDLCALL SDL_CreateTexture(SDL_Renderer * renderer,
>                                                         Uint32 format,
>                                                         int access, int w,
>                                                         int h);
> 
> /**
>  *  \brief Create a texture from an existing surface.
>  *
>  *  \param renderer The renderer.
>  *  \param surface The surface containing pixel data used to fill the texture.
>  *
>  *  \return The created texture is returned, or 0 on error.
>  *
>  *  \note The surface is not modified or freed by this function.
>  *
>  *  \sa SDL_QueryTexture()
>  *  \sa SDL_DestroyTexture()
>  */
> extern DECLSPEC SDL_Texture * SDLCALL SDL_CreateTextureFromSurface(SDL_Renderer * renderer, SDL_Surface * surface);
> 
> /**
>  *  \brief Query the attributes of a texture
>  *
>  *  \param texture A texture to be queried.
>  *  \param format  A pointer filled in with the raw format of the texture.  The
>  *                 actual format may differ, but pixel transfers will use this
>  *                 format.
>  *  \param access  A pointer filled in with the actual access to the texture.
>  *  \param w       A pointer filled in with the width of the texture in pixels.
>  *  \param h       A pointer filled in with the height of the texture in pixels.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid.
>  */
> extern DECLSPEC int SDLCALL SDL_QueryTexture(SDL_Texture * texture,
>                                              Uint32 * format, int *access,
>                                              int *w, int *h);
> 
> /**
>  *  \brief Set an additional color value used in render copy operations.
>  *
>  *  \param texture The texture to update.
>  *  \param r       The red color value multiplied into copy operations.
>  *  \param g       The green color value multiplied into copy operations.
>  *  \param b       The blue color value multiplied into copy operations.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid or color modulation
>  *          is not supported.
>  *
>  *  \sa SDL_GetTextureColorMod()
>  */
> extern DECLSPEC int SDLCALL SDL_SetTextureColorMod(SDL_Texture * texture,
>                                                    Uint8 r, Uint8 g, Uint8 b);
> 
> 
> /**
>  *  \brief Get the additional color value used in render copy operations.
>  *
>  *  \param texture The texture to query.
>  *  \param r         A pointer filled in with the current red color value.
>  *  \param g         A pointer filled in with the current green color value.
>  *  \param b         A pointer filled in with the current blue color value.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid.
>  *
>  *  \sa SDL_SetTextureColorMod()
>  */
> extern DECLSPEC int SDLCALL SDL_GetTextureColorMod(SDL_Texture * texture,
>                                                    Uint8 * r, Uint8 * g,
>                                                    Uint8 * b);
> 
> /**
>  *  \brief Set an additional alpha value used in render copy operations.
>  *
>  *  \param texture The texture to update.
>  *  \param alpha     The alpha value multiplied into copy operations.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid or alpha modulation
>  *          is not supported.
>  *
>  *  \sa SDL_GetTextureAlphaMod()
>  */
> extern DECLSPEC int SDLCALL SDL_SetTextureAlphaMod(SDL_Texture * texture,
>                                                    Uint8 alpha);
> 
> /**
>  *  \brief Get the additional alpha value used in render copy operations.
>  *
>  *  \param texture The texture to query.
>  *  \param alpha     A pointer filled in with the current alpha value.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid.
>  *
>  *  \sa SDL_SetTextureAlphaMod()
>  */
> extern DECLSPEC int SDLCALL SDL_GetTextureAlphaMod(SDL_Texture * texture,
>                                                    Uint8 * alpha);
> 
> /**
>  *  \brief Set the blend mode used for texture copy operations.
>  *
>  *  \param texture The texture to update.
>  *  \param blendMode ::SDL_BlendMode to use for texture blending.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid or the blend mode is
>  *          not supported.
>  *
>  *  \note If the blend mode is not supported, the closest supported mode is
>  *        chosen.
>  *
>  *  \sa SDL_GetTextureBlendMode()
>  */
> extern DECLSPEC int SDLCALL SDL_SetTextureBlendMode(SDL_Texture * texture,
>                                                     SDL_BlendMode blendMode);
> 
> /**
>  *  \brief Get the blend mode used for texture copy operations.
>  *
>  *  \param texture   The texture to query.
>  *  \param blendMode A pointer filled in with the current blend mode.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid.
>  *
>  *  \sa SDL_SetTextureBlendMode()
>  */
> extern DECLSPEC int SDLCALL SDL_GetTextureBlendMode(SDL_Texture * texture,
>                                                     SDL_BlendMode *blendMode);
> 
> /**
>  *  \brief Update the given texture rectangle with new pixel data.
>  *
>  *  \param texture   The texture to update
>  *  \param rect      A pointer to the rectangle of pixels to update, or NULL to
>  *                   update the entire texture.
>  *  \param pixels    The raw pixel data.
>  *  \param pitch     The number of bytes between rows of pixel data.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid.
>  *
>  *  \note This is a fairly slow function.
>  */
> extern DECLSPEC int SDLCALL SDL_UpdateTexture(SDL_Texture * texture,
>                                               const SDL_Rect * rect,
>                                               const void *pixels, int pitch);
> 
> /**
>  *  \brief Lock a portion of the texture for write-only pixel access.
>  *
>  *  \param texture   The texture to lock for access, which was created with
>  *                   ::SDL_TEXTUREACCESS_STREAMING.
>  *  \param rect      A pointer to the rectangle to lock for access. If the rect
>  *                   is NULL, the entire texture will be locked.
>  *  \param pixels    This is filled in with a pointer to the locked pixels,
>  *                   appropriately offset by the locked area.
>  *  \param pitch     This is filled in with the pitch of the locked pixels.
>  *
>  *  \return 0 on success, or -1 if the texture is not valid or was not created with ::SDL_TEXTUREACCESS_STREAMING.
>  *
>  *  \sa SDL_UnlockTexture()
>  */
> extern DECLSPEC int SDLCALL SDL_LockTexture(SDL_Texture * texture,
>                                             const SDL_Rect * rect,
>                                             void **pixels, int *pitch);
> 
> /**
>  *  \brief Unlock a texture, uploading the changes to video memory, if needed.
>  *
>  *  \sa SDL_LockTexture()
>  */
> extern DECLSPEC void SDLCALL SDL_UnlockTexture(SDL_Texture * texture);
> 
> /**
>  * \brief Determines whether a window supports the use of render targets
>  *
>  * \param renderer The renderer that will be checked
>  *
>  * \return SDL_TRUE if supported, SDL_FALSE if not.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_RenderTargetSupported(SDL_Renderer *renderer);
> 
> /**
>  * \brief Set a texture as the current rendering target.
>  *
>  * \param renderer The renderer.
>  * \param texture The targeted texture, which must be created with the SDL_TEXTUREACCESS_TARGET flag, or NULL for the default render target
>  *
>  * \return 0 on success, or -1 on error
>  *
>  *  \sa SDL_GetRenderTarget()
>  */
> extern DECLSPEC int SDLCALL SDL_SetRenderTarget(SDL_Renderer *renderer,
>                                                 SDL_Texture *texture);
> 
> /**
>  * \brief Get the current render target or NULL for the default render target.
>  *
>  * \return The current render target
>  *
>  *  \sa SDL_SetRenderTarget()
>  */
> extern DECLSPEC SDL_Texture * SDLCALL SDL_GetRenderTarget(SDL_Renderer *renderer);
> 
> /**
>  *  \brief Set device independent resolution for rendering
>  *
>  *  \param renderer The renderer for which resolution should be set.
>  *  \param w      The width of the logical resolution
>  *  \param h      The height of the logical resolution
>  *
>  *  This function uses the viewport and scaling functionality to allow a fixed logical
>  *  resolution for rendering, regardless of the actual output resolution.  If the actual
>  *  output resolution doesn't have the same aspect ratio the output rendering will be
>  *  centered within the output display.
>  *
>  *  If the output display is a window, mouse events in the window will be filtered
>  *  and scaled so they seem to arrive within the logical resolution.
>  *
>  *  \note If this function results in scaling or subpixel drawing by the
>  *        rendering backend, it will be handled using the appropriate
>  *        quality hints.
>  *
>  *  \sa SDL_RenderGetLogicalSize()
>  *  \sa SDL_RenderSetScale()
>  *  \sa SDL_RenderSetViewport()
>  */
> extern DECLSPEC int SDLCALL SDL_RenderSetLogicalSize(SDL_Renderer * renderer, int w, int h);
> 
> /**
>  *  \brief Get device independent resolution for rendering
>  *
>  *  \param renderer The renderer from which resolution should be queried.
>  *  \param w      A pointer filled with the width of the logical resolution
>  *  \param h      A pointer filled with the height of the logical resolution
>  *
>  *  \sa SDL_RenderSetLogicalSize()
>  */
> extern DECLSPEC void SDLCALL SDL_RenderGetLogicalSize(SDL_Renderer * renderer, int *w, int *h);
> 
> /**
>  *  \brief Set the drawing area for rendering on the current target.
>  *
>  *  \param renderer The renderer for which the drawing area should be set.
>  *  \param rect The rectangle representing the drawing area, or NULL to set the viewport to the entire target.
>  *
>  *  The x,y of the viewport rect represents the origin for rendering.
>  *
>  *  \return 0 on success, or -1 on error
>  *
>  *  \note If the window associated with the renderer is resized, the viewport is automatically reset.
>  *
>  *  \sa SDL_RenderGetViewport()
>  *  \sa SDL_RenderSetLogicalSize()
>  */
> extern DECLSPEC int SDLCALL SDL_RenderSetViewport(SDL_Renderer * renderer,
>                                                   const SDL_Rect * rect);
> 
> /**
>  *  \brief Get the drawing area for the current target.
>  *
>  *  \sa SDL_RenderSetViewport()
>  */
> extern DECLSPEC void SDLCALL SDL_RenderGetViewport(SDL_Renderer * renderer,
>                                                    SDL_Rect * rect);
> 
> /**
>  *  \brief Set the clip rectangle for the current target.
>  *
>  *  \param renderer The renderer for which clip rectangle should be set.
>  *  \param rect   A pointer to the rectangle to set as the clip rectangle, or
>  *                NULL to disable clipping.
>  *
>  *  \return 0 on success, or -1 on error
>  *
>  *  \sa SDL_RenderGetClipRect()
>  */
> extern DECLSPEC int SDLCALL SDL_RenderSetClipRect(SDL_Renderer * renderer,
>                                                   const SDL_Rect * rect);
> 
> /**
>  *  \brief Get the clip rectangle for the current target.
>  *
>  *  \param renderer The renderer from which clip rectangle should be queried.
>  *  \param rect   A pointer filled in with the current clip rectangle, or
>  *                an empty rectangle if clipping is disabled.
>  *
>  *  \sa SDL_RenderSetClipRect()
>  */
> extern DECLSPEC void SDLCALL SDL_RenderGetClipRect(SDL_Renderer * renderer,
>                                                    SDL_Rect * rect);
> 
> /**
>  *  \brief Set the drawing scale for rendering on the current target.
>  *
>  *  \param renderer The renderer for which the drawing scale should be set.
>  *  \param scaleX The horizontal scaling factor
>  *  \param scaleY The vertical scaling factor
>  *
>  *  The drawing coordinates are scaled by the x/y scaling factors
>  *  before they are used by the renderer.  This allows resolution
>  *  independent drawing with a single coordinate system.
>  *
>  *  \note If this results in scaling or subpixel drawing by the
>  *        rendering backend, it will be handled using the appropriate
>  *        quality hints.  For best results use integer scaling factors.
>  *
>  *  \sa SDL_RenderGetScale()
>  *  \sa SDL_RenderSetLogicalSize()
>  */
> extern DECLSPEC int SDLCALL SDL_RenderSetScale(SDL_Renderer * renderer,
>                                                float scaleX, float scaleY);
> 
> /**
>  *  \brief Get the drawing scale for the current target.
>  *
>  *  \param renderer The renderer from which drawing scale should be queried.
>  *  \param scaleX A pointer filled in with the horizontal scaling factor
>  *  \param scaleY A pointer filled in with the vertical scaling factor
>  *
>  *  \sa SDL_RenderSetScale()
>  */
> extern DECLSPEC void SDLCALL SDL_RenderGetScale(SDL_Renderer * renderer,
>                                                float *scaleX, float *scaleY);
> 
> /**
>  *  \brief Set the color used for drawing operations (Rect, Line and Clear).
>  *
>  *  \param renderer The renderer for which drawing color should be set.
>  *  \param r The red value used to draw on the rendering target.
>  *  \param g The green value used to draw on the rendering target.
>  *  \param b The blue value used to draw on the rendering target.
>  *  \param a The alpha value used to draw on the rendering target, usually
>  *           ::SDL_ALPHA_OPAQUE (255).
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDL_SetRenderDrawColor(SDL_Renderer * renderer,
>                                            Uint8 r, Uint8 g, Uint8 b,
>                                            Uint8 a);
> 
> /**
>  *  \brief Get the color used for drawing operations (Rect, Line and Clear).
>  *
>  *  \param renderer The renderer from which drawing color should be queried.
>  *  \param r A pointer to the red value used to draw on the rendering target.
>  *  \param g A pointer to the green value used to draw on the rendering target.
>  *  \param b A pointer to the blue value used to draw on the rendering target.
>  *  \param a A pointer to the alpha value used to draw on the rendering target,
>  *           usually ::SDL_ALPHA_OPAQUE (255).
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDL_GetRenderDrawColor(SDL_Renderer * renderer,
>                                            Uint8 * r, Uint8 * g, Uint8 * b,
>                                            Uint8 * a);
> 
> /**
>  *  \brief Set the blend mode used for drawing operations (Fill and Line).
>  *
>  *  \param renderer The renderer for which blend mode should be set.
>  *  \param blendMode ::SDL_BlendMode to use for blending.
>  *
>  *  \return 0 on success, or -1 on error
>  *
>  *  \note If the blend mode is not supported, the closest supported mode is
>  *        chosen.
>  *
>  *  \sa SDL_GetRenderDrawBlendMode()
>  */
> extern DECLSPEC int SDLCALL SDL_SetRenderDrawBlendMode(SDL_Renderer * renderer,
>                                                        SDL_BlendMode blendMode);
> 
> /**
>  *  \brief Get the blend mode used for drawing operations.
>  *
>  *  \param renderer The renderer from which blend mode should be queried.
>  *  \param blendMode A pointer filled in with the current blend mode.
>  *
>  *  \return 0 on success, or -1 on error
>  *
>  *  \sa SDL_SetRenderDrawBlendMode()
>  */
> extern DECLSPEC int SDLCALL SDL_GetRenderDrawBlendMode(SDL_Renderer * renderer,
>                                                        SDL_BlendMode *blendMode);
> 
> /**
>  *  \brief Clear the current rendering target with the drawing color
>  *
>  *  This function clears the entire rendering target, ignoring the viewport.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderClear(SDL_Renderer * renderer);
> 
> /**
>  *  \brief Draw a point on the current rendering target.
>  *
>  *  \param renderer The renderer which should draw a point.
>  *  \param x The x coordinate of the point.
>  *  \param y The y coordinate of the point.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderDrawPoint(SDL_Renderer * renderer,
>                                                 int x, int y);
> 
> /**
>  *  \brief Draw multiple points on the current rendering target.
>  *
>  *  \param renderer The renderer which should draw multiple points.
>  *  \param points The points to draw
>  *  \param count The number of points to draw
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderDrawPoints(SDL_Renderer * renderer,
>                                                  const SDL_Point * points,
>                                                  int count);
> 
> /**
>  *  \brief Draw a line on the current rendering target.
>  *
>  *  \param renderer The renderer which should draw a line.
>  *  \param x1 The x coordinate of the start point.
>  *  \param y1 The y coordinate of the start point.
>  *  \param x2 The x coordinate of the end point.
>  *  \param y2 The y coordinate of the end point.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderDrawLine(SDL_Renderer * renderer,
>                                                int x1, int y1, int x2, int y2);
> 
> /**
>  *  \brief Draw a series of connected lines on the current rendering target.
>  *
>  *  \param renderer The renderer which should draw multiple lines.
>  *  \param points The points along the lines
>  *  \param count The number of points, drawing count-1 lines
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderDrawLines(SDL_Renderer * renderer,
>                                                 const SDL_Point * points,
>                                                 int count);
> 
> /**
>  *  \brief Draw a rectangle on the current rendering target.
>  *
>  *  \param renderer The renderer which should draw a rectangle.
>  *  \param rect A pointer to the destination rectangle, or NULL to outline the entire rendering target.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderDrawRect(SDL_Renderer * renderer,
>                                                const SDL_Rect * rect);
> 
> /**
>  *  \brief Draw some number of rectangles on the current rendering target.
>  *
>  *  \param renderer The renderer which should draw multiple rectangles.
>  *  \param rects A pointer to an array of destination rectangles.
>  *  \param count The number of rectangles.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderDrawRects(SDL_Renderer * renderer,
>                                                 const SDL_Rect * rects,
>                                                 int count);
> 
> /**
>  *  \brief Fill a rectangle on the current rendering target with the drawing color.
>  *
>  *  \param renderer The renderer which should fill a rectangle.
>  *  \param rect A pointer to the destination rectangle, or NULL for the entire
>  *              rendering target.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderFillRect(SDL_Renderer * renderer,
>                                                const SDL_Rect * rect);
> 
> /**
>  *  \brief Fill some number of rectangles on the current rendering target with the drawing color.
>  *
>  *  \param renderer The renderer which should fill multiple rectangles.
>  *  \param rects A pointer to an array of destination rectangles.
>  *  \param count The number of rectangles.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderFillRects(SDL_Renderer * renderer,
>                                                 const SDL_Rect * rects,
>                                                 int count);
> 
> /**
>  *  \brief Copy a portion of the texture to the current rendering target.
>  *
>  *  \param renderer The renderer which should copy parts of a texture.
>  *  \param texture The source texture.
>  *  \param srcrect   A pointer to the source rectangle, or NULL for the entire
>  *                   texture.
>  *  \param dstrect   A pointer to the destination rectangle, or NULL for the
>  *                   entire rendering target.
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderCopy(SDL_Renderer * renderer,
>                                            SDL_Texture * texture,
>                                            const SDL_Rect * srcrect,
>                                            const SDL_Rect * dstrect);
> 
> /**
>  *  \brief Copy a portion of the source texture to the current rendering target, rotating it by angle around the given center
>  *
>  *  \param renderer The renderer which should copy parts of a texture.
>  *  \param texture The source texture.
>  *  \param srcrect   A pointer to the source rectangle, or NULL for the entire
>  *                   texture.
>  *  \param dstrect   A pointer to the destination rectangle, or NULL for the
>  *                   entire rendering target.
>  *  \param angle    An angle in degrees that indicates the rotation that will be applied to dstrect
>  *  \param center   A pointer to a point indicating the point around which dstrect will be rotated (if NULL, rotation will be done aroud dstrect.w/2, dstrect.h/2)
>  *  \param flip     An SDL_RendererFlip value stating which flipping actions should be performed on the texture
>  *
>  *  \return 0 on success, or -1 on error
>  */
> extern DECLSPEC int SDLCALL SDL_RenderCopyEx(SDL_Renderer * renderer,
>                                            SDL_Texture * texture,
>                                            const SDL_Rect * srcrect,
>                                            const SDL_Rect * dstrect,
>                                            const double angle,
>                                            const SDL_Point *center,
>                                            const SDL_RendererFlip flip);
> 
> /**
>  *  \brief Read pixels from the current rendering target.
>  *
>  *  \param renderer The renderer from which pixels should be read.
>  *  \param rect   A pointer to the rectangle to read, or NULL for the entire
>  *                render target.
>  *  \param format The desired format of the pixel data, or 0 to use the format
>  *                of the rendering target
>  *  \param pixels A pointer to be filled in with the pixel data
>  *  \param pitch  The pitch of the pixels parameter.
>  *
>  *  \return 0 on success, or -1 if pixel reading is not supported.
>  *
>  *  \warning This is a very slow operation, and should not be used frequently.
>  */
> extern DECLSPEC int SDLCALL SDL_RenderReadPixels(SDL_Renderer * renderer,
>                                                  const SDL_Rect * rect,
>                                                  Uint32 format,
>                                                  void *pixels, int pitch);
> 
> /**
>  *  \brief Update the screen with rendering performed.
>  */
> extern DECLSPEC void SDLCALL SDL_RenderPresent(SDL_Renderer * renderer);
> 
> /**
>  *  \brief Destroy the specified texture.
>  *
>  *  \sa SDL_CreateTexture()
>  *  \sa SDL_CreateTextureFromSurface()
>  */
> extern DECLSPEC void SDLCALL SDL_DestroyTexture(SDL_Texture * texture);
> 
> /**
>  *  \brief Destroy the rendering context for a window and free associated
>  *         textures.
>  *
>  *  \sa SDL_CreateRenderer()
>  */
> extern DECLSPEC void SDLCALL SDL_DestroyRenderer(SDL_Renderer * renderer);
> 
> 
> /**
>  *  \brief Bind the texture to the current OpenGL/ES/ES2 context for use with
>  *         OpenGL instructions.
>  *
>  *  \param texture  The SDL texture to bind
>  *  \param texw     A pointer to a float that will be filled with the texture width
>  *  \param texh     A pointer to a float that will be filled with the texture height
>  *
>  *  \return 0 on success, or -1 if the operation is not supported
>  */
> extern DECLSPEC int SDLCALL SDL_GL_BindTexture(SDL_Texture *texture, float *texw, float *texh);
> 
> /**
>  *  \brief Unbind a texture from the current OpenGL/ES/ES2 context.
>  *
>  *  \param texture  The SDL texture to unbind
>  *
>  *  \return 0 on success, or -1 if the operation is not supported
>  */
> extern DECLSPEC int SDLCALL SDL_GL_UnbindTexture(SDL_Texture *texture);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_render_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_revision.h ../android-sdl/jni/SDL2/include/SDL_revision.h
1,2c1,2
< #define SDL_REVISION "hg-7890:c031abe0b287"
< #define SDL_REVISION_NUMBER 7890
---
> #define SDL_REVISION "hg-7633:d6a8fa507a45"
> #define SDL_REVISION_NUMBER 7633
diff jni/SDL/include/SDL_rwops.h ../android-sdl/jni/SDL2/include/SDL_rwops.h
1,232c1,232
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_rwops.h
<  *
<  *  This file provides a general interface for SDL to read and write
<  *  data streams.  It can easily be extended to files, memory, etc.
<  */
< 
< #ifndef _SDL_rwops_h
< #define _SDL_rwops_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* RWops Types */
< #define SDL_RWOPS_UNKNOWN   0   /* Unknown stream type */
< #define SDL_RWOPS_WINFILE   1   /* Win32 file */
< #define SDL_RWOPS_STDFILE   2   /* Stdio file */
< #define SDL_RWOPS_JNIFILE   3   /* Android asset */
< #define SDL_RWOPS_MEMORY    4   /* Memory stream */
< #define SDL_RWOPS_MEMORY_RO 5   /* Read-Only memory stream */
< 
< /**
<  * This is the read/write operation structure -- very basic.
<  */
< typedef struct SDL_RWops
< {
<     /**
<      *  Return the size of the file in this rwops, or -1 if unknown
<      */
<     Sint64 (SDLCALL * size) (struct SDL_RWops * context);
< 
<     /**
<      *  Seek to \c offset relative to \c whence, one of stdio's whence values:
<      *  RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END
<      *
<      *  \return the final offset in the data stream, or -1 on error.
<      */
<     Sint64 (SDLCALL * seek) (struct SDL_RWops * context, Sint64 offset,
<                              int whence);
< 
<     /**
<      *  Read up to \c maxnum objects each of size \c size from the data
<      *  stream to the area pointed at by \c ptr.
<      *
<      *  \return the number of objects read, or 0 at error or end of file.
<      */
<     size_t (SDLCALL * read) (struct SDL_RWops * context, void *ptr,
<                              size_t size, size_t maxnum);
< 
<     /**
<      *  Write exactly \c num objects each of size \c size from the area
<      *  pointed at by \c ptr to data stream.
<      *
<      *  \return the number of objects written, or 0 at error or end of file.
<      */
<     size_t (SDLCALL * write) (struct SDL_RWops * context, const void *ptr,
<                               size_t size, size_t num);
< 
<     /**
<      *  Close and free an allocated SDL_RWops structure.
<      *
<      *  \return 0 if successful or -1 on write error when flushing data.
<      */
<     int (SDLCALL * close) (struct SDL_RWops * context);
< 
<     Uint32 type;
<     union
<     {
< #if defined(ANDROID)
<         struct
<         {
<             void *fileNameRef;
<             void *inputStreamRef;
<             void *readableByteChannelRef;
<             void *readMethod;
<             void *assetFileDescriptorRef;
<             long position;
<             long size;
<             long offset;
<             int fd;
<         } androidio;
< #elif defined(__WIN32__)
<         struct
<         {
<             SDL_bool append;
<             void *h;
<             struct
<             {
<                 void *data;
<                 size_t size;
<                 size_t left;
<             } buffer;
<         } windowsio;
< #endif
< 
< #ifdef HAVE_STDIO_H
<         struct
<         {
<             SDL_bool autoclose;
<             FILE *fp;
<         } stdio;
< #endif
<         struct
<         {
<             Uint8 *base;
<             Uint8 *here;
<             Uint8 *stop;
<         } mem;
<         struct
<         {
<             void *data1;
<             void *data2;
<         } unknown;
<     } hidden;
< 
< } SDL_RWops;
< 
< 
< /**
<  *  \name RWFrom functions
<  *
<  *  Functions to create SDL_RWops structures from various data streams.
<  */
< /* @{ */
< 
< extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFile(const char *file,
<                                                   const char *mode);
< 
< #ifdef HAVE_STDIO_H
< extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFP(FILE * fp,
<                                                 SDL_bool autoclose);
< #else
< extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFP(void * fp,
<                                                 SDL_bool autoclose);
< #endif
< 
< extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromMem(void *mem, int size);
< extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromConstMem(const void *mem,
<                                                       int size);
< 
< /* @} *//* RWFrom functions */
< 
< 
< extern DECLSPEC SDL_RWops *SDLCALL SDL_AllocRW(void);
< extern DECLSPEC void SDLCALL SDL_FreeRW(SDL_RWops * area);
< 
< #define RW_SEEK_SET 0       /**< Seek from the beginning of data */
< #define RW_SEEK_CUR 1       /**< Seek relative to current read point */
< #define RW_SEEK_END 2       /**< Seek relative to the end of data */
< 
< /**
<  *  \name Read/write macros
<  *
<  *  Macros to easily read and write from an SDL_RWops structure.
<  */
< /* @{ */
< #define SDL_RWsize(ctx)         (ctx)->size(ctx)
< #define SDL_RWseek(ctx, offset, whence) (ctx)->seek(ctx, offset, whence)
< #define SDL_RWtell(ctx)         (ctx)->seek(ctx, 0, RW_SEEK_CUR)
< #define SDL_RWread(ctx, ptr, size, n)   (ctx)->read(ctx, ptr, size, n)
< #define SDL_RWwrite(ctx, ptr, size, n)  (ctx)->write(ctx, ptr, size, n)
< #define SDL_RWclose(ctx)        (ctx)->close(ctx)
< /* @} *//* Read/write macros */
< 
< 
< /**
<  *  \name Read endian functions
<  *
<  *  Read an item of the specified endianness and return in native format.
<  */
< /* @{ */
< extern DECLSPEC Uint8 SDLCALL SDL_ReadU8(SDL_RWops * src);
< extern DECLSPEC Uint16 SDLCALL SDL_ReadLE16(SDL_RWops * src);
< extern DECLSPEC Uint16 SDLCALL SDL_ReadBE16(SDL_RWops * src);
< extern DECLSPEC Uint32 SDLCALL SDL_ReadLE32(SDL_RWops * src);
< extern DECLSPEC Uint32 SDLCALL SDL_ReadBE32(SDL_RWops * src);
< extern DECLSPEC Uint64 SDLCALL SDL_ReadLE64(SDL_RWops * src);
< extern DECLSPEC Uint64 SDLCALL SDL_ReadBE64(SDL_RWops * src);
< /* @} *//* Read endian functions */
< 
< /**
<  *  \name Write endian functions
<  *
<  *  Write an item of native format to the specified endianness.
<  */
< /* @{ */
< extern DECLSPEC size_t SDLCALL SDL_WriteU8(SDL_RWops * dst, Uint8 value);
< extern DECLSPEC size_t SDLCALL SDL_WriteLE16(SDL_RWops * dst, Uint16 value);
< extern DECLSPEC size_t SDLCALL SDL_WriteBE16(SDL_RWops * dst, Uint16 value);
< extern DECLSPEC size_t SDLCALL SDL_WriteLE32(SDL_RWops * dst, Uint32 value);
< extern DECLSPEC size_t SDLCALL SDL_WriteBE32(SDL_RWops * dst, Uint32 value);
< extern DECLSPEC size_t SDLCALL SDL_WriteLE64(SDL_RWops * dst, Uint64 value);
< extern DECLSPEC size_t SDLCALL SDL_WriteBE64(SDL_RWops * dst, Uint64 value);
< /* @} *//* Write endian functions */
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_rwops_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_rwops.h
>  *
>  *  This file provides a general interface for SDL to read and write
>  *  data streams.  It can easily be extended to files, memory, etc.
>  */
> 
> #ifndef _SDL_rwops_h
> #define _SDL_rwops_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* RWops Types */
> #define SDL_RWOPS_UNKNOWN   0   /* Unknown stream type */
> #define SDL_RWOPS_WINFILE   1   /* Win32 file */
> #define SDL_RWOPS_STDFILE   2   /* Stdio file */
> #define SDL_RWOPS_JNIFILE   3   /* Android asset */
> #define SDL_RWOPS_MEMORY    4   /* Memory stream */
> #define SDL_RWOPS_MEMORY_RO 5   /* Read-Only memory stream */
> 
> /**
>  * This is the read/write operation structure -- very basic.
>  */
> typedef struct SDL_RWops
> {
>     /**
>      *  Return the size of the file in this rwops, or -1 if unknown
>      */
>     Sint64 (SDLCALL * size) (struct SDL_RWops * context);
> 
>     /**
>      *  Seek to \c offset relative to \c whence, one of stdio's whence values:
>      *  RW_SEEK_SET, RW_SEEK_CUR, RW_SEEK_END
>      *
>      *  \return the final offset in the data stream, or -1 on error.
>      */
>     Sint64 (SDLCALL * seek) (struct SDL_RWops * context, Sint64 offset,
>                              int whence);
> 
>     /**
>      *  Read up to \c maxnum objects each of size \c size from the data
>      *  stream to the area pointed at by \c ptr.
>      *
>      *  \return the number of objects read, or 0 at error or end of file.
>      */
>     size_t (SDLCALL * read) (struct SDL_RWops * context, void *ptr,
>                              size_t size, size_t maxnum);
> 
>     /**
>      *  Write exactly \c num objects each of size \c size from the area
>      *  pointed at by \c ptr to data stream.
>      *
>      *  \return the number of objects written, or 0 at error or end of file.
>      */
>     size_t (SDLCALL * write) (struct SDL_RWops * context, const void *ptr,
>                               size_t size, size_t num);
> 
>     /**
>      *  Close and free an allocated SDL_RWops structure.
>      *
>      *  \return 0 if successful or -1 on write error when flushing data.
>      */
>     int (SDLCALL * close) (struct SDL_RWops * context);
> 
>     Uint32 type;
>     union
>     {
> #if defined(ANDROID)
>         struct
>         {
>             void *fileNameRef;
>             void *inputStreamRef;
>             void *readableByteChannelRef;
>             void *readMethod;
>             void *assetFileDescriptorRef;
>             long position;
>             long size;
>             long offset;
>             int fd;
>         } androidio;
> #elif defined(__WIN32__)
>         struct
>         {
>             SDL_bool append;
>             void *h;
>             struct
>             {
>                 void *data;
>                 size_t size;
>                 size_t left;
>             } buffer;
>         } windowsio;
> #endif
> 
> #ifdef HAVE_STDIO_H
>         struct
>         {
>             SDL_bool autoclose;
>             FILE *fp;
>         } stdio;
> #endif
>         struct
>         {
>             Uint8 *base;
>             Uint8 *here;
>             Uint8 *stop;
>         } mem;
>         struct
>         {
>             void *data1;
>             void *data2;
>         } unknown;
>     } hidden;
> 
> } SDL_RWops;
> 
> 
> /**
>  *  \name RWFrom functions
>  *
>  *  Functions to create SDL_RWops structures from various data streams.
>  */
> /*@{*/
> 
> extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFile(const char *file,
>                                                   const char *mode);
> 
> #ifdef HAVE_STDIO_H
> extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFP(FILE * fp,
>                                                 SDL_bool autoclose);
> #else
> extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromFP(void * fp,
>                                                 SDL_bool autoclose);
> #endif
> 
> extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromMem(void *mem, int size);
> extern DECLSPEC SDL_RWops *SDLCALL SDL_RWFromConstMem(const void *mem,
>                                                       int size);
> 
> /*@}*//*RWFrom functions*/
> 
> 
> extern DECLSPEC SDL_RWops *SDLCALL SDL_AllocRW(void);
> extern DECLSPEC void SDLCALL SDL_FreeRW(SDL_RWops * area);
> 
> #define RW_SEEK_SET 0       /**< Seek from the beginning of data */
> #define RW_SEEK_CUR 1       /**< Seek relative to current read point */
> #define RW_SEEK_END 2       /**< Seek relative to the end of data */
> 
> /**
>  *  \name Read/write macros
>  *
>  *  Macros to easily read and write from an SDL_RWops structure.
>  */
> /*@{*/
> #define SDL_RWsize(ctx)         (ctx)->size(ctx)
> #define SDL_RWseek(ctx, offset, whence) (ctx)->seek(ctx, offset, whence)
> #define SDL_RWtell(ctx)         (ctx)->seek(ctx, 0, RW_SEEK_CUR)
> #define SDL_RWread(ctx, ptr, size, n)   (ctx)->read(ctx, ptr, size, n)
> #define SDL_RWwrite(ctx, ptr, size, n)  (ctx)->write(ctx, ptr, size, n)
> #define SDL_RWclose(ctx)        (ctx)->close(ctx)
> /*@}*//*Read/write macros*/
> 
> 
> /**
>  *  \name Read endian functions
>  *
>  *  Read an item of the specified endianness and return in native format.
>  */
> /*@{*/
> extern DECLSPEC Uint8 SDLCALL SDL_ReadU8(SDL_RWops * src);
> extern DECLSPEC Uint16 SDLCALL SDL_ReadLE16(SDL_RWops * src);
> extern DECLSPEC Uint16 SDLCALL SDL_ReadBE16(SDL_RWops * src);
> extern DECLSPEC Uint32 SDLCALL SDL_ReadLE32(SDL_RWops * src);
> extern DECLSPEC Uint32 SDLCALL SDL_ReadBE32(SDL_RWops * src);
> extern DECLSPEC Uint64 SDLCALL SDL_ReadLE64(SDL_RWops * src);
> extern DECLSPEC Uint64 SDLCALL SDL_ReadBE64(SDL_RWops * src);
> /*@}*//*Read endian functions*/
> 
> /**
>  *  \name Write endian functions
>  *
>  *  Write an item of native format to the specified endianness.
>  */
> /*@{*/
> extern DECLSPEC size_t SDLCALL SDL_WriteU8(SDL_RWops * dst, Uint8 value);
> extern DECLSPEC size_t SDLCALL SDL_WriteLE16(SDL_RWops * dst, Uint16 value);
> extern DECLSPEC size_t SDLCALL SDL_WriteBE16(SDL_RWops * dst, Uint16 value);
> extern DECLSPEC size_t SDLCALL SDL_WriteLE32(SDL_RWops * dst, Uint32 value);
> extern DECLSPEC size_t SDLCALL SDL_WriteBE32(SDL_RWops * dst, Uint32 value);
> extern DECLSPEC size_t SDLCALL SDL_WriteLE64(SDL_RWops * dst, Uint64 value);
> extern DECLSPEC size_t SDLCALL SDL_WriteBE64(SDL_RWops * dst, Uint64 value);
> /*@}*//*Write endian functions*/
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_rwops_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_scancode.h ../android-sdl/jni/SDL2/include/SDL_scancode.h
1,401c1,401
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_scancode.h
<  *
<  *  Defines keyboard scancodes.
<  */
< 
< #ifndef _SDL_scancode_h
< #define _SDL_scancode_h
< 
< #include "SDL_stdinc.h"
< 
< /**
<  *  \brief The SDL keyboard scancode representation.
<  *
<  *  Values of this type are used to represent keyboard keys, among other places
<  *  in the \link SDL_Keysym::scancode key.keysym.scancode \endlink field of the
<  *  SDL_Event structure.
<  *
<  *  The values in this enumeration are based on the USB usage page standard:
<  *  http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf
<  */
< typedef enum
< {
<     SDL_SCANCODE_UNKNOWN = 0,
< 
<     /**
<      *  \name Usage page 0x07
<      *
<      *  These values are from usage page 0x07 (USB keyboard page).
<      */
<     /* @{ */
< 
<     SDL_SCANCODE_A = 4,
<     SDL_SCANCODE_B = 5,
<     SDL_SCANCODE_C = 6,
<     SDL_SCANCODE_D = 7,
<     SDL_SCANCODE_E = 8,
<     SDL_SCANCODE_F = 9,
<     SDL_SCANCODE_G = 10,
<     SDL_SCANCODE_H = 11,
<     SDL_SCANCODE_I = 12,
<     SDL_SCANCODE_J = 13,
<     SDL_SCANCODE_K = 14,
<     SDL_SCANCODE_L = 15,
<     SDL_SCANCODE_M = 16,
<     SDL_SCANCODE_N = 17,
<     SDL_SCANCODE_O = 18,
<     SDL_SCANCODE_P = 19,
<     SDL_SCANCODE_Q = 20,
<     SDL_SCANCODE_R = 21,
<     SDL_SCANCODE_S = 22,
<     SDL_SCANCODE_T = 23,
<     SDL_SCANCODE_U = 24,
<     SDL_SCANCODE_V = 25,
<     SDL_SCANCODE_W = 26,
<     SDL_SCANCODE_X = 27,
<     SDL_SCANCODE_Y = 28,
<     SDL_SCANCODE_Z = 29,
< 
<     SDL_SCANCODE_1 = 30,
<     SDL_SCANCODE_2 = 31,
<     SDL_SCANCODE_3 = 32,
<     SDL_SCANCODE_4 = 33,
<     SDL_SCANCODE_5 = 34,
<     SDL_SCANCODE_6 = 35,
<     SDL_SCANCODE_7 = 36,
<     SDL_SCANCODE_8 = 37,
<     SDL_SCANCODE_9 = 38,
<     SDL_SCANCODE_0 = 39,
< 
<     SDL_SCANCODE_RETURN = 40,
<     SDL_SCANCODE_ESCAPE = 41,
<     SDL_SCANCODE_BACKSPACE = 42,
<     SDL_SCANCODE_TAB = 43,
<     SDL_SCANCODE_SPACE = 44,
< 
<     SDL_SCANCODE_MINUS = 45,
<     SDL_SCANCODE_EQUALS = 46,
<     SDL_SCANCODE_LEFTBRACKET = 47,
<     SDL_SCANCODE_RIGHTBRACKET = 48,
<     SDL_SCANCODE_BACKSLASH = 49, /**< Located at the lower left of the return
<                                   *   key on ISO keyboards and at the right end
<                                   *   of the QWERTY row on ANSI keyboards.
<                                   *   Produces REVERSE SOLIDUS (backslash) and
<                                   *   VERTICAL LINE in a US layout, REVERSE
<                                   *   SOLIDUS and VERTICAL LINE in a UK Mac
<                                   *   layout, NUMBER SIGN and TILDE in a UK
<                                   *   Windows layout, DOLLAR SIGN and POUND SIGN
<                                   *   in a Swiss German layout, NUMBER SIGN and
<                                   *   APOSTROPHE in a German layout, GRAVE
<                                   *   ACCENT and POUND SIGN in a French Mac
<                                   *   layout, and ASTERISK and MICRO SIGN in a
<                                   *   French Windows layout.
<                                   */
<     SDL_SCANCODE_NONUSHASH = 50, /**< ISO USB keyboards actually use this code
<                                   *   instead of 49 for the same key, but all
<                                   *   OSes I've seen treat the two codes
<                                   *   identically. So, as an implementor, unless
<                                   *   your keyboard generates both of those
<                                   *   codes and your OS treats them differently,
<                                   *   you should generate SDL_SCANCODE_BACKSLASH
<                                   *   instead of this code. As a user, you
<                                   *   should not rely on this code because SDL
<                                   *   will never generate it with most (all?)
<                                   *   keyboards.
<                                   */
<     SDL_SCANCODE_SEMICOLON = 51,
<     SDL_SCANCODE_APOSTROPHE = 52,
<     SDL_SCANCODE_GRAVE = 53, /**< Located in the top left corner (on both ANSI
<                               *   and ISO keyboards). Produces GRAVE ACCENT and
<                               *   TILDE in a US Windows layout and in US and UK
<                               *   Mac layouts on ANSI keyboards, GRAVE ACCENT
<                               *   and NOT SIGN in a UK Windows layout, SECTION
<                               *   SIGN and PLUS-MINUS SIGN in US and UK Mac
<                               *   layouts on ISO keyboards, SECTION SIGN and
<                               *   DEGREE SIGN in a Swiss German layout (Mac:
<                               *   only on ISO keyboards), CIRCUMFLEX ACCENT and
<                               *   DEGREE SIGN in a German layout (Mac: only on
<                               *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a
<                               *   French Windows layout, COMMERCIAL AT and
<                               *   NUMBER SIGN in a French Mac layout on ISO
<                               *   keyboards, and LESS-THAN SIGN and GREATER-THAN
<                               *   SIGN in a Swiss German, German, or French Mac
<                               *   layout on ANSI keyboards.
<                               */
<     SDL_SCANCODE_COMMA = 54,
<     SDL_SCANCODE_PERIOD = 55,
<     SDL_SCANCODE_SLASH = 56,
< 
<     SDL_SCANCODE_CAPSLOCK = 57,
< 
<     SDL_SCANCODE_F1 = 58,
<     SDL_SCANCODE_F2 = 59,
<     SDL_SCANCODE_F3 = 60,
<     SDL_SCANCODE_F4 = 61,
<     SDL_SCANCODE_F5 = 62,
<     SDL_SCANCODE_F6 = 63,
<     SDL_SCANCODE_F7 = 64,
<     SDL_SCANCODE_F8 = 65,
<     SDL_SCANCODE_F9 = 66,
<     SDL_SCANCODE_F10 = 67,
<     SDL_SCANCODE_F11 = 68,
<     SDL_SCANCODE_F12 = 69,
< 
<     SDL_SCANCODE_PRINTSCREEN = 70,
<     SDL_SCANCODE_SCROLLLOCK = 71,
<     SDL_SCANCODE_PAUSE = 72,
<     SDL_SCANCODE_INSERT = 73, /**< insert on PC, help on some Mac keyboards (but
<                                    does send code 73, not 117) */
<     SDL_SCANCODE_HOME = 74,
<     SDL_SCANCODE_PAGEUP = 75,
<     SDL_SCANCODE_DELETE = 76,
<     SDL_SCANCODE_END = 77,
<     SDL_SCANCODE_PAGEDOWN = 78,
<     SDL_SCANCODE_RIGHT = 79,
<     SDL_SCANCODE_LEFT = 80,
<     SDL_SCANCODE_DOWN = 81,
<     SDL_SCANCODE_UP = 82,
< 
<     SDL_SCANCODE_NUMLOCKCLEAR = 83, /**< num lock on PC, clear on Mac keyboards
<                                      */
<     SDL_SCANCODE_KP_DIVIDE = 84,
<     SDL_SCANCODE_KP_MULTIPLY = 85,
<     SDL_SCANCODE_KP_MINUS = 86,
<     SDL_SCANCODE_KP_PLUS = 87,
<     SDL_SCANCODE_KP_ENTER = 88,
<     SDL_SCANCODE_KP_1 = 89,
<     SDL_SCANCODE_KP_2 = 90,
<     SDL_SCANCODE_KP_3 = 91,
<     SDL_SCANCODE_KP_4 = 92,
<     SDL_SCANCODE_KP_5 = 93,
<     SDL_SCANCODE_KP_6 = 94,
<     SDL_SCANCODE_KP_7 = 95,
<     SDL_SCANCODE_KP_8 = 96,
<     SDL_SCANCODE_KP_9 = 97,
<     SDL_SCANCODE_KP_0 = 98,
<     SDL_SCANCODE_KP_PERIOD = 99,
< 
<     SDL_SCANCODE_NONUSBACKSLASH = 100, /**< This is the additional key that ISO
<                                         *   keyboards have over ANSI ones,
<                                         *   located between left shift and Y.
<                                         *   Produces GRAVE ACCENT and TILDE in a
<                                         *   US or UK Mac layout, REVERSE SOLIDUS
<                                         *   (backslash) and VERTICAL LINE in a
<                                         *   US or UK Windows layout, and
<                                         *   LESS-THAN SIGN and GREATER-THAN SIGN
<                                         *   in a Swiss German, German, or French
<                                         *   layout. */
<     SDL_SCANCODE_APPLICATION = 101, /**< windows contextual menu, compose */
<     SDL_SCANCODE_POWER = 102, /**< The USB document says this is a status flag,
<                                *   not a physical key - but some Mac keyboards
<                                *   do have a power key. */
<     SDL_SCANCODE_KP_EQUALS = 103,
<     SDL_SCANCODE_F13 = 104,
<     SDL_SCANCODE_F14 = 105,
<     SDL_SCANCODE_F15 = 106,
<     SDL_SCANCODE_F16 = 107,
<     SDL_SCANCODE_F17 = 108,
<     SDL_SCANCODE_F18 = 109,
<     SDL_SCANCODE_F19 = 110,
<     SDL_SCANCODE_F20 = 111,
<     SDL_SCANCODE_F21 = 112,
<     SDL_SCANCODE_F22 = 113,
<     SDL_SCANCODE_F23 = 114,
<     SDL_SCANCODE_F24 = 115,
<     SDL_SCANCODE_EXECUTE = 116,
<     SDL_SCANCODE_HELP = 117,
<     SDL_SCANCODE_MENU = 118,
<     SDL_SCANCODE_SELECT = 119,
<     SDL_SCANCODE_STOP = 120,
<     SDL_SCANCODE_AGAIN = 121,   /**< redo */
<     SDL_SCANCODE_UNDO = 122,
<     SDL_SCANCODE_CUT = 123,
<     SDL_SCANCODE_COPY = 124,
<     SDL_SCANCODE_PASTE = 125,
<     SDL_SCANCODE_FIND = 126,
<     SDL_SCANCODE_MUTE = 127,
<     SDL_SCANCODE_VOLUMEUP = 128,
<     SDL_SCANCODE_VOLUMEDOWN = 129,
< /* not sure whether there's a reason to enable these */
< /*     SDL_SCANCODE_LOCKINGCAPSLOCK = 130,  */
< /*     SDL_SCANCODE_LOCKINGNUMLOCK = 131, */
< /*     SDL_SCANCODE_LOCKINGSCROLLLOCK = 132, */
<     SDL_SCANCODE_KP_COMMA = 133,
<     SDL_SCANCODE_KP_EQUALSAS400 = 134,
< 
<     SDL_SCANCODE_INTERNATIONAL1 = 135, /**< used on Asian keyboards, see
<                                             footnotes in USB doc */
<     SDL_SCANCODE_INTERNATIONAL2 = 136,
<     SDL_SCANCODE_INTERNATIONAL3 = 137, /**< Yen */
<     SDL_SCANCODE_INTERNATIONAL4 = 138,
<     SDL_SCANCODE_INTERNATIONAL5 = 139,
<     SDL_SCANCODE_INTERNATIONAL6 = 140,
<     SDL_SCANCODE_INTERNATIONAL7 = 141,
<     SDL_SCANCODE_INTERNATIONAL8 = 142,
<     SDL_SCANCODE_INTERNATIONAL9 = 143,
<     SDL_SCANCODE_LANG1 = 144, /**< Hangul/English toggle */
<     SDL_SCANCODE_LANG2 = 145, /**< Hanja conversion */
<     SDL_SCANCODE_LANG3 = 146, /**< Katakana */
<     SDL_SCANCODE_LANG4 = 147, /**< Hiragana */
<     SDL_SCANCODE_LANG5 = 148, /**< Zenkaku/Hankaku */
<     SDL_SCANCODE_LANG6 = 149, /**< reserved */
<     SDL_SCANCODE_LANG7 = 150, /**< reserved */
<     SDL_SCANCODE_LANG8 = 151, /**< reserved */
<     SDL_SCANCODE_LANG9 = 152, /**< reserved */
< 
<     SDL_SCANCODE_ALTERASE = 153, /**< Erase-Eaze */
<     SDL_SCANCODE_SYSREQ = 154,
<     SDL_SCANCODE_CANCEL = 155,
<     SDL_SCANCODE_CLEAR = 156,
<     SDL_SCANCODE_PRIOR = 157,
<     SDL_SCANCODE_RETURN2 = 158,
<     SDL_SCANCODE_SEPARATOR = 159,
<     SDL_SCANCODE_OUT = 160,
<     SDL_SCANCODE_OPER = 161,
<     SDL_SCANCODE_CLEARAGAIN = 162,
<     SDL_SCANCODE_CRSEL = 163,
<     SDL_SCANCODE_EXSEL = 164,
< 
<     SDL_SCANCODE_KP_00 = 176,
<     SDL_SCANCODE_KP_000 = 177,
<     SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
<     SDL_SCANCODE_DECIMALSEPARATOR = 179,
<     SDL_SCANCODE_CURRENCYUNIT = 180,
<     SDL_SCANCODE_CURRENCYSUBUNIT = 181,
<     SDL_SCANCODE_KP_LEFTPAREN = 182,
<     SDL_SCANCODE_KP_RIGHTPAREN = 183,
<     SDL_SCANCODE_KP_LEFTBRACE = 184,
<     SDL_SCANCODE_KP_RIGHTBRACE = 185,
<     SDL_SCANCODE_KP_TAB = 186,
<     SDL_SCANCODE_KP_BACKSPACE = 187,
<     SDL_SCANCODE_KP_A = 188,
<     SDL_SCANCODE_KP_B = 189,
<     SDL_SCANCODE_KP_C = 190,
<     SDL_SCANCODE_KP_D = 191,
<     SDL_SCANCODE_KP_E = 192,
<     SDL_SCANCODE_KP_F = 193,
<     SDL_SCANCODE_KP_XOR = 194,
<     SDL_SCANCODE_KP_POWER = 195,
<     SDL_SCANCODE_KP_PERCENT = 196,
<     SDL_SCANCODE_KP_LESS = 197,
<     SDL_SCANCODE_KP_GREATER = 198,
<     SDL_SCANCODE_KP_AMPERSAND = 199,
<     SDL_SCANCODE_KP_DBLAMPERSAND = 200,
<     SDL_SCANCODE_KP_VERTICALBAR = 201,
<     SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
<     SDL_SCANCODE_KP_COLON = 203,
<     SDL_SCANCODE_KP_HASH = 204,
<     SDL_SCANCODE_KP_SPACE = 205,
<     SDL_SCANCODE_KP_AT = 206,
<     SDL_SCANCODE_KP_EXCLAM = 207,
<     SDL_SCANCODE_KP_MEMSTORE = 208,
<     SDL_SCANCODE_KP_MEMRECALL = 209,
<     SDL_SCANCODE_KP_MEMCLEAR = 210,
<     SDL_SCANCODE_KP_MEMADD = 211,
<     SDL_SCANCODE_KP_MEMSUBTRACT = 212,
<     SDL_SCANCODE_KP_MEMMULTIPLY = 213,
<     SDL_SCANCODE_KP_MEMDIVIDE = 214,
<     SDL_SCANCODE_KP_PLUSMINUS = 215,
<     SDL_SCANCODE_KP_CLEAR = 216,
<     SDL_SCANCODE_KP_CLEARENTRY = 217,
<     SDL_SCANCODE_KP_BINARY = 218,
<     SDL_SCANCODE_KP_OCTAL = 219,
<     SDL_SCANCODE_KP_DECIMAL = 220,
<     SDL_SCANCODE_KP_HEXADECIMAL = 221,
< 
<     SDL_SCANCODE_LCTRL = 224,
<     SDL_SCANCODE_LSHIFT = 225,
<     SDL_SCANCODE_LALT = 226, /**< alt, option */
<     SDL_SCANCODE_LGUI = 227, /**< windows, command (apple), meta */
<     SDL_SCANCODE_RCTRL = 228,
<     SDL_SCANCODE_RSHIFT = 229,
<     SDL_SCANCODE_RALT = 230, /**< alt gr, option */
<     SDL_SCANCODE_RGUI = 231, /**< windows, command (apple), meta */
< 
<     SDL_SCANCODE_MODE = 257,    /**< I'm not sure if this is really not covered
<                                  *   by any of the above, but since there's a
<                                  *   special KMOD_MODE for it I'm adding it here
<                                  */
< 
<     /* @} *//* Usage page 0x07 */
< 
<     /**
<      *  \name Usage page 0x0C
<      *
<      *  These values are mapped from usage page 0x0C (USB consumer page).
<      */
<     /* @{ */
< 
<     SDL_SCANCODE_AUDIONEXT = 258,
<     SDL_SCANCODE_AUDIOPREV = 259,
<     SDL_SCANCODE_AUDIOSTOP = 260,
<     SDL_SCANCODE_AUDIOPLAY = 261,
<     SDL_SCANCODE_AUDIOMUTE = 262,
<     SDL_SCANCODE_MEDIASELECT = 263,
<     SDL_SCANCODE_WWW = 264,
<     SDL_SCANCODE_MAIL = 265,
<     SDL_SCANCODE_CALCULATOR = 266,
<     SDL_SCANCODE_COMPUTER = 267,
<     SDL_SCANCODE_AC_SEARCH = 268,
<     SDL_SCANCODE_AC_HOME = 269,
<     SDL_SCANCODE_AC_BACK = 270,
<     SDL_SCANCODE_AC_FORWARD = 271,
<     SDL_SCANCODE_AC_STOP = 272,
<     SDL_SCANCODE_AC_REFRESH = 273,
<     SDL_SCANCODE_AC_BOOKMARKS = 274,
< 
<     /* @} *//* Usage page 0x0C */
< 
<     /**
<      *  \name Walther keys
<      *
<      *  These are values that Christian Walther added (for mac keyboard?).
<      */
<     /* @{ */
< 
<     SDL_SCANCODE_BRIGHTNESSDOWN = 275,
<     SDL_SCANCODE_BRIGHTNESSUP = 276,
<     SDL_SCANCODE_DISPLAYSWITCH = 277, /**< display mirroring/dual display
<                                            switch, video mode switch */
<     SDL_SCANCODE_KBDILLUMTOGGLE = 278,
<     SDL_SCANCODE_KBDILLUMDOWN = 279,
<     SDL_SCANCODE_KBDILLUMUP = 280,
<     SDL_SCANCODE_EJECT = 281,
<     SDL_SCANCODE_SLEEP = 282,
< 
<     SDL_SCANCODE_APP1 = 283,
<     SDL_SCANCODE_APP2 = 284,
< 
<     /* @} *//* Walther keys */
< 
<     /* Add any other keys here. */
< 
<     SDL_NUM_SCANCODES = 512 /**< not a key, just marks the number of scancodes
<                                  for array bounds */
< } SDL_Scancode;
< 
< #endif /* _SDL_scancode_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_scancode.h
>  *
>  *  Defines keyboard scancodes.
>  */
> 
> #ifndef _SDL_scancode_h
> #define _SDL_scancode_h
> 
> #include "SDL_stdinc.h"
> 
> /**
>  *  \brief The SDL keyboard scancode representation.
>  *
>  *  Values of this type are used to represent keyboard keys, among other places
>  *  in the \link SDL_Keysym::scancode key.keysym.scancode \endlink field of the
>  *  SDL_Event structure.
>  *
>  *  The values in this enumeration are based on the USB usage page standard:
>  *  http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf
>  */
> typedef enum
> {
>     SDL_SCANCODE_UNKNOWN = 0,
> 
>     /**
>      *  \name Usage page 0x07
>      *
>      *  These values are from usage page 0x07 (USB keyboard page).
>      */
>     /*@{*/
> 
>     SDL_SCANCODE_A = 4,
>     SDL_SCANCODE_B = 5,
>     SDL_SCANCODE_C = 6,
>     SDL_SCANCODE_D = 7,
>     SDL_SCANCODE_E = 8,
>     SDL_SCANCODE_F = 9,
>     SDL_SCANCODE_G = 10,
>     SDL_SCANCODE_H = 11,
>     SDL_SCANCODE_I = 12,
>     SDL_SCANCODE_J = 13,
>     SDL_SCANCODE_K = 14,
>     SDL_SCANCODE_L = 15,
>     SDL_SCANCODE_M = 16,
>     SDL_SCANCODE_N = 17,
>     SDL_SCANCODE_O = 18,
>     SDL_SCANCODE_P = 19,
>     SDL_SCANCODE_Q = 20,
>     SDL_SCANCODE_R = 21,
>     SDL_SCANCODE_S = 22,
>     SDL_SCANCODE_T = 23,
>     SDL_SCANCODE_U = 24,
>     SDL_SCANCODE_V = 25,
>     SDL_SCANCODE_W = 26,
>     SDL_SCANCODE_X = 27,
>     SDL_SCANCODE_Y = 28,
>     SDL_SCANCODE_Z = 29,
> 
>     SDL_SCANCODE_1 = 30,
>     SDL_SCANCODE_2 = 31,
>     SDL_SCANCODE_3 = 32,
>     SDL_SCANCODE_4 = 33,
>     SDL_SCANCODE_5 = 34,
>     SDL_SCANCODE_6 = 35,
>     SDL_SCANCODE_7 = 36,
>     SDL_SCANCODE_8 = 37,
>     SDL_SCANCODE_9 = 38,
>     SDL_SCANCODE_0 = 39,
> 
>     SDL_SCANCODE_RETURN = 40,
>     SDL_SCANCODE_ESCAPE = 41,
>     SDL_SCANCODE_BACKSPACE = 42,
>     SDL_SCANCODE_TAB = 43,
>     SDL_SCANCODE_SPACE = 44,
> 
>     SDL_SCANCODE_MINUS = 45,
>     SDL_SCANCODE_EQUALS = 46,
>     SDL_SCANCODE_LEFTBRACKET = 47,
>     SDL_SCANCODE_RIGHTBRACKET = 48,
>     SDL_SCANCODE_BACKSLASH = 49, /**< Located at the lower left of the return
>                                   *   key on ISO keyboards and at the right end
>                                   *   of the QWERTY row on ANSI keyboards.
>                                   *   Produces REVERSE SOLIDUS (backslash) and
>                                   *   VERTICAL LINE in a US layout, REVERSE
>                                   *   SOLIDUS and VERTICAL LINE in a UK Mac
>                                   *   layout, NUMBER SIGN and TILDE in a UK
>                                   *   Windows layout, DOLLAR SIGN and POUND SIGN
>                                   *   in a Swiss German layout, NUMBER SIGN and
>                                   *   APOSTROPHE in a German layout, GRAVE
>                                   *   ACCENT and POUND SIGN in a French Mac
>                                   *   layout, and ASTERISK and MICRO SIGN in a
>                                   *   French Windows layout.
>                                   */
>     SDL_SCANCODE_NONUSHASH = 50, /**< ISO USB keyboards actually use this code
>                                   *   instead of 49 for the same key, but all
>                                   *   OSes I've seen treat the two codes
>                                   *   identically. So, as an implementor, unless
>                                   *   your keyboard generates both of those
>                                   *   codes and your OS treats them differently,
>                                   *   you should generate SDL_SCANCODE_BACKSLASH
>                                   *   instead of this code. As a user, you
>                                   *   should not rely on this code because SDL
>                                   *   will never generate it with most (all?)
>                                   *   keyboards.
>                                   */
>     SDL_SCANCODE_SEMICOLON = 51,
>     SDL_SCANCODE_APOSTROPHE = 52,
>     SDL_SCANCODE_GRAVE = 53, /**< Located in the top left corner (on both ANSI
>                               *   and ISO keyboards). Produces GRAVE ACCENT and
>                               *   TILDE in a US Windows layout and in US and UK
>                               *   Mac layouts on ANSI keyboards, GRAVE ACCENT
>                               *   and NOT SIGN in a UK Windows layout, SECTION
>                               *   SIGN and PLUS-MINUS SIGN in US and UK Mac
>                               *   layouts on ISO keyboards, SECTION SIGN and
>                               *   DEGREE SIGN in a Swiss German layout (Mac:
>                               *   only on ISO keyboards), CIRCUMFLEX ACCENT and
>                               *   DEGREE SIGN in a German layout (Mac: only on
>                               *   ISO keyboards), SUPERSCRIPT TWO and TILDE in a
>                               *   French Windows layout, COMMERCIAL AT and
>                               *   NUMBER SIGN in a French Mac layout on ISO
>                               *   keyboards, and LESS-THAN SIGN and GREATER-THAN
>                               *   SIGN in a Swiss German, German, or French Mac
>                               *   layout on ANSI keyboards.
>                               */
>     SDL_SCANCODE_COMMA = 54,
>     SDL_SCANCODE_PERIOD = 55,
>     SDL_SCANCODE_SLASH = 56,
> 
>     SDL_SCANCODE_CAPSLOCK = 57,
> 
>     SDL_SCANCODE_F1 = 58,
>     SDL_SCANCODE_F2 = 59,
>     SDL_SCANCODE_F3 = 60,
>     SDL_SCANCODE_F4 = 61,
>     SDL_SCANCODE_F5 = 62,
>     SDL_SCANCODE_F6 = 63,
>     SDL_SCANCODE_F7 = 64,
>     SDL_SCANCODE_F8 = 65,
>     SDL_SCANCODE_F9 = 66,
>     SDL_SCANCODE_F10 = 67,
>     SDL_SCANCODE_F11 = 68,
>     SDL_SCANCODE_F12 = 69,
> 
>     SDL_SCANCODE_PRINTSCREEN = 70,
>     SDL_SCANCODE_SCROLLLOCK = 71,
>     SDL_SCANCODE_PAUSE = 72,
>     SDL_SCANCODE_INSERT = 73, /**< insert on PC, help on some Mac keyboards (but
>                                    does send code 73, not 117) */
>     SDL_SCANCODE_HOME = 74,
>     SDL_SCANCODE_PAGEUP = 75,
>     SDL_SCANCODE_DELETE = 76,
>     SDL_SCANCODE_END = 77,
>     SDL_SCANCODE_PAGEDOWN = 78,
>     SDL_SCANCODE_RIGHT = 79,
>     SDL_SCANCODE_LEFT = 80,
>     SDL_SCANCODE_DOWN = 81,
>     SDL_SCANCODE_UP = 82,
> 
>     SDL_SCANCODE_NUMLOCKCLEAR = 83, /**< num lock on PC, clear on Mac keyboards
>                                      */
>     SDL_SCANCODE_KP_DIVIDE = 84,
>     SDL_SCANCODE_KP_MULTIPLY = 85,
>     SDL_SCANCODE_KP_MINUS = 86,
>     SDL_SCANCODE_KP_PLUS = 87,
>     SDL_SCANCODE_KP_ENTER = 88,
>     SDL_SCANCODE_KP_1 = 89,
>     SDL_SCANCODE_KP_2 = 90,
>     SDL_SCANCODE_KP_3 = 91,
>     SDL_SCANCODE_KP_4 = 92,
>     SDL_SCANCODE_KP_5 = 93,
>     SDL_SCANCODE_KP_6 = 94,
>     SDL_SCANCODE_KP_7 = 95,
>     SDL_SCANCODE_KP_8 = 96,
>     SDL_SCANCODE_KP_9 = 97,
>     SDL_SCANCODE_KP_0 = 98,
>     SDL_SCANCODE_KP_PERIOD = 99,
> 
>     SDL_SCANCODE_NONUSBACKSLASH = 100, /**< This is the additional key that ISO
>                                         *   keyboards have over ANSI ones,
>                                         *   located between left shift and Y.
>                                         *   Produces GRAVE ACCENT and TILDE in a
>                                         *   US or UK Mac layout, REVERSE SOLIDUS
>                                         *   (backslash) and VERTICAL LINE in a
>                                         *   US or UK Windows layout, and
>                                         *   LESS-THAN SIGN and GREATER-THAN SIGN
>                                         *   in a Swiss German, German, or French
>                                         *   layout. */
>     SDL_SCANCODE_APPLICATION = 101, /**< windows contextual menu, compose */
>     SDL_SCANCODE_POWER = 102, /**< The USB document says this is a status flag,
>                                *   not a physical key - but some Mac keyboards
>                                *   do have a power key. */
>     SDL_SCANCODE_KP_EQUALS = 103,
>     SDL_SCANCODE_F13 = 104,
>     SDL_SCANCODE_F14 = 105,
>     SDL_SCANCODE_F15 = 106,
>     SDL_SCANCODE_F16 = 107,
>     SDL_SCANCODE_F17 = 108,
>     SDL_SCANCODE_F18 = 109,
>     SDL_SCANCODE_F19 = 110,
>     SDL_SCANCODE_F20 = 111,
>     SDL_SCANCODE_F21 = 112,
>     SDL_SCANCODE_F22 = 113,
>     SDL_SCANCODE_F23 = 114,
>     SDL_SCANCODE_F24 = 115,
>     SDL_SCANCODE_EXECUTE = 116,
>     SDL_SCANCODE_HELP = 117,
>     SDL_SCANCODE_MENU = 118,
>     SDL_SCANCODE_SELECT = 119,
>     SDL_SCANCODE_STOP = 120,
>     SDL_SCANCODE_AGAIN = 121,   /**< redo */
>     SDL_SCANCODE_UNDO = 122,
>     SDL_SCANCODE_CUT = 123,
>     SDL_SCANCODE_COPY = 124,
>     SDL_SCANCODE_PASTE = 125,
>     SDL_SCANCODE_FIND = 126,
>     SDL_SCANCODE_MUTE = 127,
>     SDL_SCANCODE_VOLUMEUP = 128,
>     SDL_SCANCODE_VOLUMEDOWN = 129,
> /* not sure whether there's a reason to enable these */
> /*     SDL_SCANCODE_LOCKINGCAPSLOCK = 130,  */
> /*     SDL_SCANCODE_LOCKINGNUMLOCK = 131, */
> /*     SDL_SCANCODE_LOCKINGSCROLLLOCK = 132, */
>     SDL_SCANCODE_KP_COMMA = 133,
>     SDL_SCANCODE_KP_EQUALSAS400 = 134,
> 
>     SDL_SCANCODE_INTERNATIONAL1 = 135, /**< used on Asian keyboards, see
>                                             footnotes in USB doc */
>     SDL_SCANCODE_INTERNATIONAL2 = 136,
>     SDL_SCANCODE_INTERNATIONAL3 = 137, /**< Yen */
>     SDL_SCANCODE_INTERNATIONAL4 = 138,
>     SDL_SCANCODE_INTERNATIONAL5 = 139,
>     SDL_SCANCODE_INTERNATIONAL6 = 140,
>     SDL_SCANCODE_INTERNATIONAL7 = 141,
>     SDL_SCANCODE_INTERNATIONAL8 = 142,
>     SDL_SCANCODE_INTERNATIONAL9 = 143,
>     SDL_SCANCODE_LANG1 = 144, /**< Hangul/English toggle */
>     SDL_SCANCODE_LANG2 = 145, /**< Hanja conversion */
>     SDL_SCANCODE_LANG3 = 146, /**< Katakana */
>     SDL_SCANCODE_LANG4 = 147, /**< Hiragana */
>     SDL_SCANCODE_LANG5 = 148, /**< Zenkaku/Hankaku */
>     SDL_SCANCODE_LANG6 = 149, /**< reserved */
>     SDL_SCANCODE_LANG7 = 150, /**< reserved */
>     SDL_SCANCODE_LANG8 = 151, /**< reserved */
>     SDL_SCANCODE_LANG9 = 152, /**< reserved */
> 
>     SDL_SCANCODE_ALTERASE = 153, /**< Erase-Eaze */
>     SDL_SCANCODE_SYSREQ = 154,
>     SDL_SCANCODE_CANCEL = 155,
>     SDL_SCANCODE_CLEAR = 156,
>     SDL_SCANCODE_PRIOR = 157,
>     SDL_SCANCODE_RETURN2 = 158,
>     SDL_SCANCODE_SEPARATOR = 159,
>     SDL_SCANCODE_OUT = 160,
>     SDL_SCANCODE_OPER = 161,
>     SDL_SCANCODE_CLEARAGAIN = 162,
>     SDL_SCANCODE_CRSEL = 163,
>     SDL_SCANCODE_EXSEL = 164,
> 
>     SDL_SCANCODE_KP_00 = 176,
>     SDL_SCANCODE_KP_000 = 177,
>     SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
>     SDL_SCANCODE_DECIMALSEPARATOR = 179,
>     SDL_SCANCODE_CURRENCYUNIT = 180,
>     SDL_SCANCODE_CURRENCYSUBUNIT = 181,
>     SDL_SCANCODE_KP_LEFTPAREN = 182,
>     SDL_SCANCODE_KP_RIGHTPAREN = 183,
>     SDL_SCANCODE_KP_LEFTBRACE = 184,
>     SDL_SCANCODE_KP_RIGHTBRACE = 185,
>     SDL_SCANCODE_KP_TAB = 186,
>     SDL_SCANCODE_KP_BACKSPACE = 187,
>     SDL_SCANCODE_KP_A = 188,
>     SDL_SCANCODE_KP_B = 189,
>     SDL_SCANCODE_KP_C = 190,
>     SDL_SCANCODE_KP_D = 191,
>     SDL_SCANCODE_KP_E = 192,
>     SDL_SCANCODE_KP_F = 193,
>     SDL_SCANCODE_KP_XOR = 194,
>     SDL_SCANCODE_KP_POWER = 195,
>     SDL_SCANCODE_KP_PERCENT = 196,
>     SDL_SCANCODE_KP_LESS = 197,
>     SDL_SCANCODE_KP_GREATER = 198,
>     SDL_SCANCODE_KP_AMPERSAND = 199,
>     SDL_SCANCODE_KP_DBLAMPERSAND = 200,
>     SDL_SCANCODE_KP_VERTICALBAR = 201,
>     SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
>     SDL_SCANCODE_KP_COLON = 203,
>     SDL_SCANCODE_KP_HASH = 204,
>     SDL_SCANCODE_KP_SPACE = 205,
>     SDL_SCANCODE_KP_AT = 206,
>     SDL_SCANCODE_KP_EXCLAM = 207,
>     SDL_SCANCODE_KP_MEMSTORE = 208,
>     SDL_SCANCODE_KP_MEMRECALL = 209,
>     SDL_SCANCODE_KP_MEMCLEAR = 210,
>     SDL_SCANCODE_KP_MEMADD = 211,
>     SDL_SCANCODE_KP_MEMSUBTRACT = 212,
>     SDL_SCANCODE_KP_MEMMULTIPLY = 213,
>     SDL_SCANCODE_KP_MEMDIVIDE = 214,
>     SDL_SCANCODE_KP_PLUSMINUS = 215,
>     SDL_SCANCODE_KP_CLEAR = 216,
>     SDL_SCANCODE_KP_CLEARENTRY = 217,
>     SDL_SCANCODE_KP_BINARY = 218,
>     SDL_SCANCODE_KP_OCTAL = 219,
>     SDL_SCANCODE_KP_DECIMAL = 220,
>     SDL_SCANCODE_KP_HEXADECIMAL = 221,
> 
>     SDL_SCANCODE_LCTRL = 224,
>     SDL_SCANCODE_LSHIFT = 225,
>     SDL_SCANCODE_LALT = 226, /**< alt, option */
>     SDL_SCANCODE_LGUI = 227, /**< windows, command (apple), meta */
>     SDL_SCANCODE_RCTRL = 228,
>     SDL_SCANCODE_RSHIFT = 229,
>     SDL_SCANCODE_RALT = 230, /**< alt gr, option */
>     SDL_SCANCODE_RGUI = 231, /**< windows, command (apple), meta */
> 
>     SDL_SCANCODE_MODE = 257,    /**< I'm not sure if this is really not covered
>                                  *   by any of the above, but since there's a
>                                  *   special KMOD_MODE for it I'm adding it here
>                                  */
> 
>     /*@}*//*Usage page 0x07*/
> 
>     /**
>      *  \name Usage page 0x0C
>      *
>      *  These values are mapped from usage page 0x0C (USB consumer page).
>      */
>     /*@{*/
> 
>     SDL_SCANCODE_AUDIONEXT = 258,
>     SDL_SCANCODE_AUDIOPREV = 259,
>     SDL_SCANCODE_AUDIOSTOP = 260,
>     SDL_SCANCODE_AUDIOPLAY = 261,
>     SDL_SCANCODE_AUDIOMUTE = 262,
>     SDL_SCANCODE_MEDIASELECT = 263,
>     SDL_SCANCODE_WWW = 264,
>     SDL_SCANCODE_MAIL = 265,
>     SDL_SCANCODE_CALCULATOR = 266,
>     SDL_SCANCODE_COMPUTER = 267,
>     SDL_SCANCODE_AC_SEARCH = 268,
>     SDL_SCANCODE_AC_HOME = 269,
>     SDL_SCANCODE_AC_BACK = 270,
>     SDL_SCANCODE_AC_FORWARD = 271,
>     SDL_SCANCODE_AC_STOP = 272,
>     SDL_SCANCODE_AC_REFRESH = 273,
>     SDL_SCANCODE_AC_BOOKMARKS = 274,
> 
>     /*@}*//*Usage page 0x0C*/
> 
>     /**
>      *  \name Walther keys
>      *
>      *  These are values that Christian Walther added (for mac keyboard?).
>      */
>     /*@{*/
> 
>     SDL_SCANCODE_BRIGHTNESSDOWN = 275,
>     SDL_SCANCODE_BRIGHTNESSUP = 276,
>     SDL_SCANCODE_DISPLAYSWITCH = 277, /**< display mirroring/dual display
>                                            switch, video mode switch */
>     SDL_SCANCODE_KBDILLUMTOGGLE = 278,
>     SDL_SCANCODE_KBDILLUMDOWN = 279,
>     SDL_SCANCODE_KBDILLUMUP = 280,
>     SDL_SCANCODE_EJECT = 281,
>     SDL_SCANCODE_SLEEP = 282,
> 
>     SDL_SCANCODE_APP1 = 283,
>     SDL_SCANCODE_APP2 = 284,
> 
>     /*@}*//*Walther keys*/
> 
>     /* Add any other keys here. */
> 
>     SDL_NUM_SCANCODES = 512 /**< not a key, just marks the number of scancodes
>                                  for array bounds */
> } SDL_Scancode;
> 
> #endif /* _SDL_scancode_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_shape.h ../android-sdl/jni/SDL2/include/SDL_shape.h
1,143c1,143
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_shape_h
< #define _SDL_shape_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_pixels.h"
< #include "SDL_rect.h"
< #include "SDL_surface.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /** \file SDL_shape.h
<  *
<  * Header file for the shaped window API.
<  */
< 
< #define SDL_NONSHAPEABLE_WINDOW -1
< #define SDL_INVALID_SHAPE_ARGUMENT -2
< #define SDL_WINDOW_LACKS_SHAPE -3
< 
< /**
<  *  \brief Create a window that can be shaped with the specified position, dimensions, and flags.
<  *
<  *  \param title The title of the window, in UTF-8 encoding.
<  *  \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
<  *               ::SDL_WINDOWPOS_UNDEFINED.
<  *  \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
<  *               ::SDL_WINDOWPOS_UNDEFINED.
<  *  \param w     The width of the window.
<  *  \param h     The height of the window.
<  *  \param flags The flags for the window, a mask of SDL_WINDOW_BORDERLESS with any of the following:
<  *               ::SDL_WINDOW_OPENGL,     ::SDL_WINDOW_INPUT_GRABBED,
<  *               ::SDL_WINDOW_HIDDEN,     ::SDL_WINDOW_RESIZABLE,
<  *               ::SDL_WINDOW_MAXIMIZED,  ::SDL_WINDOW_MINIMIZED,
<  *       ::SDL_WINDOW_BORDERLESS is always set, and ::SDL_WINDOW_FULLSCREEN is always unset.
<  *
<  *  \return The window created, or NULL if window creation failed.
<  *
<  *  \sa SDL_DestroyWindow()
<  */
< extern DECLSPEC SDL_Window * SDLCALL SDL_CreateShapedWindow(const char *title,unsigned int x,unsigned int y,unsigned int w,unsigned int h,Uint32 flags);
< 
< /**
<  * \brief Return whether the given window is a shaped window.
<  *
<  * \param window The window to query for being shaped.
<  *
<  * \return SDL_TRUE if the window is a window that can be shaped, SDL_FALSE if the window is unshaped or NULL.
<  * \sa SDL_CreateShapedWindow
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IsShapedWindow(const SDL_Window *window);
< 
< /** \brief An enum denoting the specific type of contents present in an SDL_WindowShapeParams union. */
< typedef enum {
<     /** \brief The default mode, a binarized alpha cutoff of 1. */
<     ShapeModeDefault,
<     /** \brief A binarized alpha cutoff with a given integer value. */
<     ShapeModeBinarizeAlpha,
<     /** \brief A binarized alpha cutoff with a given integer value, but with the opposite comparison. */
<     ShapeModeReverseBinarizeAlpha,
<     /** \brief A color key is applied. */
<     ShapeModeColorKey
< } WindowShapeMode;
< 
< #define SDL_SHAPEMODEALPHA(mode) (mode == ShapeModeDefault || mode == ShapeModeBinarizeAlpha || mode == ShapeModeReverseBinarizeAlpha)
< 
< /** \brief A union containing parameters for shaped windows. */
< typedef union {
<     /** \brief a cutoff alpha value for binarization of the window shape's alpha channel. */
<     Uint8 binarizationCutoff;
<     SDL_Color colorKey;
< } SDL_WindowShapeParams;
< 
< /** \brief A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents. */
< typedef struct SDL_WindowShapeMode {
<     /** \brief The mode of these window-shape parameters. */
<     WindowShapeMode mode;
<     /** \brief Window-shape parameters. */
<     SDL_WindowShapeParams parameters;
< } SDL_WindowShapeMode;
< 
< /**
<  * \brief Set the shape and parameters of a shaped window.
<  *
<  * \param window The shaped window whose parameters should be set.
<  * \param shape A surface encoding the desired shape for the window.
<  * \param shape_mode The parameters to set for the shaped window.
<  *
<  * \return 0 on success, SDL_INVALID_SHAPE_ARGUMENT on invalid an invalid shape argument, or SDL_NONSHAPEABLE_WINDOW
<  *           if the SDL_Window* given does not reference a valid shaped window.
<  *
<  * \sa SDL_WindowShapeMode
<  * \sa SDL_GetShapedWindowMode.
<  */
< extern DECLSPEC int SDLCALL SDL_SetWindowShape(SDL_Window *window,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode);
< 
< /**
<  * \brief Get the shape parameters of a shaped window.
<  *
<  * \param window The shaped window whose parameters should be retrieved.
<  * \param shape_mode An empty shape-mode structure to fill, or NULL to check whether the window has a shape.
<  *
<  * \return 0 if the window has a shape and, provided shape_mode was not NULL, shape_mode has been filled with the mode
<  *           data, SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped window, or SDL_WINDOW_LACKS_SHAPE if
<  *           the SDL_Window* given is a shapeable window currently lacking a shape.
<  *
<  * \sa SDL_WindowShapeMode
<  * \sa SDL_SetWindowShape
<  */
< extern DECLSPEC int SDLCALL SDL_GetShapedWindowMode(SDL_Window *window,SDL_WindowShapeMode *shape_mode);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_shape_h */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_shape_h
> #define _SDL_shape_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_pixels.h"
> #include "SDL_rect.h"
> #include "SDL_surface.h"
> #include "SDL_video.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /** \file SDL_shape.h
>  *
>  * Header file for the shaped window API.
>  */
> 
> #define SDL_NONSHAPEABLE_WINDOW -1
> #define SDL_INVALID_SHAPE_ARGUMENT -2
> #define SDL_WINDOW_LACKS_SHAPE -3
> 
> /**
>  *  \brief Create a window that can be shaped with the specified position, dimensions, and flags.
>  *
>  *  \param title The title of the window, in UTF-8 encoding.
>  *  \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
>  *               ::SDL_WINDOWPOS_UNDEFINED.
>  *  \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
>  *               ::SDL_WINDOWPOS_UNDEFINED.
>  *  \param w     The width of the window.
>  *  \param h     The height of the window.
>  *  \param flags The flags for the window, a mask of SDL_WINDOW_BORDERLESS with any of the following:
>  *               ::SDL_WINDOW_OPENGL,     ::SDL_WINDOW_INPUT_GRABBED,
>  *               ::SDL_WINDOW_HIDDEN,     ::SDL_WINDOW_RESIZABLE,
>  *               ::SDL_WINDOW_MAXIMIZED,  ::SDL_WINDOW_MINIMIZED,
>  *       ::SDL_WINDOW_BORDERLESS is always set, and ::SDL_WINDOW_FULLSCREEN is always unset.
>  *
>  *  \return The window created, or NULL if window creation failed.
>  *
>  *  \sa SDL_DestroyWindow()
>  */
> extern DECLSPEC SDL_Window * SDLCALL SDL_CreateShapedWindow(const char *title,unsigned int x,unsigned int y,unsigned int w,unsigned int h,Uint32 flags);
> 
> /**
>  * \brief Return whether the given window is a shaped window.
>  *
>  * \param window The window to query for being shaped.
>  *
>  * \return SDL_TRUE if the window is a window that can be shaped, SDL_FALSE if the window is unshaped or NULL.
>  * \sa SDL_CreateShapedWindow
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IsShapedWindow(const SDL_Window *window);
> 
> /** \brief An enum denoting the specific type of contents present in an SDL_WindowShapeParams union. */
> typedef enum {
>     /** \brief The default mode, a binarized alpha cutoff of 1. */
>     ShapeModeDefault,
>     /** \brief A binarized alpha cutoff with a given integer value. */
>     ShapeModeBinarizeAlpha,
>     /** \brief A binarized alpha cutoff with a given integer value, but with the opposite comparison. */
>     ShapeModeReverseBinarizeAlpha,
>     /** \brief A color key is applied. */
>     ShapeModeColorKey
> } WindowShapeMode;
> 
> #define SDL_SHAPEMODEALPHA(mode) (mode == ShapeModeDefault || mode == ShapeModeBinarizeAlpha || mode == ShapeModeReverseBinarizeAlpha)
> 
> /** \brief A union containing parameters for shaped windows. */
> typedef union {
>     /** \brief a cutoff alpha value for binarization of the window shape's alpha channel. */
>     Uint8 binarizationCutoff;
>     SDL_Color colorKey;
> } SDL_WindowShapeParams;
> 
> /** \brief A struct that tags the SDL_WindowShapeParams union with an enum describing the type of its contents. */
> typedef struct SDL_WindowShapeMode {
>     /** \brief The mode of these window-shape parameters. */
>     WindowShapeMode mode;
>     /** \brief Window-shape parameters. */
>     SDL_WindowShapeParams parameters;
> } SDL_WindowShapeMode;
> 
> /**
>  * \brief Set the shape and parameters of a shaped window.
>  *
>  * \param window The shaped window whose parameters should be set.
>  * \param shape A surface encoding the desired shape for the window.
>  * \param shape_mode The parameters to set for the shaped window.
>  *
>  * \return 0 on success, SDL_INVALID_SHAPE_ARGUMENT on invalid an invalid shape argument, or SDL_NONSHAPEABLE_WINDOW
>  *           if the SDL_Window* given does not reference a valid shaped window.
>  *
>  * \sa SDL_WindowShapeMode
>  * \sa SDL_GetShapedWindowMode.
>  */
> extern DECLSPEC int SDLCALL SDL_SetWindowShape(SDL_Window *window,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode);
> 
> /**
>  * \brief Get the shape parameters of a shaped window.
>  *
>  * \param window The shaped window whose parameters should be retrieved.
>  * \param shape_mode An empty shape-mode structure to fill, or NULL to check whether the window has a shape.
>  *
>  * \return 0 if the window has a shape and, provided shape_mode was not NULL, shape_mode has been filled with the mode
>  *           data, SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped window, or SDL_WINDOW_LACKS_SHAPE if
>  *           the SDL_Window* given is a shapeable window currently lacking a shape.
>  *
>  * \sa SDL_WindowShapeMode
>  * \sa SDL_SetWindowShape
>  */
> extern DECLSPEC int SDLCALL SDL_GetShapedWindowMode(SDL_Window *window,SDL_WindowShapeMode *shape_mode);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_shape_h */
diff jni/SDL/include/SDL_stdinc.h ../android-sdl/jni/SDL2/include/SDL_stdinc.h
1,392c1,392
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_stdinc.h
<  *
<  *  This is a general header that includes C language support.
<  */
< 
< #ifndef _SDL_stdinc_h
< #define _SDL_stdinc_h
< 
< #include "SDL_config.h"
< 
< #ifdef HAVE_SYS_TYPES_H
< #include <sys/types.h>
< #endif
< #ifdef HAVE_STDIO_H
< #include <stdio.h>
< #endif
< #if defined(STDC_HEADERS)
< # include <stdlib.h>
< # include <stddef.h>
< # include <stdarg.h>
< #else
< # if defined(HAVE_STDLIB_H)
< #  include <stdlib.h>
< # elif defined(HAVE_MALLOC_H)
< #  include <malloc.h>
< # endif
< # if defined(HAVE_STDDEF_H)
< #  include <stddef.h>
< # endif
< # if defined(HAVE_STDARG_H)
< #  include <stdarg.h>
< # endif
< #endif
< #ifdef HAVE_STRING_H
< # if !defined(STDC_HEADERS) && defined(HAVE_MEMORY_H)
< #  include <memory.h>
< # endif
< # include <string.h>
< #endif
< #ifdef HAVE_STRINGS_H
< # include <strings.h>
< #endif
< #if defined(HAVE_INTTYPES_H)
< # include <inttypes.h>
< #elif defined(HAVE_STDINT_H)
< # include <stdint.h>
< #endif
< #ifdef HAVE_CTYPE_H
< # include <ctype.h>
< #endif
< #ifdef HAVE_MATH_H
< # include <math.h>
< #endif
< #if defined(HAVE_ICONV) && defined(HAVE_ICONV_H)
< # include <iconv.h>
< #endif
< 
< /**
<  *  The number of elements in an array.
<  */
< #define SDL_arraysize(array)    (sizeof(array)/sizeof(array[0]))
< #define SDL_TABLESIZE(table)    SDL_arraysize(table)
< 
< /**
<  *  \name Cast operators
<  *
<  *  Use proper C++ casts when compiled as C++ to be compatible with the option
<  *  -Wold-style-cast of GCC (and -Werror=old-style-cast in GCC 4.2 and above).
<  */
< /* @{ */
< #ifdef __cplusplus
< #define SDL_reinterpret_cast(type, expression) reinterpret_cast<type>(expression)
< #define SDL_static_cast(type, expression) static_cast<type>(expression)
< #define SDL_const_cast(type, expression) const_cast<type>(expression)
< #else
< #define SDL_reinterpret_cast(type, expression) ((type)(expression))
< #define SDL_static_cast(type, expression) ((type)(expression))
< #define SDL_const_cast(type, expression) ((type)(expression))
< #endif
< /* @} *//* Cast operators */
< 
< /* Define a four character code as a Uint32 */
< #define SDL_FOURCC(A, B, C, D) \
<     ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | \
<      (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | \
<      (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | \
<      (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24))
< 
< /**
<  *  \name Basic data types
<  */
< /* @{ */
< 
< typedef enum
< {
<     SDL_FALSE = 0,
<     SDL_TRUE = 1
< } SDL_bool;
< 
< /**
<  * \brief A signed 8-bit integer type.
<  */
< typedef int8_t Sint8;
< /**
<  * \brief An unsigned 8-bit integer type.
<  */
< typedef uint8_t Uint8;
< /**
<  * \brief A signed 16-bit integer type.
<  */
< typedef int16_t Sint16;
< /**
<  * \brief An unsigned 16-bit integer type.
<  */
< typedef uint16_t Uint16;
< /**
<  * \brief A signed 32-bit integer type.
<  */
< typedef int32_t Sint32;
< /**
<  * \brief An unsigned 32-bit integer type.
<  */
< typedef uint32_t Uint32;
< 
< /**
<  * \brief A signed 64-bit integer type.
<  */
< typedef int64_t Sint64;
< /**
<  * \brief An unsigned 64-bit integer type.
<  */
< typedef uint64_t Uint64;
< 
< /* @} *//* Basic data types */
< 
< 
< #define SDL_COMPILE_TIME_ASSERT(name, x)               \
<        typedef int SDL_dummy_ ## name[(x) * 2 - 1]
< /** \cond */
< #ifndef DOXYGEN_SHOULD_IGNORE_THIS
< SDL_COMPILE_TIME_ASSERT(uint8, sizeof(Uint8) == 1);
< SDL_COMPILE_TIME_ASSERT(sint8, sizeof(Sint8) == 1);
< SDL_COMPILE_TIME_ASSERT(uint16, sizeof(Uint16) == 2);
< SDL_COMPILE_TIME_ASSERT(sint16, sizeof(Sint16) == 2);
< SDL_COMPILE_TIME_ASSERT(uint32, sizeof(Uint32) == 4);
< SDL_COMPILE_TIME_ASSERT(sint32, sizeof(Sint32) == 4);
< SDL_COMPILE_TIME_ASSERT(uint64, sizeof(Uint64) == 8);
< SDL_COMPILE_TIME_ASSERT(sint64, sizeof(Sint64) == 8);
< #endif /* DOXYGEN_SHOULD_IGNORE_THIS */
< /** \endcond */
< 
< /* Check to make sure enums are the size of ints, for structure packing.
<    For both Watcom C/C++ and Borland C/C++ the compiler option that makes
<    enums having the size of an int must be enabled.
<    This is "-b" for Borland C/C++ and "-ei" for Watcom C/C++ (v11).
< */
< 
< /** \cond */
< #ifndef DOXYGEN_SHOULD_IGNORE_THIS
< #if !defined(__ANDROID__)
<    /* TODO: include/SDL_stdinc.h:174: error: size of array 'SDL_dummy_enum' is negative */
< typedef enum
< {
<     DUMMY_ENUM_VALUE
< } SDL_DUMMY_ENUM;
< 
< SDL_COMPILE_TIME_ASSERT(enum, sizeof(SDL_DUMMY_ENUM) == sizeof(int));
< #endif
< #endif /* DOXYGEN_SHOULD_IGNORE_THIS */
< /** \endcond */
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #if defined(HAVE_ALLOCA) && !defined(alloca)
< # if defined(HAVE_ALLOCA_H)
< #  include <alloca.h>
< # elif defined(__GNUC__)
< #  define alloca __builtin_alloca
< # elif defined(_MSC_VER)
< #  include <malloc.h>
< #  define alloca _alloca
< # elif defined(__WATCOMC__)
< #  include <malloc.h>
< # elif defined(__BORLANDC__)
< #  include <malloc.h>
< # elif defined(__DMC__)
< #  include <stdlib.h>
< # elif defined(__AIX__)
< #pragma alloca
< # elif defined(__MRC__)
< void *alloca(unsigned);
< # else
< char *alloca();
< # endif
< #endif
< #ifdef HAVE_ALLOCA
< #define SDL_stack_alloc(type, count)    (type*)alloca(sizeof(type)*(count))
< #define SDL_stack_free(data)
< #else
< #define SDL_stack_alloc(type, count)    (type*)SDL_malloc(sizeof(type)*(count))
< #define SDL_stack_free(data)            SDL_free(data)
< #endif
< 
< extern DECLSPEC void *SDLCALL SDL_malloc(size_t size);
< extern DECLSPEC void *SDLCALL SDL_calloc(size_t nmemb, size_t size);
< extern DECLSPEC void *SDLCALL SDL_realloc(void *mem, size_t size);
< extern DECLSPEC void SDLCALL SDL_free(void *mem);
< 
< extern DECLSPEC char *SDLCALL SDL_getenv(const char *name);
< extern DECLSPEC int SDLCALL SDL_setenv(const char *name, const char *value, int overwrite);
< 
< extern DECLSPEC void SDLCALL SDL_qsort(void *base, size_t nmemb, size_t size, int (*compare) (const void *, const void *));
< 
< extern DECLSPEC int SDLCALL SDL_abs(int x);
< 
< /* !!! FIXME: these have side effects. You probably shouldn't use them. */
< /* !!! FIXME: Maybe we do forceinline functions of SDL_mini, SDL_minf, etc? */
< #define SDL_min(x, y) (((x) < (y)) ? (x) : (y))
< #define SDL_max(x, y) (((x) > (y)) ? (x) : (y))
< 
< extern DECLSPEC int SDLCALL SDL_isdigit(int x);
< extern DECLSPEC int SDLCALL SDL_isspace(int x);
< extern DECLSPEC int SDLCALL SDL_toupper(int x);
< extern DECLSPEC int SDLCALL SDL_tolower(int x);
< 
< extern DECLSPEC void *SDLCALL SDL_memset(void *dst, int c, size_t len);
< 
< #define SDL_zero(x) SDL_memset(&(x), 0, sizeof((x)))
< #define SDL_zerop(x) SDL_memset((x), 0, sizeof(*(x)))
< 
< /* Note that memset() is a byte assignment and this is a 32-bit assignment, so they're not directly equivalent. */
< SDL_FORCE_INLINE void SDL_memset4(void *dst, int val, size_t dwords)
< {
< #if defined(__GNUC__) && defined(i386)
<     int u0, u1, u2;
<     __asm__ __volatile__ (
<         "cld \n\t"
<         "rep ; stosl \n\t"
<         : "=&D" (u0), "=&a" (u1), "=&c" (u2)
<         : "0" (dst), "1" (val), "2" (SDL_static_cast(Uint32, dwords))
<         : "memory"
<     );
< #else
<     size_t _n = (dwords + 3) / 4;
<     Uint32 *_p = SDL_static_cast(Uint32 *, dst);
<     Uint32 _val = (val);
<     if (dwords == 0)
<         return;
<     switch (dwords % 4)
<     {
<         case 0: do {    *_p++ = _val;
<         case 3:         *_p++ = _val;
<         case 2:         *_p++ = _val;
<         case 1:         *_p++ = _val;
<         } while ( --_n );
<     }
< #endif
< }
< 
< 
< extern DECLSPEC void *SDLCALL SDL_memcpy(void *dst, const void *src, size_t len);
< 
< SDL_FORCE_INLINE void *SDL_memcpy4(void *dst, const void *src, size_t dwords)
< {
<     return SDL_memcpy(dst, src, dwords * 4);
< }
< 
< extern DECLSPEC void *SDLCALL SDL_memmove(void *dst, const void *src, size_t len);
< extern DECLSPEC int SDLCALL SDL_memcmp(const void *s1, const void *s2, size_t len);
< 
< extern DECLSPEC size_t SDLCALL SDL_wcslen(const wchar_t *wstr);
< extern DECLSPEC size_t SDLCALL SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);
< extern DECLSPEC size_t SDLCALL SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);
< 
< extern DECLSPEC size_t SDLCALL SDL_strlen(const char *str);
< extern DECLSPEC size_t SDLCALL SDL_strlcpy(char *dst, const char *src, size_t maxlen);
< extern DECLSPEC size_t SDLCALL SDL_utf8strlcpy(char *dst, const char *src, size_t dst_bytes);
< extern DECLSPEC size_t SDLCALL SDL_strlcat(char *dst, const char *src, size_t maxlen);
< extern DECLSPEC char *SDLCALL SDL_strdup(const char *str);
< extern DECLSPEC char *SDLCALL SDL_strrev(char *str);
< extern DECLSPEC char *SDLCALL SDL_strupr(char *str);
< extern DECLSPEC char *SDLCALL SDL_strlwr(char *str);
< extern DECLSPEC char *SDLCALL SDL_strchr(const char *str, int c);
< extern DECLSPEC char *SDLCALL SDL_strrchr(const char *str, int c);
< extern DECLSPEC char *SDLCALL SDL_strstr(const char *haystack, const char *needle);
< 
< extern DECLSPEC char *SDLCALL SDL_itoa(int value, char *str, int radix);
< extern DECLSPEC char *SDLCALL SDL_uitoa(unsigned int value, char *str, int radix);
< extern DECLSPEC char *SDLCALL SDL_ltoa(long value, char *str, int radix);
< extern DECLSPEC char *SDLCALL SDL_ultoa(unsigned long value, char *str, int radix);
< extern DECLSPEC char *SDLCALL SDL_lltoa(Sint64 value, char *str, int radix);
< extern DECLSPEC char *SDLCALL SDL_ulltoa(Uint64 value, char *str, int radix);
< 
< extern DECLSPEC int SDLCALL SDL_atoi(const char *str);
< extern DECLSPEC double SDLCALL SDL_atof(const char *str);
< extern DECLSPEC long SDLCALL SDL_strtol(const char *str, char **endp, int base);
< extern DECLSPEC unsigned long SDLCALL SDL_strtoul(const char *str, char **endp, int base);
< extern DECLSPEC Sint64 SDLCALL SDL_strtoll(const char *str, char **endp, int base);
< extern DECLSPEC Uint64 SDLCALL SDL_strtoull(const char *str, char **endp, int base);
< extern DECLSPEC double SDLCALL SDL_strtod(const char *str, char **endp);
< 
< extern DECLSPEC int SDLCALL SDL_strcmp(const char *str1, const char *str2);
< extern DECLSPEC int SDLCALL SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
< extern DECLSPEC int SDLCALL SDL_strcasecmp(const char *str1, const char *str2);
< extern DECLSPEC int SDLCALL SDL_strncasecmp(const char *str1, const char *str2, size_t len);
< 
< extern DECLSPEC int SDLCALL SDL_sscanf(const char *text, const char *fmt, ...);
< extern DECLSPEC int SDLCALL SDL_snprintf(char *text, size_t maxlen, const char *fmt, ...);
< extern DECLSPEC int SDLCALL SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);
< 
< #ifndef HAVE_M_PI
< #ifndef M_PI
< #define M_PI    3.14159265358979323846264338327950288   /* pi */
< #endif
< #endif
< 
< extern DECLSPEC double SDLCALL SDL_atan(double x);
< extern DECLSPEC double SDLCALL SDL_atan2(double x, double y);
< extern DECLSPEC double SDLCALL SDL_ceil(double x);
< extern DECLSPEC double SDLCALL SDL_copysign(double x, double y);
< extern DECLSPEC double SDLCALL SDL_cos(double x);
< extern DECLSPEC float SDLCALL SDL_cosf(float x);
< extern DECLSPEC double SDLCALL SDL_fabs(double x);
< extern DECLSPEC double SDLCALL SDL_floor(double x);
< extern DECLSPEC double SDLCALL SDL_log(double x);
< extern DECLSPEC double SDLCALL SDL_pow(double x, double y);
< extern DECLSPEC double SDLCALL SDL_scalbn(double x, int n);
< extern DECLSPEC double SDLCALL SDL_sin(double x);
< extern DECLSPEC float SDLCALL SDL_sinf(float x);
< extern DECLSPEC double SDLCALL SDL_sqrt(double x);
< 
< /* The SDL implementation of iconv() returns these error codes */
< #define SDL_ICONV_ERROR     (size_t)-1
< #define SDL_ICONV_E2BIG     (size_t)-2
< #define SDL_ICONV_EILSEQ    (size_t)-3
< #define SDL_ICONV_EINVAL    (size_t)-4
< 
< /* SDL_iconv_* are now always real symbols/types, not macros or inlined. */
< typedef struct _SDL_iconv_t *SDL_iconv_t;
< extern DECLSPEC SDL_iconv_t SDLCALL SDL_iconv_open(const char *tocode,
<                                                    const char *fromcode);
< extern DECLSPEC int SDLCALL SDL_iconv_close(SDL_iconv_t cd);
< extern DECLSPEC size_t SDLCALL SDL_iconv(SDL_iconv_t cd, const char **inbuf,
<                                          size_t * inbytesleft, char **outbuf,
<                                          size_t * outbytesleft);
< /**
<  *  This function converts a string between encodings in one pass, returning a
<  *  string that must be freed with SDL_free() or NULL on error.
<  */
< extern DECLSPEC char *SDLCALL SDL_iconv_string(const char *tocode,
<                                                const char *fromcode,
<                                                const char *inbuf,
<                                                size_t inbytesleft);
< #define SDL_iconv_utf8_locale(S)    SDL_iconv_string("", "UTF-8", S, SDL_strlen(S)+1)
< #define SDL_iconv_utf8_ucs2(S)      (Uint16 *)SDL_iconv_string("UCS-2-INTERNAL", "UTF-8", S, SDL_strlen(S)+1)
< #define SDL_iconv_utf8_ucs4(S)      (Uint32 *)SDL_iconv_string("UCS-4-INTERNAL", "UTF-8", S, SDL_strlen(S)+1)
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_stdinc_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_stdinc.h
>  *
>  *  This is a general header that includes C language support.
>  */
> 
> #ifndef _SDL_stdinc_h
> #define _SDL_stdinc_h
> 
> #include "SDL_config.h"
> 
> #ifdef HAVE_SYS_TYPES_H
> #include <sys/types.h>
> #endif
> #ifdef HAVE_STDIO_H
> #include <stdio.h>
> #endif
> #if defined(STDC_HEADERS)
> # include <stdlib.h>
> # include <stddef.h>
> # include <stdarg.h>
> #else
> # if defined(HAVE_STDLIB_H)
> #  include <stdlib.h>
> # elif defined(HAVE_MALLOC_H)
> #  include <malloc.h>
> # endif
> # if defined(HAVE_STDDEF_H)
> #  include <stddef.h>
> # endif
> # if defined(HAVE_STDARG_H)
> #  include <stdarg.h>
> # endif
> #endif
> #ifdef HAVE_STRING_H
> # if !defined(STDC_HEADERS) && defined(HAVE_MEMORY_H)
> #  include <memory.h>
> # endif
> # include <string.h>
> #endif
> #ifdef HAVE_STRINGS_H
> # include <strings.h>
> #endif
> #if defined(HAVE_INTTYPES_H)
> # include <inttypes.h>
> #elif defined(HAVE_STDINT_H)
> # include <stdint.h>
> #endif
> #ifdef HAVE_CTYPE_H
> # include <ctype.h>
> #endif
> #ifdef HAVE_MATH_H
> # include <math.h>
> #endif
> #if defined(HAVE_ICONV) && defined(HAVE_ICONV_H)
> # include <iconv.h>
> #endif
> 
> /**
>  *  The number of elements in an array.
>  */
> #define SDL_arraysize(array)    (sizeof(array)/sizeof(array[0]))
> #define SDL_TABLESIZE(table)    SDL_arraysize(table)
> 
> /**
>  *  \name Cast operators
>  *
>  *  Use proper C++ casts when compiled as C++ to be compatible with the option
>  *  -Wold-style-cast of GCC (and -Werror=old-style-cast in GCC 4.2 and above).
>  */
> /*@{*/
> #ifdef __cplusplus
> #define SDL_reinterpret_cast(type, expression) reinterpret_cast<type>(expression)
> #define SDL_static_cast(type, expression) static_cast<type>(expression)
> #define SDL_const_cast(type, expression) const_cast<type>(expression)
> #else
> #define SDL_reinterpret_cast(type, expression) ((type)(expression))
> #define SDL_static_cast(type, expression) ((type)(expression))
> #define SDL_const_cast(type, expression) ((type)(expression))
> #endif
> /*@}*//*Cast operators*/
> 
> /* Define a four character code as a Uint32 */
> #define SDL_FOURCC(A, B, C, D) \
>     ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | \
>      (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | \
>      (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | \
>      (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24))
> 
> /**
>  *  \name Basic data types
>  */
> /*@{*/
> 
> typedef enum
> {
>     SDL_FALSE = 0,
>     SDL_TRUE = 1
> } SDL_bool;
> 
> /**
>  * \brief A signed 8-bit integer type.
>  */
> typedef int8_t Sint8;
> /**
>  * \brief An unsigned 8-bit integer type.
>  */
> typedef uint8_t Uint8;
> /**
>  * \brief A signed 16-bit integer type.
>  */
> typedef int16_t Sint16;
> /**
>  * \brief An unsigned 16-bit integer type.
>  */
> typedef uint16_t Uint16;
> /**
>  * \brief A signed 32-bit integer type.
>  */
> typedef int32_t Sint32;
> /**
>  * \brief An unsigned 32-bit integer type.
>  */
> typedef uint32_t Uint32;
> 
> /**
>  * \brief A signed 64-bit integer type.
>  */
> typedef int64_t Sint64;
> /**
>  * \brief An unsigned 64-bit integer type.
>  */
> typedef uint64_t Uint64;
> 
> /*@}*//*Basic data types*/
> 
> 
> #define SDL_COMPILE_TIME_ASSERT(name, x)               \
>        typedef int SDL_dummy_ ## name[(x) * 2 - 1]
> /** \cond */
> #ifndef DOXYGEN_SHOULD_IGNORE_THIS
> SDL_COMPILE_TIME_ASSERT(uint8, sizeof(Uint8) == 1);
> SDL_COMPILE_TIME_ASSERT(sint8, sizeof(Sint8) == 1);
> SDL_COMPILE_TIME_ASSERT(uint16, sizeof(Uint16) == 2);
> SDL_COMPILE_TIME_ASSERT(sint16, sizeof(Sint16) == 2);
> SDL_COMPILE_TIME_ASSERT(uint32, sizeof(Uint32) == 4);
> SDL_COMPILE_TIME_ASSERT(sint32, sizeof(Sint32) == 4);
> SDL_COMPILE_TIME_ASSERT(uint64, sizeof(Uint64) == 8);
> SDL_COMPILE_TIME_ASSERT(sint64, sizeof(Sint64) == 8);
> #endif /* DOXYGEN_SHOULD_IGNORE_THIS */
> /** \endcond */
> 
> /* Check to make sure enums are the size of ints, for structure packing.
>    For both Watcom C/C++ and Borland C/C++ the compiler option that makes
>    enums having the size of an int must be enabled.
>    This is "-b" for Borland C/C++ and "-ei" for Watcom C/C++ (v11).
> */
> 
> /** \cond */
> #ifndef DOXYGEN_SHOULD_IGNORE_THIS
> #if !defined(__ANDROID__)
>    /* TODO: include/SDL_stdinc.h:174: error: size of array 'SDL_dummy_enum' is negative */
> typedef enum
> {
>     DUMMY_ENUM_VALUE
> } SDL_DUMMY_ENUM;
> 
> SDL_COMPILE_TIME_ASSERT(enum, sizeof(SDL_DUMMY_ENUM) == sizeof(int));
> #endif
> #endif /* DOXYGEN_SHOULD_IGNORE_THIS */
> /** \endcond */
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> #if defined(HAVE_ALLOCA) && !defined(alloca)
> # if defined(HAVE_ALLOCA_H)
> #  include <alloca.h>
> # elif defined(__GNUC__)
> #  define alloca __builtin_alloca
> # elif defined(_MSC_VER)
> #  include <malloc.h>
> #  define alloca _alloca
> # elif defined(__WATCOMC__)
> #  include <malloc.h>
> # elif defined(__BORLANDC__)
> #  include <malloc.h>
> # elif defined(__DMC__)
> #  include <stdlib.h>
> # elif defined(__AIX__)
> #pragma alloca
> # elif defined(__MRC__)
> void *alloca(unsigned);
> # else
> char *alloca();
> # endif
> #endif
> #ifdef HAVE_ALLOCA
> #define SDL_stack_alloc(type, count)    (type*)alloca(sizeof(type)*(count))
> #define SDL_stack_free(data)
> #else
> #define SDL_stack_alloc(type, count)    (type*)SDL_malloc(sizeof(type)*(count))
> #define SDL_stack_free(data)            SDL_free(data)
> #endif
> 
> extern DECLSPEC void *SDLCALL SDL_malloc(size_t size);
> extern DECLSPEC void *SDLCALL SDL_calloc(size_t nmemb, size_t size);
> extern DECLSPEC void *SDLCALL SDL_realloc(void *mem, size_t size);
> extern DECLSPEC void SDLCALL SDL_free(void *mem);
> 
> extern DECLSPEC char *SDLCALL SDL_getenv(const char *name);
> extern DECLSPEC int SDLCALL SDL_setenv(const char *name, const char *value, int overwrite);
> 
> extern DECLSPEC void SDLCALL SDL_qsort(void *base, size_t nmemb, size_t size, int (*compare) (const void *, const void *));
> 
> extern DECLSPEC int SDLCALL SDL_abs(int x);
> 
> /* !!! FIXME: these have side effects. You probably shouldn't use them. */
> /* !!! FIXME: Maybe we do forceinline functions of SDL_mini, SDL_minf, etc? */
> #define SDL_min(x, y) (((x) < (y)) ? (x) : (y))
> #define SDL_max(x, y) (((x) > (y)) ? (x) : (y))
> 
> extern DECLSPEC int SDLCALL SDL_isdigit(int x);
> extern DECLSPEC int SDLCALL SDL_isspace(int x);
> extern DECLSPEC int SDLCALL SDL_toupper(int x);
> extern DECLSPEC int SDLCALL SDL_tolower(int x);
> 
> extern DECLSPEC void *SDLCALL SDL_memset(void *dst, int c, size_t len);
> 
> #define SDL_zero(x) SDL_memset(&(x), 0, sizeof((x)))
> #define SDL_zerop(x) SDL_memset((x), 0, sizeof(*(x)))
> 
> /* Note that memset() is a byte assignment and this is a 32-bit assignment, so they're not directly equivalent. */
> SDL_FORCE_INLINE void SDL_memset4(void *dst, int val, size_t dwords)
> {
> #if defined(__GNUC__) && defined(i386)
>     int u0, u1, u2;
>     __asm__ __volatile__ (
>         "cld \n\t"
>         "rep ; stosl \n\t"
>         : "=&D" (u0), "=&a" (u1), "=&c" (u2)
>         : "0" (dst), "1" (val), "2" (SDL_static_cast(Uint32, dwords))
>         : "memory"
>     );
> #else
>     size_t _n = (dwords + 3) / 4;
>     Uint32 *_p = SDL_static_cast(Uint32 *, dst);
>     Uint32 _val = (val);
>     if (dwords == 0)
>         return;
>     switch (dwords % 4)
>     {
>         case 0: do {    *_p++ = _val;
>         case 3:         *_p++ = _val;
>         case 2:         *_p++ = _val;
>         case 1:         *_p++ = _val;
>         } while ( --_n );
>     }
> #endif
> }
> 
> 
> extern DECLSPEC void *SDLCALL SDL_memcpy(void *dst, const void *src, size_t len);
> 
> SDL_FORCE_INLINE void *SDL_memcpy4(void *dst, const void *src, size_t dwords)
> {
>     return SDL_memcpy(dst, src, dwords * 4);
> }
> 
> extern DECLSPEC void *SDLCALL SDL_memmove(void *dst, const void *src, size_t len);
> extern DECLSPEC int SDLCALL SDL_memcmp(const void *s1, const void *s2, size_t len);
> 
> extern DECLSPEC size_t SDLCALL SDL_wcslen(const wchar_t *wstr);
> extern DECLSPEC size_t SDLCALL SDL_wcslcpy(wchar_t *dst, const wchar_t *src, size_t maxlen);
> extern DECLSPEC size_t SDLCALL SDL_wcslcat(wchar_t *dst, const wchar_t *src, size_t maxlen);
> 
> extern DECLSPEC size_t SDLCALL SDL_strlen(const char *str);
> extern DECLSPEC size_t SDLCALL SDL_strlcpy(char *dst, const char *src, size_t maxlen);
> extern DECLSPEC size_t SDLCALL SDL_utf8strlcpy(char *dst, const char *src, size_t dst_bytes);
> extern DECLSPEC size_t SDLCALL SDL_strlcat(char *dst, const char *src, size_t maxlen);
> extern DECLSPEC char *SDLCALL SDL_strdup(const char *str);
> extern DECLSPEC char *SDLCALL SDL_strrev(char *str);
> extern DECLSPEC char *SDLCALL SDL_strupr(char *str);
> extern DECLSPEC char *SDLCALL SDL_strlwr(char *str);
> extern DECLSPEC char *SDLCALL SDL_strchr(const char *str, int c);
> extern DECLSPEC char *SDLCALL SDL_strrchr(const char *str, int c);
> extern DECLSPEC char *SDLCALL SDL_strstr(const char *haystack, const char *needle);
> 
> extern DECLSPEC char *SDLCALL SDL_itoa(int value, char *str, int radix);
> extern DECLSPEC char *SDLCALL SDL_uitoa(unsigned int value, char *str, int radix);
> extern DECLSPEC char *SDLCALL SDL_ltoa(long value, char *str, int radix);
> extern DECLSPEC char *SDLCALL SDL_ultoa(unsigned long value, char *str, int radix);
> extern DECLSPEC char *SDLCALL SDL_lltoa(Sint64 value, char *str, int radix);
> extern DECLSPEC char *SDLCALL SDL_ulltoa(Uint64 value, char *str, int radix);
> 
> extern DECLSPEC int SDLCALL SDL_atoi(const char *str);
> extern DECLSPEC double SDLCALL SDL_atof(const char *str);
> extern DECLSPEC long SDLCALL SDL_strtol(const char *str, char **endp, int base);
> extern DECLSPEC unsigned long SDLCALL SDL_strtoul(const char *str, char **endp, int base);
> extern DECLSPEC Sint64 SDLCALL SDL_strtoll(const char *str, char **endp, int base);
> extern DECLSPEC Uint64 SDLCALL SDL_strtoull(const char *str, char **endp, int base);
> extern DECLSPEC double SDLCALL SDL_strtod(const char *str, char **endp);
> 
> extern DECLSPEC int SDLCALL SDL_strcmp(const char *str1, const char *str2);
> extern DECLSPEC int SDLCALL SDL_strncmp(const char *str1, const char *str2, size_t maxlen);
> extern DECLSPEC int SDLCALL SDL_strcasecmp(const char *str1, const char *str2);
> extern DECLSPEC int SDLCALL SDL_strncasecmp(const char *str1, const char *str2, size_t len);
> 
> extern DECLSPEC int SDLCALL SDL_sscanf(const char *text, const char *fmt, ...);
> extern DECLSPEC int SDLCALL SDL_snprintf(char *text, size_t maxlen, const char *fmt, ...);
> extern DECLSPEC int SDLCALL SDL_vsnprintf(char *text, size_t maxlen, const char *fmt, va_list ap);
> 
> #ifndef HAVE_M_PI
> #ifndef M_PI
> #define M_PI    3.14159265358979323846264338327950288   /* pi */
> #endif
> #endif
> 
> extern DECLSPEC double SDLCALL SDL_atan(double x);
> extern DECLSPEC double SDLCALL SDL_atan2(double x, double y);
> extern DECLSPEC double SDLCALL SDL_ceil(double x);
> extern DECLSPEC double SDLCALL SDL_copysign(double x, double y);
> extern DECLSPEC double SDLCALL SDL_cos(double x);
> extern DECLSPEC float SDLCALL SDL_cosf(float x);
> extern DECLSPEC double SDLCALL SDL_fabs(double x);
> extern DECLSPEC double SDLCALL SDL_floor(double x);
> extern DECLSPEC double SDLCALL SDL_log(double x);
> extern DECLSPEC double SDLCALL SDL_pow(double x, double y);
> extern DECLSPEC double SDLCALL SDL_scalbn(double x, int n);
> extern DECLSPEC double SDLCALL SDL_sin(double x);
> extern DECLSPEC float SDLCALL SDL_sinf(float x);
> extern DECLSPEC double SDLCALL SDL_sqrt(double x);
> 
> /* The SDL implementation of iconv() returns these error codes */
> #define SDL_ICONV_ERROR     (size_t)-1
> #define SDL_ICONV_E2BIG     (size_t)-2
> #define SDL_ICONV_EILSEQ    (size_t)-3
> #define SDL_ICONV_EINVAL    (size_t)-4
> 
> /* SDL_iconv_* are now always real symbols/types, not macros or inlined. */
> typedef struct _SDL_iconv_t *SDL_iconv_t;
> extern DECLSPEC SDL_iconv_t SDLCALL SDL_iconv_open(const char *tocode,
>                                                    const char *fromcode);
> extern DECLSPEC int SDLCALL SDL_iconv_close(SDL_iconv_t cd);
> extern DECLSPEC size_t SDLCALL SDL_iconv(SDL_iconv_t cd, const char **inbuf,
>                                          size_t * inbytesleft, char **outbuf,
>                                          size_t * outbytesleft);
> /**
>  *  This function converts a string between encodings in one pass, returning a
>  *  string that must be freed with SDL_free() or NULL on error.
>  */
> extern DECLSPEC char *SDLCALL SDL_iconv_string(const char *tocode,
>                                                const char *fromcode,
>                                                const char *inbuf,
>                                                size_t inbytesleft);
> #define SDL_iconv_utf8_locale(S)    SDL_iconv_string("", "UTF-8", S, SDL_strlen(S)+1)
> #define SDL_iconv_utf8_ucs2(S)      (Uint16 *)SDL_iconv_string("UCS-2-INTERNAL", "UTF-8", S, SDL_strlen(S)+1)
> #define SDL_iconv_utf8_ucs4(S)      (Uint32 *)SDL_iconv_string("UCS-4-INTERNAL", "UTF-8", S, SDL_strlen(S)+1)
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_stdinc_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_surface.h ../android-sdl/jni/SDL2/include/SDL_surface.h
1,503c1,503
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_surface.h
<  *
<  *  Header file for ::SDL_Surface definition and management functions.
<  */
< 
< #ifndef _SDL_surface_h
< #define _SDL_surface_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_pixels.h"
< #include "SDL_rect.h"
< #include "SDL_blendmode.h"
< #include "SDL_rwops.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \name Surface flags
<  *
<  *  These are the currently supported flags for the ::SDL_Surface.
<  *
<  *  \internal
<  *  Used internally (read-only).
<  */
< /* @{ */
< #define SDL_SWSURFACE       0           /**< Just here for compatibility */
< #define SDL_PREALLOC        0x00000001  /**< Surface uses preallocated memory */
< #define SDL_RLEACCEL        0x00000002  /**< Surface is RLE encoded */
< #define SDL_DONTFREE        0x00000004  /**< Surface is referenced internally */
< /* @} *//* Surface flags */
< 
< /**
<  *  Evaluates to true if the surface needs to be locked before access.
<  */
< #define SDL_MUSTLOCK(S) (((S)->flags & SDL_RLEACCEL) != 0)
< 
< /**
<  * \brief A collection of pixels used in software blitting.
<  *
<  * \note  This structure should be treated as read-only, except for \c pixels,
<  *        which, if not NULL, contains the raw pixel data for the surface.
<  */
< typedef struct SDL_Surface
< {
<     Uint32 flags;               /**< Read-only */
<     SDL_PixelFormat *format;    /**< Read-only */
<     int w, h;                   /**< Read-only */
<     int pitch;                  /**< Read-only */
<     void *pixels;               /**< Read-write */
< 
<     /** Application data associated with the surface */
<     void *userdata;             /**< Read-write */
< 
<     /** information needed for surfaces requiring locks */
<     int locked;                 /**< Read-only */
<     void *lock_data;            /**< Read-only */
< 
<     /** clipping information */
<     SDL_Rect clip_rect;         /**< Read-only */
< 
<     /** info for fast blit mapping to other surfaces */
<     struct SDL_BlitMap *map;    /**< Private */
< 
<     /** Reference count -- used when freeing surface */
<     int refcount;               /**< Read-mostly */
< } SDL_Surface;
< 
< /**
<  * \brief The type of function used for surface blitting functions.
<  */
< typedef int (*SDL_blit) (struct SDL_Surface * src, SDL_Rect * srcrect,
<                          struct SDL_Surface * dst, SDL_Rect * dstrect);
< 
< /**
<  *  Allocate and free an RGB surface.
<  *
<  *  If the depth is 4 or 8 bits, an empty palette is allocated for the surface.
<  *  If the depth is greater than 8 bits, the pixel format is set using the
<  *  flags '[RGB]mask'.
<  *
<  *  If the function runs out of memory, it will return NULL.
<  *
<  *  \param flags The \c flags are obsolete and should be set to 0.
<  *  \param width The width in pixels of the surface to create.
<  *  \param height The height in pixels of the surface to create.
<  *  \param depth The depth in bits of the surface to create.
<  *  \param Rmask The red mask of the surface to create.
<  *  \param Gmask The green mask of the surface to create.
<  *  \param Bmask The blue mask of the surface to create.
<  *  \param Amask The alpha mask of the surface to create.
<  */
< extern DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurface
<     (Uint32 flags, int width, int height, int depth,
<      Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
< extern DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurfaceFrom(void *pixels,
<                                                               int width,
<                                                               int height,
<                                                               int depth,
<                                                               int pitch,
<                                                               Uint32 Rmask,
<                                                               Uint32 Gmask,
<                                                               Uint32 Bmask,
<                                                               Uint32 Amask);
< extern DECLSPEC void SDLCALL SDL_FreeSurface(SDL_Surface * surface);
< 
< /**
<  *  \brief Set the palette used by a surface.
<  *
<  *  \return 0, or -1 if the surface format doesn't use a palette.
<  *
<  *  \note A single palette can be shared with many surfaces.
<  */
< extern DECLSPEC int SDLCALL SDL_SetSurfacePalette(SDL_Surface * surface,
<                                                   SDL_Palette * palette);
< 
< /**
<  *  \brief Sets up a surface for directly accessing the pixels.
<  *
<  *  Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write
<  *  to and read from \c surface->pixels, using the pixel format stored in
<  *  \c surface->format.  Once you are done accessing the surface, you should
<  *  use SDL_UnlockSurface() to release it.
<  *
<  *  Not all surfaces require locking.  If SDL_MUSTLOCK(surface) evaluates
<  *  to 0, then you can read and write to the surface at any time, and the
<  *  pixel format of the surface will not change.
<  *
<  *  No operating system or library calls should be made between lock/unlock
<  *  pairs, as critical system locks may be held during this time.
<  *
<  *  SDL_LockSurface() returns 0, or -1 if the surface couldn't be locked.
<  *
<  *  \sa SDL_UnlockSurface()
<  */
< extern DECLSPEC int SDLCALL SDL_LockSurface(SDL_Surface * surface);
< /** \sa SDL_LockSurface() */
< extern DECLSPEC void SDLCALL SDL_UnlockSurface(SDL_Surface * surface);
< 
< /**
<  *  Load a surface from a seekable SDL data stream (memory or file).
<  *
<  *  If \c freesrc is non-zero, the stream will be closed after being read.
<  *
<  *  The new surface should be freed with SDL_FreeSurface().
<  *
<  *  \return the new surface, or NULL if there was an error.
<  */
< extern DECLSPEC SDL_Surface *SDLCALL SDL_LoadBMP_RW(SDL_RWops * src,
<                                                     int freesrc);
< 
< /**
<  *  Load a surface from a file.
<  *
<  *  Convenience macro.
<  */
< #define SDL_LoadBMP(file)   SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1)
< 
< /**
<  *  Save a surface to a seekable SDL data stream (memory or file).
<  *
<  *  If \c freedst is non-zero, the stream will be closed after being written.
<  *
<  *  \return 0 if successful or -1 if there was an error.
<  */
< extern DECLSPEC int SDLCALL SDL_SaveBMP_RW
<     (SDL_Surface * surface, SDL_RWops * dst, int freedst);
< 
< /**
<  *  Save a surface to a file.
<  *
<  *  Convenience macro.
<  */
< #define SDL_SaveBMP(surface, file) \
<         SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, "wb"), 1)
< 
< /**
<  *  \brief Sets the RLE acceleration hint for a surface.
<  *
<  *  \return 0 on success, or -1 if the surface is not valid
<  *
<  *  \note If RLE is enabled, colorkey and alpha blending blits are much faster,
<  *        but the surface must be locked before directly accessing the pixels.
<  */
< extern DECLSPEC int SDLCALL SDL_SetSurfaceRLE(SDL_Surface * surface,
<                                               int flag);
< 
< /**
<  *  \brief Sets the color key (transparent pixel) in a blittable surface.
<  *
<  *  \param surface The surface to update
<  *  \param flag Non-zero to enable colorkey and 0 to disable colorkey
<  *  \param key The transparent pixel in the native surface format
<  *
<  *  \return 0 on success, or -1 if the surface is not valid
<  *
<  *  You can pass SDL_RLEACCEL to enable RLE accelerated blits.
<  */
< extern DECLSPEC int SDLCALL SDL_SetColorKey(SDL_Surface * surface,
<                                             int flag, Uint32 key);
< 
< /**
<  *  \brief Gets the color key (transparent pixel) in a blittable surface.
<  *
<  *  \param surface The surface to update
<  *  \param key A pointer filled in with the transparent pixel in the native
<  *             surface format
<  *
<  *  \return 0 on success, or -1 if the surface is not valid or colorkey is not
<  *          enabled.
<  */
< extern DECLSPEC int SDLCALL SDL_GetColorKey(SDL_Surface * surface,
<                                             Uint32 * key);
< 
< /**
<  *  \brief Set an additional color value used in blit operations.
<  *
<  *  \param surface The surface to update.
<  *  \param r The red color value multiplied into blit operations.
<  *  \param g The green color value multiplied into blit operations.
<  *  \param b The blue color value multiplied into blit operations.
<  *
<  *  \return 0 on success, or -1 if the surface is not valid.
<  *
<  *  \sa SDL_GetSurfaceColorMod()
<  */
< extern DECLSPEC int SDLCALL SDL_SetSurfaceColorMod(SDL_Surface * surface,
<                                                    Uint8 r, Uint8 g, Uint8 b);
< 
< 
< /**
<  *  \brief Get the additional color value used in blit operations.
<  *
<  *  \param surface The surface to query.
<  *  \param r A pointer filled in with the current red color value.
<  *  \param g A pointer filled in with the current green color value.
<  *  \param b A pointer filled in with the current blue color value.
<  *
<  *  \return 0 on success, or -1 if the surface is not valid.
<  *
<  *  \sa SDL_SetSurfaceColorMod()
<  */
< extern DECLSPEC int SDLCALL SDL_GetSurfaceColorMod(SDL_Surface * surface,
<                                                    Uint8 * r, Uint8 * g,
<                                                    Uint8 * b);
< 
< /**
<  *  \brief Set an additional alpha value used in blit operations.
<  *
<  *  \param surface The surface to update.
<  *  \param alpha The alpha value multiplied into blit operations.
<  *
<  *  \return 0 on success, or -1 if the surface is not valid.
<  *
<  *  \sa SDL_GetSurfaceAlphaMod()
<  */
< extern DECLSPEC int SDLCALL SDL_SetSurfaceAlphaMod(SDL_Surface * surface,
<                                                    Uint8 alpha);
< 
< /**
<  *  \brief Get the additional alpha value used in blit operations.
<  *
<  *  \param surface The surface to query.
<  *  \param alpha A pointer filled in with the current alpha value.
<  *
<  *  \return 0 on success, or -1 if the surface is not valid.
<  *
<  *  \sa SDL_SetSurfaceAlphaMod()
<  */
< extern DECLSPEC int SDLCALL SDL_GetSurfaceAlphaMod(SDL_Surface * surface,
<                                                    Uint8 * alpha);
< 
< /**
<  *  \brief Set the blend mode used for blit operations.
<  *
<  *  \param surface The surface to update.
<  *  \param blendMode ::SDL_BlendMode to use for blit blending.
<  *
<  *  \return 0 on success, or -1 if the parameters are not valid.
<  *
<  *  \sa SDL_GetSurfaceBlendMode()
<  */
< extern DECLSPEC int SDLCALL SDL_SetSurfaceBlendMode(SDL_Surface * surface,
<                                                     SDL_BlendMode blendMode);
< 
< /**
<  *  \brief Get the blend mode used for blit operations.
<  *
<  *  \param surface   The surface to query.
<  *  \param blendMode A pointer filled in with the current blend mode.
<  *
<  *  \return 0 on success, or -1 if the surface is not valid.
<  *
<  *  \sa SDL_SetSurfaceBlendMode()
<  */
< extern DECLSPEC int SDLCALL SDL_GetSurfaceBlendMode(SDL_Surface * surface,
<                                                     SDL_BlendMode *blendMode);
< 
< /**
<  *  Sets the clipping rectangle for the destination surface in a blit.
<  *
<  *  If the clip rectangle is NULL, clipping will be disabled.
<  *
<  *  If the clip rectangle doesn't intersect the surface, the function will
<  *  return SDL_FALSE and blits will be completely clipped.  Otherwise the
<  *  function returns SDL_TRUE and blits to the surface will be clipped to
<  *  the intersection of the surface area and the clipping rectangle.
<  *
<  *  Note that blits are automatically clipped to the edges of the source
<  *  and destination surfaces.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_SetClipRect(SDL_Surface * surface,
<                                                  const SDL_Rect * rect);
< 
< /**
<  *  Gets the clipping rectangle for the destination surface in a blit.
<  *
<  *  \c rect must be a pointer to a valid rectangle which will be filled
<  *  with the correct values.
<  */
< extern DECLSPEC void SDLCALL SDL_GetClipRect(SDL_Surface * surface,
<                                              SDL_Rect * rect);
< 
< /**
<  *  Creates a new surface of the specified format, and then copies and maps
<  *  the given surface to it so the blit of the converted surface will be as
<  *  fast as possible.  If this function fails, it returns NULL.
<  *
<  *  The \c flags parameter is passed to SDL_CreateRGBSurface() and has those
<  *  semantics.  You can also pass ::SDL_RLEACCEL in the flags parameter and
<  *  SDL will try to RLE accelerate colorkey and alpha blits in the resulting
<  *  surface.
<  */
< extern DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurface
<     (SDL_Surface * src, const SDL_PixelFormat * fmt, Uint32 flags);
< extern DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurfaceFormat
<     (SDL_Surface * src, Uint32 pixel_format, Uint32 flags);
< 
< /**
<  * \brief Copy a block of pixels of one format to another format
<  *
<  *  \return 0 on success, or -1 if there was an error
<  */
< extern DECLSPEC int SDLCALL SDL_ConvertPixels(int width, int height,
<                                               Uint32 src_format,
<                                               const void * src, int src_pitch,
<                                               Uint32 dst_format,
<                                               void * dst, int dst_pitch);
< 
< /**
<  *  Performs a fast fill of the given rectangle with \c color.
<  *
<  *  If \c rect is NULL, the whole surface will be filled with \c color.
<  *
<  *  The color should be a pixel of the format used by the surface, and
<  *  can be generated by the SDL_MapRGB() function.
<  *
<  *  \return 0 on success, or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_FillRect
<     (SDL_Surface * dst, const SDL_Rect * rect, Uint32 color);
< extern DECLSPEC int SDLCALL SDL_FillRects
<     (SDL_Surface * dst, const SDL_Rect * rects, int count, Uint32 color);
< 
< /**
<  *  Performs a fast blit from the source surface to the destination surface.
<  *
<  *  This assumes that the source and destination rectangles are
<  *  the same size.  If either \c srcrect or \c dstrect are NULL, the entire
<  *  surface (\c src or \c dst) is copied.  The final blit rectangles are saved
<  *  in \c srcrect and \c dstrect after all clipping is performed.
<  *
<  *  \return If the blit is successful, it returns 0, otherwise it returns -1.
<  *
<  *  The blit function should not be called on a locked surface.
<  *
<  *  The blit semantics for surfaces with and without blending and colorkey
<  *  are defined as follows:
<  *  \verbatim
<     RGBA->RGB:
<       Source surface blend mode set to SDL_BLENDMODE_BLEND:
<         alpha-blend (using the source alpha-channel and per-surface alpha)
<         SDL_SRCCOLORKEY ignored.
<       Source surface blend mode set to SDL_BLENDMODE_NONE:
<         copy RGB.
<         if SDL_SRCCOLORKEY set, only copy the pixels matching the
<         RGB values of the source color key, ignoring alpha in the
<         comparison.
< 
<     RGB->RGBA:
<       Source surface blend mode set to SDL_BLENDMODE_BLEND:
<         alpha-blend (using the source per-surface alpha)
<       Source surface blend mode set to SDL_BLENDMODE_NONE:
<         copy RGB, set destination alpha to source per-surface alpha value.
<       both:
<         if SDL_SRCCOLORKEY set, only copy the pixels matching the
<         source color key.
< 
<     RGBA->RGBA:
<       Source surface blend mode set to SDL_BLENDMODE_BLEND:
<         alpha-blend (using the source alpha-channel and per-surface alpha)
<         SDL_SRCCOLORKEY ignored.
<       Source surface blend mode set to SDL_BLENDMODE_NONE:
<         copy all of RGBA to the destination.
<         if SDL_SRCCOLORKEY set, only copy the pixels matching the
<         RGB values of the source color key, ignoring alpha in the
<         comparison.
< 
<     RGB->RGB:
<       Source surface blend mode set to SDL_BLENDMODE_BLEND:
<         alpha-blend (using the source per-surface alpha)
<       Source surface blend mode set to SDL_BLENDMODE_NONE:
<         copy RGB.
<       both:
<         if SDL_SRCCOLORKEY set, only copy the pixels matching the
<         source color key.
<     \endverbatim
<  *
<  *  You should call SDL_BlitSurface() unless you know exactly how SDL
<  *  blitting works internally and how to use the other blit functions.
<  */
< #define SDL_BlitSurface SDL_UpperBlit
< 
< /**
<  *  This is the public blit function, SDL_BlitSurface(), and it performs
<  *  rectangle validation and clipping before passing it to SDL_LowerBlit()
<  */
< extern DECLSPEC int SDLCALL SDL_UpperBlit
<     (SDL_Surface * src, const SDL_Rect * srcrect,
<      SDL_Surface * dst, SDL_Rect * dstrect);
< 
< /**
<  *  This is a semi-private blit function and it performs low-level surface
<  *  blitting only.
<  */
< extern DECLSPEC int SDLCALL SDL_LowerBlit
<     (SDL_Surface * src, SDL_Rect * srcrect,
<      SDL_Surface * dst, SDL_Rect * dstrect);
< 
< /**
<  *  \brief Perform a fast, low quality, stretch blit between two surfaces of the
<  *         same pixel format.
<  *
<  *  \note This function uses a static buffer, and is not thread-safe.
<  */
< extern DECLSPEC int SDLCALL SDL_SoftStretch(SDL_Surface * src,
<                                             const SDL_Rect * srcrect,
<                                             SDL_Surface * dst,
<                                             const SDL_Rect * dstrect);
< 
< #define SDL_BlitScaled SDL_UpperBlitScaled
< 
< /**
<  *  This is the public scaled blit function, SDL_BlitScaled(), and it performs
<  *  rectangle validation and clipping before passing it to SDL_LowerBlitScaled()
<  */
< extern DECLSPEC int SDLCALL SDL_UpperBlitScaled
<     (SDL_Surface * src, const SDL_Rect * srcrect,
<     SDL_Surface * dst, SDL_Rect * dstrect);
< 
< /**
<  *  This is a semi-private blit function and it performs low-level surface
<  *  scaled blitting only.
<  */
< extern DECLSPEC int SDLCALL SDL_LowerBlitScaled
<     (SDL_Surface * src, SDL_Rect * srcrect,
<     SDL_Surface * dst, SDL_Rect * dstrect);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_surface_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_surface.h
>  *
>  *  Header file for ::SDL_Surface definition and management functions.
>  */
> 
> #ifndef _SDL_surface_h
> #define _SDL_surface_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_pixels.h"
> #include "SDL_rect.h"
> #include "SDL_blendmode.h"
> #include "SDL_rwops.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \name Surface flags
>  *
>  *  These are the currently supported flags for the ::SDL_Surface.
>  *
>  *  \internal
>  *  Used internally (read-only).
>  */
> /*@{*/
> #define SDL_SWSURFACE       0           /**< Just here for compatibility */
> #define SDL_PREALLOC        0x00000001  /**< Surface uses preallocated memory */
> #define SDL_RLEACCEL        0x00000002  /**< Surface is RLE encoded */
> #define SDL_DONTFREE        0x00000004  /**< Surface is referenced internally */
> /*@}*//*Surface flags*/
> 
> /**
>  *  Evaluates to true if the surface needs to be locked before access.
>  */
> #define SDL_MUSTLOCK(S) (((S)->flags & SDL_RLEACCEL) != 0)
> 
> /**
>  * \brief A collection of pixels used in software blitting.
>  *
>  * \note  This structure should be treated as read-only, except for \c pixels,
>  *        which, if not NULL, contains the raw pixel data for the surface.
>  */
> typedef struct SDL_Surface
> {
>     Uint32 flags;               /**< Read-only */
>     SDL_PixelFormat *format;    /**< Read-only */
>     int w, h;                   /**< Read-only */
>     int pitch;                  /**< Read-only */
>     void *pixels;               /**< Read-write */
> 
>     /** Application data associated with the surface */
>     void *userdata;             /**< Read-write */
> 
>     /** information needed for surfaces requiring locks */
>     int locked;                 /**< Read-only */
>     void *lock_data;            /**< Read-only */
> 
>     /** clipping information */
>     SDL_Rect clip_rect;         /**< Read-only */
> 
>     /** info for fast blit mapping to other surfaces */
>     struct SDL_BlitMap *map;    /**< Private */
> 
>     /** Reference count -- used when freeing surface */
>     int refcount;               /**< Read-mostly */
> } SDL_Surface;
> 
> /**
>  * \brief The type of function used for surface blitting functions.
>  */
> typedef int (*SDL_blit) (struct SDL_Surface * src, SDL_Rect * srcrect,
>                          struct SDL_Surface * dst, SDL_Rect * dstrect);
> 
> /**
>  *  Allocate and free an RGB surface.
>  *
>  *  If the depth is 4 or 8 bits, an empty palette is allocated for the surface.
>  *  If the depth is greater than 8 bits, the pixel format is set using the
>  *  flags '[RGB]mask'.
>  *
>  *  If the function runs out of memory, it will return NULL.
>  *
>  *  \param flags The \c flags are obsolete and should be set to 0.
>  *  \param width The width in pixels of the surface to create.
>  *  \param height The height in pixels of the surface to create.
>  *  \param depth The depth in bits of the surface to create.
>  *  \param Rmask The red mask of the surface to create.
>  *  \param Gmask The green mask of the surface to create.
>  *  \param Bmask The blue mask of the surface to create.
>  *  \param Amask The alpha mask of the surface to create.
>  */
> extern DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurface
>     (Uint32 flags, int width, int height, int depth,
>      Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
> extern DECLSPEC SDL_Surface *SDLCALL SDL_CreateRGBSurfaceFrom(void *pixels,
>                                                               int width,
>                                                               int height,
>                                                               int depth,
>                                                               int pitch,
>                                                               Uint32 Rmask,
>                                                               Uint32 Gmask,
>                                                               Uint32 Bmask,
>                                                               Uint32 Amask);
> extern DECLSPEC void SDLCALL SDL_FreeSurface(SDL_Surface * surface);
> 
> /**
>  *  \brief Set the palette used by a surface.
>  *
>  *  \return 0, or -1 if the surface format doesn't use a palette.
>  *
>  *  \note A single palette can be shared with many surfaces.
>  */
> extern DECLSPEC int SDLCALL SDL_SetSurfacePalette(SDL_Surface * surface,
>                                                   SDL_Palette * palette);
> 
> /**
>  *  \brief Sets up a surface for directly accessing the pixels.
>  *
>  *  Between calls to SDL_LockSurface() / SDL_UnlockSurface(), you can write
>  *  to and read from \c surface->pixels, using the pixel format stored in
>  *  \c surface->format.  Once you are done accessing the surface, you should
>  *  use SDL_UnlockSurface() to release it.
>  *
>  *  Not all surfaces require locking.  If SDL_MUSTLOCK(surface) evaluates
>  *  to 0, then you can read and write to the surface at any time, and the
>  *  pixel format of the surface will not change.
>  *
>  *  No operating system or library calls should be made between lock/unlock
>  *  pairs, as critical system locks may be held during this time.
>  *
>  *  SDL_LockSurface() returns 0, or -1 if the surface couldn't be locked.
>  *
>  *  \sa SDL_UnlockSurface()
>  */
> extern DECLSPEC int SDLCALL SDL_LockSurface(SDL_Surface * surface);
> /** \sa SDL_LockSurface() */
> extern DECLSPEC void SDLCALL SDL_UnlockSurface(SDL_Surface * surface);
> 
> /**
>  *  Load a surface from a seekable SDL data stream (memory or file).
>  *
>  *  If \c freesrc is non-zero, the stream will be closed after being read.
>  *
>  *  The new surface should be freed with SDL_FreeSurface().
>  *
>  *  \return the new surface, or NULL if there was an error.
>  */
> extern DECLSPEC SDL_Surface *SDLCALL SDL_LoadBMP_RW(SDL_RWops * src,
>                                                     int freesrc);
> 
> /**
>  *  Load a surface from a file.
>  *
>  *  Convenience macro.
>  */
> #define SDL_LoadBMP(file)   SDL_LoadBMP_RW(SDL_RWFromFile(file, "rb"), 1)
> 
> /**
>  *  Save a surface to a seekable SDL data stream (memory or file).
>  *
>  *  If \c freedst is non-zero, the stream will be closed after being written.
>  *
>  *  \return 0 if successful or -1 if there was an error.
>  */
> extern DECLSPEC int SDLCALL SDL_SaveBMP_RW
>     (SDL_Surface * surface, SDL_RWops * dst, int freedst);
> 
> /**
>  *  Save a surface to a file.
>  *
>  *  Convenience macro.
>  */
> #define SDL_SaveBMP(surface, file) \
>         SDL_SaveBMP_RW(surface, SDL_RWFromFile(file, "wb"), 1)
> 
> /**
>  *  \brief Sets the RLE acceleration hint for a surface.
>  *
>  *  \return 0 on success, or -1 if the surface is not valid
>  *
>  *  \note If RLE is enabled, colorkey and alpha blending blits are much faster,
>  *        but the surface must be locked before directly accessing the pixels.
>  */
> extern DECLSPEC int SDLCALL SDL_SetSurfaceRLE(SDL_Surface * surface,
>                                               int flag);
> 
> /**
>  *  \brief Sets the color key (transparent pixel) in a blittable surface.
>  *
>  *  \param surface The surface to update
>  *  \param flag Non-zero to enable colorkey and 0 to disable colorkey
>  *  \param key The transparent pixel in the native surface format
>  *
>  *  \return 0 on success, or -1 if the surface is not valid
>  *
>  *  You can pass SDL_RLEACCEL to enable RLE accelerated blits.
>  */
> extern DECLSPEC int SDLCALL SDL_SetColorKey(SDL_Surface * surface,
>                                             int flag, Uint32 key);
> 
> /**
>  *  \brief Gets the color key (transparent pixel) in a blittable surface.
>  *
>  *  \param surface The surface to update
>  *  \param key A pointer filled in with the transparent pixel in the native
>  *             surface format
>  *
>  *  \return 0 on success, or -1 if the surface is not valid or colorkey is not
>  *          enabled.
>  */
> extern DECLSPEC int SDLCALL SDL_GetColorKey(SDL_Surface * surface,
>                                             Uint32 * key);
> 
> /**
>  *  \brief Set an additional color value used in blit operations.
>  *
>  *  \param surface The surface to update.
>  *  \param r The red color value multiplied into blit operations.
>  *  \param g The green color value multiplied into blit operations.
>  *  \param b The blue color value multiplied into blit operations.
>  *
>  *  \return 0 on success, or -1 if the surface is not valid.
>  *
>  *  \sa SDL_GetSurfaceColorMod()
>  */
> extern DECLSPEC int SDLCALL SDL_SetSurfaceColorMod(SDL_Surface * surface,
>                                                    Uint8 r, Uint8 g, Uint8 b);
> 
> 
> /**
>  *  \brief Get the additional color value used in blit operations.
>  *
>  *  \param surface The surface to query.
>  *  \param r A pointer filled in with the current red color value.
>  *  \param g A pointer filled in with the current green color value.
>  *  \param b A pointer filled in with the current blue color value.
>  *
>  *  \return 0 on success, or -1 if the surface is not valid.
>  *
>  *  \sa SDL_SetSurfaceColorMod()
>  */
> extern DECLSPEC int SDLCALL SDL_GetSurfaceColorMod(SDL_Surface * surface,
>                                                    Uint8 * r, Uint8 * g,
>                                                    Uint8 * b);
> 
> /**
>  *  \brief Set an additional alpha value used in blit operations.
>  *
>  *  \param surface The surface to update.
>  *  \param alpha The alpha value multiplied into blit operations.
>  *
>  *  \return 0 on success, or -1 if the surface is not valid.
>  *
>  *  \sa SDL_GetSurfaceAlphaMod()
>  */
> extern DECLSPEC int SDLCALL SDL_SetSurfaceAlphaMod(SDL_Surface * surface,
>                                                    Uint8 alpha);
> 
> /**
>  *  \brief Get the additional alpha value used in blit operations.
>  *
>  *  \param surface The surface to query.
>  *  \param alpha A pointer filled in with the current alpha value.
>  *
>  *  \return 0 on success, or -1 if the surface is not valid.
>  *
>  *  \sa SDL_SetSurfaceAlphaMod()
>  */
> extern DECLSPEC int SDLCALL SDL_GetSurfaceAlphaMod(SDL_Surface * surface,
>                                                    Uint8 * alpha);
> 
> /**
>  *  \brief Set the blend mode used for blit operations.
>  *
>  *  \param surface The surface to update.
>  *  \param blendMode ::SDL_BlendMode to use for blit blending.
>  *
>  *  \return 0 on success, or -1 if the parameters are not valid.
>  *
>  *  \sa SDL_GetSurfaceBlendMode()
>  */
> extern DECLSPEC int SDLCALL SDL_SetSurfaceBlendMode(SDL_Surface * surface,
>                                                     SDL_BlendMode blendMode);
> 
> /**
>  *  \brief Get the blend mode used for blit operations.
>  *
>  *  \param surface   The surface to query.
>  *  \param blendMode A pointer filled in with the current blend mode.
>  *
>  *  \return 0 on success, or -1 if the surface is not valid.
>  *
>  *  \sa SDL_SetSurfaceBlendMode()
>  */
> extern DECLSPEC int SDLCALL SDL_GetSurfaceBlendMode(SDL_Surface * surface,
>                                                     SDL_BlendMode *blendMode);
> 
> /**
>  *  Sets the clipping rectangle for the destination surface in a blit.
>  *
>  *  If the clip rectangle is NULL, clipping will be disabled.
>  *
>  *  If the clip rectangle doesn't intersect the surface, the function will
>  *  return SDL_FALSE and blits will be completely clipped.  Otherwise the
>  *  function returns SDL_TRUE and blits to the surface will be clipped to
>  *  the intersection of the surface area and the clipping rectangle.
>  *
>  *  Note that blits are automatically clipped to the edges of the source
>  *  and destination surfaces.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_SetClipRect(SDL_Surface * surface,
>                                                  const SDL_Rect * rect);
> 
> /**
>  *  Gets the clipping rectangle for the destination surface in a blit.
>  *
>  *  \c rect must be a pointer to a valid rectangle which will be filled
>  *  with the correct values.
>  */
> extern DECLSPEC void SDLCALL SDL_GetClipRect(SDL_Surface * surface,
>                                              SDL_Rect * rect);
> 
> /**
>  *  Creates a new surface of the specified format, and then copies and maps
>  *  the given surface to it so the blit of the converted surface will be as
>  *  fast as possible.  If this function fails, it returns NULL.
>  *
>  *  The \c flags parameter is passed to SDL_CreateRGBSurface() and has those
>  *  semantics.  You can also pass ::SDL_RLEACCEL in the flags parameter and
>  *  SDL will try to RLE accelerate colorkey and alpha blits in the resulting
>  *  surface.
>  */
> extern DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurface
>     (SDL_Surface * src, SDL_PixelFormat * fmt, Uint32 flags);
> extern DECLSPEC SDL_Surface *SDLCALL SDL_ConvertSurfaceFormat
>     (SDL_Surface * src, Uint32 pixel_format, Uint32 flags);
> 
> /**
>  * \brief Copy a block of pixels of one format to another format
>  *
>  *  \return 0 on success, or -1 if there was an error
>  */
> extern DECLSPEC int SDLCALL SDL_ConvertPixels(int width, int height,
>                                               Uint32 src_format,
>                                               const void * src, int src_pitch,
>                                               Uint32 dst_format,
>                                               void * dst, int dst_pitch);
> 
> /**
>  *  Performs a fast fill of the given rectangle with \c color.
>  *
>  *  If \c rect is NULL, the whole surface will be filled with \c color.
>  *
>  *  The color should be a pixel of the format used by the surface, and
>  *  can be generated by the SDL_MapRGB() function.
>  *
>  *  \return 0 on success, or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_FillRect
>     (SDL_Surface * dst, const SDL_Rect * rect, Uint32 color);
> extern DECLSPEC int SDLCALL SDL_FillRects
>     (SDL_Surface * dst, const SDL_Rect * rects, int count, Uint32 color);
> 
> /**
>  *  Performs a fast blit from the source surface to the destination surface.
>  *
>  *  This assumes that the source and destination rectangles are
>  *  the same size.  If either \c srcrect or \c dstrect are NULL, the entire
>  *  surface (\c src or \c dst) is copied.  The final blit rectangles are saved
>  *  in \c srcrect and \c dstrect after all clipping is performed.
>  *
>  *  \return If the blit is successful, it returns 0, otherwise it returns -1.
>  *
>  *  The blit function should not be called on a locked surface.
>  *
>  *  The blit semantics for surfaces with and without blending and colorkey
>  *  are defined as follows:
>  *  \verbatim
>     RGBA->RGB:
>       Source surface blend mode set to SDL_BLENDMODE_BLEND:
>         alpha-blend (using the source alpha-channel and per-surface alpha)
>         SDL_SRCCOLORKEY ignored.
>       Source surface blend mode set to SDL_BLENDMODE_NONE:
>         copy RGB.
>         if SDL_SRCCOLORKEY set, only copy the pixels matching the
>         RGB values of the source color key, ignoring alpha in the
>         comparison.
> 
>     RGB->RGBA:
>       Source surface blend mode set to SDL_BLENDMODE_BLEND:
>         alpha-blend (using the source per-surface alpha)
>       Source surface blend mode set to SDL_BLENDMODE_NONE:
>         copy RGB, set destination alpha to source per-surface alpha value.
>       both:
>         if SDL_SRCCOLORKEY set, only copy the pixels matching the
>         source color key.
> 
>     RGBA->RGBA:
>       Source surface blend mode set to SDL_BLENDMODE_BLEND:
>         alpha-blend (using the source alpha-channel and per-surface alpha)
>         SDL_SRCCOLORKEY ignored.
>       Source surface blend mode set to SDL_BLENDMODE_NONE:
>         copy all of RGBA to the destination.
>         if SDL_SRCCOLORKEY set, only copy the pixels matching the
>         RGB values of the source color key, ignoring alpha in the
>         comparison.
> 
>     RGB->RGB:
>       Source surface blend mode set to SDL_BLENDMODE_BLEND:
>         alpha-blend (using the source per-surface alpha)
>       Source surface blend mode set to SDL_BLENDMODE_NONE:
>         copy RGB.
>       both:
>         if SDL_SRCCOLORKEY set, only copy the pixels matching the
>         source color key.
>     \endverbatim
>  *
>  *  You should call SDL_BlitSurface() unless you know exactly how SDL
>  *  blitting works internally and how to use the other blit functions.
>  */
> #define SDL_BlitSurface SDL_UpperBlit
> 
> /**
>  *  This is the public blit function, SDL_BlitSurface(), and it performs
>  *  rectangle validation and clipping before passing it to SDL_LowerBlit()
>  */
> extern DECLSPEC int SDLCALL SDL_UpperBlit
>     (SDL_Surface * src, const SDL_Rect * srcrect,
>      SDL_Surface * dst, SDL_Rect * dstrect);
> 
> /**
>  *  This is a semi-private blit function and it performs low-level surface
>  *  blitting only.
>  */
> extern DECLSPEC int SDLCALL SDL_LowerBlit
>     (SDL_Surface * src, SDL_Rect * srcrect,
>      SDL_Surface * dst, SDL_Rect * dstrect);
> 
> /**
>  *  \brief Perform a fast, low quality, stretch blit between two surfaces of the
>  *         same pixel format.
>  *
>  *  \note This function uses a static buffer, and is not thread-safe.
>  */
> extern DECLSPEC int SDLCALL SDL_SoftStretch(SDL_Surface * src,
>                                             const SDL_Rect * srcrect,
>                                             SDL_Surface * dst,
>                                             const SDL_Rect * dstrect);
> 
> #define SDL_BlitScaled SDL_UpperBlitScaled
> 
> /**
>  *  This is the public scaled blit function, SDL_BlitScaled(), and it performs
>  *  rectangle validation and clipping before passing it to SDL_LowerBlitScaled()
>  */
> extern DECLSPEC int SDLCALL SDL_UpperBlitScaled
>     (SDL_Surface * src, const SDL_Rect * srcrect,
>     SDL_Surface * dst, SDL_Rect * dstrect);
> 
> /**
>  *  This is a semi-private blit function and it performs low-level surface
>  *  scaled blitting only.
>  */
> extern DECLSPEC int SDLCALL SDL_LowerBlitScaled
>     (SDL_Surface * src, SDL_Rect * srcrect,
>     SDL_Surface * dst, SDL_Rect * dstrect);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_surface_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_system.h ../android-sdl/jni/SDL2/include/SDL_system.h
1,121c1,105
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_system.h
<  *
<  *  Include file for platform specific SDL API functions
<  */
< 
< #ifndef _SDL_system_h
< #define _SDL_system_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_keyboard.h"
< #include "SDL_render.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< 
< /* Platform specific functions for Windows */
< #ifdef __WIN32__
< 
< /* Returns the D3D9 adapter index that matches the specified display index.
<    This adapter index can be passed to IDirect3D9::CreateDevice and controls
<    on which monitor a full screen application will appear.
< */
< extern DECLSPEC int SDLCALL SDL_Direct3D9GetAdapterIndex( int displayIndex );
< 
< /* Returns the D3D device associated with a renderer, or NULL if it's not a D3D renderer.
<    Once you are done using the device, you should release it to avoid a resource leak.
<  */
< typedef struct IDirect3DDevice9 IDirect3DDevice9;
< extern DECLSPEC IDirect3DDevice9* SDLCALL SDL_RenderGetD3D9Device(SDL_Renderer * renderer);
< 
< #endif /* __WIN32__ */
< 
< 
< /* Platform specific functions for iOS */
< #if defined(__IPHONEOS__) && __IPHONEOS__
< 
< extern DECLSPEC int SDLCALL SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, void (*callback)(void*), void *callbackParam);
< extern DECLSPEC void SDLCALL SDL_iPhoneSetEventPump(SDL_bool enabled);
< 
< #endif /* __IPHONEOS__ */
< 
< 
< /* Platform specific functions for Android */
< #if defined(__ANDROID__) && __ANDROID__
< 
< /* Get the JNI environment for the current thread
<    This returns JNIEnv*, but the prototype is void* so we don't need jni.h
<  */
< extern DECLSPEC void * SDLCALL SDL_AndroidGetJNIEnv();
< 
< /* Get the SDL Activity object for the application
<    This returns jobject, but the prototype is void* so we don't need jni.h
<    The jobject returned by SDL_AndroidGetActivity is a local reference.
<    It is the caller's responsibility to properly release it
<    (using env->Push/PopLocalFrame or manually with env->DeleteLocalRef)
<  */
< extern DECLSPEC void * SDLCALL SDL_AndroidGetActivity();
< 
< /* See the official Android developer guide for more information:
<    http://developer.android.com/guide/topics/data/data-storage.html
< */
< #define SDL_ANDROID_EXTERNAL_STORAGE_READ   0x01
< #define SDL_ANDROID_EXTERNAL_STORAGE_WRITE  0x02
< 
< /* Get the path used for internal storage for this application.
<    This path is unique to your application and cannot be written to
<    by other applications.
<  */
< extern DECLSPEC const char * SDLCALL SDL_AndroidGetInternalStoragePath();
< 
< /* Get the current state of external storage, a bitmask of these values:
<     SDL_ANDROID_EXTERNAL_STORAGE_READ
<     SDL_ANDROID_EXTERNAL_STORAGE_WRITE
<    If external storage is currently unavailable, this will return 0.
< */
< extern DECLSPEC int SDLCALL SDL_AndroidGetExternalStorageState();
< 
< /* Get the path used for external storage for this application.
<    This path is unique to your application, but is public and can be
<    written to by other applications.
<  */
< extern DECLSPEC const char * SDLCALL SDL_AndroidGetExternalStoragePath();
< 
< #endif /* __ANDROID__ */
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_system_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_system.h
>  *
>  *  Include file for platform specific SDL API functions
>  */
> 
> #ifndef _SDL_system_h
> #define _SDL_system_h
> 
> #include "SDL_stdinc.h"
> 
> #if defined(__IPHONEOS__) && __IPHONEOS__
> #include "SDL_video.h"
> #include "SDL_keyboard.h"
> #endif
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* Platform specific functions for iOS */
> #if defined(__IPHONEOS__) && __IPHONEOS__
> 
> extern DECLSPEC int SDLCALL SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, void (*callback)(void*), void *callbackParam);
> extern DECLSPEC void SDLCALL SDL_iPhoneSetEventPump(SDL_bool enabled);
> 
> #endif /* __IPHONEOS__ */
> 
> 
> /* Platform specific functions for Android */
> #if defined(__ANDROID__) && __ANDROID__
> 
> /* Get the JNI environment for the current thread
>    This returns JNIEnv*, but the prototype is void* so we don't need jni.h
>  */
> extern DECLSPEC void * SDLCALL SDL_AndroidGetJNIEnv();
> 
> /* Get the SDL Activity object for the application
>    This returns jobject, but the prototype is void* so we don't need jni.h
>    The jobject returned by SDL_AndroidGetActivity is a local reference.
>    It is the caller's responsibility to properly release it
>    (using env->Push/PopLocalFrame or manually with env->DeleteLocalRef)
>  */
> extern DECLSPEC void * SDLCALL SDL_AndroidGetActivity();
> 
> /* See the official Android developer guide for more information:
>    http://developer.android.com/guide/topics/data/data-storage.html
> */
> #define SDL_ANDROID_EXTERNAL_STORAGE_READ   0x01
> #define SDL_ANDROID_EXTERNAL_STORAGE_WRITE  0x02
> 
> /* Get the path used for internal storage for this application.
>    This path is unique to your application and cannot be written to
>    by other applications.
>  */
> extern DECLSPEC const char * SDLCALL SDL_AndroidGetInternalStoragePath();
> 
> /* Get the current state of external storage, a bitmask of these values:
>     SDL_ANDROID_EXTERNAL_STORAGE_READ
>     SDL_ANDROID_EXTERNAL_STORAGE_WRITE
>    If external storage is currently unavailable, this will return 0.
> */
> extern DECLSPEC int SDLCALL SDL_AndroidGetExternalStorageState();
> 
> /* Get the path used for external storage for this application.
>    This path is unique to your application, but is public and can be
>    written to by other applications.
>  */
> extern DECLSPEC const char * SDLCALL SDL_AndroidGetExternalStoragePath();
> 
> #endif /* __ANDROID__ */
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_system_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_syswm.h ../android-sdl/jni/SDL2/include/SDL_syswm.h
1,237c1,237
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_syswm.h
<  *
<  *  Include file for SDL custom system window manager hooks.
<  */
< 
< #ifndef _SDL_syswm_h
< #define _SDL_syswm_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_video.h"
< #include "SDL_version.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \file SDL_syswm.h
<  *
<  *  Your application has access to a special type of event ::SDL_SYSWMEVENT,
<  *  which contains window-manager specific information and arrives whenever
<  *  an unhandled window event occurs.  This event is ignored by default, but
<  *  you can enable it with SDL_EventState().
<  */
< #ifdef SDL_PROTOTYPES_ONLY
< struct SDL_SysWMinfo;
< #else
< 
< #if defined(SDL_VIDEO_DRIVER_WINDOWS)
< #define WIN32_LEAN_AND_MEAN
< #include <windows.h>
< #endif
< 
< /* This is the structure for custom window manager events */
< #if defined(SDL_VIDEO_DRIVER_X11)
< #if defined(__APPLE__) && defined(__MACH__)
< /* conflicts with Quickdraw.h */
< #define Cursor X11Cursor
< #endif
< 
< #include <X11/Xlib.h>
< #include <X11/Xatom.h>
< 
< #if defined(__APPLE__) && defined(__MACH__)
< /* matches the re-define above */
< #undef Cursor
< #endif
< 
< #endif /* defined(SDL_VIDEO_DRIVER_X11) */
< 
< #if defined(SDL_VIDEO_DRIVER_DIRECTFB)
< #include <directfb.h>
< #endif
< 
< #if defined(SDL_VIDEO_DRIVER_COCOA)
< #ifdef __OBJC__
< #include <Cocoa/Cocoa.h>
< #else
< typedef struct _NSWindow NSWindow;
< #endif
< #endif
< 
< #if defined(SDL_VIDEO_DRIVER_UIKIT)
< #ifdef __OBJC__
< #include <UIKit/UIKit.h>
< #else
< typedef struct _UIWindow UIWindow;
< #endif
< #endif
< 
< /**
<  *  These are the various supported windowing subsystems
<  */
< typedef enum
< {
<     SDL_SYSWM_UNKNOWN,
<     SDL_SYSWM_WINDOWS,
<     SDL_SYSWM_X11,
<     SDL_SYSWM_DIRECTFB,
<     SDL_SYSWM_COCOA,
<     SDL_SYSWM_UIKIT,
< } SDL_SYSWM_TYPE;
< 
< /**
<  *  The custom event structure.
<  */
< struct SDL_SysWMmsg
< {
<     SDL_version version;
<     SDL_SYSWM_TYPE subsystem;
<     union
<     {
< #if defined(SDL_VIDEO_DRIVER_WINDOWS)
<         struct {
<             HWND hwnd;                  /**< The window for the message */
<             UINT msg;                   /**< The type of message */
<             WPARAM wParam;              /**< WORD message parameter */
<             LPARAM lParam;              /**< LONG message parameter */
<         } win;
< #endif
< #if defined(SDL_VIDEO_DRIVER_X11)
<         struct {
<             XEvent event;
<         } x11;
< #endif
< #if defined(SDL_VIDEO_DRIVER_DIRECTFB)
<         struct {
<             DFBEvent event;
<         } dfb;
< #endif
< #if defined(SDL_VIDEO_DRIVER_COCOA)
<         struct
<         {
<             /* No Cocoa window events yet */
<         } cocoa;
< #endif
< #if defined(SDL_VIDEO_DRIVER_UIKIT)
<         struct
<         {
<             /* No UIKit window events yet */
<         } uikit;
< #endif
<         /* Can't have an empty union */
<         int dummy;
<     } msg;
< };
< 
< /**
<  *  The custom window manager information structure.
<  *
<  *  When this structure is returned, it holds information about which
<  *  low level system it is using, and will be one of SDL_SYSWM_TYPE.
<  */
< struct SDL_SysWMinfo
< {
<     SDL_version version;
<     SDL_SYSWM_TYPE subsystem;
<     union
<     {
< #if defined(SDL_VIDEO_DRIVER_WINDOWS)
<         struct
<         {
<             HWND window;                /**< The window handle */
<         } win;
< #endif
< #if defined(SDL_VIDEO_DRIVER_X11)
<         struct
<         {
<             Display *display;           /**< The X11 display */
<             Window window;              /**< The X11 window */
<         } x11;
< #endif
< #if defined(SDL_VIDEO_DRIVER_DIRECTFB)
<         struct
<         {
<             IDirectFB *dfb;             /**< The directfb main interface */
<             IDirectFBWindow *window;    /**< The directfb window handle */
<             IDirectFBSurface *surface;  /**< The directfb client surface */
<         } dfb;
< #endif
< #if defined(SDL_VIDEO_DRIVER_COCOA)
<         struct
<         {
<             NSWindow *window;           /* The Cocoa window */
<         } cocoa;
< #endif
< #if defined(SDL_VIDEO_DRIVER_UIKIT)
<         struct
<         {
<             UIWindow *window;           /* The UIKit window */
<         } uikit;
< #endif
<         /* Can't have an empty union */
<         int dummy;
<     } info;
< };
< 
< #endif /* SDL_PROTOTYPES_ONLY */
< 
< typedef struct SDL_SysWMinfo SDL_SysWMinfo;
< 
< /* Function prototypes */
< /**
<  *  \brief This function allows access to driver-dependent window information.
<  *
<  *  \param window The window about which information is being requested
<  *  \param info This structure must be initialized with the SDL version, and is
<  *              then filled in with information about the given window.
<  *
<  *  \return SDL_TRUE if the function is implemented and the version member of
<  *          the \c info struct is valid, SDL_FALSE otherwise.
<  *
<  *  You typically use this function like this:
<  *  \code
<  *  SDL_SysWMinfo info;
<  *  SDL_VERSION(&info.version);
<  *  if ( SDL_GetWindowWMInfo(window, &info) ) { ... }
<  *  \endcode
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_GetWindowWMInfo(SDL_Window * window,
<                                                      SDL_SysWMinfo * info);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_syswm_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_syswm.h
>  *
>  *  Include file for SDL custom system window manager hooks.
>  */
> 
> #ifndef _SDL_syswm_h
> #define _SDL_syswm_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_video.h"
> #include "SDL_version.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \file SDL_syswm.h
>  *
>  *  Your application has access to a special type of event ::SDL_SYSWMEVENT,
>  *  which contains window-manager specific information and arrives whenever
>  *  an unhandled window event occurs.  This event is ignored by default, but
>  *  you can enable it with SDL_EventState().
>  */
> #ifdef SDL_PROTOTYPES_ONLY
> struct SDL_SysWMinfo;
> #else
> 
> #if defined(SDL_VIDEO_DRIVER_WINDOWS)
> #define WIN32_LEAN_AND_MEAN
> #include <windows.h>
> #endif
> 
> /* This is the structure for custom window manager events */
> #if defined(SDL_VIDEO_DRIVER_X11)
> #if defined(__APPLE__) && defined(__MACH__)
> /* conflicts with Quickdraw.h */
> #define Cursor X11Cursor
> #endif
> 
> #include <X11/Xlib.h>
> #include <X11/Xatom.h>
> 
> #if defined(__APPLE__) && defined(__MACH__)
> /* matches the re-define above */
> #undef Cursor
> #endif
> 
> #endif /* defined(SDL_VIDEO_DRIVER_X11) */
> 
> #if defined(SDL_VIDEO_DRIVER_DIRECTFB)
> #include <directfb.h>
> #endif
> 
> #if defined(SDL_VIDEO_DRIVER_COCOA)
> #ifdef __OBJC__
> #include <Cocoa/Cocoa.h>
> #else
> typedef struct _NSWindow NSWindow;
> #endif
> #endif
> 
> #if defined(SDL_VIDEO_DRIVER_UIKIT)
> #ifdef __OBJC__
> #include <UIKit/UIKit.h>
> #else
> typedef struct _UIWindow UIWindow;
> #endif
> #endif
> 
> /**
>  *  These are the various supported windowing subsystems
>  */
> typedef enum
> {
>     SDL_SYSWM_UNKNOWN,
>     SDL_SYSWM_WINDOWS,
>     SDL_SYSWM_X11,
>     SDL_SYSWM_DIRECTFB,
>     SDL_SYSWM_COCOA,
>     SDL_SYSWM_UIKIT,
> } SDL_SYSWM_TYPE;
> 
> /**
>  *  The custom event structure.
>  */
> struct SDL_SysWMmsg
> {
>     SDL_version version;
>     SDL_SYSWM_TYPE subsystem;
>     union
>     {
> #if defined(SDL_VIDEO_DRIVER_WINDOWS)
>         struct {
>             HWND hwnd;                  /**< The window for the message */
>             UINT msg;                   /**< The type of message */
>             WPARAM wParam;              /**< WORD message parameter */
>             LPARAM lParam;              /**< LONG message parameter */
>         } win;
> #endif
> #if defined(SDL_VIDEO_DRIVER_X11)
>         struct {
>             XEvent event;
>         } x11;
> #endif
> #if defined(SDL_VIDEO_DRIVER_DIRECTFB)
>         struct {
>             DFBEvent event;
>         } dfb;
> #endif
> #if defined(SDL_VIDEO_DRIVER_COCOA)
>         struct
>         {
>             /* No Cocoa window events yet */
>         } cocoa;
> #endif
> #if defined(SDL_VIDEO_DRIVER_UIKIT)
>         struct
>         {
>             /* No UIKit window events yet */
>         } uikit;
> #endif
>         /* Can't have an empty union */
>         int dummy;
>     } msg;
> };
> 
> /**
>  *  The custom window manager information structure.
>  *
>  *  When this structure is returned, it holds information about which
>  *  low level system it is using, and will be one of SDL_SYSWM_TYPE.
>  */
> struct SDL_SysWMinfo
> {
>     SDL_version version;
>     SDL_SYSWM_TYPE subsystem;
>     union
>     {
> #if defined(SDL_VIDEO_DRIVER_WINDOWS)
>         struct
>         {
>             HWND window;                /**< The window handle */
>         } win;
> #endif
> #if defined(SDL_VIDEO_DRIVER_X11)
>         struct
>         {
>             Display *display;           /**< The X11 display */
>             Window window;              /**< The X11 window */
>         } x11;
> #endif
> #if defined(SDL_VIDEO_DRIVER_DIRECTFB)
>         struct
>         {
>             IDirectFB *dfb;             /**< The directfb main interface */
>             IDirectFBWindow *window;    /**< The directfb window handle */
>             IDirectFBSurface *surface;  /**< The directfb client surface */
>         } dfb;
> #endif
> #if defined(SDL_VIDEO_DRIVER_COCOA)
>         struct
>         {
>             NSWindow *window;           /* The Cocoa window */
>         } cocoa;
> #endif
> #if defined(SDL_VIDEO_DRIVER_UIKIT)
>         struct
>         {
>             UIWindow *window;           /* The UIKit window */
>         } uikit;
> #endif
>         /* Can't have an empty union */
>         int dummy;
>     } info;
> };
> 
> #endif /* SDL_PROTOTYPES_ONLY */
> 
> typedef struct SDL_SysWMinfo SDL_SysWMinfo;
> 
> /* Function prototypes */
> /**
>  *  \brief This function allows access to driver-dependent window information.
>  *
>  *  \param window The window about which information is being requested
>  *  \param info This structure must be initialized with the SDL version, and is
>  *              then filled in with information about the given window.
>  *
>  *  \return SDL_TRUE if the function is implemented and the version member of
>  *          the \c info struct is valid, SDL_FALSE otherwise.
>  *
>  *  You typically use this function like this:
>  *  \code
>  *  SDL_SysWMinfo info;
>  *  SDL_VERSION(&info.version);
>  *  if ( SDL_GetWindowWMInfo(window, &info) ) { ... }
>  *  \endcode
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_GetWindowWMInfo(SDL_Window * window,
>                                                      SDL_SysWMinfo * info);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_syswm_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test.h ../android-sdl/jni/SDL2/include/SDL_test.h
1,68c1,68
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< #ifndef _SDL_test_h
< #define _SDL_test_h
< 
< #include "SDL.h"
< #include "SDL_test_common.h"
< #include "SDL_test_font.h"
< #include "SDL_test_random.h"
< #include "SDL_test_fuzzer.h"
< #include "SDL_test_crc32.h"
< #include "SDL_test_md5.h"
< #include "SDL_test_log.h"
< #include "SDL_test_assert.h"
< #include "SDL_test_harness.h"
< #include "SDL_test_images.h"
< #include "SDL_test_compare.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* Global definitions */
< 
< /*
<  * Note: Maximum size of SDLTest log message is less than SDLs limit
<  * to ensure we can fit additional information such as the timestamp.
<  */
< #define SDLTEST_MAX_LOGMESSAGE_LENGTH   3584
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> #ifndef _SDL_test_h
> #define _SDL_test_h
> 
> #include "SDL.h"
> #include "SDL_test_common.h"
> #include "SDL_test_font.h"
> #include "SDL_test_random.h"
> #include "SDL_test_fuzzer.h"
> #include "SDL_test_crc32.h"
> #include "SDL_test_md5.h"
> #include "SDL_test_log.h"
> #include "SDL_test_assert.h"
> #include "SDL_test_harness.h"
> #include "SDL_test_images.h"
> #include "SDL_test_compare.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* Global definitions */
> 
> /*
>  * Note: Maximum size of SDLTest log message is less than SDLs limit
>  * to ensure we can fit additional information such as the timestamp.
>  */
> #define SDLTEST_MAX_LOGMESSAGE_LENGTH   3584
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_assert.h ../android-sdl/jni/SDL2/include/SDL_test_assert.h
1,105c1,105
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_assert.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
<  *
<  * Assert API for test code and test cases
<  *
<  */
< 
< #ifndef _SDL_test_assert_h
< #define _SDL_test_assert_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  * \brief Fails the assert.
<  */
< #define ASSERT_FAIL     0
< 
< /**
<  * \brief Passes the assert.
<  */
< #define ASSERT_PASS     1
< 
< /**
<  * \brief Assert that logs and break execution flow on failures.
<  *
<  * \param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).
<  * \param assertDescription Message to log with the assert describing it.
<  */
< void SDLTest_Assert(int assertCondition, const char *assertDescription, ...);
< 
< /**
<  * \brief Assert for test cases that logs but does not break execution flow on failures. Updates assertion counters.
<  *
<  * \param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).
<  * \param assertDescription Message to log with the assert describing it.
<  *
<  * \returns Returns the assertCondition so it can be used to externally to break execution flow if desired.
<  */
< int SDLTest_AssertCheck(int assertCondition, const char *assertDescription, ...);
< 
< /**
<  * \brief Explicitely pass without checking an assertion condition. Updates assertion counter.
<  *
<  * \param assertDescription Message to log with the assert describing it.
<  */
< void SDLTest_AssertPass(const char *assertDescription, ...);
< 
< /**
<  * \brief Resets the assert summary counters to zero.
<  */
< void SDLTest_ResetAssertSummary();
< 
< /**
<  * \brief Logs summary of all assertions (total, pass, fail) since last reset as INFO or ERROR.
<  */
< void SDLTest_LogAssertSummary();
< 
< 
< /**
<  * \brief Converts the current assert summary state to a test result.
<  *
<  * \returns TEST_RESULT_PASSED, TEST_RESULT_FAILED, or TEST_RESULT_NO_ASSERT
<  */
< int SDLTest_AssertSummaryToTestResult();
< 
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_assert_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_assert.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
>  *
>  * Assert API for test code and test cases
>  *
>  */
> 
> #ifndef _SDL_test_assert_h
> #define _SDL_test_assert_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  * \brief Fails the assert.
>  */
> #define ASSERT_FAIL     0
> 
> /**
>  * \brief Passes the assert.
>  */
> #define ASSERT_PASS     1
> 
> /**
>  * \brief Assert that logs and break execution flow on failures.
>  *
>  * \param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).
>  * \param assertDescription Message to log with the assert describing it.
>  */
> void SDLTest_Assert(int assertCondition, const char *assertDescription, ...);
> 
> /**
>  * \brief Assert for test cases that logs but does not break execution flow on failures. Updates assertion counters.
>  *
>  * \param assertCondition Evaluated condition or variable to assert; fail (==0) or pass (!=0).
>  * \param assertDescription Message to log with the assert describing it.
>  *
>  * \returns Returns the assertCondition so it can be used to externally to break execution flow if desired.
>  */
> int SDLTest_AssertCheck(int assertCondition, const char *assertDescription, ...);
> 
> /**
>  * \brief Explicitely pass without checking an assertion condition. Updates assertion counter.
>  *
>  * \param assertDescription Message to log with the assert describing it.
>  */
> void SDLTest_AssertPass(const char *assertDescription, ...);
> 
> /**
>  * \brief Resets the assert summary counters to zero.
>  */
> void SDLTest_ResetAssertSummary();
> 
> /**
>  * \brief Logs summary of all assertions (total, pass, fail) since last reset as INFO or ERROR.
>  */
> void SDLTest_LogAssertSummary();
> 
> 
> /**
>  * \brief Converts the current assert summary state to a test result.
>  *
>  * \returns TEST_RESULT_PASSED, TEST_RESULT_FAILED, or TEST_RESULT_NO_ASSERT
>  */
> int SDLTest_AssertSummaryToTestResult();
> 
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_assert_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_common.h ../android-sdl/jni/SDL2/include/SDL_test_common.h
1,187c1,186
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_common.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /* Ported from original test\common.h file. */
< 
< #ifndef _SDL_test_common_h
< #define _SDL_test_common_h
< 
< #include "SDL.h"
< 
< #if defined(__PSP__)
< #define DEFAULT_WINDOW_WIDTH  480
< #define DEFAULT_WINDOW_HEIGHT 272
< #else
< #define DEFAULT_WINDOW_WIDTH  640
< #define DEFAULT_WINDOW_HEIGHT 480
< #endif
< 
< #define VERBOSE_VIDEO   0x00000001
< #define VERBOSE_MODES   0x00000002
< #define VERBOSE_RENDER  0x00000004
< #define VERBOSE_EVENT   0x00000008
< #define VERBOSE_AUDIO   0x00000010
< 
< typedef struct
< {
<     /* SDL init flags */
<     char **argv;
<     Uint32 flags;
<     Uint32 verbose;
< 
<     /* Video info */
<     const char *videodriver;
<     int display;
<     const char *window_title;
<     const char *window_icon;
<     Uint32 window_flags;
<     int window_x;
<     int window_y;
<     int window_w;
<     int window_h;
<     int window_minW;
<     int window_minH;
<     int window_maxW;
<     int window_maxH;
<     int logical_w;
<     int logical_h;
<     float scale;
<     int depth;
<     int refresh_rate;
<     int num_windows;
<     SDL_Window **windows;
< 
<     /* Renderer info */
<     const char *renderdriver;
<     Uint32 render_flags;
<     SDL_bool skip_renderer;
<     SDL_Renderer **renderers;
< 
<     /* Audio info */
<     const char *audiodriver;
<     SDL_AudioSpec audiospec;
< 
<     /* GL settings */
<     int gl_red_size;
<     int gl_green_size;
<     int gl_blue_size;
<     int gl_alpha_size;
<     int gl_buffer_size;
<     int gl_depth_size;
<     int gl_stencil_size;
<     int gl_double_buffer;
<     int gl_accum_red_size;
<     int gl_accum_green_size;
<     int gl_accum_blue_size;
<     int gl_accum_alpha_size;
<     int gl_stereo;
<     int gl_multisamplebuffers;
<     int gl_multisamplesamples;
<     int gl_retained_backing;
<     int gl_accelerated;
<     int gl_major_version;
<     int gl_minor_version;
<     int gl_debug;
<     int gl_profile_mask;
< } SDLTest_CommonState;
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* Function prototypes */
< 
< /**
<  * \brief Parse command line parameters and create common state.
<  *
<  * \param argv Array of command line parameters
<  * \param flags Flags indicating which subsystem to initialize (i.e. SDL_INIT_VIDEO | SDL_INIT_AUDIO)
<  *
<  * \returns Returns a newly allocated common state object.
<  */
< SDLTest_CommonState *SDLTest_CommonCreateState(char **argv, Uint32 flags);
< 
< /**
<  * \brief Process one common argument.
<  *
<  * \param state The common state describing the test window to create.
<  * \param index The index of the argument to process in argv[].
<  *
<  * \returns The number of arguments processed (i.e. 1 for --fullscreen, 2 for --video [videodriver], or -1 on error.
<  */
< int SDLTest_CommonArg(SDLTest_CommonState * state, int index);
< 
< /**
<  * \brief Returns common usage information
<  *
<  * \param state The common state describing the test window to create.
<  *
<  * \returns String with usage information
<  */
< const char *SDLTest_CommonUsage(SDLTest_CommonState * state);
< 
< /**
<  * \brief Open test window.
<  *
<  * \param state The common state describing the test window to create.
<  *
<  * \returns True if initialization succeeded, false otherwise
<  */
< SDL_bool SDLTest_CommonInit(SDLTest_CommonState * state);
< 
< /**
<  * \brief Common event handler for test windows.
<  *
<  * \param state The common state used to create test window.
<  * \param event The event to handle.
<  * \param done Flag indicating we are done.
<  *
<  */
< void SDLTest_CommonEvent(SDLTest_CommonState * state, SDL_Event * event, int *done);
< 
< /**
<  * \brief Close test window.
<  *
<  * \param state The common state used to create test window.
<  *
<  */
< void SDLTest_CommonQuit(SDLTest_CommonState * state);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_common_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_common.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /* Ported from original test\common.h file. */
> 
> #ifndef _SDL_test_common_h
> #define _SDL_test_common_h
> 
> #include "SDL.h"
> 
> #if defined(__PSP__)
> #define DEFAULT_WINDOW_WIDTH  480
> #define DEFAULT_WINDOW_HEIGHT 272
> #else
> #define DEFAULT_WINDOW_WIDTH  640
> #define DEFAULT_WINDOW_HEIGHT 480
> #endif
> 
> #define VERBOSE_VIDEO   0x00000001
> #define VERBOSE_MODES   0x00000002
> #define VERBOSE_RENDER  0x00000004
> #define VERBOSE_EVENT   0x00000008
> #define VERBOSE_AUDIO   0x00000010
> 
> typedef struct
> {
>     /* SDL init flags */
>     char **argv;
>     Uint32 flags;
>     Uint32 verbose;
> 
>     /* Video info */
>     const char *videodriver;
>     int display;
>     const char *window_title;
>     const char *window_icon;
>     Uint32 window_flags;
>     int window_x;
>     int window_y;
>     int window_w;
>     int window_h;
>     int window_minW;
>     int window_minH;
>     int window_maxW;
>     int window_maxH;
>     int logical_w;
>     int logical_h;
>     float scale;
>     int depth;
>     int refresh_rate;
>     int num_windows;
>     SDL_Window **windows;
> 
>     /* Renderer info */
>     const char *renderdriver;
>     Uint32 render_flags;
>     SDL_bool skip_renderer;
>     SDL_Renderer **renderers;
> 
>     /* Audio info */
>     const char *audiodriver;
>     SDL_AudioSpec audiospec;
> 
>     /* GL settings */
>     int gl_red_size;
>     int gl_green_size;
>     int gl_blue_size;
>     int gl_alpha_size;
>     int gl_buffer_size;
>     int gl_depth_size;
>     int gl_stencil_size;
>     int gl_double_buffer;
>     int gl_accum_red_size;
>     int gl_accum_green_size;
>     int gl_accum_blue_size;
>     int gl_accum_alpha_size;
>     int gl_stereo;
>     int gl_multisamplebuffers;
>     int gl_multisamplesamples;
>     int gl_retained_backing;
>     int gl_accelerated;
>     int gl_major_version;
>     int gl_minor_version;
>     int gl_debug;
> } SDLTest_CommonState;
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* Function prototypes */
> 
> /**
>  * \brief Parse command line parameters and create common state.
>  *
>  * \param argv Array of command line parameters
>  * \param flags Flags indicating which subsystem to initialize (i.e. SDL_INIT_VIDEO | SDL_INIT_AUDIO)
>  *
>  * \returns Returns a newly allocated common state object.
>  */
> SDLTest_CommonState *SDLTest_CommonCreateState(char **argv, Uint32 flags);
> 
> /**
>  * \brief Process one common argument.
>  *
>  * \param state The common state describing the test window to create.
>  * \param index The index of the argument to process in argv[].
>  *
>  * \returns The number of arguments processed (i.e. 1 for --fullscreen, 2 for --video [videodriver], or -1 on error.
>  */
> int SDLTest_CommonArg(SDLTest_CommonState * state, int index);
> 
> /**
>  * \brief Returns common usage information
>  *
>  * \param state The common state describing the test window to create.
>  *
>  * \returns String with usage information
>  */
> const char *SDLTest_CommonUsage(SDLTest_CommonState * state);
> 
> /**
>  * \brief Open test window.
>  *
>  * \param state The common state describing the test window to create.
>  *
>  * \returns True if initialization succeeded, false otherwise
>  */
> SDL_bool SDLTest_CommonInit(SDLTest_CommonState * state);
> 
> /**
>  * \brief Common event handler for test windows.
>  *
>  * \param state The common state used to create test window.
>  * \param event The event to handle.
>  * \param done Flag indicating we are done.
>  *
>  */
> void SDLTest_CommonEvent(SDLTest_CommonState * state, SDL_Event * event, int *done);
> 
> /**
>  * \brief Close test window.
>  *
>  * \param state The common state used to create test window.
>  *
>  */
> void SDLTest_CommonQuit(SDLTest_CommonState * state);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_common_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_compare.h ../android-sdl/jni/SDL2/include/SDL_test_compare.h
1,69c1,69
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_compare.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
< 
<  Defines comparison functions (i.e. for surfaces).
< 
< */
< 
< #ifndef _SDL_test_compare_h
< #define _SDL_test_compare_h
< 
< #include "SDL.h"
< 
< #include "SDL_test_images.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  * \brief Compares a surface and with reference image data for equality
<  *
<  * \param surface Surface used in comparison
<  * \param referenceSurface Test Surface used in comparison
<  * \param allowable_error Allowable difference (squared) in blending accuracy.
<  *
<  * \returns 0 if comparison succeeded, >0 (=number of pixels where comparison failed) if comparison failed, -1 if any of the surfaces were NULL, -2 if the surface sizes differ.
<  */
< int SDLTest_CompareSurfaces(SDL_Surface *surface, SDL_Surface *referenceSurface, int allowable_error);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_compare_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_compare.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
> 
>  Defines comparison functions (i.e. for surfaces).
> 
> */
> 
> #ifndef _SDL_test_compare_h
> #define _SDL_test_compare_h
> 
> #include "SDL.h"
> 
> #include "SDL_test_images.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  * \brief Compares a surface and with reference image data for equality
>  *
>  * \param surface Surface used in comparison
>  * \param referenceSurface Test Surface used in comparison
>  * \param allowable_error Allowable difference (squared) in blending accuracy.
>  *
>  * \returns 0 if comparison succeeded, >0 (=number of pixels where comparison failed) if comparison failed, -1 if any of the surfaces were NULL, -2 if the surface sizes differ.
>  */
> int SDLTest_CompareSurfaces(SDL_Surface *surface, SDL_Surface *referenceSurface, int allowable_error);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_compare_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_crc32.h ../android-sdl/jni/SDL2/include/SDL_test_crc32.h
1,124c1,124
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_crc32.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
< 
<  Implements CRC32 calculations (default output is Perl String::CRC32 compatible).
< 
< */
< 
< #ifndef _SDL_test_crc32_h
< #define _SDL_test_crc32_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< 
< /* ------------ Definitions --------- */
< 
< /* Definition shared by all CRC routines */
< 
< #ifndef CrcUint32
<  #define CrcUint32  unsigned int
< #endif
< #ifndef CrcUint8
<  #define CrcUint8   unsigned char
< #endif
< 
< #ifdef ORIGINAL_METHOD
<  #define CRC32_POLY 0x04c11db7   /* AUTODIN II, Ethernet, & FDDI */
< #else
<  #define CRC32_POLY 0xEDB88320   /* Perl String::CRC32 compatible */
< #endif
< 
< /**
<  * Data structure for CRC32 (checksum) computation
<  */
<   typedef struct {
<     CrcUint32    crc32_table[256]; /* CRC table */
<   } SDLTest_Crc32Context;
< 
< /* ---------- Function Prototypes ------------- */
< 
< /**
<  * /brief Initialize the CRC context
<  *
<  * Note: The function initializes the crc table required for all crc calculations.
<  *
<  * /param crcContext        pointer to context variable
<  *
<  * /returns 0 for OK, -1 on error
<  *
<  */
<  int SDLTest_Crc32Init(SDLTest_Crc32Context * crcContext);
< 
< 
< /**
<  * /brief calculate a crc32 from a data block
<  *
<  * /param crcContext         pointer to context variable
<  * /param inBuf              input buffer to checksum
<  * /param inLen              length of input buffer
<  * /param crc32              pointer to Uint32 to store the final CRC into
<  *
<  * /returns 0 for OK, -1 on error
<  *
<  */
< int SDLTest_crc32Calc(SDLTest_Crc32Context * crcContext, CrcUint8 *inBuf, CrcUint32 inLen, CrcUint32 *crc32);
< 
< /* Same routine broken down into three steps */
< int SDLTest_Crc32CalcStart(SDLTest_Crc32Context * crcContext, CrcUint32 *crc32);
< int SDLTest_Crc32CalcEnd(SDLTest_Crc32Context * crcContext, CrcUint32 *crc32);
< int SDLTest_Crc32CalcBuffer(SDLTest_Crc32Context * crcContext, CrcUint8 *inBuf, CrcUint32 inLen, CrcUint32 *crc32);
< 
< 
< /**
<  * /brief clean up CRC context
<  *
<  * /param crcContext        pointer to context variable
<  *
<  * /returns 0 for OK, -1 on error
<  *
< */
< 
< int SDLTest_Crc32Done(SDLTest_Crc32Context * crcContext);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_crc32_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_crc32.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
> 
>  Implements CRC32 calculations (default output is Perl String::CRC32 compatible).
> 
> */
> 
> #ifndef _SDL_test_crc32_h
> #define _SDL_test_crc32_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> 
> /* ------------ Definitions --------- */
> 
> /* Definition shared by all CRC routines */
> 
> #ifndef CrcUint32
>  #define CrcUint32  unsigned int
> #endif
> #ifndef CrcUint8
>  #define CrcUint8   unsigned char
> #endif
> 
> #ifdef ORIGINAL_METHOD
>  #define CRC32_POLY 0x04c11db7   /* AUTODIN II, Ethernet, & FDDI */
> #else
>  #define CRC32_POLY 0xEDB88320   /* Perl String::CRC32 compatible */
> #endif
> 
> /**
>  * Data structure for CRC32 (checksum) computation
>  */
>   typedef struct {
>     CrcUint32    crc32_table[256]; /* CRC table */
>   } SDLTest_Crc32Context;
> 
> /* ---------- Function Prototypes ------------- */
> 
> /**
>  * /brief Initialize the CRC context
>  *
>  * Note: The function initializes the crc table required for all crc calculations.
>  *
>  * /param crcContext        pointer to context variable
>  *
>  * /returns 0 for OK, -1 on error
>  *
>  */
>  int SDLTest_Crc32Init(SDLTest_Crc32Context * crcContext);
> 
> 
> /**
>  * /brief calculate a crc32 from a data block
>  *
>  * /param crcContext         pointer to context variable
>  * /param inBuf              input buffer to checksum
>  * /param inLen              length of input buffer
>  * /param crc32              pointer to Uint32 to store the final CRC into
>  *
>  * /returns 0 for OK, -1 on error
>  *
>  */
> int SDLTest_crc32Calc(SDLTest_Crc32Context * crcContext, CrcUint8 *inBuf, CrcUint32 inLen, CrcUint32 *crc32);
> 
> /* Same routine broken down into three steps */
> int SDLTest_Crc32CalcStart(SDLTest_Crc32Context * crcContext, CrcUint32 *crc32);
> int SDLTest_Crc32CalcEnd(SDLTest_Crc32Context * crcContext, CrcUint32 *crc32);
> int SDLTest_Crc32CalcBuffer(SDLTest_Crc32Context * crcContext, CrcUint8 *inBuf, CrcUint32 inLen, CrcUint32 *crc32);
> 
> 
> /**
>  * /brief clean up CRC context
>  *
>  * /param crcContext        pointer to context variable
>  *
>  * /returns 0 for OK, -1 on error
>  *
> */
> 
> int SDLTest_Crc32Done(SDLTest_Crc32Context * crcContext);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_crc32_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_font.h ../android-sdl/jni/SDL2/include/SDL_test_font.h
1,62c1,62
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_font.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< #ifndef _SDL_test_font_h
< #define _SDL_test_font_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Draw a string in the currently set font.
<  *
<  *  \param renderer The renderer to draw on.
<  *  \param x The X coordinate of the upper left corner of the string.
<  *  \param y The Y coordinate of the upper left corner of the string.
<  *  \param s The string to draw.
<  *
<  *  \returns Returns 0 on success, -1 on failure.
<  */
< int SDLTest_DrawString(SDL_Renderer * renderer, int x, int y, const char *s);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_font_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_font.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> #ifndef _SDL_test_font_h
> #define _SDL_test_font_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Draw a string in the currently set font.
>  *
>  *  \param renderer The renderer to draw on.
>  *  \param x The X coordinate of the upper left corner of the string.
>  *  \param y The Y coordinate of the upper left corner of the string.
>  *  \param s The string to draw.
>  *
>  *  \returns Returns 0 on success, -1 on failure.
>  */
> int SDLTest_DrawString(SDL_Renderer * renderer, int x, int y, const char *s);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_font_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_fuzzer.h ../android-sdl/jni/SDL2/include/SDL_test_fuzzer.h
1,384c1,384
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_fuzzer.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
< 
<   Data generators for fuzzing test data in a reproducible way.
< 
< */
< 
< #ifndef _SDL_test_fuzzer_h
< #define _SDL_test_fuzzer_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< 
< /*
<   Based on GSOC code by Markus Kauppila <markus.kauppila@gmail.com>
< */
< 
< 
< /**
<  * \file
<  * Note: The fuzzer implementation uses a static instance of random context
<  * internally which makes it thread-UNsafe.
<  */
< 
< /**
<  * Initializes the fuzzer for a test
<  *
<  * /param execKey Execution "Key" that initializes the random number generator uniquely for the test.
<  *
<  */
< void SDLTest_FuzzerInit(Uint64 execKey);
< 
< 
< /**
<  * Returns a random Uint8
<  *
<  * \returns Generated integer
<  */
< Uint8 SDLTest_RandomUint8();
< 
< /**
<  * Returns a random Sint8
<  *
<  * \returns Generated signed integer
<  */
< Sint8 SDLTest_RandomSint8();
< 
< 
< /**
<  * Returns a random Uint16
<  *
<  * \returns Generated integer
<  */
< Uint16 SDLTest_RandomUint16();
< 
< /**
<  * Returns a random Sint16
<  *
<  * \returns Generated signed integer
<  */
< Sint16 SDLTest_RandomSint16();
< 
< 
< /**
<  * Returns a random integer
<  *
<  * \returns Generated integer
<  */
< Sint32 SDLTest_RandomSint32();
< 
< 
< /**
<  * Returns a random positive integer
<  *
<  * \returns Generated integer
<  */
< Uint32 SDLTest_RandomUint32();
< 
< /**
<  * Returns random Uint64.
<  *
<  * \returns Generated integer
<  */
< Uint64 SDLTest_RandomUint64();
< 
< 
< /**
<  * Returns random Sint64.
<  *
<  * \returns Generated signed integer
<  */
< Sint64 SDLTest_RandomSint64();
< 
< /**
<  * \returns random float in range [0.0 - 1.0[
<  */
< float SDLTest_RandomUnitFloat();
< 
< /**
<  * \returns random double in range [0.0 - 1.0[
<  */
< double SDLTest_RandomUnitDouble();
< 
< /**
<  * \returns random float.
<  *
<  */
< float SDLTest_RandomFloat();
< 
< /**
<  * \returns random double.
<  *
<  */
< double SDLTest_RandomDouble();
< 
< /**
<  * Returns a random boundary value for Uint8 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
<  * RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
<  * RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100
<  * RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or 0 with error set
<  */
< Uint8 SDLTest_RandomUint8BoundaryValue(Uint8 boundary1, Uint8 boundary2, SDL_bool validDomain);
< 
< /**
<  * Returns a random boundary value for Uint16 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
<  * RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
<  * RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100
<  * RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or 0 with error set
<  */
< Uint16 SDLTest_RandomUint16BoundaryValue(Uint16 boundary1, Uint16 boundary2, SDL_bool validDomain);
< 
< /**
<  * Returns a random boundary value for Uint32 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
<  * RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
<  * RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100
<  * RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or 0 with error set
<  */
< Uint32 SDLTest_RandomUint32BoundaryValue(Uint32 boundary1, Uint32 boundary2, SDL_bool validDomain);
< 
< /**
<  * Returns a random boundary value for Uint64 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
<  * RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
<  * RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100
<  * RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or 0 with error set
<  */
< Uint64 SDLTest_RandomUint64BoundaryValue(Uint64 boundary1, Uint64 boundary2, SDL_bool validDomain);
< 
< /**
<  * Returns a random boundary value for Sint8 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
<  * RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
<  * RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100
<  * RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or SINT8_MIN with error set
<  */
< Sint8 SDLTest_RandomSint8BoundaryValue(Sint8 boundary1, Sint8 boundary2, SDL_bool validDomain);
< 
< 
< /**
<  * Returns a random boundary value for Sint16 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
<  * RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
<  * RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100
<  * RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or SINT16_MIN with error set
<  */
< Sint16 SDLTest_RandomSint16BoundaryValue(Sint16 boundary1, Sint16 boundary2, SDL_bool validDomain);
< 
< /**
<  * Returns a random boundary value for Sint32 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
<  * RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
<  * RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100
<  * RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or SINT32_MIN with error set
<  */
< Sint32 SDLTest_RandomSint32BoundaryValue(Sint32 boundary1, Sint32 boundary2, SDL_bool validDomain);
< 
< /**
<  * Returns a random boundary value for Sint64 within the given boundaries.
<  * Boundaries are inclusive, see the usage examples below. If validDomain
<  * is true, the function will only return valid boundaries, otherwise non-valid
<  * boundaries are also possible.
<  * If boundary1 > boundary2, the values are swapped
<  *
<  * Usage examples:
<  * RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
<  * RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
<  * RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100
<  * RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set
<  *
<  * \param boundary1 Lower boundary limit
<  * \param boundary2 Upper boundary limit
<  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
<  *
<  * \returns Random boundary value for the given range and domain or SINT64_MIN with error set
<  */
< Sint64 SDLTest_RandomSint64BoundaryValue(Sint64 boundary1, Sint64 boundary2, SDL_bool validDomain);
< 
< 
< /**
<  * Returns integer in range [min, max] (inclusive).
<  * Min and max values can be negative values.
<  * If Max in smaller tham min, then the values are swapped.
<  * Min and max are the same value, that value will be returned.
<  *
<  * \param min Minimum inclusive value of returned random number
<  * \param max Maximum inclusive value of returned random number
<  *
<  * \returns Generated random integer in range
<  */
< Sint32 SDLTest_RandomIntegerInRange(Sint32 min, Sint32 max);
< 
< 
< /**
<  * Generates random null-terminated string. The minimum length for
<  * the string is 1 character, maximum length for the string is 255
<  * characters and it can contain ASCII characters from 32 to 126.
<  *
<  * Note: Returned string needs to be deallocated.
<  *
<  * \returns Newly allocated random string; or NULL if length was invalid or string could not be allocated.
<  */
< char * SDLTest_RandomAsciiString();
< 
< 
< /**
<  * Generates random null-terminated string. The maximum length for
<  * the string is defined by the maxLength parameter.
<  * String can contain ASCII characters from 32 to 126.
<  *
<  * Note: Returned string needs to be deallocated.
<  *
<  * \param maxLength The maximum length of the generated string.
<  *
<  * \returns Newly allocated random string; or NULL if maxLength was invalid or string could not be allocated.
<  */
< char * SDLTest_RandomAsciiStringWithMaximumLength(int maxLength);
< 
< 
< /**
<  * Generates random null-terminated string. The length for
<  * the string is defined by the size parameter.
<  * String can contain ASCII characters from 32 to 126.
<  *
<  * Note: Returned string needs to be deallocated.
<  *
<  * \param size The length of the generated string
<  *
<  * \returns Newly allocated random string; or NULL if size was invalid or string could not be allocated.
<  */
< char * SDLTest_RandomAsciiStringOfSize(int size);
< 
< /**
<  * Returns the invocation count for the fuzzer since last ...FuzzerInit.
<  */
< int SDLTest_GetFuzzerInvocationCount();
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_fuzzer_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_fuzzer.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
> 
>   Data generators for fuzzing test data in a reproducible way.
> 
> */
> 
> #ifndef _SDL_test_fuzzer_h
> #define _SDL_test_fuzzer_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> 
> /*
>   Based on GSOC code by Markus Kauppila <markus.kauppila@gmail.com>
> */
> 
> 
> /**
>  * \file
>  * Note: The fuzzer implementation uses a static instance of random context
>  * internally which makes it thread-UNsafe.
>  */
> 
> /**
>  * Initializes the fuzzer for a test
>  *
>  * /param execKey Execution "Key" that initializes the random number generator uniquely for the test.
>  *
>  */
> void SDLTest_FuzzerInit(Uint64 execKey);
> 
> 
> /**
>  * Returns a random Uint8
>  *
>  * \returns Generated integer
>  */
> Uint8 SDLTest_RandomUint8();
> 
> /**
>  * Returns a random Sint8
>  *
>  * \returns Generated signed integer
>  */
> Sint8 SDLTest_RandomSint8();
> 
> 
> /**
>  * Returns a random Uint16
>  *
>  * \returns Generated integer
>  */
> Uint16 SDLTest_RandomUint16();
> 
> /**
>  * Returns a random Sint16
>  *
>  * \returns Generated signed integer
>  */
> Sint16 SDLTest_RandomSint16();
> 
> 
> /**
>  * Returns a random integer
>  *
>  * \returns Generated integer
>  */
> Sint32 SDLTest_RandomSint32();
> 
> 
> /**
>  * Returns a random positive integer
>  *
>  * \returns Generated integer
>  */
> Uint32 SDLTest_RandomUint32();
> 
> /**
>  * Returns random Uint64.
>  *
>  * \returns Generated integer
>  */
> Uint64 SDLTest_RandomUint64();
> 
> 
> /**
>  * Returns random Sint64.
>  *
>  * \returns Generated signed integer
>  */
> Sint64 SDLTest_RandomSint64();
> 
> /**
>  * \returns random float in range [0.0 - 1.0[
>  */
> float SDLTest_RandomUnitFloat();
> 
> /**
>  * \returns random double in range [0.0 - 1.0[
>  */
> double SDLTest_RandomUnitDouble();
> 
> /**
>  * \returns random float.
>  *
>  */
> float SDLTest_RandomFloat();
> 
> /**
>  * \returns random double.
>  *
>  */
> double SDLTest_RandomDouble();
> 
> /**
>  * Returns a random boundary value for Uint8 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
>  * RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
>  * RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100
>  * RandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or 0 with error set
>  */
> Uint8 SDLTest_RandomUint8BoundaryValue(Uint8 boundary1, Uint8 boundary2, SDL_bool validDomain);
> 
> /**
>  * Returns a random boundary value for Uint16 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
>  * RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
>  * RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100
>  * RandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or 0 with error set
>  */
> Uint16 SDLTest_RandomUint16BoundaryValue(Uint16 boundary1, Uint16 boundary2, SDL_bool validDomain);
> 
> /**
>  * Returns a random boundary value for Uint32 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
>  * RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
>  * RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100
>  * RandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with error set)
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or 0 with error set
>  */
> Uint32 SDLTest_RandomUint32BoundaryValue(Uint32 boundary1, Uint32 boundary2, SDL_bool validDomain);
> 
> /**
>  * Returns a random boundary value for Uint64 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns 10, 11, 19 or 20
>  * RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0 or 21
>  * RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100
>  * RandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0 (with error set)
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or 0 with error set
>  */
> Uint64 SDLTest_RandomUint64BoundaryValue(Uint64 boundary1, Uint64 boundary2, SDL_bool validDomain);
> 
> /**
>  * Returns a random boundary value for Sint8 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
>  * RandomSint8BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
>  * RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE) returns 100
>  * RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE) returns SINT8_MIN (== error value) with error set
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or SINT8_MIN with error set
>  */
> Sint8 SDLTest_RandomSint8BoundaryValue(Sint8 boundary1, Sint8 boundary2, SDL_bool validDomain);
> 
> 
> /**
>  * Returns a random boundary value for Sint16 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
>  * RandomSint16BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
>  * RandomSint16BoundaryValue(SINT16_MIN, 99, SDL_FALSE) returns 100
>  * RandomSint16BoundaryValue(SINT16_MIN, SINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error set
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or SINT16_MIN with error set
>  */
> Sint16 SDLTest_RandomSint16BoundaryValue(Sint16 boundary1, Sint16 boundary2, SDL_bool validDomain);
> 
> /**
>  * Returns a random boundary value for Sint32 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
>  * RandomSint32BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
>  * RandomSint32BoundaryValue(SINT32_MIN, 99, SDL_FALSE) returns 100
>  * RandomSint32BoundaryValue(SINT32_MIN, SINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or SINT32_MIN with error set
>  */
> Sint32 SDLTest_RandomSint32BoundaryValue(Sint32 boundary1, Sint32 boundary2, SDL_bool validDomain);
> 
> /**
>  * Returns a random boundary value for Sint64 within the given boundaries.
>  * Boundaries are inclusive, see the usage examples below. If validDomain
>  * is true, the function will only return valid boundaries, otherwise non-valid
>  * boundaries are also possible.
>  * If boundary1 > boundary2, the values are swapped
>  *
>  * Usage examples:
>  * RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns -11, -10, 19 or 20
>  * RandomSint64BoundaryValue(-100, -10, SDL_FALSE) returns -101 or -9
>  * RandomSint64BoundaryValue(SINT64_MIN, 99, SDL_FALSE) returns 100
>  * RandomSint64BoundaryValue(SINT64_MIN, SINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error set
>  *
>  * \param boundary1 Lower boundary limit
>  * \param boundary2 Upper boundary limit
>  * \param validDomain Should the generated boundary be valid (=within the bounds) or not?
>  *
>  * \returns Random boundary value for the given range and domain or SINT64_MIN with error set
>  */
> Sint64 SDLTest_RandomSint64BoundaryValue(Sint64 boundary1, Sint64 boundary2, SDL_bool validDomain);
> 
> 
> /**
>  * Returns integer in range [min, max] (inclusive).
>  * Min and max values can be negative values.
>  * If Max in smaller tham min, then the values are swapped.
>  * Min and max are the same value, that value will be returned.
>  *
>  * \param min Minimum inclusive value of returned random number
>  * \param max Maximum inclusive value of returned random number
>  *
>  * \returns Generated random integer in range
>  */
> Sint32 SDLTest_RandomIntegerInRange(Sint32 min, Sint32 max);
> 
> 
> /**
>  * Generates random null-terminated string. The minimum length for
>  * the string is 1 character, maximum length for the string is 255
>  * characters and it can contain ASCII characters from 32 to 126.
>  *
>  * Note: Returned string needs to be deallocated.
>  *
>  * \returns Newly allocated random string; or NULL if length was invalid or string could not be allocated.
>  */
> char * SDLTest_RandomAsciiString();
> 
> 
> /**
>  * Generates random null-terminated string. The maximum length for
>  * the string is defined by the maxLength parameter.
>  * String can contain ASCII characters from 32 to 126.
>  *
>  * Note: Returned string needs to be deallocated.
>  *
>  * \param maxLength The maximum length of the generated string.
>  *
>  * \returns Newly allocated random string; or NULL if maxLength was invalid or string could not be allocated.
>  */
> char * SDLTest_RandomAsciiStringWithMaximumLength(int maxLength);
> 
> 
> /**
>  * Generates random null-terminated string. The length for
>  * the string is defined by the size parameter.
>  * String can contain ASCII characters from 32 to 126.
>  *
>  * Note: Returned string needs to be deallocated.
>  *
>  * \param size The length of the generated string
>  *
>  * \returns Newly allocated random string; or NULL if size was invalid or string could not be allocated.
>  */
> char * SDLTest_RandomAsciiStringOfSize(int size);
> 
> /**
>  * Returns the invocation count for the fuzzer since last ...FuzzerInit.
>  */
> int SDLTest_GetFuzzerInvocationCount();
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_fuzzer_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_harness.h ../android-sdl/jni/SDL2/include/SDL_test_harness.h
1,123c1,123
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_harness.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
<   Defines types for test case definitions and the test execution harness API.
< 
<   Based on original GSOC code by Markus Kauppila <markus.kauppila@gmail.com>
< */
< 
< #ifndef _SDL_test_harness_h
< #define _SDL_test_harness_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< 
< /* ! Definitions for test case structures */
< #define TEST_ENABLED  1
< #define TEST_DISABLED 0
< 
< /* ! Definition of all the possible test return values of the test case method */
< #define TEST_ABORTED        -1
< #define TEST_STARTED         0
< #define TEST_COMPLETED       1
< #define TEST_SKIPPED         2
< 
< /* ! Definition of all the possible test results for the harness */
< #define TEST_RESULT_PASSED              0
< #define TEST_RESULT_FAILED              1
< #define TEST_RESULT_NO_ASSERT           2
< #define TEST_RESULT_SKIPPED             3
< #define TEST_RESULT_SETUP_FAILURE       4
< 
< /* !< Function pointer to a test case setup function (run before every test) */
< typedef void (*SDLTest_TestCaseSetUpFp)(void *arg);
< 
< /* !< Function pointer to a test case function */
< typedef int (*SDLTest_TestCaseFp)(void *arg);
< 
< /* !< Function pointer to a test case teardown function (run after every test) */
< typedef void  (*SDLTest_TestCaseTearDownFp)(void *arg);
< 
< /**
<  * Holds information about a single test case.
<  */
< typedef struct SDLTest_TestCaseReference {
<     /* !< Func2Stress */
<     SDLTest_TestCaseFp testCase;
<     /* !< Short name (or function name) "Func2Stress" */
<     char *name;
<     /* !< Long name or full description "This test pushes func2() to the limit." */
<     char *description;
<     /* !< Set to TEST_ENABLED or TEST_DISABLED (test won't be run) */
<     int enabled;
< } SDLTest_TestCaseReference;
< 
< /**
<  * Holds information about a test suite (multiple test cases).
<  */
< typedef struct SDLTest_TestSuiteReference {
<     /* !< "PlatformSuite" */
<     char *name;
<     /* !< The function that is run before each test. NULL skips. */
<     SDLTest_TestCaseSetUpFp testSetUp;
<     /* !< The test cases that are run as part of the suite. Last item should be NULL. */
<     const SDLTest_TestCaseReference **testCases;
<     /* !< The function that is run after each test. NULL skips. */
<     SDLTest_TestCaseTearDownFp testTearDown;
< } SDLTest_TestSuiteReference;
< 
< 
< /**
<  * \brief Execute a test suite using the given run seed and execution key.
<  *
<  * \param testSuites Suites containing the test case.
<  * \param userRunSeed Custom run seed provided by user, or NULL to autogenerate one.
<  * \param userExecKey Custom execution key provided by user, or 0 to autogenerate one.
<  * \param filter Filter specification. NULL disables. Case sensitive.
<  * \param testIterations Number of iterations to run each test case.
<  *
<  * \returns Test run result; 0 when all tests passed, 1 if any tests failed.
<  */
< int SDLTest_RunSuites(SDLTest_TestSuiteReference *testSuites[], const char *userRunSeed, Uint64 userExecKey, const char *filter, int testIterations);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_harness_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_harness.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
>   Defines types for test case definitions and the test execution harness API.
> 
>   Based on original GSOC code by Markus Kauppila <markus.kauppila@gmail.com>
> */
> 
> #ifndef _SDL_test_harness_h
> #define _SDL_test_harness_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> 
> //! Definitions for test case structures
> #define TEST_ENABLED  1
> #define TEST_DISABLED 0
> 
> //! Definition of all the possible test return values of the test case method
> #define TEST_ABORTED        -1
> #define TEST_STARTED         0
> #define TEST_COMPLETED       1
> #define TEST_SKIPPED         2
> 
> //! Definition of all the possible test results for the harness
> #define TEST_RESULT_PASSED              0
> #define TEST_RESULT_FAILED              1
> #define TEST_RESULT_NO_ASSERT           2
> #define TEST_RESULT_SKIPPED             3
> #define TEST_RESULT_SETUP_FAILURE       4
> 
> //!< Function pointer to a test case setup function (run before every test)
> typedef void (*SDLTest_TestCaseSetUpFp)(void *arg);
> 
> //!< Function pointer to a test case function
> typedef int (*SDLTest_TestCaseFp)(void *arg);
> 
> //!< Function pointer to a test case teardown function (run after every test)
> typedef void  (*SDLTest_TestCaseTearDownFp)(void *arg);
> 
> /**
>  * Holds information about a single test case.
>  */
> typedef struct SDLTest_TestCaseReference {
>     /*!< Func2Stress */
>     SDLTest_TestCaseFp testCase;
>     /*!< Short name (or function name) "Func2Stress" */
>     char *name;
>     /*!< Long name or full description "This test pushes func2() to the limit." */
>     char *description;
>     /*!< Set to TEST_ENABLED or TEST_DISABLED (test won't be run) */
>     int enabled;
> } SDLTest_TestCaseReference;
> 
> /**
>  * Holds information about a test suite (multiple test cases).
>  */
> typedef struct SDLTest_TestSuiteReference {
>     /*!< "PlatformSuite" */
>     char *name;
>     /*!< The function that is run before each test. NULL skips. */
>     SDLTest_TestCaseSetUpFp testSetUp;
>     /*!< The test cases that are run as part of the suite. Last item should be NULL. */
>     const SDLTest_TestCaseReference **testCases;
>     /*!< The function that is run after each test. NULL skips. */
>     SDLTest_TestCaseTearDownFp testTearDown;
> } SDLTest_TestSuiteReference;
> 
> 
> /**
>  * \brief Execute a test suite using the given run seed and execution key.
>  *
>  * \param testSuites Suites containing the test case.
>  * \param userRunSeed Custom run seed provided by user, or NULL to autogenerate one.
>  * \param userExecKey Custom execution key provided by user, or 0 to autogenerate one.
>  * \param filter Filter specification. NULL disables. Case sensitive.
>  * \param testIterations Number of iterations to run each test case.
>  *
>  * \returns Test run result; 0 when all tests passed, 1 if any tests failed.
>  */
> int SDLTest_RunSuites(SDLTest_TestSuiteReference *testSuites[], const char *userRunSeed, Uint64 userExecKey, const char *filter, int testIterations);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_harness_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_images.h ../android-sdl/jni/SDL2/include/SDL_test_images.h
1,78c1,78
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_images.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
< 
<  Defines some images for tests.
< 
< */
< 
< #ifndef _SDL_test_images_h
< #define _SDL_test_images_h
< 
< #include "SDL.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *Type for test images.
<  */
< typedef struct SDLTest_SurfaceImage_s {
<   int width;
<   int height;
<   unsigned int bytes_per_pixel; /* 3:RGB, 4:RGBA */
<   const char *pixel_data;
< } SDLTest_SurfaceImage_t;
< 
< /* Test images */
< SDL_Surface *SDLTest_ImageBlit();
< SDL_Surface *SDLTest_ImageBlitColor();
< SDL_Surface *SDLTest_ImageBlitAlpha();
< SDL_Surface *SDLTest_ImageBlitBlendAdd();
< SDL_Surface *SDLTest_ImageBlitBlend();
< SDL_Surface *SDLTest_ImageBlitBlendMod();
< SDL_Surface *SDLTest_ImageBlitBlendNone();
< SDL_Surface *SDLTest_ImageBlitBlendAll();
< SDL_Surface *SDLTest_ImageFace();
< SDL_Surface *SDLTest_ImagePrimitives();
< SDL_Surface *SDLTest_ImagePrimitivesBlend();
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_images_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_images.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
> 
>  Defines some images for tests.
> 
> */
> 
> #ifndef _SDL_test_images_h
> #define _SDL_test_images_h
> 
> #include "SDL.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *Type for test images.
>  */
> typedef struct SDLTest_SurfaceImage_s {
>   int width;
>   int height;
>   unsigned int bytes_per_pixel; /* 3:RGB, 4:RGBA */
>   const char *pixel_data;
> } SDLTest_SurfaceImage_t;
> 
> /* Test images */
> SDL_Surface *SDLTest_ImageBlit();
> SDL_Surface *SDLTest_ImageBlitColor();
> SDL_Surface *SDLTest_ImageBlitAlpha();
> SDL_Surface *SDLTest_ImageBlitBlendAdd();
> SDL_Surface *SDLTest_ImageBlitBlend();
> SDL_Surface *SDLTest_ImageBlitBlendMod();
> SDL_Surface *SDLTest_ImageBlitBlendNone();
> SDL_Surface *SDLTest_ImageBlitBlendAll();
> SDL_Surface *SDLTest_ImageFace();
> SDL_Surface *SDLTest_ImagePrimitives();
> SDL_Surface *SDLTest_ImagePrimitivesBlend();
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_images_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_log.h ../android-sdl/jni/SDL2/include/SDL_test_log.h
1,67c1,67
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_log.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
<  *
<  *  Wrapper to log in the TEST category
<  *
<  */
< 
< #ifndef _SDL_test_log_h
< #define _SDL_test_log_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  * \brief Prints given message with a timestamp in the TEST category and INFO priority.
<  *
<  * \param fmt Message to be logged
<  */
< void SDLTest_Log(const char *fmt, ...);
< 
< /**
<  * \brief Prints given message with a timestamp in the TEST category and the ERROR priority.
<  *
<  * \param fmt Message to be logged
<  */
< void SDLTest_LogError(const char *fmt, ...);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_log_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_log.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
>  *
>  *  Wrapper to log in the TEST category
>  *
>  */
> 
> #ifndef _SDL_test_log_h
> #define _SDL_test_log_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  * \brief Prints given message with a timestamp in the TEST category and INFO priority.
>  *
>  * \param fmt Message to be logged
>  */
> void SDLTest_Log(const char *fmt, ...);
> 
> /**
>  * \brief Prints given message with a timestamp in the TEST category and the ERROR priority.
>  *
>  * \param fmt Message to be logged
>  */
> void SDLTest_LogError(const char *fmt, ...);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_log_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_md5.h ../android-sdl/jni/SDL2/include/SDL_test_md5.h
1,129c1,129
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_md5.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
<  ***********************************************************************
<  ** Header file for implementation of MD5                             **
<  ** RSA Data Security, Inc. MD5 Message-Digest Algorithm              **
<  ** Created: 2/17/90 RLR                                              **
<  ** Revised: 12/27/90 SRD,AJ,BSK,JT Reference C version               **
<  ** Revised (for MD5): RLR 4/27/91                                    **
<  **   -- G modified to have y&~z instead of y&z                       **
<  **   -- FF, GG, HH modified to add in last register done             **
<  **   -- Access pattern: round 2 works mod 5, round 3 works mod 3     **
<  **   -- distinct additive constant for each step                     **
<  **   -- round 4 added, working mod 7                                 **
<  ***********************************************************************
< */
< 
< /*
<  ***********************************************************************
<  **  Message-digest routines:                                         **
<  **  To form the message digest for a message M                       **
<  **    (1) Initialize a context buffer mdContext using MD5Init        **
<  **    (2) Call MD5Update on mdContext and M                          **
<  **    (3) Call MD5Final on mdContext                                 **
<  **  The message digest is now in mdContext->digest[0...15]           **
<  ***********************************************************************
< */
< 
< #ifndef _SDL_test_md5_h
< #define _SDL_test_md5_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* ------------ Definitions --------- */
< 
< /* typedef a 32-bit type */
<   typedef unsigned long int MD5UINT4;
< 
< /* Data structure for MD5 (Message-Digest) computation */
<   typedef struct {
<     MD5UINT4  i[2];     /* number of _bits_ handled mod 2^64 */
<     MD5UINT4  buf[4];       /* scratch buffer */
<     unsigned char in[64];   /* input buffer */
<     unsigned char digest[16];   /* actual digest after Md5Final call */
<   } SDLTest_Md5Context;
< 
< /* ---------- Function Prototypes ------------- */
< 
< /**
<  * /brief initialize the context
<  *
<  * /param  mdContext        pointer to context variable
<  *
<  * Note: The function initializes the message-digest context
<  *       mdContext. Call before each new use of the context -
<  *       all fields are set to zero.
<  */
<  void SDLTest_Md5Init(SDLTest_Md5Context * mdContext);
< 
< 
< /**
<  * /brief update digest from variable length data
<  *
<  * /param  mdContext       pointer to context variable
<  * /param  inBuf           pointer to data array/string
<  * /param  inLen           length of data array/string
<  *
<  * Note: The function updates the message-digest context to account
<  *       for the presence of each of the characters inBuf[0..inLen-1]
<  *       in the message whose digest is being computed.
< */
< 
<  void SDLTest_Md5Update(SDLTest_Md5Context * mdContext, unsigned char *inBuf,
<                  unsigned int inLen);
< 
< 
< /*
<  * /brief complete digest computation
<  *
<  * /param mdContext     pointer to context variable
<  *
<  * Note: The function terminates the message-digest computation and
<  *       ends with the desired message digest in mdContext.digest[0..15].
<  *       Always call before using the digest[] variable.
< */
< 
<  void SDLTest_Md5Final(SDLTest_Md5Context * mdContext);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_md5_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_md5.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
>  ***********************************************************************
>  ** Header file for implementation of MD5                             **
>  ** RSA Data Security, Inc. MD5 Message-Digest Algorithm              **
>  ** Created: 2/17/90 RLR                                              **
>  ** Revised: 12/27/90 SRD,AJ,BSK,JT Reference C version               **
>  ** Revised (for MD5): RLR 4/27/91                                    **
>  **   -- G modified to have y&~z instead of y&z                       **
>  **   -- FF, GG, HH modified to add in last register done             **
>  **   -- Access pattern: round 2 works mod 5, round 3 works mod 3     **
>  **   -- distinct additive constant for each step                     **
>  **   -- round 4 added, working mod 7                                 **
>  ***********************************************************************
> */
> 
> /*
>  ***********************************************************************
>  **  Message-digest routines:                                         **
>  **  To form the message digest for a message M                       **
>  **    (1) Initialize a context buffer mdContext using MD5Init        **
>  **    (2) Call MD5Update on mdContext and M                          **
>  **    (3) Call MD5Final on mdContext                                 **
>  **  The message digest is now in mdContext->digest[0...15]           **
>  ***********************************************************************
> */
> 
> #ifndef _SDL_test_md5_h
> #define _SDL_test_md5_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* ------------ Definitions --------- */
> 
> /* typedef a 32-bit type */
>   typedef unsigned long int MD5UINT4;
> 
> /* Data structure for MD5 (Message-Digest) computation */
>   typedef struct {
>     MD5UINT4  i[2];     /* number of _bits_ handled mod 2^64 */
>     MD5UINT4  buf[4];       /* scratch buffer */
>     unsigned char in[64];   /* input buffer */
>     unsigned char digest[16];   /* actual digest after Md5Final call */
>   } SDLTest_Md5Context;
> 
> /* ---------- Function Prototypes ------------- */
> 
> /**
>  * /brief initialize the context
>  *
>  * /param  mdContext        pointer to context variable
>  *
>  * Note: The function initializes the message-digest context
>  *       mdContext. Call before each new use of the context -
>  *       all fields are set to zero.
>  */
>  void SDLTest_Md5Init(SDLTest_Md5Context * mdContext);
> 
> 
> /**
>  * /brief update digest from variable length data
>  *
>  * /param  mdContext       pointer to context variable
>  * /param  inBuf           pointer to data array/string
>  * /param  inLen           length of data array/string
>  *
>  * Note: The function updates the message-digest context to account
>  *       for the presence of each of the characters inBuf[0..inLen-1]
>  *       in the message whose digest is being computed.
> */
> 
>  void SDLTest_Md5Update(SDLTest_Md5Context * mdContext, unsigned char *inBuf,
>                  unsigned int inLen);
> 
> 
> /*
>  * /brief complete digest computation
>  *
>  * /param mdContext     pointer to context variable
>  *
>  * Note: The function terminates the message-digest computation and
>  *       ends with the desired message digest in mdContext.digest[0..15].
>  *       Always call before using the digest[] variable.
> */
> 
>  void SDLTest_Md5Final(SDLTest_Md5Context * mdContext);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_md5_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_test_random.h ../android-sdl/jni/SDL2/include/SDL_test_random.h
1,115c1,115
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_test_random.h
<  *
<  *  Include file for SDL test framework.
<  *
<  *  This code is a part of the SDL2_test library, not the main SDL library.
<  */
< 
< /*
< 
<  A "32-bit Multiply with carry random number generator. Very fast.
<  Includes a list of recommended multipliers.
< 
<  multiply-with-carry generator: x(n) = a*x(n-1) + carry mod 2^32.
<  period: (a*2^31)-1
< 
< */
< 
< #ifndef _SDL_test_random_h
< #define _SDL_test_random_h
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* --- Definitions */
< 
< /*
<  * Macros that return a random number in a specific format.
<  */
< #define SDLTest_RandomInt(c)        ((int)SDLTest_Random(c))
< 
< /*
<  * Context structure for the random number generator state.
<  */
<   typedef struct {
<     unsigned int a;
<     unsigned int x;
<     unsigned int c;
<     unsigned int ah;
<     unsigned int al;
<   } SDLTest_RandomContext;
< 
< 
< /* --- Function prototypes */
< 
< /**
<  *  \brief Initialize random number generator with two integers.
<  *
<  *  Note: The random sequence of numbers returned by ...Random() is the
<  *  same for the same two integers and has a period of 2^31.
<  *
<  *  \param rndContext     pointer to context structure
<  *  \param xi         integer that defines the random sequence
<  *  \param ci         integer that defines the random sequence
<  *
<  */
<  void SDLTest_RandomInit(SDLTest_RandomContext * rndContext, unsigned int xi,
<                   unsigned int ci);
< 
< /**
<  *  \brief Initialize random number generator based on current system time.
<  *
<  *  \param rndContext     pointer to context structure
<  *
<  */
<  void SDLTest_RandomInitTime(SDLTest_RandomContext *rndContext);
< 
< 
< /**
<  *  \brief Initialize random number generator based on current system time.
<  *
<  *  Note: ...RandomInit() or ...RandomInitTime() must have been called
<  *  before using this function.
<  *
<  *  \param rndContext     pointer to context structure
<  *
<  *  \returns A random number (32bit unsigned integer)
<  *
<  */
<  unsigned int SDLTest_Random(SDLTest_RandomContext *rndContext);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_test_random_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_test_random.h
>  *
>  *  Include file for SDL test framework.
>  *
>  *  This code is a part of the SDL2_test library, not the main SDL library.
>  */
> 
> /*
> 
>  A "32-bit Multiply with carry random number generator. Very fast.
>  Includes a list of recommended multipliers.
> 
>  multiply-with-carry generator: x(n) = a*x(n-1) + carry mod 2^32.
>  period: (a*2^31)-1
> 
> */
> 
> #ifndef _SDL_test_random_h
> #define _SDL_test_random_h
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* --- Definitions */
> 
> /*
>  * Macros that return a random number in a specific format.
>  */
> #define SDLTest_RandomInt(c)        ((int)SDLTest_Random(c))
> 
> /*
>  * Context structure for the random number generator state.
>  */
>   typedef struct {
>     unsigned int a;
>     unsigned int x;
>     unsigned int c;
>     unsigned int ah;
>     unsigned int al;
>   } SDLTest_RandomContext;
> 
> 
> /* --- Function prototypes */
> 
> /**
>  *  \brief Initialize random number generator with two integers.
>  *
>  *  Note: The random sequence of numbers returned by ...Random() is the
>  *  same for the same two integers and has a period of 2^31.
>  *
>  *  \param rndContext     pointer to context structure
>  *  \param xi         integer that defines the random sequence
>  *  \param ci         integer that defines the random sequence
>  *
>  */
>  void SDLTest_RandomInit(SDLTest_RandomContext * rndContext, unsigned int xi,
>                   unsigned int ci);
> 
> /**
>  *  \brief Initialize random number generator based on current system time.
>  *
>  *  \param rndContext     pointer to context structure
>  *
>  */
>  void SDLTest_RandomInitTime(SDLTest_RandomContext *rndContext);
> 
> 
> /**
>  *  \brief Initialize random number generator based on current system time.
>  *
>  *  Note: ...RandomInit() or ...RandomInitTime() must have been called
>  *  before using this function.
>  *
>  *  \param rndContext     pointer to context structure
>  *
>  *  \returns A random number (32bit unsigned integer)
>  *
>  */
>  unsigned int SDLTest_Random(SDLTest_RandomContext *rndContext);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_test_random_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_thread.h ../android-sdl/jni/SDL2/include/SDL_thread.h
1,242c1,240
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_thread_h
< #define _SDL_thread_h
< 
< /**
<  *  \file SDL_thread.h
<  *
<  *  Header for the SDL thread management routines.
<  */
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< /* Thread synchronization primitives */
< #include "SDL_atomic.h"
< #include "SDL_mutex.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /* The SDL thread structure, defined in SDL_thread.c */
< struct SDL_Thread;
< typedef struct SDL_Thread SDL_Thread;
< 
< /* The SDL thread ID */
< typedef unsigned long SDL_threadID;
< 
< /* Thread local storage ID, 0 is the invalid ID */
< typedef unsigned int SDL_TLSID;
< 
< /**
<  *  The SDL thread priority.
<  *
<  *  \note On many systems you require special privileges to set high priority.
<  */
< typedef enum {
<     SDL_THREAD_PRIORITY_LOW,
<     SDL_THREAD_PRIORITY_NORMAL,
<     SDL_THREAD_PRIORITY_HIGH
< } SDL_ThreadPriority;
< 
< /**
<  *  The function passed to SDL_CreateThread().
<  *  It is passed a void* user context parameter and returns an int.
<  */
< typedef int (SDLCALL * SDL_ThreadFunction) (void *data);
< 
< #if defined(__WIN32__) && !defined(HAVE_LIBC)
< /**
<  *  \file SDL_thread.h
<  *
<  *  We compile SDL into a DLL. This means, that it's the DLL which
<  *  creates a new thread for the calling process with the SDL_CreateThread()
<  *  API. There is a problem with this, that only the RTL of the SDL.DLL will
<  *  be initialized for those threads, and not the RTL of the calling
<  *  application!
<  *
<  *  To solve this, we make a little hack here.
<  *
<  *  We'll always use the caller's _beginthread() and _endthread() APIs to
<  *  start a new thread. This way, if it's the SDL.DLL which uses this API,
<  *  then the RTL of SDL.DLL will be used to create the new thread, and if it's
<  *  the application, then the RTL of the application will be used.
<  *
<  *  So, in short:
<  *  Always use the _beginthread() and _endthread() of the calling runtime
<  *  library!
<  */
< #define SDL_PASSED_BEGINTHREAD_ENDTHREAD
< #include <process.h>            /* This has _beginthread() and _endthread() defined! */
< 
< typedef uintptr_t(__cdecl * pfnSDL_CurrentBeginThread) (void *, unsigned,
<                                                         unsigned (__stdcall *
<                                                                   func) (void
<                                                                          *),
<                                                         void *arg, unsigned,
<                                                         unsigned *threadID);
< typedef void (__cdecl * pfnSDL_CurrentEndThread) (unsigned code);
< 
< /**
<  *  Create a thread.
<  */
< extern DECLSPEC SDL_Thread *SDLCALL
< SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data,
<                  pfnSDL_CurrentBeginThread pfnBeginThread,
<                  pfnSDL_CurrentEndThread pfnEndThread);
< 
< /**
<  *  Create a thread.
<  */
< #define SDL_CreateThread(fn, name, data) SDL_CreateThread(fn, name, data, (pfnSDL_CurrentBeginThread)_beginthreadex, (pfnSDL_CurrentEndThread)_endthreadex)
< 
< #else
< 
< /**
<  *  Create a thread.
<  *
<  *   Thread naming is a little complicated: Most systems have very small
<  *    limits for the string length (BeOS has 32 bytes, Linux currently has 16,
<  *    Visual C++ 6.0 has nine!), and possibly other arbitrary rules. You'll
<  *    have to see what happens with your system's debugger. The name should be
<  *    UTF-8 (but using the naming limits of C identifiers is a better bet).
<  *   There are no requirements for thread naming conventions, so long as the
<  *    string is null-terminated UTF-8, but these guidelines are helpful in
<  *    choosing a name:
<  *
<  *    http://stackoverflow.com/questions/149932/naming-conventions-for-threads
<  *
<  *   If a system imposes requirements, SDL will try to munge the string for
<  *    it (truncate, etc), but the original string contents will be available
<  *    from SDL_GetThreadName().
<  */
< extern DECLSPEC SDL_Thread *SDLCALL
< SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);
< 
< #endif
< 
< /**
<  * Get the thread name, as it was specified in SDL_CreateThread().
<  *  This function returns a pointer to a UTF-8 string that names the
<  *  specified thread, or NULL if it doesn't have a name. This is internal
<  *  memory, not to be free()'d by the caller, and remains valid until the
<  *  specified thread is cleaned up by SDL_WaitThread().
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetThreadName(SDL_Thread *thread);
< 
< /**
<  *  Get the thread identifier for the current thread.
<  */
< extern DECLSPEC SDL_threadID SDLCALL SDL_ThreadID(void);
< 
< /**
<  *  Get the thread identifier for the specified thread.
<  *
<  *  Equivalent to SDL_ThreadID() if the specified thread is NULL.
<  */
< extern DECLSPEC SDL_threadID SDLCALL SDL_GetThreadID(SDL_Thread * thread);
< 
< /**
<  *  Set the priority for the current thread
<  */
< extern DECLSPEC int SDLCALL SDL_SetThreadPriority(SDL_ThreadPriority priority);
< 
< /**
<  *  Wait for a thread to finish.
<  *
<  *  The return code for the thread function is placed in the area
<  *  pointed to by \c status, if \c status is not NULL.
<  */
< extern DECLSPEC void SDLCALL SDL_WaitThread(SDL_Thread * thread, int *status);
< 
< /**
<  *  \brief Create an identifier that is globally visible to all threads but refers to data that is thread-specific.
<  *
<  *  \return The newly created thread local storage identifier, or 0 on error
<  *
<  *  \code
<  *  static SDL_SpinLock tls_lock;
<  *  static SDL_TLSID thread_local_storage;
<  * 
<  *  void SetMyThreadData(void *value)
<  *  {
<  *      if (!thread_local_storage) {
<  *          SDL_AtomicLock(&tls_lock);
<  *          if (!thread_local_storage) {
<  *              thread_local_storage = SDL_TLSCreate();
<  *          }
<  *          SDL_AtomicUnLock(&tls_lock);
<  *      }
<  *      SDL_TLSSet(thread_local_storage, value);
<  *  }
<  *  
<  *  void *GetMyThreadData(void)
<  *  {
<  *      return SDL_TLSGet(thread_local_storage);
<  *  }
<  *  \endcode
<  *
<  *  \sa SDL_TLSGet()
<  *  \sa SDL_TLSSet()
<  */
< extern DECLSPEC SDL_TLSID SDLCALL SDL_TLSCreate(void);
< 
< /**
<  *  \brief Get the value associated with a thread local storage ID for the current thread.
<  *
<  *  \param id The thread local storage ID
<  *
<  *  \return The value associated with the ID for the current thread, or NULL if no value has been set.
<  *
<  *  \sa SDL_TLSCreate()
<  *  \sa SDL_TLSSet()
<  */
< extern DECLSPEC void * SDLCALL SDL_TLSGet(SDL_TLSID id);
< 
< /**
<  *  \brief Set the value associated with a thread local storage ID for the current thread.
<  *
<  *  \param id The thread local storage ID
<  *  \param value The value to associate with the ID for the current thread
<  *  \param destructor A function called when the thread exits, to free the value.
<  *
<  *  \return 0 on success, -1 on error
<  *
<  *  \sa SDL_TLSCreate()
<  *  \sa SDL_TLSGet()
<  */
< extern DECLSPEC int SDLCALL SDL_TLSSet(SDL_TLSID id, const void *value, void (*destructor)(void*));
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_thread_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_thread_h
> #define _SDL_thread_h
> 
> /**
>  *  \file SDL_thread.h
>  *
>  *  Header for the SDL thread management routines.
>  */
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> /* Thread synchronization primitives */
> #include "SDL_atomic.h"
> #include "SDL_mutex.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /* The SDL thread structure, defined in SDL_thread.c */
> struct SDL_Thread;
> typedef struct SDL_Thread SDL_Thread;
> 
> /* The SDL thread ID */
> typedef unsigned long SDL_threadID;
> 
> /* Thread local storage ID, 0 is the invalid ID */
> typedef unsigned int SDL_TLSID;
> 
> /* The SDL thread priority
>  *
>  * Note: On many systems you require special privileges to set high priority.
>  */
> typedef enum {
>     SDL_THREAD_PRIORITY_LOW,
>     SDL_THREAD_PRIORITY_NORMAL,
>     SDL_THREAD_PRIORITY_HIGH
> } SDL_ThreadPriority;
> 
> /* The function passed to SDL_CreateThread()
>    It is passed a void* user context parameter and returns an int.
>  */
> typedef int (SDLCALL * SDL_ThreadFunction) (void *data);
> 
> #if defined(__WIN32__) && !defined(HAVE_LIBC)
> /**
>  *  \file SDL_thread.h
>  *
>  *  We compile SDL into a DLL. This means, that it's the DLL which
>  *  creates a new thread for the calling process with the SDL_CreateThread()
>  *  API. There is a problem with this, that only the RTL of the SDL.DLL will
>  *  be initialized for those threads, and not the RTL of the calling
>  *  application!
>  *
>  *  To solve this, we make a little hack here.
>  *
>  *  We'll always use the caller's _beginthread() and _endthread() APIs to
>  *  start a new thread. This way, if it's the SDL.DLL which uses this API,
>  *  then the RTL of SDL.DLL will be used to create the new thread, and if it's
>  *  the application, then the RTL of the application will be used.
>  *
>  *  So, in short:
>  *  Always use the _beginthread() and _endthread() of the calling runtime
>  *  library!
>  */
> #define SDL_PASSED_BEGINTHREAD_ENDTHREAD
> #include <process.h>            /* This has _beginthread() and _endthread() defined! */
> 
> typedef uintptr_t(__cdecl * pfnSDL_CurrentBeginThread) (void *, unsigned,
>                                                         unsigned (__stdcall *
>                                                                   func) (void
>                                                                          *),
>                                                         void *arg, unsigned,
>                                                         unsigned *threadID);
> typedef void (__cdecl * pfnSDL_CurrentEndThread) (unsigned code);
> 
> /**
>  *  Create a thread.
>  */
> extern DECLSPEC SDL_Thread *SDLCALL
> SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data,
>                  pfnSDL_CurrentBeginThread pfnBeginThread,
>                  pfnSDL_CurrentEndThread pfnEndThread);
> 
> /**
>  *  Create a thread.
>  */
> #define SDL_CreateThread(fn, name, data) SDL_CreateThread(fn, name, data, (pfnSDL_CurrentBeginThread)_beginthreadex, (pfnSDL_CurrentEndThread)_endthreadex)
> 
> #else
> 
> /**
>  *  Create a thread.
>  *
>  *   Thread naming is a little complicated: Most systems have very small
>  *    limits for the string length (BeOS has 32 bytes, Linux currently has 16,
>  *    Visual C++ 6.0 has nine!), and possibly other arbitrary rules. You'll
>  *    have to see what happens with your system's debugger. The name should be
>  *    UTF-8 (but using the naming limits of C identifiers is a better bet).
>  *   There are no requirements for thread naming conventions, so long as the
>  *    string is null-terminated UTF-8, but these guidelines are helpful in
>  *    choosing a name:
>  *
>  *    http://stackoverflow.com/questions/149932/naming-conventions-for-threads
>  *
>  *   If a system imposes requirements, SDL will try to munge the string for
>  *    it (truncate, etc), but the original string contents will be available
>  *    from SDL_GetThreadName().
>  */
> extern DECLSPEC SDL_Thread *SDLCALL
> SDL_CreateThread(SDL_ThreadFunction fn, const char *name, void *data);
> 
> #endif
> 
> /**
>  * Get the thread name, as it was specified in SDL_CreateThread().
>  *  This function returns a pointer to a UTF-8 string that names the
>  *  specified thread, or NULL if it doesn't have a name. This is internal
>  *  memory, not to be free()'d by the caller, and remains valid until the
>  *  specified thread is cleaned up by SDL_WaitThread().
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetThreadName(SDL_Thread *thread);
> 
> /**
>  *  Get the thread identifier for the current thread.
>  */
> extern DECLSPEC SDL_threadID SDLCALL SDL_ThreadID(void);
> 
> /**
>  *  Get the thread identifier for the specified thread.
>  *
>  *  Equivalent to SDL_ThreadID() if the specified thread is NULL.
>  */
> extern DECLSPEC SDL_threadID SDLCALL SDL_GetThreadID(SDL_Thread * thread);
> 
> /**
>  *  Set the priority for the current thread
>  */
> extern DECLSPEC int SDLCALL SDL_SetThreadPriority(SDL_ThreadPriority priority);
> 
> /**
>  *  Wait for a thread to finish.
>  *
>  *  The return code for the thread function is placed in the area
>  *  pointed to by \c status, if \c status is not NULL.
>  */
> extern DECLSPEC void SDLCALL SDL_WaitThread(SDL_Thread * thread, int *status);
> 
> /**
>  *  \brief Create an identifier that is globally visible to all threads but refers to data that is thread-specific.
>  *
>  *  \return The newly created thread local storage identifier, or 0 on error
>  *
>  *  \code
>  *  static SDL_SpinLock tls_lock;
>  *  static SDL_TLSID thread_local_storage;
>  * 
>  *  void SetMyThreadData(void *value)
>  *  {
>  *      if (!thread_local_storage) {
>  *          SDL_AtomicLock(&tls_lock);
>  *          if (!thread_local_storage) {
>  *              thread_local_storage = SDL_TLSCreate();
>  *          }
>  *          SDL_AtomicUnLock(&tls_lock);
>  *      }
>  *      SDL_TLSSet(thread_local_storage, value);
>  *  }
>  *  
>  *  void *GetMyThreadData(void)
>  *  {
>  *      return SDL_TLSGet(thread_local_storage);
>  *  }
>  *  \endcode
>  *
>  *  \sa SDL_TLSGet()
>  *  \sa SDL_TLSSet()
>  */
> extern DECLSPEC SDL_TLSID SDLCALL SDL_TLSCreate(void);
> 
> /**
>  *  \brief Get the value associated with a thread local storage ID for the current thread.
>  *
>  *  \param id The thread local storage ID
>  *
>  *  \return The value associated with the ID for the current thread, or NULL if no value has been set.
>  *
>  *  \sa SDL_TLSCreate()
>  *  \sa SDL_TLSSet()
>  */
> extern DECLSPEC void * SDLCALL SDL_TLSGet(SDL_TLSID id);
> 
> /**
>  *  \brief Set the value associated with a thread local storage ID for the current thread.
>  *
>  *  \param id The thread local storage ID
>  *  \param value The value to associate with the ID for the current thread
>  *  \param destructor A function called when the thread exits, to free the value.
>  *
>  *  \return 0 on success, -1 on error
>  *
>  *  \sa SDL_TLSCreate()
>  *  \sa SDL_TLSGet()
>  */
> extern DECLSPEC int SDLCALL SDL_TLSSet(SDL_TLSID id, const void *value, void (*destructor)(void*));
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_thread_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_timer.h ../android-sdl/jni/SDL2/include/SDL_timer.h
1,115c1,104
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< #ifndef _SDL_timer_h
< #define _SDL_timer_h
< 
< /**
<  *  \file SDL_timer.h
<  *
<  *  Header for the SDL time management routines.
<  */
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  * \brief Get the number of milliseconds since the SDL library initialization.
<  *
<  * \note This value wraps if the program runs for more than ~49 days.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_GetTicks(void);
< 
< /**
<  * \brief Compare SDL ticks values, and return true if A has passed B
<  *
<  * e.g. if you want to wait 100 ms, you could do this:
<  *  Uint32 timeout = SDL_GetTicks() + 100;
<  *  while (!SDL_TICKS_PASSED(SDL_GetTicks(), timeout)) {
<  *      ... do work until timeout has elapsed
<  *  }
<  */
< #define SDL_TICKS_PASSED(A, B)  ((Sint32)((B) - (A)) <= 0)
< 
< /**
<  * \brief Get the current value of the high resolution counter
<  */
< extern DECLSPEC Uint64 SDLCALL SDL_GetPerformanceCounter(void);
< 
< /**
<  * \brief Get the count per second of the high resolution counter
<  */
< extern DECLSPEC Uint64 SDLCALL SDL_GetPerformanceFrequency(void);
< 
< /**
<  * \brief Wait a specified number of milliseconds before returning.
<  */
< extern DECLSPEC void SDLCALL SDL_Delay(Uint32 ms);
< 
< /**
<  *  Function prototype for the timer callback function.
<  *
<  *  The callback function is passed the current timer interval and returns
<  *  the next timer interval.  If the returned value is the same as the one
<  *  passed in, the periodic alarm continues, otherwise a new alarm is
<  *  scheduled.  If the callback returns 0, the periodic alarm is cancelled.
<  */
< typedef Uint32 (SDLCALL * SDL_TimerCallback) (Uint32 interval, void *param);
< 
< /**
<  * Definition of the timer ID type.
<  */
< typedef int SDL_TimerID;
< 
< /**
<  * \brief Add a new timer to the pool of timers already running.
<  *
<  * \return A timer ID, or NULL when an error occurs.
<  */
< extern DECLSPEC SDL_TimerID SDLCALL SDL_AddTimer(Uint32 interval,
<                                                  SDL_TimerCallback callback,
<                                                  void *param);
< 
< /**
<  * \brief Remove a timer knowing its ID.
<  *
<  * \return A boolean value indicating success or failure.
<  *
<  * \warning It is not safe to remove a timer multiple times.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_RemoveTimer(SDL_TimerID id);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_timer_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> #ifndef _SDL_timer_h
> #define _SDL_timer_h
> 
> /**
>  *  \file SDL_timer.h
>  *
>  *  Header for the SDL time management routines.
>  */
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  * \brief Get the number of milliseconds since the SDL library initialization.
>  *
>  * \note This value wraps if the program runs for more than ~49 days.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_GetTicks(void);
> 
> /**
>  * \brief Get the current value of the high resolution counter
>  */
> extern DECLSPEC Uint64 SDLCALL SDL_GetPerformanceCounter(void);
> 
> /**
>  * \brief Get the count per second of the high resolution counter
>  */
> extern DECLSPEC Uint64 SDLCALL SDL_GetPerformanceFrequency(void);
> 
> /**
>  * \brief Wait a specified number of milliseconds before returning.
>  */
> extern DECLSPEC void SDLCALL SDL_Delay(Uint32 ms);
> 
> /**
>  *  Function prototype for the timer callback function.
>  *
>  *  The callback function is passed the current timer interval and returns
>  *  the next timer interval.  If the returned value is the same as the one
>  *  passed in, the periodic alarm continues, otherwise a new alarm is
>  *  scheduled.  If the callback returns 0, the periodic alarm is cancelled.
>  */
> typedef Uint32 (SDLCALL * SDL_TimerCallback) (Uint32 interval, void *param);
> 
> /**
>  * Definition of the timer ID type.
>  */
> typedef int SDL_TimerID;
> 
> /**
>  * \brief Add a new timer to the pool of timers already running.
>  *
>  * \return A timer ID, or NULL when an error occurs.
>  */
> extern DECLSPEC SDL_TimerID SDLCALL SDL_AddTimer(Uint32 interval,
>                                                  SDL_TimerCallback callback,
>                                                  void *param);
> 
> /**
>  * \brief Remove a timer knowing its ID.
>  *
>  * \return A boolean value indicating success or failure.
>  *
>  * \warning It is not safe to remove a timer multiple times.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_RemoveTimer(SDL_TimerID id);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_timer_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_touch.h ../android-sdl/jni/SDL2/include/SDL_touch.h
1,86c1,86
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_touch.h
<  *
<  *  Include file for SDL touch event handling.
<  */
< 
< #ifndef _SDL_touch_h
< #define _SDL_touch_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_error.h"
< #include "SDL_video.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< typedef Sint64 SDL_TouchID;
< typedef Sint64 SDL_FingerID;
< 
< typedef struct SDL_Finger
< {
<     SDL_FingerID id;
<     float x;
<     float y;
<     float pressure;
< } SDL_Finger;
< 
< /* Used as the device ID for mouse events simulated with touch input */
< #define SDL_TOUCH_MOUSEID ((Uint32)-1)
< 
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Get the number of registered touch devices.
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumTouchDevices(void);
< 
< /**
<  *  \brief Get the touch ID with the given index, or 0 if the index is invalid.
<  */
< extern DECLSPEC SDL_TouchID SDLCALL SDL_GetTouchDevice(int index);
< 
< /**
<  *  \brief Get the number of active fingers for a given touch device.
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumTouchFingers(SDL_TouchID touchID);
< 
< /**
<  *  \brief Get the finger object of the given touch, with the given index.
<  */
< extern DECLSPEC SDL_Finger * SDLCALL SDL_GetTouchFinger(SDL_TouchID touchID, int index);
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_touch_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_touch.h
>  *
>  *  Include file for SDL touch event handling.
>  */
> 
> #ifndef _SDL_touch_h
> #define _SDL_touch_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_error.h"
> #include "SDL_video.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> typedef Sint64 SDL_TouchID;
> typedef Sint64 SDL_FingerID;
> 
> typedef struct SDL_Finger
> {
>     SDL_FingerID id;
>     float x;
>     float y;
>     float pressure;
> } SDL_Finger;
> 
> /* Used as the device ID for mouse events simulated with touch input */
> #define SDL_TOUCH_MOUSEID ((Uint32)-1)
> 
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Get the number of registered touch devices.
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumTouchDevices(void);
> 
> /**
>  *  \brief Get the touch ID with the given index, or 0 if the index is invalid.
>  */
> extern DECLSPEC SDL_TouchID SDLCALL SDL_GetTouchDevice(int index);
> 
> /**
>  *  \brief Get the number of active fingers for a given touch device.
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumTouchFingers(SDL_TouchID touchID);
> 
> /**
>  *  \brief Get the finger object of the given touch, with the given index.
>  */
> extern DECLSPEC SDL_Finger * SDLCALL SDL_GetTouchFinger(SDL_TouchID touchID, int index);
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_touch_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_types.h ../android-sdl/jni/SDL2/include/SDL_types.h
1,29c1,29
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_types.h
<  *
<  *  \deprecated
<  */
< 
< /* DEPRECATED */
< #include "SDL_stdinc.h"
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_types.h
>  *
>  *  \deprecated
>  */
> 
> /* DEPRECATED */
> #include "SDL_stdinc.h"
diff jni/SDL/include/SDL_version.h ../android-sdl/jni/SDL2/include/SDL_version.h
1,162c1,162
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_version.h
<  *
<  *  This header defines the current SDL version.
<  */
< 
< #ifndef _SDL_version_h
< #define _SDL_version_h
< 
< #include "SDL_stdinc.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief Information the version of SDL in use.
<  *
<  *  Represents the library's version as three levels: major revision
<  *  (increments with massive changes, additions, and enhancements),
<  *  minor revision (increments with backwards-compatible changes to the
<  *  major revision), and patchlevel (increments with fixes to the minor
<  *  revision).
<  *
<  *  \sa SDL_VERSION
<  *  \sa SDL_GetVersion
<  */
< typedef struct SDL_version
< {
<     Uint8 major;        /**< major version */
<     Uint8 minor;        /**< minor version */
<     Uint8 patch;        /**< update version */
< } SDL_version;
< 
< /* Printable format: "%d.%d.%d", MAJOR, MINOR, PATCHLEVEL
< */
< #define SDL_MAJOR_VERSION   2
< #define SDL_MINOR_VERSION   0
< #define SDL_PATCHLEVEL      1
< 
< /**
<  *  \brief Macro to determine SDL version program was compiled against.
<  *
<  *  This macro fills in a SDL_version structure with the version of the
<  *  library you compiled against. This is determined by what header the
<  *  compiler uses. Note that if you dynamically linked the library, you might
<  *  have a slightly newer or older version at runtime. That version can be
<  *  determined with SDL_GetVersion(), which, unlike SDL_VERSION(),
<  *  is not a macro.
<  *
<  *  \param x A pointer to a SDL_version struct to initialize.
<  *
<  *  \sa SDL_version
<  *  \sa SDL_GetVersion
<  */
< #define SDL_VERSION(x)                          \
< {                                   \
<     (x)->major = SDL_MAJOR_VERSION;                 \
<     (x)->minor = SDL_MINOR_VERSION;                 \
<     (x)->patch = SDL_PATCHLEVEL;                    \
< }
< 
< /**
<  *  This macro turns the version numbers into a numeric value:
<  *  \verbatim
<     (1,2,3) -> (1203)
<     \endverbatim
<  *
<  *  This assumes that there will never be more than 100 patchlevels.
<  */
< #define SDL_VERSIONNUM(X, Y, Z)                     \
<     ((X)*1000 + (Y)*100 + (Z))
< 
< /**
<  *  This is the version number macro for the current SDL version.
<  */
< #define SDL_COMPILEDVERSION \
<     SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL)
< 
< /**
<  *  This macro will evaluate to true if compiled with SDL at least X.Y.Z.
<  */
< #define SDL_VERSION_ATLEAST(X, Y, Z) \
<     (SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z))
< 
< /**
<  *  \brief Get the version of SDL that is linked against your program.
<  *
<  *  If you are linking to SDL dynamically, then it is possible that the
<  *  current version will be different than the version you compiled against.
<  *  This function returns the current version, while SDL_VERSION() is a
<  *  macro that tells you what version you compiled with.
<  *
<  *  \code
<  *  SDL_version compiled;
<  *  SDL_version linked;
<  *
<  *  SDL_VERSION(&compiled);
<  *  SDL_GetVersion(&linked);
<  *  printf("We compiled against SDL version %d.%d.%d ...\n",
<  *         compiled.major, compiled.minor, compiled.patch);
<  *  printf("But we linked against SDL version %d.%d.%d.\n",
<  *         linked.major, linked.minor, linked.patch);
<  *  \endcode
<  *
<  *  This function may be called safely at any time, even before SDL_Init().
<  *
<  *  \sa SDL_VERSION
<  */
< extern DECLSPEC void SDLCALL SDL_GetVersion(SDL_version * ver);
< 
< /**
<  *  \brief Get the code revision of SDL that is linked against your program.
<  *
<  *  Returns an arbitrary string (a hash value) uniquely identifying the
<  *  exact revision of the SDL library in use, and is only useful in comparing
<  *  against other revisions. It is NOT an incrementing number.
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetRevision(void);
< 
< /**
<  *  \brief Get the revision number of SDL that is linked against your program.
<  *
<  *  Returns a number uniquely identifying the exact revision of the SDL
<  *  library in use. It is an incrementing number based on commits to
<  *  hg.libsdl.org.
<  */
< extern DECLSPEC int SDLCALL SDL_GetRevisionNumber(void);
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_version_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_version.h
>  *
>  *  This header defines the current SDL version.
>  */
> 
> #ifndef _SDL_version_h
> #define _SDL_version_h
> 
> #include "SDL_stdinc.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief Information the version of SDL in use.
>  *
>  *  Represents the library's version as three levels: major revision
>  *  (increments with massive changes, additions, and enhancements),
>  *  minor revision (increments with backwards-compatible changes to the
>  *  major revision), and patchlevel (increments with fixes to the minor
>  *  revision).
>  *
>  *  \sa SDL_VERSION
>  *  \sa SDL_GetVersion
>  */
> typedef struct SDL_version
> {
>     Uint8 major;        /**< major version */
>     Uint8 minor;        /**< minor version */
>     Uint8 patch;        /**< update version */
> } SDL_version;
> 
> /* Printable format: "%d.%d.%d", MAJOR, MINOR, PATCHLEVEL
> */
> #define SDL_MAJOR_VERSION   2
> #define SDL_MINOR_VERSION   0
> #define SDL_PATCHLEVEL      0
> 
> /**
>  *  \brief Macro to determine SDL version program was compiled against.
>  *
>  *  This macro fills in a SDL_version structure with the version of the
>  *  library you compiled against. This is determined by what header the
>  *  compiler uses. Note that if you dynamically linked the library, you might
>  *  have a slightly newer or older version at runtime. That version can be
>  *  determined with SDL_GetVersion(), which, unlike SDL_VERSION(),
>  *  is not a macro.
>  *
>  *  \param x A pointer to a SDL_version struct to initialize.
>  *
>  *  \sa SDL_version
>  *  \sa SDL_GetVersion
>  */
> #define SDL_VERSION(x)                          \
> {                                   \
>     (x)->major = SDL_MAJOR_VERSION;                 \
>     (x)->minor = SDL_MINOR_VERSION;                 \
>     (x)->patch = SDL_PATCHLEVEL;                    \
> }
> 
> /**
>  *  This macro turns the version numbers into a numeric value:
>  *  \verbatim
>     (1,2,3) -> (1203)
>     \endverbatim
>  *
>  *  This assumes that there will never be more than 100 patchlevels.
>  */
> #define SDL_VERSIONNUM(X, Y, Z)                     \
>     ((X)*1000 + (Y)*100 + (Z))
> 
> /**
>  *  This is the version number macro for the current SDL version.
>  */
> #define SDL_COMPILEDVERSION \
>     SDL_VERSIONNUM(SDL_MAJOR_VERSION, SDL_MINOR_VERSION, SDL_PATCHLEVEL)
> 
> /**
>  *  This macro will evaluate to true if compiled with SDL at least X.Y.Z.
>  */
> #define SDL_VERSION_ATLEAST(X, Y, Z) \
>     (SDL_COMPILEDVERSION >= SDL_VERSIONNUM(X, Y, Z))
> 
> /**
>  *  \brief Get the version of SDL that is linked against your program.
>  *
>  *  If you are linking to SDL dynamically, then it is possible that the
>  *  current version will be different than the version you compiled against.
>  *  This function returns the current version, while SDL_VERSION() is a
>  *  macro that tells you what version you compiled with.
>  *
>  *  \code
>  *  SDL_version compiled;
>  *  SDL_version linked;
>  *
>  *  SDL_VERSION(&compiled);
>  *  SDL_GetVersion(&linked);
>  *  printf("We compiled against SDL version %d.%d.%d ...\n",
>  *         compiled.major, compiled.minor, compiled.patch);
>  *  printf("But we linked against SDL version %d.%d.%d.\n",
>  *         linked.major, linked.minor, linked.patch);
>  *  \endcode
>  *
>  *  This function may be called safely at any time, even before SDL_Init().
>  *
>  *  \sa SDL_VERSION
>  */
> extern DECLSPEC void SDLCALL SDL_GetVersion(SDL_version * ver);
> 
> /**
>  *  \brief Get the code revision of SDL that is linked against your program.
>  *
>  *  Returns an arbitrary string (a hash value) uniquely identifying the
>  *  exact revision of the SDL library in use, and is only useful in comparing
>  *  against other revisions. It is NOT an incrementing number.
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetRevision(void);
> 
> /**
>  *  \brief Get the revision number of SDL that is linked against your program.
>  *
>  *  Returns a number uniquely identifying the exact revision of the SDL
>  *  library in use. It is an incrementing number based on commits to
>  *  hg.libsdl.org.
>  */
> extern DECLSPEC int SDLCALL SDL_GetRevisionNumber(void);
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_version_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
diff jni/SDL/include/SDL_video.h ../android-sdl/jni/SDL2/include/SDL_video.h
1,974c1,953
< /*
<   Simple DirectMedia Layer
<   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
< 
<   This software is provided 'as-is', without any express or implied
<   warranty.  In no event will the authors be held liable for any damages
<   arising from the use of this software.
< 
<   Permission is granted to anyone to use this software for any purpose,
<   including commercial applications, and to alter it and redistribute it
<   freely, subject to the following restrictions:
< 
<   1. The origin of this software must not be misrepresented; you must not
<      claim that you wrote the original software. If you use this software
<      in a product, an acknowledgment in the product documentation would be
<      appreciated but is not required.
<   2. Altered source versions must be plainly marked as such, and must not be
<      misrepresented as being the original software.
<   3. This notice may not be removed or altered from any source distribution.
< */
< 
< /**
<  *  \file SDL_video.h
<  *
<  *  Header file for SDL video functions.
<  */
< 
< #ifndef _SDL_video_h
< #define _SDL_video_h
< 
< #include "SDL_stdinc.h"
< #include "SDL_pixels.h"
< #include "SDL_rect.h"
< #include "SDL_surface.h"
< 
< #include "begin_code.h"
< /* Set up for C function definitions, even when using C++ */
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< /**
<  *  \brief  The structure that defines a display mode
<  *
<  *  \sa SDL_GetNumDisplayModes()
<  *  \sa SDL_GetDisplayMode()
<  *  \sa SDL_GetDesktopDisplayMode()
<  *  \sa SDL_GetCurrentDisplayMode()
<  *  \sa SDL_GetClosestDisplayMode()
<  *  \sa SDL_SetWindowDisplayMode()
<  *  \sa SDL_GetWindowDisplayMode()
<  */
< typedef struct
< {
<     Uint32 format;              /**< pixel format */
<     int w;                      /**< width */
<     int h;                      /**< height */
<     int refresh_rate;           /**< refresh rate (or zero for unspecified) */
<     void *driverdata;           /**< driver-specific data, initialize to 0 */
< } SDL_DisplayMode;
< 
< /**
<  *  \brief The type used to identify a window
<  *
<  *  \sa SDL_CreateWindow()
<  *  \sa SDL_CreateWindowFrom()
<  *  \sa SDL_DestroyWindow()
<  *  \sa SDL_GetWindowData()
<  *  \sa SDL_GetWindowFlags()
<  *  \sa SDL_GetWindowGrab()
<  *  \sa SDL_GetWindowPosition()
<  *  \sa SDL_GetWindowSize()
<  *  \sa SDL_GetWindowTitle()
<  *  \sa SDL_HideWindow()
<  *  \sa SDL_MaximizeWindow()
<  *  \sa SDL_MinimizeWindow()
<  *  \sa SDL_RaiseWindow()
<  *  \sa SDL_RestoreWindow()
<  *  \sa SDL_SetWindowData()
<  *  \sa SDL_SetWindowFullscreen()
<  *  \sa SDL_SetWindowGrab()
<  *  \sa SDL_SetWindowIcon()
<  *  \sa SDL_SetWindowPosition()
<  *  \sa SDL_SetWindowSize()
<  *  \sa SDL_SetWindowBordered()
<  *  \sa SDL_SetWindowTitle()
<  *  \sa SDL_ShowWindow()
<  */
< typedef struct SDL_Window SDL_Window;
< 
< /**
<  *  \brief The flags on a window
<  *
<  *  \sa SDL_GetWindowFlags()
<  */
< typedef enum
< {
<     SDL_WINDOW_FULLSCREEN = 0x00000001,         /**< fullscreen window */
<     SDL_WINDOW_OPENGL = 0x00000002,             /**< window usable with OpenGL context */
<     SDL_WINDOW_SHOWN = 0x00000004,              /**< window is visible */
<     SDL_WINDOW_HIDDEN = 0x00000008,             /**< window is not visible */
<     SDL_WINDOW_BORDERLESS = 0x00000010,         /**< no window decoration */
<     SDL_WINDOW_RESIZABLE = 0x00000020,          /**< window can be resized */
<     SDL_WINDOW_MINIMIZED = 0x00000040,          /**< window is minimized */
<     SDL_WINDOW_MAXIMIZED = 0x00000080,          /**< window is maximized */
<     SDL_WINDOW_INPUT_GRABBED = 0x00000100,      /**< window has grabbed input focus */
<     SDL_WINDOW_INPUT_FOCUS = 0x00000200,        /**< window has input focus */
<     SDL_WINDOW_MOUSE_FOCUS = 0x00000400,        /**< window has mouse focus */
<     SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 ),
<     SDL_WINDOW_FOREIGN = 0x00000800,            /**< window not created by SDL */
<     SDL_WINDOW_ALLOW_HIGHDPI = 0x00002000       /**< window should be created in high-DPI mode if supported */
< } SDL_WindowFlags;
< 
< /**
<  *  \brief Used to indicate that you don't care what the window position is.
<  */
< #define SDL_WINDOWPOS_UNDEFINED_MASK    0x1FFF0000
< #define SDL_WINDOWPOS_UNDEFINED_DISPLAY(X)  (SDL_WINDOWPOS_UNDEFINED_MASK|(X))
< #define SDL_WINDOWPOS_UNDEFINED         SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)
< #define SDL_WINDOWPOS_ISUNDEFINED(X)    \
<             (((X)&0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK)
< 
< /**
<  *  \brief Used to indicate that the window position should be centered.
<  */
< #define SDL_WINDOWPOS_CENTERED_MASK    0x2FFF0000
< #define SDL_WINDOWPOS_CENTERED_DISPLAY(X)  (SDL_WINDOWPOS_CENTERED_MASK|(X))
< #define SDL_WINDOWPOS_CENTERED         SDL_WINDOWPOS_CENTERED_DISPLAY(0)
< #define SDL_WINDOWPOS_ISCENTERED(X)    \
<             (((X)&0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK)
< 
< /**
<  *  \brief Event subtype for window events
<  */
< typedef enum
< {
<     SDL_WINDOWEVENT_NONE,           /**< Never used */
<     SDL_WINDOWEVENT_SHOWN,          /**< Window has been shown */
<     SDL_WINDOWEVENT_HIDDEN,         /**< Window has been hidden */
<     SDL_WINDOWEVENT_EXPOSED,        /**< Window has been exposed and should be
<                                          redrawn */
<     SDL_WINDOWEVENT_MOVED,          /**< Window has been moved to data1, data2
<                                      */
<     SDL_WINDOWEVENT_RESIZED,        /**< Window has been resized to data1xdata2 */
<     SDL_WINDOWEVENT_SIZE_CHANGED,   /**< The window size has changed, either as a result of an API call or through the system or user changing the window size. */
<     SDL_WINDOWEVENT_MINIMIZED,      /**< Window has been minimized */
<     SDL_WINDOWEVENT_MAXIMIZED,      /**< Window has been maximized */
<     SDL_WINDOWEVENT_RESTORED,       /**< Window has been restored to normal size
<                                          and position */
<     SDL_WINDOWEVENT_ENTER,          /**< Window has gained mouse focus */
<     SDL_WINDOWEVENT_LEAVE,          /**< Window has lost mouse focus */
<     SDL_WINDOWEVENT_FOCUS_GAINED,   /**< Window has gained keyboard focus */
<     SDL_WINDOWEVENT_FOCUS_LOST,     /**< Window has lost keyboard focus */
<     SDL_WINDOWEVENT_CLOSE           /**< The window manager requests that the
<                                          window be closed */
< } SDL_WindowEventID;
< 
< /**
<  *  \brief An opaque handle to an OpenGL context.
<  */
< typedef void *SDL_GLContext;
< 
< /**
<  *  \brief OpenGL configuration attributes
<  */
< typedef enum
< {
<     SDL_GL_RED_SIZE,
<     SDL_GL_GREEN_SIZE,
<     SDL_GL_BLUE_SIZE,
<     SDL_GL_ALPHA_SIZE,
<     SDL_GL_BUFFER_SIZE,
<     SDL_GL_DOUBLEBUFFER,
<     SDL_GL_DEPTH_SIZE,
<     SDL_GL_STENCIL_SIZE,
<     SDL_GL_ACCUM_RED_SIZE,
<     SDL_GL_ACCUM_GREEN_SIZE,
<     SDL_GL_ACCUM_BLUE_SIZE,
<     SDL_GL_ACCUM_ALPHA_SIZE,
<     SDL_GL_STEREO,
<     SDL_GL_MULTISAMPLEBUFFERS,
<     SDL_GL_MULTISAMPLESAMPLES,
<     SDL_GL_ACCELERATED_VISUAL,
<     SDL_GL_RETAINED_BACKING,
<     SDL_GL_CONTEXT_MAJOR_VERSION,
<     SDL_GL_CONTEXT_MINOR_VERSION,
<     SDL_GL_CONTEXT_EGL,
<     SDL_GL_CONTEXT_FLAGS,
<     SDL_GL_CONTEXT_PROFILE_MASK,
<     SDL_GL_SHARE_WITH_CURRENT_CONTEXT,
<     SDL_GL_FRAMEBUFFER_SRGB_CAPABLE
< } SDL_GLattr;
< 
< typedef enum
< {
<     SDL_GL_CONTEXT_PROFILE_CORE           = 0x0001,
<     SDL_GL_CONTEXT_PROFILE_COMPATIBILITY  = 0x0002,
<     SDL_GL_CONTEXT_PROFILE_ES             = 0x0004 /* GLX_CONTEXT_ES2_PROFILE_BIT_EXT */
< } SDL_GLprofile;
< 
< typedef enum
< {
<     SDL_GL_CONTEXT_DEBUG_FLAG              = 0x0001,
<     SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
<     SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG      = 0x0004,
<     SDL_GL_CONTEXT_RESET_ISOLATION_FLAG    = 0x0008
< } SDL_GLcontextFlag;
< 
< 
< /* Function prototypes */
< 
< /**
<  *  \brief Get the number of video drivers compiled into SDL
<  *
<  *  \sa SDL_GetVideoDriver()
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumVideoDrivers(void);
< 
< /**
<  *  \brief Get the name of a built in video driver.
<  *
<  *  \note The video drivers are presented in the order in which they are
<  *        normally checked during initialization.
<  *
<  *  \sa SDL_GetNumVideoDrivers()
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetVideoDriver(int index);
< 
< /**
<  *  \brief Initialize the video subsystem, optionally specifying a video driver.
<  *
<  *  \param driver_name Initialize a specific driver by name, or NULL for the
<  *                     default video driver.
<  *
<  *  \return 0 on success, -1 on error
<  *
<  *  This function initializes the video subsystem; setting up a connection
<  *  to the window manager, etc, and determines the available display modes
<  *  and pixel formats, but does not initialize a window or graphics mode.
<  *
<  *  \sa SDL_VideoQuit()
<  */
< extern DECLSPEC int SDLCALL SDL_VideoInit(const char *driver_name);
< 
< /**
<  *  \brief Shuts down the video subsystem.
<  *
<  *  This function closes all windows, and restores the original video mode.
<  *
<  *  \sa SDL_VideoInit()
<  */
< extern DECLSPEC void SDLCALL SDL_VideoQuit(void);
< 
< /**
<  *  \brief Returns the name of the currently initialized video driver.
<  *
<  *  \return The name of the current video driver or NULL if no driver
<  *          has been initialized
<  *
<  *  \sa SDL_GetNumVideoDrivers()
<  *  \sa SDL_GetVideoDriver()
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetCurrentVideoDriver(void);
< 
< /**
<  *  \brief Returns the number of available video displays.
<  *
<  *  \sa SDL_GetDisplayBounds()
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumVideoDisplays(void);
< 
< /**
<  *  \brief Get the name of a display in UTF-8 encoding
<  *
<  *  \return The name of a display, or NULL for an invalid display index.
<  *
<  *  \sa SDL_GetNumVideoDisplays()
<  */
< extern DECLSPEC const char * SDLCALL SDL_GetDisplayName(int displayIndex);
< 
< /**
<  *  \brief Get the desktop area represented by a display, with the primary
<  *         display located at 0,0
<  *
<  *  \return 0 on success, or -1 if the index is out of range.
<  *
<  *  \sa SDL_GetNumVideoDisplays()
<  */
< extern DECLSPEC int SDLCALL SDL_GetDisplayBounds(int displayIndex, SDL_Rect * rect);
< 
< /**
<  *  \brief Returns the number of available display modes.
<  *
<  *  \sa SDL_GetDisplayMode()
<  */
< extern DECLSPEC int SDLCALL SDL_GetNumDisplayModes(int displayIndex);
< 
< /**
<  *  \brief Fill in information about a specific display mode.
<  *
<  *  \note The display modes are sorted in this priority:
<  *        \li bits per pixel -> more colors to fewer colors
<  *        \li width -> largest to smallest
<  *        \li height -> largest to smallest
<  *        \li refresh rate -> highest to lowest
<  *
<  *  \sa SDL_GetNumDisplayModes()
<  */
< extern DECLSPEC int SDLCALL SDL_GetDisplayMode(int displayIndex, int modeIndex,
<                                                SDL_DisplayMode * mode);
< 
< /**
<  *  \brief Fill in information about the desktop display mode.
<  */
< extern DECLSPEC int SDLCALL SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode * mode);
< 
< /**
<  *  \brief Fill in information about the current display mode.
<  */
< extern DECLSPEC int SDLCALL SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode * mode);
< 
< 
< /**
<  *  \brief Get the closest match to the requested display mode.
<  *
<  *  \param displayIndex The index of display from which mode should be queried.
<  *  \param mode The desired display mode
<  *  \param closest A pointer to a display mode to be filled in with the closest
<  *                 match of the available display modes.
<  *
<  *  \return The passed in value \c closest, or NULL if no matching video mode
<  *          was available.
<  *
<  *  The available display modes are scanned, and \c closest is filled in with the
<  *  closest mode matching the requested mode and returned.  The mode format and
<  *  refresh_rate default to the desktop mode if they are 0.  The modes are
<  *  scanned with size being first priority, format being second priority, and
<  *  finally checking the refresh_rate.  If all the available modes are too
<  *  small, then NULL is returned.
<  *
<  *  \sa SDL_GetNumDisplayModes()
<  *  \sa SDL_GetDisplayMode()
<  */
< extern DECLSPEC SDL_DisplayMode * SDLCALL SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode * mode, SDL_DisplayMode * closest);
< 
< /**
<  *  \brief Get the display index associated with a window.
<  *
<  *  \return the display index of the display containing the center of the
<  *          window, or -1 on error.
<  */
< extern DECLSPEC int SDLCALL SDL_GetWindowDisplayIndex(SDL_Window * window);
< 
< /**
<  *  \brief Set the display mode used when a fullscreen window is visible.
<  *
<  *  By default the window's dimensions and the desktop format and refresh rate
<  *  are used.
<  *
<  *  \param window The window for which the display mode should be set.
<  *  \param mode The mode to use, or NULL for the default mode.
<  *
<  *  \return 0 on success, or -1 if setting the display mode failed.
<  *
<  *  \sa SDL_GetWindowDisplayMode()
<  *  \sa SDL_SetWindowFullscreen()
<  */
< extern DECLSPEC int SDLCALL SDL_SetWindowDisplayMode(SDL_Window * window,
<                                                      const SDL_DisplayMode
<                                                          * mode);
< 
< /**
<  *  \brief Fill in information about the display mode used when a fullscreen
<  *         window is visible.
<  *
<  *  \sa SDL_SetWindowDisplayMode()
<  *  \sa SDL_SetWindowFullscreen()
<  */
< extern DECLSPEC int SDLCALL SDL_GetWindowDisplayMode(SDL_Window * window,
<                                                      SDL_DisplayMode * mode);
< 
< /**
<  *  \brief Get the pixel format associated with the window.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_GetWindowPixelFormat(SDL_Window * window);
< 
< /**
<  *  \brief Create a window with the specified position, dimensions, and flags.
<  *
<  *  \param title The title of the window, in UTF-8 encoding.
<  *  \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
<  *               ::SDL_WINDOWPOS_UNDEFINED.
<  *  \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
<  *               ::SDL_WINDOWPOS_UNDEFINED.
<  *  \param w     The width of the window.
<  *  \param h     The height of the window.
<  *  \param flags The flags for the window, a mask of any of the following:
<  *               ::SDL_WINDOW_FULLSCREEN,    ::SDL_WINDOW_OPENGL,
<  *               ::SDL_WINDOW_HIDDEN,        ::SDL_WINDOW_BORDERLESS,
<  *               ::SDL_WINDOW_RESIZABLE,     ::SDL_WINDOW_MAXIMIZED,
<  *               ::SDL_WINDOW_MINIMIZED,     ::SDL_WINDOW_INPUT_GRABBED,
<  *               ::SDL_WINDOW_ALLOW_HIGHDPI.
<  *
<  *  \return The id of the window created, or zero if window creation failed.
<  *
<  *  \sa SDL_DestroyWindow()
<  */
< extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindow(const char *title,
<                                                       int x, int y, int w,
<                                                       int h, Uint32 flags);
< 
< /**
<  *  \brief Create an SDL window from an existing native window.
<  *
<  *  \param data A pointer to driver-dependent window creation data
<  *
<  *  \return The id of the window created, or zero if window creation failed.
<  *
<  *  \sa SDL_DestroyWindow()
<  */
< extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindowFrom(const void *data);
< 
< /**
<  *  \brief Get the numeric ID of a window, for logging purposes.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_GetWindowID(SDL_Window * window);
< 
< /**
<  *  \brief Get a window from a stored ID, or NULL if it doesn't exist.
<  */
< extern DECLSPEC SDL_Window * SDLCALL SDL_GetWindowFromID(Uint32 id);
< 
< /**
<  *  \brief Get the window flags.
<  */
< extern DECLSPEC Uint32 SDLCALL SDL_GetWindowFlags(SDL_Window * window);
< 
< /**
<  *  \brief Set the title of a window, in UTF-8 format.
<  *
<  *  \sa SDL_GetWindowTitle()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowTitle(SDL_Window * window,
<                                                 const char *title);
< 
< /**
<  *  \brief Get the title of a window, in UTF-8 format.
<  *
<  *  \sa SDL_SetWindowTitle()
<  */
< extern DECLSPEC const char *SDLCALL SDL_GetWindowTitle(SDL_Window * window);
< 
< /**
<  *  \brief Set the icon for a window.
<  *
<  *  \param window The window for which the icon should be set.
<  *  \param icon The icon for the window.
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowIcon(SDL_Window * window,
<                                                SDL_Surface * icon);
< 
< /**
<  *  \brief Associate an arbitrary named pointer with a window.
<  *
<  *  \param window   The window to associate with the pointer.
<  *  \param name     The name of the pointer.
<  *  \param userdata The associated pointer.
<  *
<  *  \return The previous value associated with 'name'
<  *
<  *  \note The name is case-sensitive.
<  *
<  *  \sa SDL_GetWindowData()
<  */
< extern DECLSPEC void* SDLCALL SDL_SetWindowData(SDL_Window * window,
<                                                 const char *name,
<                                                 void *userdata);
< 
< /**
<  *  \brief Retrieve the data pointer associated with a window.
<  *
<  *  \param window   The window to query.
<  *  \param name     The name of the pointer.
<  *
<  *  \return The value associated with 'name'
<  *
<  *  \sa SDL_SetWindowData()
<  */
< extern DECLSPEC void *SDLCALL SDL_GetWindowData(SDL_Window * window,
<                                                 const char *name);
< 
< /**
<  *  \brief Set the position of a window.
<  *
<  *  \param window   The window to reposition.
<  *  \param x        The x coordinate of the window, ::SDL_WINDOWPOS_CENTERED, or
<                     ::SDL_WINDOWPOS_UNDEFINED.
<  *  \param y        The y coordinate of the window, ::SDL_WINDOWPOS_CENTERED, or
<                     ::SDL_WINDOWPOS_UNDEFINED.
<  *
<  *  \note The window coordinate origin is the upper left of the display.
<  *
<  *  \sa SDL_GetWindowPosition()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowPosition(SDL_Window * window,
<                                                    int x, int y);
< 
< /**
<  *  \brief Get the position of a window.
<  *
<  *  \param window   The window to query.
<  *  \param x        Pointer to variable for storing the x position, may be NULL
<  *  \param y        Pointer to variable for storing the y position, may be NULL
<  *
<  *  \sa SDL_SetWindowPosition()
<  */
< extern DECLSPEC void SDLCALL SDL_GetWindowPosition(SDL_Window * window,
<                                                    int *x, int *y);
< 
< /**
<  *  \brief Set the size of a window's client area.
<  *
<  *  \param window   The window to resize.
<  *  \param w        The width of the window, must be >0
<  *  \param h        The height of the window, must be >0
<  *
<  *  \note You can't change the size of a fullscreen window, it automatically
<  *        matches the size of the display mode.
<  *
<  *  \sa SDL_GetWindowSize()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowSize(SDL_Window * window, int w,
<                                                int h);
< 
< /**
<  *  \brief Get the size of a window's client area.
<  *
<  *  \param window   The window to query.
<  *  \param w        Pointer to variable for storing the width, may be NULL
<  *  \param h        Pointer to variable for storing the height, may be NULL
<  *
<  *  \sa SDL_SetWindowSize()
<  */
< extern DECLSPEC void SDLCALL SDL_GetWindowSize(SDL_Window * window, int *w,
<                                                int *h);
< 
< /**
<  *  \brief Set the minimum size of a window's client area.
<  *
<  *  \param window    The window to set a new minimum size.
<  *  \param min_w     The minimum width of the window, must be >0
<  *  \param min_h     The minimum height of the window, must be >0
<  *
<  *  \note You can't change the minimum size of a fullscreen window, it
<  *        automatically matches the size of the display mode.
<  *
<  *  \sa SDL_GetWindowMinimumSize()
<  *  \sa SDL_SetWindowMaximumSize()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowMinimumSize(SDL_Window * window,
<                                                       int min_w, int min_h);
< 
< /**
<  *  \brief Get the minimum size of a window's client area.
<  *
<  *  \param window   The window to query.
<  *  \param w        Pointer to variable for storing the minimum width, may be NULL
<  *  \param h        Pointer to variable for storing the minimum height, may be NULL
<  *
<  *  \sa SDL_GetWindowMaximumSize()
<  *  \sa SDL_SetWindowMinimumSize()
<  */
< extern DECLSPEC void SDLCALL SDL_GetWindowMinimumSize(SDL_Window * window,
<                                                       int *w, int *h);
< 
< /**
<  *  \brief Set the maximum size of a window's client area.
<  *
<  *  \param window    The window to set a new maximum size.
<  *  \param max_w     The maximum width of the window, must be >0
<  *  \param max_h     The maximum height of the window, must be >0
<  *
<  *  \note You can't change the maximum size of a fullscreen window, it
<  *        automatically matches the size of the display mode.
<  *
<  *  \sa SDL_GetWindowMaximumSize()
<  *  \sa SDL_SetWindowMinimumSize()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowMaximumSize(SDL_Window * window,
<                                                       int max_w, int max_h);
< 
< /**
<  *  \brief Get the maximum size of a window's client area.
<  *
<  *  \param window   The window to query.
<  *  \param w        Pointer to variable for storing the maximum width, may be NULL
<  *  \param h        Pointer to variable for storing the maximum height, may be NULL
<  *
<  *  \sa SDL_GetWindowMinimumSize()
<  *  \sa SDL_SetWindowMaximumSize()
<  */
< extern DECLSPEC void SDLCALL SDL_GetWindowMaximumSize(SDL_Window * window,
<                                                       int *w, int *h);
< 
< /**
<  *  \brief Set the border state of a window.
<  *
<  *  This will add or remove the window's SDL_WINDOW_BORDERLESS flag and
<  *  add or remove the border from the actual window. This is a no-op if the
<  *  window's border already matches the requested state.
<  *
<  *  \param window The window of which to change the border state.
<  *  \param bordered SDL_FALSE to remove border, SDL_TRUE to add border.
<  *
<  *  \note You can't change the border state of a fullscreen window.
<  *
<  *  \sa SDL_GetWindowFlags()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowBordered(SDL_Window * window,
<                                                    SDL_bool bordered);
< 
< /**
<  *  \brief Show a window.
<  *
<  *  \sa SDL_HideWindow()
<  */
< extern DECLSPEC void SDLCALL SDL_ShowWindow(SDL_Window * window);
< 
< /**
<  *  \brief Hide a window.
<  *
<  *  \sa SDL_ShowWindow()
<  */
< extern DECLSPEC void SDLCALL SDL_HideWindow(SDL_Window * window);
< 
< /**
<  *  \brief Raise a window above other windows and set the input focus.
<  */
< extern DECLSPEC void SDLCALL SDL_RaiseWindow(SDL_Window * window);
< 
< /**
<  *  \brief Make a window as large as possible.
<  *
<  *  \sa SDL_RestoreWindow()
<  */
< extern DECLSPEC void SDLCALL SDL_MaximizeWindow(SDL_Window * window);
< 
< /**
<  *  \brief Minimize a window to an iconic representation.
<  *
<  *  \sa SDL_RestoreWindow()
<  */
< extern DECLSPEC void SDLCALL SDL_MinimizeWindow(SDL_Window * window);
< 
< /**
<  *  \brief Restore the size and position of a minimized or maximized window.
<  *
<  *  \sa SDL_MaximizeWindow()
<  *  \sa SDL_MinimizeWindow()
<  */
< extern DECLSPEC void SDLCALL SDL_RestoreWindow(SDL_Window * window);
< 
< /**
<  *  \brief Set a window's fullscreen state.
<  *
<  *  \return 0 on success, or -1 if setting the display mode failed.
<  *
<  *  \sa SDL_SetWindowDisplayMode()
<  *  \sa SDL_GetWindowDisplayMode()
<  */
< extern DECLSPEC int SDLCALL SDL_SetWindowFullscreen(SDL_Window * window,
<                                                     Uint32 flags);
< 
< /**
<  *  \brief Get the SDL surface associated with the window.
<  *
<  *  \return The window's framebuffer surface, or NULL on error.
<  *
<  *  A new surface will be created with the optimal format for the window,
<  *  if necessary. This surface will be freed when the window is destroyed.
<  *
<  *  \note You may not combine this with 3D or the rendering API on this window.
<  *
<  *  \sa SDL_UpdateWindowSurface()
<  *  \sa SDL_UpdateWindowSurfaceRects()
<  */
< extern DECLSPEC SDL_Surface * SDLCALL SDL_GetWindowSurface(SDL_Window * window);
< 
< /**
<  *  \brief Copy the window surface to the screen.
<  *
<  *  \return 0 on success, or -1 on error.
<  *
<  *  \sa SDL_GetWindowSurface()
<  *  \sa SDL_UpdateWindowSurfaceRects()
<  */
< extern DECLSPEC int SDLCALL SDL_UpdateWindowSurface(SDL_Window * window);
< 
< /**
<  *  \brief Copy a number of rectangles on the window surface to the screen.
<  *
<  *  \return 0 on success, or -1 on error.
<  *
<  *  \sa SDL_GetWindowSurface()
<  *  \sa SDL_UpdateWindowSurfaceRect()
<  */
< extern DECLSPEC int SDLCALL SDL_UpdateWindowSurfaceRects(SDL_Window * window,
<                                                          const SDL_Rect * rects,
<                                                          int numrects);
< 
< /**
<  *  \brief Set a window's input grab mode.
<  *
<  *  \param window The window for which the input grab mode should be set.
<  *  \param grabbed This is SDL_TRUE to grab input, and SDL_FALSE to release input.
<  *
<  *  \sa SDL_GetWindowGrab()
<  */
< extern DECLSPEC void SDLCALL SDL_SetWindowGrab(SDL_Window * window,
<                                                SDL_bool grabbed);
< 
< /**
<  *  \brief Get a window's input grab mode.
<  *
<  *  \return This returns SDL_TRUE if input is grabbed, and SDL_FALSE otherwise.
<  *
<  *  \sa SDL_SetWindowGrab()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_GetWindowGrab(SDL_Window * window);
< 
< /**
<  *  \brief Set the brightness (gamma correction) for a window.
<  *
<  *  \return 0 on success, or -1 if setting the brightness isn't supported.
<  *
<  *  \sa SDL_GetWindowBrightness()
<  *  \sa SDL_SetWindowGammaRamp()
<  */
< extern DECLSPEC int SDLCALL SDL_SetWindowBrightness(SDL_Window * window, float brightness);
< 
< /**
<  *  \brief Get the brightness (gamma correction) for a window.
<  *
<  *  \return The last brightness value passed to SDL_SetWindowBrightness()
<  *
<  *  \sa SDL_SetWindowBrightness()
<  */
< extern DECLSPEC float SDLCALL SDL_GetWindowBrightness(SDL_Window * window);
< 
< /**
<  *  \brief Set the gamma ramp for a window.
<  *
<  *  \param window The window for which the gamma ramp should be set.
<  *  \param red The translation table for the red channel, or NULL.
<  *  \param green The translation table for the green channel, or NULL.
<  *  \param blue The translation table for the blue channel, or NULL.
<  *
<  *  \return 0 on success, or -1 if gamma ramps are unsupported.
<  *
<  *  Set the gamma translation table for the red, green, and blue channels
<  *  of the video hardware.  Each table is an array of 256 16-bit quantities,
<  *  representing a mapping between the input and output for that channel.
<  *  The input is the index into the array, and the output is the 16-bit
<  *  gamma value at that index, scaled to the output color precision.
<  *
<  *  \sa SDL_GetWindowGammaRamp()
<  */
< extern DECLSPEC int SDLCALL SDL_SetWindowGammaRamp(SDL_Window * window,
<                                                    const Uint16 * red,
<                                                    const Uint16 * green,
<                                                    const Uint16 * blue);
< 
< /**
<  *  \brief Get the gamma ramp for a window.
<  *
<  *  \param window The window from which the gamma ramp should be queried.
<  *  \param red   A pointer to a 256 element array of 16-bit quantities to hold
<  *               the translation table for the red channel, or NULL.
<  *  \param green A pointer to a 256 element array of 16-bit quantities to hold
<  *               the translation table for the green channel, or NULL.
<  *  \param blue  A pointer to a 256 element array of 16-bit quantities to hold
<  *               the translation table for the blue channel, or NULL.
<  *
<  *  \return 0 on success, or -1 if gamma ramps are unsupported.
<  *
<  *  \sa SDL_SetWindowGammaRamp()
<  */
< extern DECLSPEC int SDLCALL SDL_GetWindowGammaRamp(SDL_Window * window,
<                                                    Uint16 * red,
<                                                    Uint16 * green,
<                                                    Uint16 * blue);
< 
< /**
<  *  \brief Destroy a window.
<  */
< extern DECLSPEC void SDLCALL SDL_DestroyWindow(SDL_Window * window);
< 
< 
< /**
<  *  \brief Returns whether the screensaver is currently enabled (default on).
<  *
<  *  \sa SDL_EnableScreenSaver()
<  *  \sa SDL_DisableScreenSaver()
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_IsScreenSaverEnabled(void);
< 
< /**
<  *  \brief Allow the screen to be blanked by a screensaver
<  *
<  *  \sa SDL_IsScreenSaverEnabled()
<  *  \sa SDL_DisableScreenSaver()
<  */
< extern DECLSPEC void SDLCALL SDL_EnableScreenSaver(void);
< 
< /**
<  *  \brief Prevent the screen from being blanked by a screensaver
<  *
<  *  \sa SDL_IsScreenSaverEnabled()
<  *  \sa SDL_EnableScreenSaver()
<  */
< extern DECLSPEC void SDLCALL SDL_DisableScreenSaver(void);
< 
< 
< /**
<  *  \name OpenGL support functions
<  */
< /* @{ */
< 
< /**
<  *  \brief Dynamically load an OpenGL library.
<  *
<  *  \param path The platform dependent OpenGL library name, or NULL to open the
<  *              default OpenGL library.
<  *
<  *  \return 0 on success, or -1 if the library couldn't be loaded.
<  *
<  *  This should be done after initializing the video driver, but before
<  *  creating any OpenGL windows.  If no OpenGL library is loaded, the default
<  *  library will be loaded upon creation of the first OpenGL window.
<  *
<  *  \note If you do this, you need to retrieve all of the GL functions used in
<  *        your program from the dynamic library using SDL_GL_GetProcAddress().
<  *
<  *  \sa SDL_GL_GetProcAddress()
<  *  \sa SDL_GL_UnloadLibrary()
<  */
< extern DECLSPEC int SDLCALL SDL_GL_LoadLibrary(const char *path);
< 
< /**
<  *  \brief Get the address of an OpenGL function.
<  */
< extern DECLSPEC void *SDLCALL SDL_GL_GetProcAddress(const char *proc);
< 
< /**
<  *  \brief Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().
<  *
<  *  \sa SDL_GL_LoadLibrary()
<  */
< extern DECLSPEC void SDLCALL SDL_GL_UnloadLibrary(void);
< 
< /**
<  *  \brief Return true if an OpenGL extension is supported for the current
<  *         context.
<  */
< extern DECLSPEC SDL_bool SDLCALL SDL_GL_ExtensionSupported(const char
<                                                            *extension);
< 
< /**
<  *  \brief Set an OpenGL window attribute before window creation.
<  */
< extern DECLSPEC int SDLCALL SDL_GL_SetAttribute(SDL_GLattr attr, int value);
< 
< /**
<  *  \brief Get the actual value for an attribute from the current context.
<  */
< extern DECLSPEC int SDLCALL SDL_GL_GetAttribute(SDL_GLattr attr, int *value);
< 
< /**
<  *  \brief Create an OpenGL context for use with an OpenGL window, and make it
<  *         current.
<  *
<  *  \sa SDL_GL_DeleteContext()
<  */
< extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_CreateContext(SDL_Window *
<                                                            window);
< 
< /**
<  *  \brief Set up an OpenGL context for rendering into an OpenGL window.
<  *
<  *  \note The context must have been created with a compatible window.
<  */
< extern DECLSPEC int SDLCALL SDL_GL_MakeCurrent(SDL_Window * window,
<                                                SDL_GLContext context);
< 
< /**
<  *  \brief Get the currently active OpenGL window.
<  */
< extern DECLSPEC SDL_Window* SDLCALL SDL_GL_GetCurrentWindow(void);
< 
< /**
<  *  \brief Get the currently active OpenGL context.
<  */
< extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_GetCurrentContext(void);
< 
< /**
<  *  \brief Get the size of a window's underlying drawable (for use with glViewport).
<  *
<  *  \param window   Window from which the drawable size should be queried
<  *  \param w        Pointer to variable for storing the width, may be NULL
<  *  \param h        Pointer to variable for storing the height, may be NULL
<  *
<  * This may differ from SDL_GetWindowSize if we're rendering to a high-DPI
<  * drawable, i.e. the window was created with SDL_WINDOW_ALLOW_HIGHDPI on a
<  * platform with high-DPI support (Apple calls this "Retina"), and not disabled
<  * by the SDL_HINT_VIDEO_HIGHDPI_DISABLED hint.
<  *
<  *  \sa SDL_GetWindowSize()
<  *  \sa SDL_CreateWindow()
<  */
< extern DECLSPEC void SDLCALL SDL_GL_GetDrawableSize(SDL_Window * window, int *w,
<                                                     int *h);
< 
< /**
<  *  \brief Set the swap interval for the current OpenGL context.
<  *
<  *  \param interval 0 for immediate updates, 1 for updates synchronized with the
<  *                  vertical retrace. If the system supports it, you may
<  *                  specify -1 to allow late swaps to happen immediately
<  *                  instead of waiting for the next retrace.
<  *
<  *  \return 0 on success, or -1 if setting the swap interval is not supported.
<  *
<  *  \sa SDL_GL_GetSwapInterval()
<  */
< extern DECLSPEC int SDLCALL SDL_GL_SetSwapInterval(int interval);
< 
< /**
<  *  \brief Get the swap interval for the current OpenGL context.
<  *
<  *  \return 0 if there is no vertical retrace synchronization, 1 if the buffer
<  *          swap is synchronized with the vertical retrace, and -1 if late
<  *          swaps happen immediately instead of waiting for the next retrace.
<  *          If the system can't determine the swap interval, or there isn't a
<  *          valid current context, this will return 0 as a safe default.
<  *
<  *  \sa SDL_GL_SetSwapInterval()
<  */
< extern DECLSPEC int SDLCALL SDL_GL_GetSwapInterval(void);
< 
< /**
<  * \brief Swap the OpenGL buffers for a window, if double-buffering is
<  *        supported.
<  */
< extern DECLSPEC void SDLCALL SDL_GL_SwapWindow(SDL_Window * window);
< 
< /**
<  *  \brief Delete an OpenGL context.
<  *
<  *  \sa SDL_GL_CreateContext()
<  */
< extern DECLSPEC void SDLCALL SDL_GL_DeleteContext(SDL_GLContext context);
< 
< /* @} *//* OpenGL support functions */
< 
< 
< /* Ends C function definitions when using C++ */
< #ifdef __cplusplus
< }
< #endif
< #include "close_code.h"
< 
< #endif /* _SDL_video_h */
< 
< /* vi: set ts=4 sw=4 expandtab: */
---
> /*
>   Simple DirectMedia Layer
>   Copyright (C) 1997-2013 Sam Lantinga <slouken@libsdl.org>
> 
>   This software is provided 'as-is', without any express or implied
>   warranty.  In no event will the authors be held liable for any damages
>   arising from the use of this software.
> 
>   Permission is granted to anyone to use this software for any purpose,
>   including commercial applications, and to alter it and redistribute it
>   freely, subject to the following restrictions:
> 
>   1. The origin of this software must not be misrepresented; you must not
>      claim that you wrote the original software. If you use this software
>      in a product, an acknowledgment in the product documentation would be
>      appreciated but is not required.
>   2. Altered source versions must be plainly marked as such, and must not be
>      misrepresented as being the original software.
>   3. This notice may not be removed or altered from any source distribution.
> */
> 
> /**
>  *  \file SDL_video.h
>  *
>  *  Header file for SDL video functions.
>  */
> 
> #ifndef _SDL_video_h
> #define _SDL_video_h
> 
> #include "SDL_stdinc.h"
> #include "SDL_pixels.h"
> #include "SDL_rect.h"
> #include "SDL_surface.h"
> 
> #include "begin_code.h"
> /* Set up for C function definitions, even when using C++ */
> #ifdef __cplusplus
> extern "C" {
> #endif
> 
> /**
>  *  \brief  The structure that defines a display mode
>  *
>  *  \sa SDL_GetNumDisplayModes()
>  *  \sa SDL_GetDisplayMode()
>  *  \sa SDL_GetDesktopDisplayMode()
>  *  \sa SDL_GetCurrentDisplayMode()
>  *  \sa SDL_GetClosestDisplayMode()
>  *  \sa SDL_SetWindowDisplayMode()
>  *  \sa SDL_GetWindowDisplayMode()
>  */
> typedef struct
> {
>     Uint32 format;              /**< pixel format */
>     int w;                      /**< width */
>     int h;                      /**< height */
>     int refresh_rate;           /**< refresh rate (or zero for unspecified) */
>     void *driverdata;           /**< driver-specific data, initialize to 0 */
> } SDL_DisplayMode;
> 
> /**
>  *  \brief The type used to identify a window
>  *
>  *  \sa SDL_CreateWindow()
>  *  \sa SDL_CreateWindowFrom()
>  *  \sa SDL_DestroyWindow()
>  *  \sa SDL_GetWindowData()
>  *  \sa SDL_GetWindowFlags()
>  *  \sa SDL_GetWindowGrab()
>  *  \sa SDL_GetWindowPosition()
>  *  \sa SDL_GetWindowSize()
>  *  \sa SDL_GetWindowTitle()
>  *  \sa SDL_HideWindow()
>  *  \sa SDL_MaximizeWindow()
>  *  \sa SDL_MinimizeWindow()
>  *  \sa SDL_RaiseWindow()
>  *  \sa SDL_RestoreWindow()
>  *  \sa SDL_SetWindowData()
>  *  \sa SDL_SetWindowFullscreen()
>  *  \sa SDL_SetWindowGrab()
>  *  \sa SDL_SetWindowIcon()
>  *  \sa SDL_SetWindowPosition()
>  *  \sa SDL_SetWindowSize()
>  *  \sa SDL_SetWindowBordered()
>  *  \sa SDL_SetWindowTitle()
>  *  \sa SDL_ShowWindow()
>  */
> typedef struct SDL_Window SDL_Window;
> 
> /**
>  *  \brief The flags on a window
>  *
>  *  \sa SDL_GetWindowFlags()
>  */
> typedef enum
> {
>     SDL_WINDOW_FULLSCREEN = 0x00000001,         /**< fullscreen window */
>     SDL_WINDOW_OPENGL = 0x00000002,             /**< window usable with OpenGL context */
>     SDL_WINDOW_SHOWN = 0x00000004,              /**< window is visible */
>     SDL_WINDOW_HIDDEN = 0x00000008,             /**< window is not visible */
>     SDL_WINDOW_BORDERLESS = 0x00000010,         /**< no window decoration */
>     SDL_WINDOW_RESIZABLE = 0x00000020,          /**< window can be resized */
>     SDL_WINDOW_MINIMIZED = 0x00000040,          /**< window is minimized */
>     SDL_WINDOW_MAXIMIZED = 0x00000080,          /**< window is maximized */
>     SDL_WINDOW_INPUT_GRABBED = 0x00000100,      /**< window has grabbed input focus */
>     SDL_WINDOW_INPUT_FOCUS = 0x00000200,        /**< window has input focus */
>     SDL_WINDOW_MOUSE_FOCUS = 0x00000400,        /**< window has mouse focus */
>     SDL_WINDOW_FULLSCREEN_DESKTOP = ( SDL_WINDOW_FULLSCREEN | 0x00001000 ),
>     SDL_WINDOW_FOREIGN = 0x00000800             /**< window not created by SDL */
> } SDL_WindowFlags;
> 
> /**
>  *  \brief Used to indicate that you don't care what the window position is.
>  */
> #define SDL_WINDOWPOS_UNDEFINED_MASK    0x1FFF0000
> #define SDL_WINDOWPOS_UNDEFINED_DISPLAY(X)  (SDL_WINDOWPOS_UNDEFINED_MASK|(X))
> #define SDL_WINDOWPOS_UNDEFINED         SDL_WINDOWPOS_UNDEFINED_DISPLAY(0)
> #define SDL_WINDOWPOS_ISUNDEFINED(X)    \
>             (((X)&0xFFFF0000) == SDL_WINDOWPOS_UNDEFINED_MASK)
> 
> /**
>  *  \brief Used to indicate that the window position should be centered.
>  */
> #define SDL_WINDOWPOS_CENTERED_MASK    0x2FFF0000
> #define SDL_WINDOWPOS_CENTERED_DISPLAY(X)  (SDL_WINDOWPOS_CENTERED_MASK|(X))
> #define SDL_WINDOWPOS_CENTERED         SDL_WINDOWPOS_CENTERED_DISPLAY(0)
> #define SDL_WINDOWPOS_ISCENTERED(X)    \
>             (((X)&0xFFFF0000) == SDL_WINDOWPOS_CENTERED_MASK)
> 
> /**
>  *  \brief Event subtype for window events
>  */
> typedef enum
> {
>     SDL_WINDOWEVENT_NONE,           /**< Never used */
>     SDL_WINDOWEVENT_SHOWN,          /**< Window has been shown */
>     SDL_WINDOWEVENT_HIDDEN,         /**< Window has been hidden */
>     SDL_WINDOWEVENT_EXPOSED,        /**< Window has been exposed and should be
>                                          redrawn */
>     SDL_WINDOWEVENT_MOVED,          /**< Window has been moved to data1, data2
>                                      */
>     SDL_WINDOWEVENT_RESIZED,        /**< Window has been resized to data1xdata2 */
>     SDL_WINDOWEVENT_SIZE_CHANGED,   /**< The window size has changed, either as a result of an API call or through the system or user changing the window size. */
>     SDL_WINDOWEVENT_MINIMIZED,      /**< Window has been minimized */
>     SDL_WINDOWEVENT_MAXIMIZED,      /**< Window has been maximized */
>     SDL_WINDOWEVENT_RESTORED,       /**< Window has been restored to normal size
>                                          and position */
>     SDL_WINDOWEVENT_ENTER,          /**< Window has gained mouse focus */
>     SDL_WINDOWEVENT_LEAVE,          /**< Window has lost mouse focus */
>     SDL_WINDOWEVENT_FOCUS_GAINED,   /**< Window has gained keyboard focus */
>     SDL_WINDOWEVENT_FOCUS_LOST,     /**< Window has lost keyboard focus */
>     SDL_WINDOWEVENT_CLOSE           /**< The window manager requests that the
>                                          window be closed */
> } SDL_WindowEventID;
> 
> /**
>  *  \brief An opaque handle to an OpenGL context.
>  */
> typedef void *SDL_GLContext;
> 
> /**
>  *  \brief OpenGL configuration attributes
>  */
> typedef enum
> {
>     SDL_GL_RED_SIZE,
>     SDL_GL_GREEN_SIZE,
>     SDL_GL_BLUE_SIZE,
>     SDL_GL_ALPHA_SIZE,
>     SDL_GL_BUFFER_SIZE,
>     SDL_GL_DOUBLEBUFFER,
>     SDL_GL_DEPTH_SIZE,
>     SDL_GL_STENCIL_SIZE,
>     SDL_GL_ACCUM_RED_SIZE,
>     SDL_GL_ACCUM_GREEN_SIZE,
>     SDL_GL_ACCUM_BLUE_SIZE,
>     SDL_GL_ACCUM_ALPHA_SIZE,
>     SDL_GL_STEREO,
>     SDL_GL_MULTISAMPLEBUFFERS,
>     SDL_GL_MULTISAMPLESAMPLES,
>     SDL_GL_ACCELERATED_VISUAL,
>     SDL_GL_RETAINED_BACKING,
>     SDL_GL_CONTEXT_MAJOR_VERSION,
>     SDL_GL_CONTEXT_MINOR_VERSION,
>     SDL_GL_CONTEXT_EGL,
>     SDL_GL_CONTEXT_FLAGS,
>     SDL_GL_CONTEXT_PROFILE_MASK,
>     SDL_GL_SHARE_WITH_CURRENT_CONTEXT
> } SDL_GLattr;
> 
> typedef enum
> {
>     SDL_GL_CONTEXT_PROFILE_CORE           = 0x0001,
>     SDL_GL_CONTEXT_PROFILE_COMPATIBILITY  = 0x0002,
>     SDL_GL_CONTEXT_PROFILE_ES             = 0x0004
> } SDL_GLprofile;
> 
> typedef enum
> {
>     SDL_GL_CONTEXT_DEBUG_FLAG              = 0x0001,
>     SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 0x0002,
>     SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG      = 0x0004,
>     SDL_GL_CONTEXT_RESET_ISOLATION_FLAG    = 0x0008
> } SDL_GLcontextFlag;
> 
> 
> /* Function prototypes */
> 
> /**
>  *  \brief Get the number of video drivers compiled into SDL
>  *
>  *  \sa SDL_GetVideoDriver()
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumVideoDrivers(void);
> 
> /**
>  *  \brief Get the name of a built in video driver.
>  *
>  *  \note The video drivers are presented in the order in which they are
>  *        normally checked during initialization.
>  *
>  *  \sa SDL_GetNumVideoDrivers()
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetVideoDriver(int index);
> 
> /**
>  *  \brief Initialize the video subsystem, optionally specifying a video driver.
>  *
>  *  \param driver_name Initialize a specific driver by name, or NULL for the
>  *                     default video driver.
>  *
>  *  \return 0 on success, -1 on error
>  *
>  *  This function initializes the video subsystem; setting up a connection
>  *  to the window manager, etc, and determines the available display modes
>  *  and pixel formats, but does not initialize a window or graphics mode.
>  *
>  *  \sa SDL_VideoQuit()
>  */
> extern DECLSPEC int SDLCALL SDL_VideoInit(const char *driver_name);
> 
> /**
>  *  \brief Shuts down the video subsystem.
>  *
>  *  This function closes all windows, and restores the original video mode.
>  *
>  *  \sa SDL_VideoInit()
>  */
> extern DECLSPEC void SDLCALL SDL_VideoQuit(void);
> 
> /**
>  *  \brief Returns the name of the currently initialized video driver.
>  *
>  *  \return The name of the current video driver or NULL if no driver
>  *          has been initialized
>  *
>  *  \sa SDL_GetNumVideoDrivers()
>  *  \sa SDL_GetVideoDriver()
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetCurrentVideoDriver(void);
> 
> /**
>  *  \brief Returns the number of available video displays.
>  *
>  *  \sa SDL_GetDisplayBounds()
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumVideoDisplays(void);
> 
> /**
>  *  \brief Get the name of a display in UTF-8 encoding
>  *
>  *  \return The name of a display, or NULL for an invalid display index.
>  *
>  *  \sa SDL_GetNumVideoDisplays()
>  */
> extern DECLSPEC const char * SDLCALL SDL_GetDisplayName(int displayIndex);
> 
> /**
>  *  \brief Get the desktop area represented by a display, with the primary
>  *         display located at 0,0
>  *
>  *  \return 0 on success, or -1 if the index is out of range.
>  *
>  *  \sa SDL_GetNumVideoDisplays()
>  */
> extern DECLSPEC int SDLCALL SDL_GetDisplayBounds(int displayIndex, SDL_Rect * rect);
> 
> /**
>  *  \brief Returns the number of available display modes.
>  *
>  *  \sa SDL_GetDisplayMode()
>  */
> extern DECLSPEC int SDLCALL SDL_GetNumDisplayModes(int displayIndex);
> 
> /**
>  *  \brief Fill in information about a specific display mode.
>  *
>  *  \note The display modes are sorted in this priority:
>  *        \li bits per pixel -> more colors to fewer colors
>  *        \li width -> largest to smallest
>  *        \li height -> largest to smallest
>  *        \li refresh rate -> highest to lowest
>  *
>  *  \sa SDL_GetNumDisplayModes()
>  */
> extern DECLSPEC int SDLCALL SDL_GetDisplayMode(int displayIndex, int modeIndex,
>                                                SDL_DisplayMode * mode);
> 
> /**
>  *  \brief Fill in information about the desktop display mode.
>  */
> extern DECLSPEC int SDLCALL SDL_GetDesktopDisplayMode(int displayIndex, SDL_DisplayMode * mode);
> 
> /**
>  *  \brief Fill in information about the current display mode.
>  */
> extern DECLSPEC int SDLCALL SDL_GetCurrentDisplayMode(int displayIndex, SDL_DisplayMode * mode);
> 
> 
> /**
>  *  \brief Get the closest match to the requested display mode.
>  *
>  *  \param displayIndex The index of display from which mode should be queried.
>  *  \param mode The desired display mode
>  *  \param closest A pointer to a display mode to be filled in with the closest
>  *                 match of the available display modes.
>  *
>  *  \return The passed in value \c closest, or NULL if no matching video mode
>  *          was available.
>  *
>  *  The available display modes are scanned, and \c closest is filled in with the
>  *  closest mode matching the requested mode and returned.  The mode format and
>  *  refresh_rate default to the desktop mode if they are 0.  The modes are
>  *  scanned with size being first priority, format being second priority, and
>  *  finally checking the refresh_rate.  If all the available modes are too
>  *  small, then NULL is returned.
>  *
>  *  \sa SDL_GetNumDisplayModes()
>  *  \sa SDL_GetDisplayMode()
>  */
> extern DECLSPEC SDL_DisplayMode * SDLCALL SDL_GetClosestDisplayMode(int displayIndex, const SDL_DisplayMode * mode, SDL_DisplayMode * closest);
> 
> /**
>  *  \brief Get the display index associated with a window.
>  *
>  *  \return the display index of the display containing the center of the
>  *          window, or -1 on error.
>  */
> extern DECLSPEC int SDLCALL SDL_GetWindowDisplayIndex(SDL_Window * window);
> 
> /**
>  *  \brief Set the display mode used when a fullscreen window is visible.
>  *
>  *  By default the window's dimensions and the desktop format and refresh rate
>  *  are used.
>  *
>  *  \param window The window for which the display mode should be set.
>  *  \param mode The mode to use, or NULL for the default mode.
>  *
>  *  \return 0 on success, or -1 if setting the display mode failed.
>  *
>  *  \sa SDL_GetWindowDisplayMode()
>  *  \sa SDL_SetWindowFullscreen()
>  */
> extern DECLSPEC int SDLCALL SDL_SetWindowDisplayMode(SDL_Window * window,
>                                                      const SDL_DisplayMode
>                                                          * mode);
> 
> /**
>  *  \brief Fill in information about the display mode used when a fullscreen
>  *         window is visible.
>  *
>  *  \sa SDL_SetWindowDisplayMode()
>  *  \sa SDL_SetWindowFullscreen()
>  */
> extern DECLSPEC int SDLCALL SDL_GetWindowDisplayMode(SDL_Window * window,
>                                                      SDL_DisplayMode * mode);
> 
> /**
>  *  \brief Get the pixel format associated with the window.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_GetWindowPixelFormat(SDL_Window * window);
> 
> /**
>  *  \brief Create a window with the specified position, dimensions, and flags.
>  *
>  *  \param title The title of the window, in UTF-8 encoding.
>  *  \param x     The x position of the window, ::SDL_WINDOWPOS_CENTERED, or
>  *               ::SDL_WINDOWPOS_UNDEFINED.
>  *  \param y     The y position of the window, ::SDL_WINDOWPOS_CENTERED, or
>  *               ::SDL_WINDOWPOS_UNDEFINED.
>  *  \param w     The width of the window.
>  *  \param h     The height of the window.
>  *  \param flags The flags for the window, a mask of any of the following:
>  *               ::SDL_WINDOW_FULLSCREEN, ::SDL_WINDOW_OPENGL,
>  *               ::SDL_WINDOW_HIDDEN,     ::SDL_WINDOW_BORDERLESS,
>  *               ::SDL_WINDOW_RESIZABLE,  ::SDL_WINDOW_MAXIMIZED,
>  *               ::SDL_WINDOW_MINIMIZED,  ::SDL_WINDOW_INPUT_GRABBED.
>  *
>  *  \return The id of the window created, or zero if window creation failed.
>  *
>  *  \sa SDL_DestroyWindow()
>  */
> extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindow(const char *title,
>                                                       int x, int y, int w,
>                                                       int h, Uint32 flags);
> 
> /**
>  *  \brief Create an SDL window from an existing native window.
>  *
>  *  \param data A pointer to driver-dependent window creation data
>  *
>  *  \return The id of the window created, or zero if window creation failed.
>  *
>  *  \sa SDL_DestroyWindow()
>  */
> extern DECLSPEC SDL_Window * SDLCALL SDL_CreateWindowFrom(const void *data);
> 
> /**
>  *  \brief Get the numeric ID of a window, for logging purposes.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_GetWindowID(SDL_Window * window);
> 
> /**
>  *  \brief Get a window from a stored ID, or NULL if it doesn't exist.
>  */
> extern DECLSPEC SDL_Window * SDLCALL SDL_GetWindowFromID(Uint32 id);
> 
> /**
>  *  \brief Get the window flags.
>  */
> extern DECLSPEC Uint32 SDLCALL SDL_GetWindowFlags(SDL_Window * window);
> 
> /**
>  *  \brief Set the title of a window, in UTF-8 format.
>  *
>  *  \sa SDL_GetWindowTitle()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowTitle(SDL_Window * window,
>                                                 const char *title);
> 
> /**
>  *  \brief Get the title of a window, in UTF-8 format.
>  *
>  *  \sa SDL_SetWindowTitle()
>  */
> extern DECLSPEC const char *SDLCALL SDL_GetWindowTitle(SDL_Window * window);
> 
> /**
>  *  \brief Set the icon for a window.
>  *
>  *  \param window The window for which the icon should be set.
>  *  \param icon The icon for the window.
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowIcon(SDL_Window * window,
>                                                SDL_Surface * icon);
> 
> /**
>  *  \brief Associate an arbitrary named pointer with a window.
>  *
>  *  \param window   The window to associate with the pointer.
>  *  \param name     The name of the pointer.
>  *  \param userdata The associated pointer.
>  *
>  *  \return The previous value associated with 'name'
>  *
>  *  \note The name is case-sensitive.
>  *
>  *  \sa SDL_GetWindowData()
>  */
> extern DECLSPEC void* SDLCALL SDL_SetWindowData(SDL_Window * window,
>                                                 const char *name,
>                                                 void *userdata);
> 
> /**
>  *  \brief Retrieve the data pointer associated with a window.
>  *
>  *  \param window   The window to query.
>  *  \param name     The name of the pointer.
>  *
>  *  \return The value associated with 'name'
>  *
>  *  \sa SDL_SetWindowData()
>  */
> extern DECLSPEC void *SDLCALL SDL_GetWindowData(SDL_Window * window,
>                                                 const char *name);
> 
> /**
>  *  \brief Set the position of a window.
>  *
>  *  \param window   The window to reposition.
>  *  \param x        The x coordinate of the window, ::SDL_WINDOWPOS_CENTERED, or
>                     ::SDL_WINDOWPOS_UNDEFINED.
>  *  \param y        The y coordinate of the window, ::SDL_WINDOWPOS_CENTERED, or
>                     ::SDL_WINDOWPOS_UNDEFINED.
>  *
>  *  \note The window coordinate origin is the upper left of the display.
>  *
>  *  \sa SDL_GetWindowPosition()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowPosition(SDL_Window * window,
>                                                    int x, int y);
> 
> /**
>  *  \brief Get the position of a window.
>  *
>  *  \param window   The window to query.
>  *  \param x        Pointer to variable for storing the x position, may be NULL
>  *  \param y        Pointer to variable for storing the y position, may be NULL
>  *
>  *  \sa SDL_SetWindowPosition()
>  */
> extern DECLSPEC void SDLCALL SDL_GetWindowPosition(SDL_Window * window,
>                                                    int *x, int *y);
> 
> /**
>  *  \brief Set the size of a window's client area.
>  *
>  *  \param window   The window to resize.
>  *  \param w        The width of the window, must be >0
>  *  \param h        The height of the window, must be >0
>  *
>  *  \note You can't change the size of a fullscreen window, it automatically
>  *        matches the size of the display mode.
>  *
>  *  \sa SDL_GetWindowSize()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowSize(SDL_Window * window, int w,
>                                                int h);
> 
> /**
>  *  \brief Get the size of a window's client area.
>  *
>  *  \param window   The window to query.
>  *  \param w        Pointer to variable for storing the width, may be NULL
>  *  \param h        Pointer to variable for storing the height, may be NULL
>  *
>  *  \sa SDL_SetWindowSize()
>  */
> extern DECLSPEC void SDLCALL SDL_GetWindowSize(SDL_Window * window, int *w,
>                                                int *h);
> 
> /**
>  *  \brief Set the minimum size of a window's client area.
>  *
>  *  \param window    The window to set a new minimum size.
>  *  \param min_w     The minimum width of the window, must be >0
>  *  \param min_h     The minimum height of the window, must be >0
>  *
>  *  \note You can't change the minimum size of a fullscreen window, it
>  *        automatically matches the size of the display mode.
>  *
>  *  \sa SDL_GetWindowMinimumSize()
>  *  \sa SDL_SetWindowMaximumSize()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowMinimumSize(SDL_Window * window,
>                                                       int min_w, int min_h);
> 
> /**
>  *  \brief Get the minimum size of a window's client area.
>  *
>  *  \param window   The window to query.
>  *  \param w        Pointer to variable for storing the minimum width, may be NULL
>  *  \param h        Pointer to variable for storing the minimum height, may be NULL
>  *
>  *  \sa SDL_GetWindowMaximumSize()
>  *  \sa SDL_SetWindowMinimumSize()
>  */
> extern DECLSPEC void SDLCALL SDL_GetWindowMinimumSize(SDL_Window * window,
>                                                       int *w, int *h);
> 
> /**
>  *  \brief Set the maximum size of a window's client area.
>  *
>  *  \param window    The window to set a new maximum size.
>  *  \param max_w     The maximum width of the window, must be >0
>  *  \param max_h     The maximum height of the window, must be >0
>  *
>  *  \note You can't change the maximum size of a fullscreen window, it
>  *        automatically matches the size of the display mode.
>  *
>  *  \sa SDL_GetWindowMaximumSize()
>  *  \sa SDL_SetWindowMinimumSize()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowMaximumSize(SDL_Window * window,
>                                                       int max_w, int max_h);
> 
> /**
>  *  \brief Get the maximum size of a window's client area.
>  *
>  *  \param window   The window to query.
>  *  \param w        Pointer to variable for storing the maximum width, may be NULL
>  *  \param h        Pointer to variable for storing the maximum height, may be NULL
>  *
>  *  \sa SDL_GetWindowMinimumSize()
>  *  \sa SDL_SetWindowMaximumSize()
>  */
> extern DECLSPEC void SDLCALL SDL_GetWindowMaximumSize(SDL_Window * window,
>                                                       int *w, int *h);
> 
> /**
>  *  \brief Set the border state of a window.
>  *
>  *  This will add or remove the window's SDL_WINDOW_BORDERLESS flag and
>  *  add or remove the border from the actual window. This is a no-op if the
>  *  window's border already matches the requested state.
>  *
>  *  \param window The window of which to change the border state.
>  *  \param bordered SDL_FALSE to remove border, SDL_TRUE to add border.
>  *
>  *  \note You can't change the border state of a fullscreen window.
>  *
>  *  \sa SDL_GetWindowFlags()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowBordered(SDL_Window * window,
>                                                    SDL_bool bordered);
> 
> /**
>  *  \brief Show a window.
>  *
>  *  \sa SDL_HideWindow()
>  */
> extern DECLSPEC void SDLCALL SDL_ShowWindow(SDL_Window * window);
> 
> /**
>  *  \brief Hide a window.
>  *
>  *  \sa SDL_ShowWindow()
>  */
> extern DECLSPEC void SDLCALL SDL_HideWindow(SDL_Window * window);
> 
> /**
>  *  \brief Raise a window above other windows and set the input focus.
>  */
> extern DECLSPEC void SDLCALL SDL_RaiseWindow(SDL_Window * window);
> 
> /**
>  *  \brief Make a window as large as possible.
>  *
>  *  \sa SDL_RestoreWindow()
>  */
> extern DECLSPEC void SDLCALL SDL_MaximizeWindow(SDL_Window * window);
> 
> /**
>  *  \brief Minimize a window to an iconic representation.
>  *
>  *  \sa SDL_RestoreWindow()
>  */
> extern DECLSPEC void SDLCALL SDL_MinimizeWindow(SDL_Window * window);
> 
> /**
>  *  \brief Restore the size and position of a minimized or maximized window.
>  *
>  *  \sa SDL_MaximizeWindow()
>  *  \sa SDL_MinimizeWindow()
>  */
> extern DECLSPEC void SDLCALL SDL_RestoreWindow(SDL_Window * window);
> 
> /**
>  *  \brief Set a window's fullscreen state.
>  *
>  *  \return 0 on success, or -1 if setting the display mode failed.
>  *
>  *  \sa SDL_SetWindowDisplayMode()
>  *  \sa SDL_GetWindowDisplayMode()
>  */
> extern DECLSPEC int SDLCALL SDL_SetWindowFullscreen(SDL_Window * window,
>                                                     Uint32 flags);
> 
> /**
>  *  \brief Get the SDL surface associated with the window.
>  *
>  *  \return The window's framebuffer surface, or NULL on error.
>  *
>  *  A new surface will be created with the optimal format for the window,
>  *  if necessary. This surface will be freed when the window is destroyed.
>  *
>  *  \note You may not combine this with 3D or the rendering API on this window.
>  *
>  *  \sa SDL_UpdateWindowSurface()
>  *  \sa SDL_UpdateWindowSurfaceRects()
>  */
> extern DECLSPEC SDL_Surface * SDLCALL SDL_GetWindowSurface(SDL_Window * window);
> 
> /**
>  *  \brief Copy the window surface to the screen.
>  *
>  *  \return 0 on success, or -1 on error.
>  *
>  *  \sa SDL_GetWindowSurface()
>  *  \sa SDL_UpdateWindowSurfaceRects()
>  */
> extern DECLSPEC int SDLCALL SDL_UpdateWindowSurface(SDL_Window * window);
> 
> /**
>  *  \brief Copy a number of rectangles on the window surface to the screen.
>  *
>  *  \return 0 on success, or -1 on error.
>  *
>  *  \sa SDL_GetWindowSurface()
>  *  \sa SDL_UpdateWindowSurfaceRect()
>  */
> extern DECLSPEC int SDLCALL SDL_UpdateWindowSurfaceRects(SDL_Window * window,
>                                                          const SDL_Rect * rects,
>                                                          int numrects);
> 
> /**
>  *  \brief Set a window's input grab mode.
>  *
>  *  \param window The window for which the input grab mode should be set.
>  *  \param grabbed This is SDL_TRUE to grab input, and SDL_FALSE to release input.
>  *
>  *  \sa SDL_GetWindowGrab()
>  */
> extern DECLSPEC void SDLCALL SDL_SetWindowGrab(SDL_Window * window,
>                                                SDL_bool grabbed);
> 
> /**
>  *  \brief Get a window's input grab mode.
>  *
>  *  \return This returns SDL_TRUE if input is grabbed, and SDL_FALSE otherwise.
>  *
>  *  \sa SDL_SetWindowGrab()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_GetWindowGrab(SDL_Window * window);
> 
> /**
>  *  \brief Set the brightness (gamma correction) for a window.
>  *
>  *  \return 0 on success, or -1 if setting the brightness isn't supported.
>  *
>  *  \sa SDL_GetWindowBrightness()
>  *  \sa SDL_SetWindowGammaRamp()
>  */
> extern DECLSPEC int SDLCALL SDL_SetWindowBrightness(SDL_Window * window, float brightness);
> 
> /**
>  *  \brief Get the brightness (gamma correction) for a window.
>  *
>  *  \return The last brightness value passed to SDL_SetWindowBrightness()
>  *
>  *  \sa SDL_SetWindowBrightness()
>  */
> extern DECLSPEC float SDLCALL SDL_GetWindowBrightness(SDL_Window * window);
> 
> /**
>  *  \brief Set the gamma ramp for a window.
>  *
>  *  \param window The window for which the gamma ramp should be set.
>  *  \param red The translation table for the red channel, or NULL.
>  *  \param green The translation table for the green channel, or NULL.
>  *  \param blue The translation table for the blue channel, or NULL.
>  *
>  *  \return 0 on success, or -1 if gamma ramps are unsupported.
>  *
>  *  Set the gamma translation table for the red, green, and blue channels
>  *  of the video hardware.  Each table is an array of 256 16-bit quantities,
>  *  representing a mapping between the input and output for that channel.
>  *  The input is the index into the array, and the output is the 16-bit
>  *  gamma value at that index, scaled to the output color precision.
>  *
>  *  \sa SDL_GetWindowGammaRamp()
>  */
> extern DECLSPEC int SDLCALL SDL_SetWindowGammaRamp(SDL_Window * window,
>                                                    const Uint16 * red,
>                                                    const Uint16 * green,
>                                                    const Uint16 * blue);
> 
> /**
>  *  \brief Get the gamma ramp for a window.
>  *
>  *  \param window The window from which the gamma ramp should be queried.
>  *  \param red   A pointer to a 256 element array of 16-bit quantities to hold
>  *               the translation table for the red channel, or NULL.
>  *  \param green A pointer to a 256 element array of 16-bit quantities to hold
>  *               the translation table for the green channel, or NULL.
>  *  \param blue  A pointer to a 256 element array of 16-bit quantities to hold
>  *               the translation table for the blue channel, or NULL.
>  *
>  *  \return 0 on success, or -1 if gamma ramps are unsupported.
>  *
>  *  \sa SDL_SetWindowGammaRamp()
>  */
> extern DECLSPEC int SDLCALL SDL_GetWindowGammaRamp(SDL_Window * window,
>                                                    Uint16 * red,
>                                                    Uint16 * green,
>                                                    Uint16 * blue);
> 
> /**
>  *  \brief Destroy a window.
>  */
> extern DECLSPEC void SDLCALL SDL_DestroyWindow(SDL_Window * window);
> 
> 
> /**
>  *  \brief Returns whether the screensaver is currently enabled (default on).
>  *
>  *  \sa SDL_EnableScreenSaver()
>  *  \sa SDL_DisableScreenSaver()
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_IsScreenSaverEnabled(void);
> 
> /**
>  *  \brief Allow the screen to be blanked by a screensaver
>  *
>  *  \sa SDL_IsScreenSaverEnabled()
>  *  \sa SDL_DisableScreenSaver()
>  */
> extern DECLSPEC void SDLCALL SDL_EnableScreenSaver(void);
> 
> /**
>  *  \brief Prevent the screen from being blanked by a screensaver
>  *
>  *  \sa SDL_IsScreenSaverEnabled()
>  *  \sa SDL_EnableScreenSaver()
>  */
> extern DECLSPEC void SDLCALL SDL_DisableScreenSaver(void);
> 
> 
> /**
>  *  \name OpenGL support functions
>  */
> /*@{*/
> 
> /**
>  *  \brief Dynamically load an OpenGL library.
>  *
>  *  \param path The platform dependent OpenGL library name, or NULL to open the
>  *              default OpenGL library.
>  *
>  *  \return 0 on success, or -1 if the library couldn't be loaded.
>  *
>  *  This should be done after initializing the video driver, but before
>  *  creating any OpenGL windows.  If no OpenGL library is loaded, the default
>  *  library will be loaded upon creation of the first OpenGL window.
>  *
>  *  \note If you do this, you need to retrieve all of the GL functions used in
>  *        your program from the dynamic library using SDL_GL_GetProcAddress().
>  *
>  *  \sa SDL_GL_GetProcAddress()
>  *  \sa SDL_GL_UnloadLibrary()
>  */
> extern DECLSPEC int SDLCALL SDL_GL_LoadLibrary(const char *path);
> 
> /**
>  *  \brief Get the address of an OpenGL function.
>  */
> extern DECLSPEC void *SDLCALL SDL_GL_GetProcAddress(const char *proc);
> 
> /**
>  *  \brief Unload the OpenGL library previously loaded by SDL_GL_LoadLibrary().
>  *
>  *  \sa SDL_GL_LoadLibrary()
>  */
> extern DECLSPEC void SDLCALL SDL_GL_UnloadLibrary(void);
> 
> /**
>  *  \brief Return true if an OpenGL extension is supported for the current
>  *         context.
>  */
> extern DECLSPEC SDL_bool SDLCALL SDL_GL_ExtensionSupported(const char
>                                                            *extension);
> 
> /**
>  *  \brief Set an OpenGL window attribute before window creation.
>  */
> extern DECLSPEC int SDLCALL SDL_GL_SetAttribute(SDL_GLattr attr, int value);
> 
> /**
>  *  \brief Get the actual value for an attribute from the current context.
>  */
> extern DECLSPEC int SDLCALL SDL_GL_GetAttribute(SDL_GLattr attr, int *value);
> 
> /**
>  *  \brief Create an OpenGL context for use with an OpenGL window, and make it
>  *         current.
>  *
>  *  \sa SDL_GL_DeleteContext()
>  */
> extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_CreateContext(SDL_Window *
>                                                            window);
> 
> /**
>  *  \brief Set up an OpenGL context for rendering into an OpenGL window.
>  *
>  *  \note The context must have been created with a compatible window.
>  */
> extern DECLSPEC int SDLCALL SDL_GL_MakeCurrent(SDL_Window * window,
>                                                SDL_GLContext context);
> 
> /**
>  *  \brief Get the currently active OpenGL window.
>  */
> extern DECLSPEC SDL_Window* SDLCALL SDL_GL_GetCurrentWindow(void);
> 
> /**
>  *  \brief Get the currently active OpenGL context.
>  */
> extern DECLSPEC SDL_GLContext SDLCALL SDL_GL_GetCurrentContext(void);
> 
> /**
>  *  \brief Set the swap interval for the current OpenGL context.
>  *
>  *  \param interval 0 for immediate updates, 1 for updates synchronized with the
>  *                  vertical retrace. If the system supports it, you may
>  *                  specify -1 to allow late swaps to happen immediately
>  *                  instead of waiting for the next retrace.
>  *
>  *  \return 0 on success, or -1 if setting the swap interval is not supported.
>  *
>  *  \sa SDL_GL_GetSwapInterval()
>  */
> extern DECLSPEC int SDLCALL SDL_GL_SetSwapInterval(int interval);
> 
> /**
>  *  \brief Get the swap interval for the current OpenGL context.
>  *
>  *  \return 0 if there is no vertical retrace synchronization, 1 if the buffer
>  *          swap is synchronized with the vertical retrace, and -1 if late
>  *          swaps happen immediately instead of waiting for the next retrace.
>  *          If the system can't determine the swap interval, or there isn't a
>  *          valid current context, this will return 0 as a safe default.
>  *
>  *  \sa SDL_GL_SetSwapInterval()
>  */
> extern DECLSPEC int SDLCALL SDL_GL_GetSwapInterval(void);
> 
> /**
>  * \brief Swap the OpenGL buffers for a window, if double-buffering is
>  *        supported.
>  */
> extern DECLSPEC void SDLCALL SDL_GL_SwapWindow(SDL_Window * window);
> 
> /**
>  *  \brief Delete an OpenGL context.
>  *
>  *  \sa SDL_GL_CreateContext()
>  */
> extern DECLSPEC void SDLCALL SDL_GL_DeleteContext(SDL_GLContext context);
> 
> /*@}*//*OpenGL support functions*/
> 
> 
> /* Ends C function definitions when using C++ */
> #ifdef __cplusplus
> }
> #endif
> #include "close_code.h"
> 
> #endif /* _SDL_video_h */
> 
> /* vi: set ts=4 sw=4 expandtab: */
